
stm32f446xx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000021f8  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000004c  080023c8  080023c8  000123c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002414  08002414  0002007c  2**0
                  CONTENTS
  4 .ARM          00000000  08002414  08002414  0002007c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002414  08002414  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002414  08002414  00012414  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002418  08002418  00012418  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  0800241c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000068  2000007c  08002498  0002007c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000e4  08002498  000200e4  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000067a8  00000000  00000000  000200a6  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000fe6  00000000  00000000  0002684e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000002c0  00000000  00000000  00027838  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000248  00000000  00000000  00027af8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0000440e  00000000  00000000  00027d40  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000037bb  00000000  00000000  0002c14e  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0000d387  00000000  00000000  0002f909  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0003cc90  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000db0  00000000  00000000  0003cd0c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000007c 	.word	0x2000007c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080023b0 	.word	0x080023b0

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000080 	.word	0x20000080
 800020c:	080023b0 	.word	0x080023b0

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_frsub>:
 80002c0:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__addsf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_fsub>:
 80002c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080002cc <__addsf3>:
 80002cc:	0042      	lsls	r2, r0, #1
 80002ce:	bf1f      	itttt	ne
 80002d0:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80002d4:	ea92 0f03 	teqne	r2, r3
 80002d8:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80002dc:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80002e0:	d06a      	beq.n	80003b8 <__addsf3+0xec>
 80002e2:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80002e6:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80002ea:	bfc1      	itttt	gt
 80002ec:	18d2      	addgt	r2, r2, r3
 80002ee:	4041      	eorgt	r1, r0
 80002f0:	4048      	eorgt	r0, r1
 80002f2:	4041      	eorgt	r1, r0
 80002f4:	bfb8      	it	lt
 80002f6:	425b      	neglt	r3, r3
 80002f8:	2b19      	cmp	r3, #25
 80002fa:	bf88      	it	hi
 80002fc:	4770      	bxhi	lr
 80002fe:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000302:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000306:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 800030a:	bf18      	it	ne
 800030c:	4240      	negne	r0, r0
 800030e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000312:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000316:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 800031a:	bf18      	it	ne
 800031c:	4249      	negne	r1, r1
 800031e:	ea92 0f03 	teq	r2, r3
 8000322:	d03f      	beq.n	80003a4 <__addsf3+0xd8>
 8000324:	f1a2 0201 	sub.w	r2, r2, #1
 8000328:	fa41 fc03 	asr.w	ip, r1, r3
 800032c:	eb10 000c 	adds.w	r0, r0, ip
 8000330:	f1c3 0320 	rsb	r3, r3, #32
 8000334:	fa01 f103 	lsl.w	r1, r1, r3
 8000338:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800033c:	d502      	bpl.n	8000344 <__addsf3+0x78>
 800033e:	4249      	negs	r1, r1
 8000340:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000344:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000348:	d313      	bcc.n	8000372 <__addsf3+0xa6>
 800034a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800034e:	d306      	bcc.n	800035e <__addsf3+0x92>
 8000350:	0840      	lsrs	r0, r0, #1
 8000352:	ea4f 0131 	mov.w	r1, r1, rrx
 8000356:	f102 0201 	add.w	r2, r2, #1
 800035a:	2afe      	cmp	r2, #254	; 0xfe
 800035c:	d251      	bcs.n	8000402 <__addsf3+0x136>
 800035e:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000362:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000366:	bf08      	it	eq
 8000368:	f020 0001 	biceq.w	r0, r0, #1
 800036c:	ea40 0003 	orr.w	r0, r0, r3
 8000370:	4770      	bx	lr
 8000372:	0049      	lsls	r1, r1, #1
 8000374:	eb40 0000 	adc.w	r0, r0, r0
 8000378:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 800037c:	f1a2 0201 	sub.w	r2, r2, #1
 8000380:	d1ed      	bne.n	800035e <__addsf3+0x92>
 8000382:	fab0 fc80 	clz	ip, r0
 8000386:	f1ac 0c08 	sub.w	ip, ip, #8
 800038a:	ebb2 020c 	subs.w	r2, r2, ip
 800038e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000392:	bfaa      	itet	ge
 8000394:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000398:	4252      	neglt	r2, r2
 800039a:	4318      	orrge	r0, r3
 800039c:	bfbc      	itt	lt
 800039e:	40d0      	lsrlt	r0, r2
 80003a0:	4318      	orrlt	r0, r3
 80003a2:	4770      	bx	lr
 80003a4:	f092 0f00 	teq	r2, #0
 80003a8:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 80003ac:	bf06      	itte	eq
 80003ae:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 80003b2:	3201      	addeq	r2, #1
 80003b4:	3b01      	subne	r3, #1
 80003b6:	e7b5      	b.n	8000324 <__addsf3+0x58>
 80003b8:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80003bc:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80003c0:	bf18      	it	ne
 80003c2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80003c6:	d021      	beq.n	800040c <__addsf3+0x140>
 80003c8:	ea92 0f03 	teq	r2, r3
 80003cc:	d004      	beq.n	80003d8 <__addsf3+0x10c>
 80003ce:	f092 0f00 	teq	r2, #0
 80003d2:	bf08      	it	eq
 80003d4:	4608      	moveq	r0, r1
 80003d6:	4770      	bx	lr
 80003d8:	ea90 0f01 	teq	r0, r1
 80003dc:	bf1c      	itt	ne
 80003de:	2000      	movne	r0, #0
 80003e0:	4770      	bxne	lr
 80003e2:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 80003e6:	d104      	bne.n	80003f2 <__addsf3+0x126>
 80003e8:	0040      	lsls	r0, r0, #1
 80003ea:	bf28      	it	cs
 80003ec:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 80003f0:	4770      	bx	lr
 80003f2:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 80003f6:	bf3c      	itt	cc
 80003f8:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 80003fc:	4770      	bxcc	lr
 80003fe:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000402:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000406:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800040a:	4770      	bx	lr
 800040c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000410:	bf16      	itet	ne
 8000412:	4608      	movne	r0, r1
 8000414:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000418:	4601      	movne	r1, r0
 800041a:	0242      	lsls	r2, r0, #9
 800041c:	bf06      	itte	eq
 800041e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000422:	ea90 0f01 	teqeq	r0, r1
 8000426:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 800042a:	4770      	bx	lr

0800042c <__aeabi_ui2f>:
 800042c:	f04f 0300 	mov.w	r3, #0
 8000430:	e004      	b.n	800043c <__aeabi_i2f+0x8>
 8000432:	bf00      	nop

08000434 <__aeabi_i2f>:
 8000434:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000438:	bf48      	it	mi
 800043a:	4240      	negmi	r0, r0
 800043c:	ea5f 0c00 	movs.w	ip, r0
 8000440:	bf08      	it	eq
 8000442:	4770      	bxeq	lr
 8000444:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000448:	4601      	mov	r1, r0
 800044a:	f04f 0000 	mov.w	r0, #0
 800044e:	e01c      	b.n	800048a <__aeabi_l2f+0x2a>

08000450 <__aeabi_ul2f>:
 8000450:	ea50 0201 	orrs.w	r2, r0, r1
 8000454:	bf08      	it	eq
 8000456:	4770      	bxeq	lr
 8000458:	f04f 0300 	mov.w	r3, #0
 800045c:	e00a      	b.n	8000474 <__aeabi_l2f+0x14>
 800045e:	bf00      	nop

08000460 <__aeabi_l2f>:
 8000460:	ea50 0201 	orrs.w	r2, r0, r1
 8000464:	bf08      	it	eq
 8000466:	4770      	bxeq	lr
 8000468:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 800046c:	d502      	bpl.n	8000474 <__aeabi_l2f+0x14>
 800046e:	4240      	negs	r0, r0
 8000470:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000474:	ea5f 0c01 	movs.w	ip, r1
 8000478:	bf02      	ittt	eq
 800047a:	4684      	moveq	ip, r0
 800047c:	4601      	moveq	r1, r0
 800047e:	2000      	moveq	r0, #0
 8000480:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000484:	bf08      	it	eq
 8000486:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 800048a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800048e:	fabc f28c 	clz	r2, ip
 8000492:	3a08      	subs	r2, #8
 8000494:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000498:	db10      	blt.n	80004bc <__aeabi_l2f+0x5c>
 800049a:	fa01 fc02 	lsl.w	ip, r1, r2
 800049e:	4463      	add	r3, ip
 80004a0:	fa00 fc02 	lsl.w	ip, r0, r2
 80004a4:	f1c2 0220 	rsb	r2, r2, #32
 80004a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004ac:	fa20 f202 	lsr.w	r2, r0, r2
 80004b0:	eb43 0002 	adc.w	r0, r3, r2
 80004b4:	bf08      	it	eq
 80004b6:	f020 0001 	biceq.w	r0, r0, #1
 80004ba:	4770      	bx	lr
 80004bc:	f102 0220 	add.w	r2, r2, #32
 80004c0:	fa01 fc02 	lsl.w	ip, r1, r2
 80004c4:	f1c2 0220 	rsb	r2, r2, #32
 80004c8:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 80004cc:	fa21 f202 	lsr.w	r2, r1, r2
 80004d0:	eb43 0002 	adc.w	r0, r3, r2
 80004d4:	bf08      	it	eq
 80004d6:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80004da:	4770      	bx	lr

080004dc <__aeabi_fmul>:
 80004dc:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004e0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80004e4:	bf1e      	ittt	ne
 80004e6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80004ea:	ea92 0f0c 	teqne	r2, ip
 80004ee:	ea93 0f0c 	teqne	r3, ip
 80004f2:	d06f      	beq.n	80005d4 <__aeabi_fmul+0xf8>
 80004f4:	441a      	add	r2, r3
 80004f6:	ea80 0c01 	eor.w	ip, r0, r1
 80004fa:	0240      	lsls	r0, r0, #9
 80004fc:	bf18      	it	ne
 80004fe:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000502:	d01e      	beq.n	8000542 <__aeabi_fmul+0x66>
 8000504:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000508:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 800050c:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000510:	fba0 3101 	umull	r3, r1, r0, r1
 8000514:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000518:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 800051c:	bf3e      	ittt	cc
 800051e:	0049      	lslcc	r1, r1, #1
 8000520:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000524:	005b      	lslcc	r3, r3, #1
 8000526:	ea40 0001 	orr.w	r0, r0, r1
 800052a:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 800052e:	2afd      	cmp	r2, #253	; 0xfd
 8000530:	d81d      	bhi.n	800056e <__aeabi_fmul+0x92>
 8000532:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000536:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800053a:	bf08      	it	eq
 800053c:	f020 0001 	biceq.w	r0, r0, #1
 8000540:	4770      	bx	lr
 8000542:	f090 0f00 	teq	r0, #0
 8000546:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 800054a:	bf08      	it	eq
 800054c:	0249      	lsleq	r1, r1, #9
 800054e:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000552:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000556:	3a7f      	subs	r2, #127	; 0x7f
 8000558:	bfc2      	ittt	gt
 800055a:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 800055e:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000562:	4770      	bxgt	lr
 8000564:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000568:	f04f 0300 	mov.w	r3, #0
 800056c:	3a01      	subs	r2, #1
 800056e:	dc5d      	bgt.n	800062c <__aeabi_fmul+0x150>
 8000570:	f112 0f19 	cmn.w	r2, #25
 8000574:	bfdc      	itt	le
 8000576:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 800057a:	4770      	bxle	lr
 800057c:	f1c2 0200 	rsb	r2, r2, #0
 8000580:	0041      	lsls	r1, r0, #1
 8000582:	fa21 f102 	lsr.w	r1, r1, r2
 8000586:	f1c2 0220 	rsb	r2, r2, #32
 800058a:	fa00 fc02 	lsl.w	ip, r0, r2
 800058e:	ea5f 0031 	movs.w	r0, r1, rrx
 8000592:	f140 0000 	adc.w	r0, r0, #0
 8000596:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800059a:	bf08      	it	eq
 800059c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80005a0:	4770      	bx	lr
 80005a2:	f092 0f00 	teq	r2, #0
 80005a6:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80005aa:	bf02      	ittt	eq
 80005ac:	0040      	lsleq	r0, r0, #1
 80005ae:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80005b2:	3a01      	subeq	r2, #1
 80005b4:	d0f9      	beq.n	80005aa <__aeabi_fmul+0xce>
 80005b6:	ea40 000c 	orr.w	r0, r0, ip
 80005ba:	f093 0f00 	teq	r3, #0
 80005be:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80005c2:	bf02      	ittt	eq
 80005c4:	0049      	lsleq	r1, r1, #1
 80005c6:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80005ca:	3b01      	subeq	r3, #1
 80005cc:	d0f9      	beq.n	80005c2 <__aeabi_fmul+0xe6>
 80005ce:	ea41 010c 	orr.w	r1, r1, ip
 80005d2:	e78f      	b.n	80004f4 <__aeabi_fmul+0x18>
 80005d4:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005d8:	ea92 0f0c 	teq	r2, ip
 80005dc:	bf18      	it	ne
 80005de:	ea93 0f0c 	teqne	r3, ip
 80005e2:	d00a      	beq.n	80005fa <__aeabi_fmul+0x11e>
 80005e4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80005e8:	bf18      	it	ne
 80005ea:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80005ee:	d1d8      	bne.n	80005a2 <__aeabi_fmul+0xc6>
 80005f0:	ea80 0001 	eor.w	r0, r0, r1
 80005f4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80005f8:	4770      	bx	lr
 80005fa:	f090 0f00 	teq	r0, #0
 80005fe:	bf17      	itett	ne
 8000600:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000604:	4608      	moveq	r0, r1
 8000606:	f091 0f00 	teqne	r1, #0
 800060a:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 800060e:	d014      	beq.n	800063a <__aeabi_fmul+0x15e>
 8000610:	ea92 0f0c 	teq	r2, ip
 8000614:	d101      	bne.n	800061a <__aeabi_fmul+0x13e>
 8000616:	0242      	lsls	r2, r0, #9
 8000618:	d10f      	bne.n	800063a <__aeabi_fmul+0x15e>
 800061a:	ea93 0f0c 	teq	r3, ip
 800061e:	d103      	bne.n	8000628 <__aeabi_fmul+0x14c>
 8000620:	024b      	lsls	r3, r1, #9
 8000622:	bf18      	it	ne
 8000624:	4608      	movne	r0, r1
 8000626:	d108      	bne.n	800063a <__aeabi_fmul+0x15e>
 8000628:	ea80 0001 	eor.w	r0, r0, r1
 800062c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000630:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000634:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000638:	4770      	bx	lr
 800063a:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 800063e:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000642:	4770      	bx	lr

08000644 <__aeabi_fdiv>:
 8000644:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000648:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 800064c:	bf1e      	ittt	ne
 800064e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000652:	ea92 0f0c 	teqne	r2, ip
 8000656:	ea93 0f0c 	teqne	r3, ip
 800065a:	d069      	beq.n	8000730 <__aeabi_fdiv+0xec>
 800065c:	eba2 0203 	sub.w	r2, r2, r3
 8000660:	ea80 0c01 	eor.w	ip, r0, r1
 8000664:	0249      	lsls	r1, r1, #9
 8000666:	ea4f 2040 	mov.w	r0, r0, lsl #9
 800066a:	d037      	beq.n	80006dc <__aeabi_fdiv+0x98>
 800066c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000670:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000674:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000678:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 800067c:	428b      	cmp	r3, r1
 800067e:	bf38      	it	cc
 8000680:	005b      	lslcc	r3, r3, #1
 8000682:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000686:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 800068a:	428b      	cmp	r3, r1
 800068c:	bf24      	itt	cs
 800068e:	1a5b      	subcs	r3, r3, r1
 8000690:	ea40 000c 	orrcs.w	r0, r0, ip
 8000694:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000698:	bf24      	itt	cs
 800069a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800069e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80006a2:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 80006a6:	bf24      	itt	cs
 80006a8:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 80006ac:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80006b0:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 80006b4:	bf24      	itt	cs
 80006b6:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 80006ba:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80006be:	011b      	lsls	r3, r3, #4
 80006c0:	bf18      	it	ne
 80006c2:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 80006c6:	d1e0      	bne.n	800068a <__aeabi_fdiv+0x46>
 80006c8:	2afd      	cmp	r2, #253	; 0xfd
 80006ca:	f63f af50 	bhi.w	800056e <__aeabi_fmul+0x92>
 80006ce:	428b      	cmp	r3, r1
 80006d0:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80006d4:	bf08      	it	eq
 80006d6:	f020 0001 	biceq.w	r0, r0, #1
 80006da:	4770      	bx	lr
 80006dc:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80006e0:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80006e4:	327f      	adds	r2, #127	; 0x7f
 80006e6:	bfc2      	ittt	gt
 80006e8:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80006ec:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80006f0:	4770      	bxgt	lr
 80006f2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80006f6:	f04f 0300 	mov.w	r3, #0
 80006fa:	3a01      	subs	r2, #1
 80006fc:	e737      	b.n	800056e <__aeabi_fmul+0x92>
 80006fe:	f092 0f00 	teq	r2, #0
 8000702:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000706:	bf02      	ittt	eq
 8000708:	0040      	lsleq	r0, r0, #1
 800070a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800070e:	3a01      	subeq	r2, #1
 8000710:	d0f9      	beq.n	8000706 <__aeabi_fdiv+0xc2>
 8000712:	ea40 000c 	orr.w	r0, r0, ip
 8000716:	f093 0f00 	teq	r3, #0
 800071a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800071e:	bf02      	ittt	eq
 8000720:	0049      	lsleq	r1, r1, #1
 8000722:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000726:	3b01      	subeq	r3, #1
 8000728:	d0f9      	beq.n	800071e <__aeabi_fdiv+0xda>
 800072a:	ea41 010c 	orr.w	r1, r1, ip
 800072e:	e795      	b.n	800065c <__aeabi_fdiv+0x18>
 8000730:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000734:	ea92 0f0c 	teq	r2, ip
 8000738:	d108      	bne.n	800074c <__aeabi_fdiv+0x108>
 800073a:	0242      	lsls	r2, r0, #9
 800073c:	f47f af7d 	bne.w	800063a <__aeabi_fmul+0x15e>
 8000740:	ea93 0f0c 	teq	r3, ip
 8000744:	f47f af70 	bne.w	8000628 <__aeabi_fmul+0x14c>
 8000748:	4608      	mov	r0, r1
 800074a:	e776      	b.n	800063a <__aeabi_fmul+0x15e>
 800074c:	ea93 0f0c 	teq	r3, ip
 8000750:	d104      	bne.n	800075c <__aeabi_fdiv+0x118>
 8000752:	024b      	lsls	r3, r1, #9
 8000754:	f43f af4c 	beq.w	80005f0 <__aeabi_fmul+0x114>
 8000758:	4608      	mov	r0, r1
 800075a:	e76e      	b.n	800063a <__aeabi_fmul+0x15e>
 800075c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000760:	bf18      	it	ne
 8000762:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000766:	d1ca      	bne.n	80006fe <__aeabi_fdiv+0xba>
 8000768:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 800076c:	f47f af5c 	bne.w	8000628 <__aeabi_fmul+0x14c>
 8000770:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000774:	f47f af3c 	bne.w	80005f0 <__aeabi_fmul+0x114>
 8000778:	e75f      	b.n	800063a <__aeabi_fmul+0x15e>
 800077a:	bf00      	nop

0800077c <__aeabi_f2uiz>:
 800077c:	0042      	lsls	r2, r0, #1
 800077e:	d20e      	bcs.n	800079e <__aeabi_f2uiz+0x22>
 8000780:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000784:	d30b      	bcc.n	800079e <__aeabi_f2uiz+0x22>
 8000786:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800078a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800078e:	d409      	bmi.n	80007a4 <__aeabi_f2uiz+0x28>
 8000790:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000794:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000798:	fa23 f002 	lsr.w	r0, r3, r2
 800079c:	4770      	bx	lr
 800079e:	f04f 0000 	mov.w	r0, #0
 80007a2:	4770      	bx	lr
 80007a4:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80007a8:	d101      	bne.n	80007ae <__aeabi_f2uiz+0x32>
 80007aa:	0242      	lsls	r2, r0, #9
 80007ac:	d102      	bne.n	80007b4 <__aeabi_f2uiz+0x38>
 80007ae:	f04f 30ff 	mov.w	r0, #4294967295
 80007b2:	4770      	bx	lr
 80007b4:	f04f 0000 	mov.w	r0, #0
 80007b8:	4770      	bx	lr
 80007ba:	bf00      	nop

080007bc <ADC_PeriClockControl>:
 * Params: 		struct ADC_RegDef_t* *pADCx - ADC base address
 * 				uint8_t EnOrDi - Enable or disable value
 *
 */
void ADC_PeriClockControl(ADC_RegDef_t *pADCx, uint8_t EnOrDi)
{
 80007bc:	b480      	push	{r7}
 80007be:	b083      	sub	sp, #12
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	6078      	str	r0, [r7, #4]
 80007c4:	460b      	mov	r3, r1
 80007c6:	70fb      	strb	r3, [r7, #3]
	if (EnOrDi == ENABLE)
 80007c8:	78fb      	ldrb	r3, [r7, #3]
 80007ca:	2b01      	cmp	r3, #1
 80007cc:	d120      	bne.n	8000810 <ADC_PeriClockControl+0x54>
	{
		if (pADCx == ADC1)
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	4a22      	ldr	r2, [pc, #136]	; (800085c <ADC_PeriClockControl+0xa0>)
 80007d2:	4293      	cmp	r3, r2
 80007d4:	d106      	bne.n	80007e4 <ADC_PeriClockControl+0x28>
		{
			ADC1_PCLK_EN();
 80007d6:	4b22      	ldr	r3, [pc, #136]	; (8000860 <ADC_PeriClockControl+0xa4>)
 80007d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007da:	4a21      	ldr	r2, [pc, #132]	; (8000860 <ADC_PeriClockControl+0xa4>)
 80007dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80007e0:	6453      	str	r3, [r2, #68]	; 0x44
		else if (pADCx == ADC3)
		{
			ADC3_PCLK_DI();
		}
	}
}
 80007e2:	e035      	b.n	8000850 <ADC_PeriClockControl+0x94>
		else if (pADCx == ADC2)
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	4a1f      	ldr	r2, [pc, #124]	; (8000864 <ADC_PeriClockControl+0xa8>)
 80007e8:	4293      	cmp	r3, r2
 80007ea:	d106      	bne.n	80007fa <ADC_PeriClockControl+0x3e>
			ADC2_PCLK_EN();
 80007ec:	4b1c      	ldr	r3, [pc, #112]	; (8000860 <ADC_PeriClockControl+0xa4>)
 80007ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007f0:	4a1b      	ldr	r2, [pc, #108]	; (8000860 <ADC_PeriClockControl+0xa4>)
 80007f2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80007f6:	6453      	str	r3, [r2, #68]	; 0x44
}
 80007f8:	e02a      	b.n	8000850 <ADC_PeriClockControl+0x94>
		else if (pADCx == ADC3)
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	4a1a      	ldr	r2, [pc, #104]	; (8000868 <ADC_PeriClockControl+0xac>)
 80007fe:	4293      	cmp	r3, r2
 8000800:	d126      	bne.n	8000850 <ADC_PeriClockControl+0x94>
			ADC3_PCLK_EN();
 8000802:	4b17      	ldr	r3, [pc, #92]	; (8000860 <ADC_PeriClockControl+0xa4>)
 8000804:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000806:	4a16      	ldr	r2, [pc, #88]	; (8000860 <ADC_PeriClockControl+0xa4>)
 8000808:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800080c:	6453      	str	r3, [r2, #68]	; 0x44
}
 800080e:	e01f      	b.n	8000850 <ADC_PeriClockControl+0x94>
		if (pADCx == ADC1)
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	4a12      	ldr	r2, [pc, #72]	; (800085c <ADC_PeriClockControl+0xa0>)
 8000814:	4293      	cmp	r3, r2
 8000816:	d106      	bne.n	8000826 <ADC_PeriClockControl+0x6a>
			ADC1_PCLK_DI();
 8000818:	4b11      	ldr	r3, [pc, #68]	; (8000860 <ADC_PeriClockControl+0xa4>)
 800081a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800081c:	4a10      	ldr	r2, [pc, #64]	; (8000860 <ADC_PeriClockControl+0xa4>)
 800081e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000822:	6453      	str	r3, [r2, #68]	; 0x44
}
 8000824:	e014      	b.n	8000850 <ADC_PeriClockControl+0x94>
		else if (pADCx == ADC2)
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	4a0e      	ldr	r2, [pc, #56]	; (8000864 <ADC_PeriClockControl+0xa8>)
 800082a:	4293      	cmp	r3, r2
 800082c:	d106      	bne.n	800083c <ADC_PeriClockControl+0x80>
			ADC2_PCLK_DI();
 800082e:	4b0c      	ldr	r3, [pc, #48]	; (8000860 <ADC_PeriClockControl+0xa4>)
 8000830:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000832:	4a0b      	ldr	r2, [pc, #44]	; (8000860 <ADC_PeriClockControl+0xa4>)
 8000834:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8000838:	6453      	str	r3, [r2, #68]	; 0x44
}
 800083a:	e009      	b.n	8000850 <ADC_PeriClockControl+0x94>
		else if (pADCx == ADC3)
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	4a0a      	ldr	r2, [pc, #40]	; (8000868 <ADC_PeriClockControl+0xac>)
 8000840:	4293      	cmp	r3, r2
 8000842:	d105      	bne.n	8000850 <ADC_PeriClockControl+0x94>
			ADC3_PCLK_DI();
 8000844:	4b06      	ldr	r3, [pc, #24]	; (8000860 <ADC_PeriClockControl+0xa4>)
 8000846:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000848:	4a05      	ldr	r2, [pc, #20]	; (8000860 <ADC_PeriClockControl+0xa4>)
 800084a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800084e:	6453      	str	r3, [r2, #68]	; 0x44
}
 8000850:	bf00      	nop
 8000852:	370c      	adds	r7, #12
 8000854:	46bd      	mov	sp, r7
 8000856:	bc80      	pop	{r7}
 8000858:	4770      	bx	lr
 800085a:	bf00      	nop
 800085c:	40012000 	.word	0x40012000
 8000860:	40023800 	.word	0x40023800
 8000864:	40012100 	.word	0x40012100
 8000868:	40012200 	.word	0x40012200

0800086c <ADC_OnOff>:
 * Params:		ADC_RegDef_t *pADCx - ADC base address
 * 				uint8_t EnOrDi - On or Off
 *
 */
static void ADC_OnOff(ADC_RegDef_t *pADCx, uint8_t EnOrDi)
{
 800086c:	b480      	push	{r7}
 800086e:	b083      	sub	sp, #12
 8000870:	af00      	add	r7, sp, #0
 8000872:	6078      	str	r0, [r7, #4]
 8000874:	460b      	mov	r3, r1
 8000876:	70fb      	strb	r3, [r7, #3]
	if (EnOrDi == ENABLE)
 8000878:	78fb      	ldrb	r3, [r7, #3]
 800087a:	2b01      	cmp	r3, #1
 800087c:	d106      	bne.n	800088c <ADC_OnOff+0x20>
	{
		pADCx->CR2 |= (1 << 0);
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	689b      	ldr	r3, [r3, #8]
 8000882:	f043 0201 	orr.w	r2, r3, #1
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	609a      	str	r2, [r3, #8]
	}
	else
	{
		pADCx->CR2 &= ~(1 << 0);
	}
}
 800088a:	e005      	b.n	8000898 <ADC_OnOff+0x2c>
		pADCx->CR2 &= ~(1 << 0);
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	689b      	ldr	r3, [r3, #8]
 8000890:	f023 0201 	bic.w	r2, r3, #1
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	609a      	str	r2, [r3, #8]
}
 8000898:	bf00      	nop
 800089a:	370c      	adds	r7, #12
 800089c:	46bd      	mov	sp, r7
 800089e:	bc80      	pop	{r7}
 80008a0:	4770      	bx	lr
	...

080008a4 <ADC_Init>:
 *
 * Params: 		struct ADC_Handle_t* *pADCx - ADC handle address
 *
 */
void ADC_Init(ADC_Handle_t *pADCxHandle)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b082      	sub	sp, #8
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	6078      	str	r0, [r7, #4]
	// 1. Enable clock signal to the ADC
	ADC_PeriClockControl(pADCxHandle->pADCx, ENABLE);
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	2101      	movs	r1, #1
 80008b2:	4618      	mov	r0, r3
 80008b4:	f7ff ff82 	bl	80007bc <ADC_PeriClockControl>

	// 2. Set the ADC clock prescaler
	ADC_COMM->CCR |= (uint32_t)(pADCxHandle->ADC_Config.ADC_PreSc << 16);
 80008b8:	4b0b      	ldr	r3, [pc, #44]	; (80008e8 <ADC_Init+0x44>)
 80008ba:	685b      	ldr	r3, [r3, #4]
 80008bc:	687a      	ldr	r2, [r7, #4]
 80008be:	7952      	ldrb	r2, [r2, #5]
 80008c0:	0412      	lsls	r2, r2, #16
 80008c2:	4611      	mov	r1, r2
 80008c4:	4a08      	ldr	r2, [pc, #32]	; (80008e8 <ADC_Init+0x44>)
 80008c6:	430b      	orrs	r3, r1
 80008c8:	6053      	str	r3, [r2, #4]

	// 3. Set ADC resolution
	pADCxHandle->pADCx->CR1 |= (uint32_t)(pADCxHandle->ADC_Config.ADC_Res << 24);
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	681b      	ldr	r3, [r3, #0]
 80008ce:	685a      	ldr	r2, [r3, #4]
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	791b      	ldrb	r3, [r3, #4]
 80008d4:	061b      	lsls	r3, r3, #24
 80008d6:	4619      	mov	r1, r3
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	430a      	orrs	r2, r1
 80008de:	605a      	str	r2, [r3, #4]
}
 80008e0:	bf00      	nop
 80008e2:	3708      	adds	r7, #8
 80008e4:	46bd      	mov	sp, r7
 80008e6:	bd80      	pop	{r7, pc}
 80008e8:	40012300 	.word	0x40012300

080008ec <ADC_GetFlagStatus>:
 * Params: 		struct ADC_RegDef_t *pADCx - ADC base address
 * 				uint8_t ADC_FLAG - flag being checked
 *
 */
uint8_t ADC_GetFlagStatus(ADC_RegDef_t *pADCx, uint8_t ADC_FLAG)
{
 80008ec:	b480      	push	{r7}
 80008ee:	b083      	sub	sp, #12
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	6078      	str	r0, [r7, #4]
 80008f4:	460b      	mov	r3, r1
 80008f6:	70fb      	strb	r3, [r7, #3]
	return (pADCx->SR & ADC_FLAG);
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	b2da      	uxtb	r2, r3
 80008fe:	78fb      	ldrb	r3, [r7, #3]
 8000900:	4013      	ands	r3, r2
 8000902:	b2db      	uxtb	r3, r3
}
 8000904:	4618      	mov	r0, r3
 8000906:	370c      	adds	r7, #12
 8000908:	46bd      	mov	sp, r7
 800090a:	bc80      	pop	{r7}
 800090c:	4770      	bx	lr
	...

08000910 <ADC_Read_Reg>:
 * 				uint8_t ADC_SMP_CYC - Number of cycle to take reading
 * 				uint8_t ADC_DAQ_MODE - Take single reading or continuous mode
 *
 */
uint16_t ADC_Read_Reg(ADC_Handle_t *pADCxHandle, uint8_t ADC_CHAN, uint8_t ADC_SMP_CYC)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	b084      	sub	sp, #16
 8000914:	af00      	add	r7, sp, #0
 8000916:	6078      	str	r0, [r7, #4]
 8000918:	460b      	mov	r3, r1
 800091a:	70fb      	strb	r3, [r7, #3]
 800091c:	4613      	mov	r3, r2
 800091e:	70bb      	strb	r3, [r7, #2]
	// 1. Set the ADC On (Note: several steps b/w this and 'START' to allow stabilization time
	ADC_OnOff(pADCxHandle->pADCx, ENABLE);
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	2101      	movs	r1, #1
 8000926:	4618      	mov	r0, r3
 8000928:	f7ff ffa0 	bl	800086c <ADC_OnOff>

	// 2. Disable scan mode
	pADCxHandle->pADCx->CR1 &= ~(1 << 8);
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	685a      	ldr	r2, [r3, #4]
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	681b      	ldr	r3, [r3, #0]
 8000936:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800093a:	605a      	str	r2, [r3, #4]

	// 3. Disable continuous mode
	pADCxHandle->pADCx->CR2 &= ~(1 << 1);
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	689a      	ldr	r2, [r3, #8]
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	681b      	ldr	r3, [r3, #0]
 8000946:	f022 0202 	bic.w	r2, r2, #2
 800094a:	609a      	str	r2, [r3, #8]

	// 4. Set number of channels in sequence to 1
	pADCxHandle->pADCx->SQR[0] &= ~(0xF << 20);
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	681b      	ldr	r3, [r3, #0]
 8000956:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800095a:	62da      	str	r2, [r3, #44]	; 0x2c

	// 5. Load the channel to be read
	pADCxHandle->pADCx->SQR[2] = (ADC_CHAN << 0);
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	78fa      	ldrb	r2, [r7, #3]
 8000962:	635a      	str	r2, [r3, #52]	; 0x34

	// 6. Number of sampling cycles
	uint8_t temp1 = 1 - ADC_CHAN / 10, temp2 = ADC_CHAN % 9;
 8000964:	78fb      	ldrb	r3, [r7, #3]
 8000966:	4a1f      	ldr	r2, [pc, #124]	; (80009e4 <ADC_Read_Reg+0xd4>)
 8000968:	fba2 2303 	umull	r2, r3, r2, r3
 800096c:	08db      	lsrs	r3, r3, #3
 800096e:	b2db      	uxtb	r3, r3
 8000970:	f1c3 0301 	rsb	r3, r3, #1
 8000974:	73fb      	strb	r3, [r7, #15]
 8000976:	78fa      	ldrb	r2, [r7, #3]
 8000978:	4b1b      	ldr	r3, [pc, #108]	; (80009e8 <ADC_Read_Reg+0xd8>)
 800097a:	fba3 1302 	umull	r1, r3, r3, r2
 800097e:	0859      	lsrs	r1, r3, #1
 8000980:	460b      	mov	r3, r1
 8000982:	00db      	lsls	r3, r3, #3
 8000984:	440b      	add	r3, r1
 8000986:	1ad3      	subs	r3, r2, r3
 8000988:	73bb      	strb	r3, [r7, #14]
	pADCxHandle->pADCx->SMPR[temp1] = (ADC_SMP_CYC << temp2);
 800098a:	78ba      	ldrb	r2, [r7, #2]
 800098c:	7bbb      	ldrb	r3, [r7, #14]
 800098e:	fa02 f103 	lsl.w	r1, r2, r3
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	681a      	ldr	r2, [r3, #0]
 8000996:	7bfb      	ldrb	r3, [r7, #15]
 8000998:	3302      	adds	r3, #2
 800099a:	009b      	lsls	r3, r3, #2
 800099c:	4413      	add	r3, r2
 800099e:	6059      	str	r1, [r3, #4]

	// 7. Begin conversion
	pADCxHandle->pADCx->CR2 |= (1 << 30);
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	689a      	ldr	r2, [r3, #8]
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	681b      	ldr	r3, [r3, #0]
 80009aa:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80009ae:	609a      	str	r2, [r3, #8]

	// 8. Hang till conversion complete
	while(!ADC_GetFlagStatus(pADCxHandle->pADCx, ADC_FLAG_EOC));
 80009b0:	bf00      	nop
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	681b      	ldr	r3, [r3, #0]
 80009b6:	2102      	movs	r1, #2
 80009b8:	4618      	mov	r0, r3
 80009ba:	f7ff ff97 	bl	80008ec <ADC_GetFlagStatus>
 80009be:	4603      	mov	r3, r0
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d0f6      	beq.n	80009b2 <ADC_Read_Reg+0xa2>

	// 9. Get reading from DR
	uint16_t data = pADCxHandle->pADCx->DR;
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009ca:	81bb      	strh	r3, [r7, #12]

	// 10. Return ADC to low power mode
	ADC_OnOff(pADCxHandle->pADCx, DISABLE);
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	2100      	movs	r1, #0
 80009d2:	4618      	mov	r0, r3
 80009d4:	f7ff ff4a 	bl	800086c <ADC_OnOff>

	return data;
 80009d8:	89bb      	ldrh	r3, [r7, #12]
}
 80009da:	4618      	mov	r0, r3
 80009dc:	3710      	adds	r7, #16
 80009de:	46bd      	mov	sp, r7
 80009e0:	bd80      	pop	{r7, pc}
 80009e2:	bf00      	nop
 80009e4:	cccccccd 	.word	0xcccccccd
 80009e8:	38e38e39 	.word	0x38e38e39

080009ec <DMA_Init>:
 *
 * Params: 		struct DMA_Handle_t *pDMAxHandle - DMA handle address
 *
 */
void DMA_Init(DMA_Handle_t *pDMAxHandle)
{
 80009ec:	b480      	push	{r7}
 80009ee:	b085      	sub	sp, #20
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	6078      	str	r0, [r7, #4]
	uint8_t streamNum = pDMAxHandle->DMA_Stream;
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	7c1b      	ldrb	r3, [r3, #16]
 80009f8:	73fb      	strb	r3, [r7, #15]

	// 1. Set the channel number
	pDMAxHandle->pDMAx->DMA_Strm[streamNum].SCR |= (pDMAxHandle->DMA_Config.DMA_Channel << 25);
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	6819      	ldr	r1, [r3, #0]
 80009fe:	7bfa      	ldrb	r2, [r7, #15]
 8000a00:	4613      	mov	r3, r2
 8000a02:	005b      	lsls	r3, r3, #1
 8000a04:	4413      	add	r3, r2
 8000a06:	00db      	lsls	r3, r3, #3
 8000a08:	440b      	add	r3, r1
 8000a0a:	3310      	adds	r3, #16
 8000a0c:	681b      	ldr	r3, [r3, #0]
 8000a0e:	687a      	ldr	r2, [r7, #4]
 8000a10:	7912      	ldrb	r2, [r2, #4]
 8000a12:	0652      	lsls	r2, r2, #25
 8000a14:	4611      	mov	r1, r2
 8000a16:	687a      	ldr	r2, [r7, #4]
 8000a18:	6810      	ldr	r0, [r2, #0]
 8000a1a:	7bfa      	ldrb	r2, [r7, #15]
 8000a1c:	4319      	orrs	r1, r3
 8000a1e:	4613      	mov	r3, r2
 8000a20:	005b      	lsls	r3, r3, #1
 8000a22:	4413      	add	r3, r2
 8000a24:	00db      	lsls	r3, r3, #3
 8000a26:	4403      	add	r3, r0
 8000a28:	3310      	adds	r3, #16
 8000a2a:	6019      	str	r1, [r3, #0]

	// 2. Stream priority
	pDMAxHandle->pDMAx->DMA_Strm[streamNum].SCR |= (pDMAxHandle->DMA_Config.DMA_Priority << 16);
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	6819      	ldr	r1, [r3, #0]
 8000a30:	7bfa      	ldrb	r2, [r7, #15]
 8000a32:	4613      	mov	r3, r2
 8000a34:	005b      	lsls	r3, r3, #1
 8000a36:	4413      	add	r3, r2
 8000a38:	00db      	lsls	r3, r3, #3
 8000a3a:	440b      	add	r3, r1
 8000a3c:	3310      	adds	r3, #16
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	687a      	ldr	r2, [r7, #4]
 8000a42:	7ad2      	ldrb	r2, [r2, #11]
 8000a44:	0412      	lsls	r2, r2, #16
 8000a46:	4611      	mov	r1, r2
 8000a48:	687a      	ldr	r2, [r7, #4]
 8000a4a:	6810      	ldr	r0, [r2, #0]
 8000a4c:	7bfa      	ldrb	r2, [r7, #15]
 8000a4e:	4319      	orrs	r1, r3
 8000a50:	4613      	mov	r3, r2
 8000a52:	005b      	lsls	r3, r3, #1
 8000a54:	4413      	add	r3, r2
 8000a56:	00db      	lsls	r3, r3, #3
 8000a58:	4403      	add	r3, r0
 8000a5a:	3310      	adds	r3, #16
 8000a5c:	6019      	str	r1, [r3, #0]

	// 3. FIFO mode (direct mode)
	pDMAxHandle->pDMAx->DMA_Strm[streamNum].SFCR |= (pDMAxHandle->DMA_Config.DMA_FIFOMode << 2);
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	6819      	ldr	r1, [r3, #0]
 8000a62:	7bfa      	ldrb	r2, [r7, #15]
 8000a64:	4613      	mov	r3, r2
 8000a66:	005b      	lsls	r3, r3, #1
 8000a68:	4413      	add	r3, r2
 8000a6a:	00db      	lsls	r3, r3, #3
 8000a6c:	440b      	add	r3, r1
 8000a6e:	3324      	adds	r3, #36	; 0x24
 8000a70:	681b      	ldr	r3, [r3, #0]
 8000a72:	687a      	ldr	r2, [r7, #4]
 8000a74:	7b12      	ldrb	r2, [r2, #12]
 8000a76:	0092      	lsls	r2, r2, #2
 8000a78:	4611      	mov	r1, r2
 8000a7a:	687a      	ldr	r2, [r7, #4]
 8000a7c:	6810      	ldr	r0, [r2, #0]
 8000a7e:	7bfa      	ldrb	r2, [r7, #15]
 8000a80:	4319      	orrs	r1, r3
 8000a82:	4613      	mov	r3, r2
 8000a84:	005b      	lsls	r3, r3, #1
 8000a86:	4413      	add	r3, r2
 8000a88:	00db      	lsls	r3, r3, #3
 8000a8a:	4403      	add	r3, r0
 8000a8c:	3324      	adds	r3, #36	; 0x24
 8000a8e:	6019      	str	r1, [r3, #0]

	// 4. FIFO threshold
	pDMAxHandle->pDMAx->DMA_Strm[streamNum].SFCR &= ~(0x3 << 0);
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	6819      	ldr	r1, [r3, #0]
 8000a94:	7bfa      	ldrb	r2, [r7, #15]
 8000a96:	4613      	mov	r3, r2
 8000a98:	005b      	lsls	r3, r3, #1
 8000a9a:	4413      	add	r3, r2
 8000a9c:	00db      	lsls	r3, r3, #3
 8000a9e:	440b      	add	r3, r1
 8000aa0:	3324      	adds	r3, #36	; 0x24
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	687a      	ldr	r2, [r7, #4]
 8000aa6:	6810      	ldr	r0, [r2, #0]
 8000aa8:	7bfa      	ldrb	r2, [r7, #15]
 8000aaa:	f023 0103 	bic.w	r1, r3, #3
 8000aae:	4613      	mov	r3, r2
 8000ab0:	005b      	lsls	r3, r3, #1
 8000ab2:	4413      	add	r3, r2
 8000ab4:	00db      	lsls	r3, r3, #3
 8000ab6:	4403      	add	r3, r0
 8000ab8:	3324      	adds	r3, #36	; 0x24
 8000aba:	6019      	str	r1, [r3, #0]
	pDMAxHandle->pDMAx->DMA_Strm[streamNum].SFCR |= (pDMAxHandle->DMA_Config.DMA_FIFOThresh << 0);
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	6819      	ldr	r1, [r3, #0]
 8000ac0:	7bfa      	ldrb	r2, [r7, #15]
 8000ac2:	4613      	mov	r3, r2
 8000ac4:	005b      	lsls	r3, r3, #1
 8000ac6:	4413      	add	r3, r2
 8000ac8:	00db      	lsls	r3, r3, #3
 8000aca:	440b      	add	r3, r1
 8000acc:	3324      	adds	r3, #36	; 0x24
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	687a      	ldr	r2, [r7, #4]
 8000ad2:	7b52      	ldrb	r2, [r2, #13]
 8000ad4:	4611      	mov	r1, r2
 8000ad6:	687a      	ldr	r2, [r7, #4]
 8000ad8:	6810      	ldr	r0, [r2, #0]
 8000ada:	7bfa      	ldrb	r2, [r7, #15]
 8000adc:	4319      	orrs	r1, r3
 8000ade:	4613      	mov	r3, r2
 8000ae0:	005b      	lsls	r3, r3, #1
 8000ae2:	4413      	add	r3, r2
 8000ae4:	00db      	lsls	r3, r3, #3
 8000ae6:	4403      	add	r3, r0
 8000ae8:	3324      	adds	r3, #36	; 0x24
 8000aea:	6019      	str	r1, [r3, #0]

	// 5. Set transfer direction
	pDMAxHandle->pDMAx->DMA_Strm[streamNum].SCR |= (pDMAxHandle->DMA_Config.DMA_Dir << 6);
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	6819      	ldr	r1, [r3, #0]
 8000af0:	7bfa      	ldrb	r2, [r7, #15]
 8000af2:	4613      	mov	r3, r2
 8000af4:	005b      	lsls	r3, r3, #1
 8000af6:	4413      	add	r3, r2
 8000af8:	00db      	lsls	r3, r3, #3
 8000afa:	440b      	add	r3, r1
 8000afc:	3310      	adds	r3, #16
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	687a      	ldr	r2, [r7, #4]
 8000b02:	7952      	ldrb	r2, [r2, #5]
 8000b04:	0192      	lsls	r2, r2, #6
 8000b06:	4611      	mov	r1, r2
 8000b08:	687a      	ldr	r2, [r7, #4]
 8000b0a:	6810      	ldr	r0, [r2, #0]
 8000b0c:	7bfa      	ldrb	r2, [r7, #15]
 8000b0e:	4319      	orrs	r1, r3
 8000b10:	4613      	mov	r3, r2
 8000b12:	005b      	lsls	r3, r3, #1
 8000b14:	4413      	add	r3, r2
 8000b16:	00db      	lsls	r3, r3, #3
 8000b18:	4403      	add	r3, r0
 8000b1a:	3310      	adds	r3, #16
 8000b1c:	6019      	str	r1, [r3, #0]

	// 6. Peripheral increment
	if (pDMAxHandle->DMA_Config.DMA_PeriphInc == DMA_PERIPH_INC)
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	799b      	ldrb	r3, [r3, #6]
 8000b22:	2b01      	cmp	r3, #1
 8000b24:	d12b      	bne.n	8000b7e <DMA_Init+0x192>
	{
		pDMAxHandle->pDMAx->DMA_Strm[streamNum].SCR |= (1 << 9);
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	6819      	ldr	r1, [r3, #0]
 8000b2a:	7bfa      	ldrb	r2, [r7, #15]
 8000b2c:	4613      	mov	r3, r2
 8000b2e:	005b      	lsls	r3, r3, #1
 8000b30:	4413      	add	r3, r2
 8000b32:	00db      	lsls	r3, r3, #3
 8000b34:	440b      	add	r3, r1
 8000b36:	3310      	adds	r3, #16
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	687a      	ldr	r2, [r7, #4]
 8000b3c:	6810      	ldr	r0, [r2, #0]
 8000b3e:	7bfa      	ldrb	r2, [r7, #15]
 8000b40:	f443 7100 	orr.w	r1, r3, #512	; 0x200
 8000b44:	4613      	mov	r3, r2
 8000b46:	005b      	lsls	r3, r3, #1
 8000b48:	4413      	add	r3, r2
 8000b4a:	00db      	lsls	r3, r3, #3
 8000b4c:	4403      	add	r3, r0
 8000b4e:	3310      	adds	r3, #16
 8000b50:	6019      	str	r1, [r3, #0]
		pDMAxHandle->pDMAx->DMA_Strm[streamNum].SCR &= ~(1 << 15);
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	6819      	ldr	r1, [r3, #0]
 8000b56:	7bfa      	ldrb	r2, [r7, #15]
 8000b58:	4613      	mov	r3, r2
 8000b5a:	005b      	lsls	r3, r3, #1
 8000b5c:	4413      	add	r3, r2
 8000b5e:	00db      	lsls	r3, r3, #3
 8000b60:	440b      	add	r3, r1
 8000b62:	3310      	adds	r3, #16
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	687a      	ldr	r2, [r7, #4]
 8000b68:	6810      	ldr	r0, [r2, #0]
 8000b6a:	7bfa      	ldrb	r2, [r7, #15]
 8000b6c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8000b70:	4613      	mov	r3, r2
 8000b72:	005b      	lsls	r3, r3, #1
 8000b74:	4413      	add	r3, r2
 8000b76:	00db      	lsls	r3, r3, #3
 8000b78:	4403      	add	r3, r0
 8000b7a:	3310      	adds	r3, #16
 8000b7c:	6019      	str	r1, [r3, #0]
	}

	// 7. Memory increment
	if (pDMAxHandle->DMA_Config.DMA_MemInc == DMA_MEM_INC)
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	79db      	ldrb	r3, [r3, #7]
 8000b82:	2b01      	cmp	r3, #1
 8000b84:	d115      	bne.n	8000bb2 <DMA_Init+0x1c6>
	{
		pDMAxHandle->pDMAx->DMA_Strm[streamNum].SCR |= (1 << 10);
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	6819      	ldr	r1, [r3, #0]
 8000b8a:	7bfa      	ldrb	r2, [r7, #15]
 8000b8c:	4613      	mov	r3, r2
 8000b8e:	005b      	lsls	r3, r3, #1
 8000b90:	4413      	add	r3, r2
 8000b92:	00db      	lsls	r3, r3, #3
 8000b94:	440b      	add	r3, r1
 8000b96:	3310      	adds	r3, #16
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	687a      	ldr	r2, [r7, #4]
 8000b9c:	6810      	ldr	r0, [r2, #0]
 8000b9e:	7bfa      	ldrb	r2, [r7, #15]
 8000ba0:	f443 6180 	orr.w	r1, r3, #1024	; 0x400
 8000ba4:	4613      	mov	r3, r2
 8000ba6:	005b      	lsls	r3, r3, #1
 8000ba8:	4413      	add	r3, r2
 8000baa:	00db      	lsls	r3, r3, #3
 8000bac:	4403      	add	r3, r0
 8000bae:	3310      	adds	r3, #16
 8000bb0:	6019      	str	r1, [r3, #0]
	}

	// 8. Peripheral burst
	pDMAxHandle->pDMAx->DMA_Strm[streamNum].SCR |= (pDMAxHandle->DMA_Config.DMA_PBurst << 21);
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	6819      	ldr	r1, [r3, #0]
 8000bb6:	7bfa      	ldrb	r2, [r7, #15]
 8000bb8:	4613      	mov	r3, r2
 8000bba:	005b      	lsls	r3, r3, #1
 8000bbc:	4413      	add	r3, r2
 8000bbe:	00db      	lsls	r3, r3, #3
 8000bc0:	440b      	add	r3, r1
 8000bc2:	3310      	adds	r3, #16
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	687a      	ldr	r2, [r7, #4]
 8000bc8:	7bd2      	ldrb	r2, [r2, #15]
 8000bca:	0552      	lsls	r2, r2, #21
 8000bcc:	4611      	mov	r1, r2
 8000bce:	687a      	ldr	r2, [r7, #4]
 8000bd0:	6810      	ldr	r0, [r2, #0]
 8000bd2:	7bfa      	ldrb	r2, [r7, #15]
 8000bd4:	4319      	orrs	r1, r3
 8000bd6:	4613      	mov	r3, r2
 8000bd8:	005b      	lsls	r3, r3, #1
 8000bda:	4413      	add	r3, r2
 8000bdc:	00db      	lsls	r3, r3, #3
 8000bde:	4403      	add	r3, r0
 8000be0:	3310      	adds	r3, #16
 8000be2:	6019      	str	r1, [r3, #0]

	// 9. Memory burst
	pDMAxHandle->pDMAx->DMA_Strm[streamNum].SCR |= (pDMAxHandle->DMA_Config.DMA_MBurst << 23);
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	6819      	ldr	r1, [r3, #0]
 8000be8:	7bfa      	ldrb	r2, [r7, #15]
 8000bea:	4613      	mov	r3, r2
 8000bec:	005b      	lsls	r3, r3, #1
 8000bee:	4413      	add	r3, r2
 8000bf0:	00db      	lsls	r3, r3, #3
 8000bf2:	440b      	add	r3, r1
 8000bf4:	3310      	adds	r3, #16
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	687a      	ldr	r2, [r7, #4]
 8000bfa:	7b92      	ldrb	r2, [r2, #14]
 8000bfc:	05d2      	lsls	r2, r2, #23
 8000bfe:	4611      	mov	r1, r2
 8000c00:	687a      	ldr	r2, [r7, #4]
 8000c02:	6810      	ldr	r0, [r2, #0]
 8000c04:	7bfa      	ldrb	r2, [r7, #15]
 8000c06:	4319      	orrs	r1, r3
 8000c08:	4613      	mov	r3, r2
 8000c0a:	005b      	lsls	r3, r3, #1
 8000c0c:	4413      	add	r3, r2
 8000c0e:	00db      	lsls	r3, r3, #3
 8000c10:	4403      	add	r3, r0
 8000c12:	3310      	adds	r3, #16
 8000c14:	6019      	str	r1, [r3, #0]

	// 10. Set peripheral and memory data sizes
	pDMAxHandle->pDMAx->DMA_Strm[streamNum].SCR |= (pDMAxHandle->DMA_Config.DMA_PeriphDataSize << 11);
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	6819      	ldr	r1, [r3, #0]
 8000c1a:	7bfa      	ldrb	r2, [r7, #15]
 8000c1c:	4613      	mov	r3, r2
 8000c1e:	005b      	lsls	r3, r3, #1
 8000c20:	4413      	add	r3, r2
 8000c22:	00db      	lsls	r3, r3, #3
 8000c24:	440b      	add	r3, r1
 8000c26:	3310      	adds	r3, #16
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	687a      	ldr	r2, [r7, #4]
 8000c2c:	7a12      	ldrb	r2, [r2, #8]
 8000c2e:	02d2      	lsls	r2, r2, #11
 8000c30:	4611      	mov	r1, r2
 8000c32:	687a      	ldr	r2, [r7, #4]
 8000c34:	6810      	ldr	r0, [r2, #0]
 8000c36:	7bfa      	ldrb	r2, [r7, #15]
 8000c38:	4319      	orrs	r1, r3
 8000c3a:	4613      	mov	r3, r2
 8000c3c:	005b      	lsls	r3, r3, #1
 8000c3e:	4413      	add	r3, r2
 8000c40:	00db      	lsls	r3, r3, #3
 8000c42:	4403      	add	r3, r0
 8000c44:	3310      	adds	r3, #16
 8000c46:	6019      	str	r1, [r3, #0]
	pDMAxHandle->pDMAx->DMA_Strm[streamNum].SCR |= (pDMAxHandle->DMA_Config.DMA_MemDataSize << 13);
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	6819      	ldr	r1, [r3, #0]
 8000c4c:	7bfa      	ldrb	r2, [r7, #15]
 8000c4e:	4613      	mov	r3, r2
 8000c50:	005b      	lsls	r3, r3, #1
 8000c52:	4413      	add	r3, r2
 8000c54:	00db      	lsls	r3, r3, #3
 8000c56:	440b      	add	r3, r1
 8000c58:	3310      	adds	r3, #16
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	687a      	ldr	r2, [r7, #4]
 8000c5e:	7a52      	ldrb	r2, [r2, #9]
 8000c60:	0352      	lsls	r2, r2, #13
 8000c62:	4611      	mov	r1, r2
 8000c64:	687a      	ldr	r2, [r7, #4]
 8000c66:	6810      	ldr	r0, [r2, #0]
 8000c68:	7bfa      	ldrb	r2, [r7, #15]
 8000c6a:	4319      	orrs	r1, r3
 8000c6c:	4613      	mov	r3, r2
 8000c6e:	005b      	lsls	r3, r3, #1
 8000c70:	4413      	add	r3, r2
 8000c72:	00db      	lsls	r3, r3, #3
 8000c74:	4403      	add	r3, r0
 8000c76:	3310      	adds	r3, #16
 8000c78:	6019      	str	r1, [r3, #0]

	// 11. Circle mode
	pDMAxHandle->pDMAx->DMA_Strm[streamNum].SCR |= (pDMAxHandle->DMA_Config.DMA_CircMode << 8);
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	6819      	ldr	r1, [r3, #0]
 8000c7e:	7bfa      	ldrb	r2, [r7, #15]
 8000c80:	4613      	mov	r3, r2
 8000c82:	005b      	lsls	r3, r3, #1
 8000c84:	4413      	add	r3, r2
 8000c86:	00db      	lsls	r3, r3, #3
 8000c88:	440b      	add	r3, r1
 8000c8a:	3310      	adds	r3, #16
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	687a      	ldr	r2, [r7, #4]
 8000c90:	7a92      	ldrb	r2, [r2, #10]
 8000c92:	0212      	lsls	r2, r2, #8
 8000c94:	4611      	mov	r1, r2
 8000c96:	687a      	ldr	r2, [r7, #4]
 8000c98:	6810      	ldr	r0, [r2, #0]
 8000c9a:	7bfa      	ldrb	r2, [r7, #15]
 8000c9c:	4319      	orrs	r1, r3
 8000c9e:	4613      	mov	r3, r2
 8000ca0:	005b      	lsls	r3, r3, #1
 8000ca2:	4413      	add	r3, r2
 8000ca4:	00db      	lsls	r3, r3, #3
 8000ca6:	4403      	add	r3, r0
 8000ca8:	3310      	adds	r3, #16
 8000caa:	6019      	str	r1, [r3, #0]
}
 8000cac:	bf00      	nop
 8000cae:	3714      	adds	r7, #20
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	bc80      	pop	{r7}
 8000cb4:	4770      	bx	lr
	...

08000cb8 <GPIO_PortCode>:
 *
 * Params: 		struct GPIO_RegDef_t* - GPIO register base address
 *
 */
uint8_t GPIO_PortCode(GPIO_RegDef_t *pGPIOx)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	b083      	sub	sp, #12
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	6078      	str	r0, [r7, #4]
	if (pGPIOx == GPIOA)
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	4a1a      	ldr	r2, [pc, #104]	; (8000d2c <GPIO_PortCode+0x74>)
 8000cc4:	4293      	cmp	r3, r2
 8000cc6:	d101      	bne.n	8000ccc <GPIO_PortCode+0x14>
	{
		return 0;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	e02a      	b.n	8000d22 <GPIO_PortCode+0x6a>
	}
	else if (pGPIOx == GPIOB)
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	4a18      	ldr	r2, [pc, #96]	; (8000d30 <GPIO_PortCode+0x78>)
 8000cd0:	4293      	cmp	r3, r2
 8000cd2:	d101      	bne.n	8000cd8 <GPIO_PortCode+0x20>
	{
		return 1;
 8000cd4:	2301      	movs	r3, #1
 8000cd6:	e024      	b.n	8000d22 <GPIO_PortCode+0x6a>
	}
	else if (pGPIOx == GPIOC)
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	4a16      	ldr	r2, [pc, #88]	; (8000d34 <GPIO_PortCode+0x7c>)
 8000cdc:	4293      	cmp	r3, r2
 8000cde:	d101      	bne.n	8000ce4 <GPIO_PortCode+0x2c>
	{
		return 2;
 8000ce0:	2302      	movs	r3, #2
 8000ce2:	e01e      	b.n	8000d22 <GPIO_PortCode+0x6a>
	}
	else if (pGPIOx == GPIOD)
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	4a14      	ldr	r2, [pc, #80]	; (8000d38 <GPIO_PortCode+0x80>)
 8000ce8:	4293      	cmp	r3, r2
 8000cea:	d101      	bne.n	8000cf0 <GPIO_PortCode+0x38>
	{
		return 3;
 8000cec:	2303      	movs	r3, #3
 8000cee:	e018      	b.n	8000d22 <GPIO_PortCode+0x6a>
	}
	else if (pGPIOx == GPIOE)
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	4a12      	ldr	r2, [pc, #72]	; (8000d3c <GPIO_PortCode+0x84>)
 8000cf4:	4293      	cmp	r3, r2
 8000cf6:	d101      	bne.n	8000cfc <GPIO_PortCode+0x44>
	{
		return 4;
 8000cf8:	2304      	movs	r3, #4
 8000cfa:	e012      	b.n	8000d22 <GPIO_PortCode+0x6a>
	}
	else if (pGPIOx == GPIOF)
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	4a10      	ldr	r2, [pc, #64]	; (8000d40 <GPIO_PortCode+0x88>)
 8000d00:	4293      	cmp	r3, r2
 8000d02:	d101      	bne.n	8000d08 <GPIO_PortCode+0x50>
	{
		return 5;
 8000d04:	2305      	movs	r3, #5
 8000d06:	e00c      	b.n	8000d22 <GPIO_PortCode+0x6a>
	}
	else if (pGPIOx == GPIOG)
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	4a0e      	ldr	r2, [pc, #56]	; (8000d44 <GPIO_PortCode+0x8c>)
 8000d0c:	4293      	cmp	r3, r2
 8000d0e:	d101      	bne.n	8000d14 <GPIO_PortCode+0x5c>
	{
		return 6;
 8000d10:	2306      	movs	r3, #6
 8000d12:	e006      	b.n	8000d22 <GPIO_PortCode+0x6a>
	}
	else if (pGPIOx == GPIOH)
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	4a0c      	ldr	r2, [pc, #48]	; (8000d48 <GPIO_PortCode+0x90>)
 8000d18:	4293      	cmp	r3, r2
 8000d1a:	d101      	bne.n	8000d20 <GPIO_PortCode+0x68>
	{
		return 7;
 8000d1c:	2307      	movs	r3, #7
 8000d1e:	e000      	b.n	8000d22 <GPIO_PortCode+0x6a>
	}

	return 0;
 8000d20:	2300      	movs	r3, #0
}
 8000d22:	4618      	mov	r0, r3
 8000d24:	370c      	adds	r7, #12
 8000d26:	46bd      	mov	sp, r7
 8000d28:	bc80      	pop	{r7}
 8000d2a:	4770      	bx	lr
 8000d2c:	40020000 	.word	0x40020000
 8000d30:	40020400 	.word	0x40020400
 8000d34:	40020800 	.word	0x40020800
 8000d38:	40020c00 	.word	0x40020c00
 8000d3c:	40021000 	.word	0x40021000
 8000d40:	40021400 	.word	0x40021400
 8000d44:	40021800 	.word	0x40021800
 8000d48:	40021c00 	.word	0x40021c00

08000d4c <GPIO_PeriClockControl>:
 * Params: 		struct GPIO_RegDef_t* - GPIO register base address
 * 				uint8_t - Enable or disable value
 *
 */
void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnOrDi)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	b083      	sub	sp, #12
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]
 8000d54:	460b      	mov	r3, r1
 8000d56:	70fb      	strb	r3, [r7, #3]
	if (EnOrDi == ENABLE)
 8000d58:	78fb      	ldrb	r3, [r7, #3]
 8000d5a:	2b01      	cmp	r3, #1
 8000d5c:	d157      	bne.n	8000e0e <GPIO_PeriClockControl+0xc2>
	{
		if (pGPIOx == GPIOA)
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	4a59      	ldr	r2, [pc, #356]	; (8000ec8 <GPIO_PeriClockControl+0x17c>)
 8000d62:	4293      	cmp	r3, r2
 8000d64:	d106      	bne.n	8000d74 <GPIO_PeriClockControl+0x28>
		{
			GPIOA_PCLK_EN();
 8000d66:	4b59      	ldr	r3, [pc, #356]	; (8000ecc <GPIO_PeriClockControl+0x180>)
 8000d68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d6a:	4a58      	ldr	r2, [pc, #352]	; (8000ecc <GPIO_PeriClockControl+0x180>)
 8000d6c:	f043 0301 	orr.w	r3, r3, #1
 8000d70:	6313      	str	r3, [r2, #48]	; 0x30
		else if (pGPIOx == GPIOH)
		{
			GPIOH_PCLK_DI();
		}
	}
}
 8000d72:	e0a3      	b.n	8000ebc <GPIO_PeriClockControl+0x170>
		else if (pGPIOx == GPIOB)
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	4a56      	ldr	r2, [pc, #344]	; (8000ed0 <GPIO_PeriClockControl+0x184>)
 8000d78:	4293      	cmp	r3, r2
 8000d7a:	d106      	bne.n	8000d8a <GPIO_PeriClockControl+0x3e>
			GPIOB_PCLK_EN();
 8000d7c:	4b53      	ldr	r3, [pc, #332]	; (8000ecc <GPIO_PeriClockControl+0x180>)
 8000d7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d80:	4a52      	ldr	r2, [pc, #328]	; (8000ecc <GPIO_PeriClockControl+0x180>)
 8000d82:	f043 0302 	orr.w	r3, r3, #2
 8000d86:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000d88:	e098      	b.n	8000ebc <GPIO_PeriClockControl+0x170>
		else if (pGPIOx == GPIOC)
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	4a51      	ldr	r2, [pc, #324]	; (8000ed4 <GPIO_PeriClockControl+0x188>)
 8000d8e:	4293      	cmp	r3, r2
 8000d90:	d106      	bne.n	8000da0 <GPIO_PeriClockControl+0x54>
			GPIOC_PCLK_EN();
 8000d92:	4b4e      	ldr	r3, [pc, #312]	; (8000ecc <GPIO_PeriClockControl+0x180>)
 8000d94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d96:	4a4d      	ldr	r2, [pc, #308]	; (8000ecc <GPIO_PeriClockControl+0x180>)
 8000d98:	f043 0304 	orr.w	r3, r3, #4
 8000d9c:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000d9e:	e08d      	b.n	8000ebc <GPIO_PeriClockControl+0x170>
		else if (pGPIOx == GPIOD)
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	4a4d      	ldr	r2, [pc, #308]	; (8000ed8 <GPIO_PeriClockControl+0x18c>)
 8000da4:	4293      	cmp	r3, r2
 8000da6:	d106      	bne.n	8000db6 <GPIO_PeriClockControl+0x6a>
			GPIOD_PCLK_EN();
 8000da8:	4b48      	ldr	r3, [pc, #288]	; (8000ecc <GPIO_PeriClockControl+0x180>)
 8000daa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dac:	4a47      	ldr	r2, [pc, #284]	; (8000ecc <GPIO_PeriClockControl+0x180>)
 8000dae:	f043 0308 	orr.w	r3, r3, #8
 8000db2:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000db4:	e082      	b.n	8000ebc <GPIO_PeriClockControl+0x170>
		else if (pGPIOx == GPIOE)
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	4a48      	ldr	r2, [pc, #288]	; (8000edc <GPIO_PeriClockControl+0x190>)
 8000dba:	4293      	cmp	r3, r2
 8000dbc:	d106      	bne.n	8000dcc <GPIO_PeriClockControl+0x80>
			GPIOE_PCLK_EN();
 8000dbe:	4b43      	ldr	r3, [pc, #268]	; (8000ecc <GPIO_PeriClockControl+0x180>)
 8000dc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dc2:	4a42      	ldr	r2, [pc, #264]	; (8000ecc <GPIO_PeriClockControl+0x180>)
 8000dc4:	f043 0310 	orr.w	r3, r3, #16
 8000dc8:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000dca:	e077      	b.n	8000ebc <GPIO_PeriClockControl+0x170>
		else if (pGPIOx == GPIOF)
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	4a44      	ldr	r2, [pc, #272]	; (8000ee0 <GPIO_PeriClockControl+0x194>)
 8000dd0:	4293      	cmp	r3, r2
 8000dd2:	d106      	bne.n	8000de2 <GPIO_PeriClockControl+0x96>
			GPIOF_PCLK_EN();
 8000dd4:	4b3d      	ldr	r3, [pc, #244]	; (8000ecc <GPIO_PeriClockControl+0x180>)
 8000dd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dd8:	4a3c      	ldr	r2, [pc, #240]	; (8000ecc <GPIO_PeriClockControl+0x180>)
 8000dda:	f043 0320 	orr.w	r3, r3, #32
 8000dde:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000de0:	e06c      	b.n	8000ebc <GPIO_PeriClockControl+0x170>
		else if (pGPIOx == GPIOG)
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	4a3f      	ldr	r2, [pc, #252]	; (8000ee4 <GPIO_PeriClockControl+0x198>)
 8000de6:	4293      	cmp	r3, r2
 8000de8:	d106      	bne.n	8000df8 <GPIO_PeriClockControl+0xac>
			GPIOG_PCLK_EN();
 8000dea:	4b38      	ldr	r3, [pc, #224]	; (8000ecc <GPIO_PeriClockControl+0x180>)
 8000dec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dee:	4a37      	ldr	r2, [pc, #220]	; (8000ecc <GPIO_PeriClockControl+0x180>)
 8000df0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000df4:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000df6:	e061      	b.n	8000ebc <GPIO_PeriClockControl+0x170>
		else if (pGPIOx == GPIOH)
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	4a3b      	ldr	r2, [pc, #236]	; (8000ee8 <GPIO_PeriClockControl+0x19c>)
 8000dfc:	4293      	cmp	r3, r2
 8000dfe:	d15d      	bne.n	8000ebc <GPIO_PeriClockControl+0x170>
			GPIOH_PCLK_EN();
 8000e00:	4b32      	ldr	r3, [pc, #200]	; (8000ecc <GPIO_PeriClockControl+0x180>)
 8000e02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e04:	4a31      	ldr	r2, [pc, #196]	; (8000ecc <GPIO_PeriClockControl+0x180>)
 8000e06:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e0a:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000e0c:	e056      	b.n	8000ebc <GPIO_PeriClockControl+0x170>
		if (pGPIOx == GPIOA)
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	4a2d      	ldr	r2, [pc, #180]	; (8000ec8 <GPIO_PeriClockControl+0x17c>)
 8000e12:	4293      	cmp	r3, r2
 8000e14:	d106      	bne.n	8000e24 <GPIO_PeriClockControl+0xd8>
			GPIOA_PCLK_DI();
 8000e16:	4b2d      	ldr	r3, [pc, #180]	; (8000ecc <GPIO_PeriClockControl+0x180>)
 8000e18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e1a:	4a2c      	ldr	r2, [pc, #176]	; (8000ecc <GPIO_PeriClockControl+0x180>)
 8000e1c:	f023 0301 	bic.w	r3, r3, #1
 8000e20:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000e22:	e04b      	b.n	8000ebc <GPIO_PeriClockControl+0x170>
		else if (pGPIOx == GPIOB)
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	4a2a      	ldr	r2, [pc, #168]	; (8000ed0 <GPIO_PeriClockControl+0x184>)
 8000e28:	4293      	cmp	r3, r2
 8000e2a:	d106      	bne.n	8000e3a <GPIO_PeriClockControl+0xee>
			GPIOB_PCLK_DI();
 8000e2c:	4b27      	ldr	r3, [pc, #156]	; (8000ecc <GPIO_PeriClockControl+0x180>)
 8000e2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e30:	4a26      	ldr	r2, [pc, #152]	; (8000ecc <GPIO_PeriClockControl+0x180>)
 8000e32:	f023 0302 	bic.w	r3, r3, #2
 8000e36:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000e38:	e040      	b.n	8000ebc <GPIO_PeriClockControl+0x170>
		else if (pGPIOx == GPIOC)
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	4a25      	ldr	r2, [pc, #148]	; (8000ed4 <GPIO_PeriClockControl+0x188>)
 8000e3e:	4293      	cmp	r3, r2
 8000e40:	d106      	bne.n	8000e50 <GPIO_PeriClockControl+0x104>
			GPIOC_PCLK_DI();
 8000e42:	4b22      	ldr	r3, [pc, #136]	; (8000ecc <GPIO_PeriClockControl+0x180>)
 8000e44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e46:	4a21      	ldr	r2, [pc, #132]	; (8000ecc <GPIO_PeriClockControl+0x180>)
 8000e48:	f023 0304 	bic.w	r3, r3, #4
 8000e4c:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000e4e:	e035      	b.n	8000ebc <GPIO_PeriClockControl+0x170>
		else if (pGPIOx == GPIOD)
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	4a21      	ldr	r2, [pc, #132]	; (8000ed8 <GPIO_PeriClockControl+0x18c>)
 8000e54:	4293      	cmp	r3, r2
 8000e56:	d106      	bne.n	8000e66 <GPIO_PeriClockControl+0x11a>
			GPIOD_PCLK_DI();
 8000e58:	4b1c      	ldr	r3, [pc, #112]	; (8000ecc <GPIO_PeriClockControl+0x180>)
 8000e5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e5c:	4a1b      	ldr	r2, [pc, #108]	; (8000ecc <GPIO_PeriClockControl+0x180>)
 8000e5e:	f023 0308 	bic.w	r3, r3, #8
 8000e62:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000e64:	e02a      	b.n	8000ebc <GPIO_PeriClockControl+0x170>
		else if (pGPIOx == GPIOE)
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	4a1c      	ldr	r2, [pc, #112]	; (8000edc <GPIO_PeriClockControl+0x190>)
 8000e6a:	4293      	cmp	r3, r2
 8000e6c:	d106      	bne.n	8000e7c <GPIO_PeriClockControl+0x130>
			GPIOE_PCLK_DI();
 8000e6e:	4b17      	ldr	r3, [pc, #92]	; (8000ecc <GPIO_PeriClockControl+0x180>)
 8000e70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e72:	4a16      	ldr	r2, [pc, #88]	; (8000ecc <GPIO_PeriClockControl+0x180>)
 8000e74:	f023 0310 	bic.w	r3, r3, #16
 8000e78:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000e7a:	e01f      	b.n	8000ebc <GPIO_PeriClockControl+0x170>
		else if (pGPIOx == GPIOF)
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	4a18      	ldr	r2, [pc, #96]	; (8000ee0 <GPIO_PeriClockControl+0x194>)
 8000e80:	4293      	cmp	r3, r2
 8000e82:	d106      	bne.n	8000e92 <GPIO_PeriClockControl+0x146>
			GPIOF_PCLK_DI();
 8000e84:	4b11      	ldr	r3, [pc, #68]	; (8000ecc <GPIO_PeriClockControl+0x180>)
 8000e86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e88:	4a10      	ldr	r2, [pc, #64]	; (8000ecc <GPIO_PeriClockControl+0x180>)
 8000e8a:	f023 0320 	bic.w	r3, r3, #32
 8000e8e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000e90:	e014      	b.n	8000ebc <GPIO_PeriClockControl+0x170>
		else if (pGPIOx == GPIOG)
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	4a13      	ldr	r2, [pc, #76]	; (8000ee4 <GPIO_PeriClockControl+0x198>)
 8000e96:	4293      	cmp	r3, r2
 8000e98:	d106      	bne.n	8000ea8 <GPIO_PeriClockControl+0x15c>
			GPIOG_PCLK_DI();
 8000e9a:	4b0c      	ldr	r3, [pc, #48]	; (8000ecc <GPIO_PeriClockControl+0x180>)
 8000e9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e9e:	4a0b      	ldr	r2, [pc, #44]	; (8000ecc <GPIO_PeriClockControl+0x180>)
 8000ea0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000ea4:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000ea6:	e009      	b.n	8000ebc <GPIO_PeriClockControl+0x170>
		else if (pGPIOx == GPIOH)
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	4a0f      	ldr	r2, [pc, #60]	; (8000ee8 <GPIO_PeriClockControl+0x19c>)
 8000eac:	4293      	cmp	r3, r2
 8000eae:	d105      	bne.n	8000ebc <GPIO_PeriClockControl+0x170>
			GPIOH_PCLK_DI();
 8000eb0:	4b06      	ldr	r3, [pc, #24]	; (8000ecc <GPIO_PeriClockControl+0x180>)
 8000eb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eb4:	4a05      	ldr	r2, [pc, #20]	; (8000ecc <GPIO_PeriClockControl+0x180>)
 8000eb6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000eba:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000ebc:	bf00      	nop
 8000ebe:	370c      	adds	r7, #12
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	bc80      	pop	{r7}
 8000ec4:	4770      	bx	lr
 8000ec6:	bf00      	nop
 8000ec8:	40020000 	.word	0x40020000
 8000ecc:	40023800 	.word	0x40023800
 8000ed0:	40020400 	.word	0x40020400
 8000ed4:	40020800 	.word	0x40020800
 8000ed8:	40020c00 	.word	0x40020c00
 8000edc:	40021000 	.word	0x40021000
 8000ee0:	40021400 	.word	0x40021400
 8000ee4:	40021800 	.word	0x40021800
 8000ee8:	40021c00 	.word	0x40021c00

08000eec <GPIO_Init>:
 * Params:		struct GPIO_Handle_t*
 *
 *
 */
void GPIO_Init(GPIO_Handle_t *pGPIOxHandle)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b086      	sub	sp, #24
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
	// Enable clock to GPIO port
	GPIO_PeriClockControl(pGPIOxHandle->pGPIOx, ENABLE);
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	2101      	movs	r1, #1
 8000efa:	4618      	mov	r0, r3
 8000efc:	f7ff ff26 	bl	8000d4c <GPIO_PeriClockControl>

	uint32_t temp = 0;
 8000f00:	2300      	movs	r3, #0
 8000f02:	617b      	str	r3, [r7, #20]

	// 1. Set GPIO pin mode
	if (pGPIOxHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG)
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	795b      	ldrb	r3, [r3, #5]
 8000f08:	2b03      	cmp	r3, #3
 8000f0a:	d822      	bhi.n	8000f52 <GPIO_Init+0x66>
	{
		temp = (pGPIOxHandle->GPIO_PinConfig.GPIO_PinMode << (2 * pGPIOxHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	795b      	ldrb	r3, [r3, #5]
 8000f10:	461a      	mov	r2, r3
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	791b      	ldrb	r3, [r3, #4]
 8000f16:	005b      	lsls	r3, r3, #1
 8000f18:	fa02 f303 	lsl.w	r3, r2, r3
 8000f1c:	617b      	str	r3, [r7, #20]
		pGPIOxHandle->pGPIOx->MODER &= ~((0x3) << (2 * pGPIOxHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	681a      	ldr	r2, [r3, #0]
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	791b      	ldrb	r3, [r3, #4]
 8000f28:	005b      	lsls	r3, r3, #1
 8000f2a:	2103      	movs	r1, #3
 8000f2c:	fa01 f303 	lsl.w	r3, r1, r3
 8000f30:	43db      	mvns	r3, r3
 8000f32:	4619      	mov	r1, r3
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	400a      	ands	r2, r1
 8000f3a:	601a      	str	r2, [r3, #0]
		pGPIOxHandle->pGPIOx->MODER |= temp;
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	6819      	ldr	r1, [r3, #0]
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	697a      	ldr	r2, [r7, #20]
 8000f48:	430a      	orrs	r2, r1
 8000f4a:	601a      	str	r2, [r3, #0]
		temp = 0;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	617b      	str	r3, [r7, #20]
 8000f50:	e07c      	b.n	800104c <GPIO_Init+0x160>
	}
	else {
		//For setting to interrupt mode...

		// Enable clock to SYSCFG (needed to set IRQ in EXTI)
		SYSCFG_PCLK_EN();
 8000f52:	4b8e      	ldr	r3, [pc, #568]	; (800118c <GPIO_Init+0x2a0>)
 8000f54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f56:	4a8d      	ldr	r2, [pc, #564]	; (800118c <GPIO_Init+0x2a0>)
 8000f58:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f5c:	6453      	str	r3, [r2, #68]	; 0x44

		// 1. Set rising/falling edge trigger(s)
		if (pGPIOxHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_IT_MODE_RT)
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	795b      	ldrb	r3, [r3, #5]
 8000f62:	2b04      	cmp	r3, #4
 8000f64:	d117      	bne.n	8000f96 <GPIO_Init+0xaa>
		{
			EXTI->RTSR |= (1 << pGPIOxHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000f66:	4b8a      	ldr	r3, [pc, #552]	; (8001190 <GPIO_Init+0x2a4>)
 8000f68:	689b      	ldr	r3, [r3, #8]
 8000f6a:	687a      	ldr	r2, [r7, #4]
 8000f6c:	7912      	ldrb	r2, [r2, #4]
 8000f6e:	4611      	mov	r1, r2
 8000f70:	2201      	movs	r2, #1
 8000f72:	408a      	lsls	r2, r1
 8000f74:	4611      	mov	r1, r2
 8000f76:	4a86      	ldr	r2, [pc, #536]	; (8001190 <GPIO_Init+0x2a4>)
 8000f78:	430b      	orrs	r3, r1
 8000f7a:	6093      	str	r3, [r2, #8]
			EXTI->FTSR &= ~(1 << pGPIOxHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000f7c:	4b84      	ldr	r3, [pc, #528]	; (8001190 <GPIO_Init+0x2a4>)
 8000f7e:	68db      	ldr	r3, [r3, #12]
 8000f80:	687a      	ldr	r2, [r7, #4]
 8000f82:	7912      	ldrb	r2, [r2, #4]
 8000f84:	4611      	mov	r1, r2
 8000f86:	2201      	movs	r2, #1
 8000f88:	408a      	lsls	r2, r1
 8000f8a:	43d2      	mvns	r2, r2
 8000f8c:	4611      	mov	r1, r2
 8000f8e:	4a80      	ldr	r2, [pc, #512]	; (8001190 <GPIO_Init+0x2a4>)
 8000f90:	400b      	ands	r3, r1
 8000f92:	60d3      	str	r3, [r2, #12]
 8000f94:	e035      	b.n	8001002 <GPIO_Init+0x116>
		}
		else if (pGPIOxHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_IT_MODE_FT)
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	795b      	ldrb	r3, [r3, #5]
 8000f9a:	2b05      	cmp	r3, #5
 8000f9c:	d117      	bne.n	8000fce <GPIO_Init+0xe2>
		{
			EXTI->FTSR |= (1 << pGPIOxHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000f9e:	4b7c      	ldr	r3, [pc, #496]	; (8001190 <GPIO_Init+0x2a4>)
 8000fa0:	68db      	ldr	r3, [r3, #12]
 8000fa2:	687a      	ldr	r2, [r7, #4]
 8000fa4:	7912      	ldrb	r2, [r2, #4]
 8000fa6:	4611      	mov	r1, r2
 8000fa8:	2201      	movs	r2, #1
 8000faa:	408a      	lsls	r2, r1
 8000fac:	4611      	mov	r1, r2
 8000fae:	4a78      	ldr	r2, [pc, #480]	; (8001190 <GPIO_Init+0x2a4>)
 8000fb0:	430b      	orrs	r3, r1
 8000fb2:	60d3      	str	r3, [r2, #12]
			EXTI->RTSR &= ~(1 << pGPIOxHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000fb4:	4b76      	ldr	r3, [pc, #472]	; (8001190 <GPIO_Init+0x2a4>)
 8000fb6:	689b      	ldr	r3, [r3, #8]
 8000fb8:	687a      	ldr	r2, [r7, #4]
 8000fba:	7912      	ldrb	r2, [r2, #4]
 8000fbc:	4611      	mov	r1, r2
 8000fbe:	2201      	movs	r2, #1
 8000fc0:	408a      	lsls	r2, r1
 8000fc2:	43d2      	mvns	r2, r2
 8000fc4:	4611      	mov	r1, r2
 8000fc6:	4a72      	ldr	r2, [pc, #456]	; (8001190 <GPIO_Init+0x2a4>)
 8000fc8:	400b      	ands	r3, r1
 8000fca:	6093      	str	r3, [r2, #8]
 8000fcc:	e019      	b.n	8001002 <GPIO_Init+0x116>
		}
		else if (pGPIOxHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_IT_MODE_RFT)
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	795b      	ldrb	r3, [r3, #5]
 8000fd2:	2b06      	cmp	r3, #6
 8000fd4:	d115      	bne.n	8001002 <GPIO_Init+0x116>
		{
			EXTI->RTSR |= (1 << pGPIOxHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000fd6:	4b6e      	ldr	r3, [pc, #440]	; (8001190 <GPIO_Init+0x2a4>)
 8000fd8:	689b      	ldr	r3, [r3, #8]
 8000fda:	687a      	ldr	r2, [r7, #4]
 8000fdc:	7912      	ldrb	r2, [r2, #4]
 8000fde:	4611      	mov	r1, r2
 8000fe0:	2201      	movs	r2, #1
 8000fe2:	408a      	lsls	r2, r1
 8000fe4:	4611      	mov	r1, r2
 8000fe6:	4a6a      	ldr	r2, [pc, #424]	; (8001190 <GPIO_Init+0x2a4>)
 8000fe8:	430b      	orrs	r3, r1
 8000fea:	6093      	str	r3, [r2, #8]
			EXTI->FTSR |= (1 << pGPIOxHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000fec:	4b68      	ldr	r3, [pc, #416]	; (8001190 <GPIO_Init+0x2a4>)
 8000fee:	68db      	ldr	r3, [r3, #12]
 8000ff0:	687a      	ldr	r2, [r7, #4]
 8000ff2:	7912      	ldrb	r2, [r2, #4]
 8000ff4:	4611      	mov	r1, r2
 8000ff6:	2201      	movs	r2, #1
 8000ff8:	408a      	lsls	r2, r1
 8000ffa:	4611      	mov	r1, r2
 8000ffc:	4a64      	ldr	r2, [pc, #400]	; (8001190 <GPIO_Init+0x2a4>)
 8000ffe:	430b      	orrs	r3, r1
 8001000:	60d3      	str	r3, [r2, #12]
		}

		// 2. Configure GPIO port selection in SYSCFG
		uint8_t temp1 = pGPIOxHandle->GPIO_PinConfig.GPIO_PinNumber / 4;
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	791b      	ldrb	r3, [r3, #4]
 8001006:	089b      	lsrs	r3, r3, #2
 8001008:	74fb      	strb	r3, [r7, #19]
		uint8_t temp2 = pGPIOxHandle->GPIO_PinConfig.GPIO_PinNumber % 4;
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	791b      	ldrb	r3, [r3, #4]
 800100e:	f003 0303 	and.w	r3, r3, #3
 8001012:	74bb      	strb	r3, [r7, #18]
		uint8_t portCode = GPIO_PortCode(pGPIOxHandle->pGPIOx);
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	4618      	mov	r0, r3
 800101a:	f7ff fe4d 	bl	8000cb8 <GPIO_PortCode>
 800101e:	4603      	mov	r3, r0
 8001020:	747b      	strb	r3, [r7, #17]
		SYSCFG->EXTICR[temp1] = portCode << (temp2 * 4);
 8001022:	7c7a      	ldrb	r2, [r7, #17]
 8001024:	7cbb      	ldrb	r3, [r7, #18]
 8001026:	009b      	lsls	r3, r3, #2
 8001028:	fa02 f103 	lsl.w	r1, r2, r3
 800102c:	4a59      	ldr	r2, [pc, #356]	; (8001194 <GPIO_Init+0x2a8>)
 800102e:	7cfb      	ldrb	r3, [r7, #19]
 8001030:	3302      	adds	r3, #2
 8001032:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

		// 3. Enable EXTI interrupt using interrupt register masking
		EXTI->IMR |= (1 << pGPIOxHandle->GPIO_PinConfig.GPIO_PinNumber);
 8001036:	4b56      	ldr	r3, [pc, #344]	; (8001190 <GPIO_Init+0x2a4>)
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	687a      	ldr	r2, [r7, #4]
 800103c:	7912      	ldrb	r2, [r2, #4]
 800103e:	4611      	mov	r1, r2
 8001040:	2201      	movs	r2, #1
 8001042:	408a      	lsls	r2, r1
 8001044:	4611      	mov	r1, r2
 8001046:	4a52      	ldr	r2, [pc, #328]	; (8001190 <GPIO_Init+0x2a4>)
 8001048:	430b      	orrs	r3, r1
 800104a:	6013      	str	r3, [r2, #0]
	}

	// 2. Set pin speed
	temp = (pGPIOxHandle->GPIO_PinConfig.GPIO_PinSpeed << (2 * pGPIOxHandle->GPIO_PinConfig.GPIO_PinNumber));
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	799b      	ldrb	r3, [r3, #6]
 8001050:	461a      	mov	r2, r3
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	791b      	ldrb	r3, [r3, #4]
 8001056:	005b      	lsls	r3, r3, #1
 8001058:	fa02 f303 	lsl.w	r3, r2, r3
 800105c:	617b      	str	r3, [r7, #20]
	pGPIOxHandle->pGPIOx->OSPEEDR &= ~((0x3) << (2 * pGPIOxHandle->GPIO_PinConfig.GPIO_PinNumber));
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	689a      	ldr	r2, [r3, #8]
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	791b      	ldrb	r3, [r3, #4]
 8001068:	005b      	lsls	r3, r3, #1
 800106a:	2103      	movs	r1, #3
 800106c:	fa01 f303 	lsl.w	r3, r1, r3
 8001070:	43db      	mvns	r3, r3
 8001072:	4619      	mov	r1, r3
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	400a      	ands	r2, r1
 800107a:	609a      	str	r2, [r3, #8]
	pGPIOxHandle->pGPIOx->OSPEEDR |= temp;
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	6899      	ldr	r1, [r3, #8]
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	697a      	ldr	r2, [r7, #20]
 8001088:	430a      	orrs	r2, r1
 800108a:	609a      	str	r2, [r3, #8]
	temp = 0;
 800108c:	2300      	movs	r3, #0
 800108e:	617b      	str	r3, [r7, #20]

	// 3. Set pin pull-up or pull-down mode
	temp = (pGPIOxHandle->GPIO_PinConfig.GPIO_PuPdCtrl << (2 * pGPIOxHandle->GPIO_PinConfig.GPIO_PinNumber));
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	79db      	ldrb	r3, [r3, #7]
 8001094:	461a      	mov	r2, r3
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	791b      	ldrb	r3, [r3, #4]
 800109a:	005b      	lsls	r3, r3, #1
 800109c:	fa02 f303 	lsl.w	r3, r2, r3
 80010a0:	617b      	str	r3, [r7, #20]
	pGPIOxHandle->pGPIOx->PUPDR &= ~((0x3) << (2 * pGPIOxHandle->GPIO_PinConfig.GPIO_PinNumber));
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	68da      	ldr	r2, [r3, #12]
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	791b      	ldrb	r3, [r3, #4]
 80010ac:	005b      	lsls	r3, r3, #1
 80010ae:	2103      	movs	r1, #3
 80010b0:	fa01 f303 	lsl.w	r3, r1, r3
 80010b4:	43db      	mvns	r3, r3
 80010b6:	4619      	mov	r1, r3
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	400a      	ands	r2, r1
 80010be:	60da      	str	r2, [r3, #12]
	pGPIOxHandle->pGPIOx->PUPDR |= temp;
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	68d9      	ldr	r1, [r3, #12]
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	697a      	ldr	r2, [r7, #20]
 80010cc:	430a      	orrs	r2, r1
 80010ce:	60da      	str	r2, [r3, #12]
	temp = 0;
 80010d0:	2300      	movs	r3, #0
 80010d2:	617b      	str	r3, [r7, #20]

	// 4. Configure pin output type (push-pull or open drain)
	temp = (pGPIOxHandle->GPIO_PinConfig.GPIO_OpType << pGPIOxHandle->GPIO_PinConfig.GPIO_PinNumber);
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	7a1b      	ldrb	r3, [r3, #8]
 80010d8:	461a      	mov	r2, r3
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	791b      	ldrb	r3, [r3, #4]
 80010de:	fa02 f303 	lsl.w	r3, r2, r3
 80010e2:	617b      	str	r3, [r7, #20]
	pGPIOxHandle->pGPIOx->OTYPER &= ~((0x1) <<  pGPIOxHandle->GPIO_PinConfig.GPIO_PinNumber);
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	685a      	ldr	r2, [r3, #4]
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	791b      	ldrb	r3, [r3, #4]
 80010ee:	4619      	mov	r1, r3
 80010f0:	2301      	movs	r3, #1
 80010f2:	408b      	lsls	r3, r1
 80010f4:	43db      	mvns	r3, r3
 80010f6:	4619      	mov	r1, r3
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	400a      	ands	r2, r1
 80010fe:	605a      	str	r2, [r3, #4]
	pGPIOxHandle->pGPIOx->OTYPER |= temp;
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	6859      	ldr	r1, [r3, #4]
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	697a      	ldr	r2, [r7, #20]
 800110c:	430a      	orrs	r2, r1
 800110e:	605a      	str	r2, [r3, #4]
	temp = 0;
 8001110:	2300      	movs	r3, #0
 8001112:	617b      	str	r3, [r7, #20]

	// 5. Configure alternate mode function
	if (pGPIOxHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_AF)
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	795b      	ldrb	r3, [r3, #5]
 8001118:	2b02      	cmp	r3, #2
 800111a:	d132      	bne.n	8001182 <GPIO_Init+0x296>
	{
		uint32_t temp1, temp2;
		temp1 = pGPIOxHandle->GPIO_PinConfig.GPIO_PinNumber / 8;
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	791b      	ldrb	r3, [r3, #4]
 8001120:	08db      	lsrs	r3, r3, #3
 8001122:	b2db      	uxtb	r3, r3
 8001124:	60fb      	str	r3, [r7, #12]
		temp2 = pGPIOxHandle->GPIO_PinConfig.GPIO_PinNumber % 8;
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	791b      	ldrb	r3, [r3, #4]
 800112a:	f003 0307 	and.w	r3, r3, #7
 800112e:	60bb      	str	r3, [r7, #8]

		pGPIOxHandle->pGPIOx->AFR[temp1] &= ~((0xF) << (4 * temp2));
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	68fa      	ldr	r2, [r7, #12]
 8001136:	3208      	adds	r2, #8
 8001138:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800113c:	68bb      	ldr	r3, [r7, #8]
 800113e:	009b      	lsls	r3, r3, #2
 8001140:	210f      	movs	r1, #15
 8001142:	fa01 f303 	lsl.w	r3, r1, r3
 8001146:	43db      	mvns	r3, r3
 8001148:	4619      	mov	r1, r3
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	4011      	ands	r1, r2
 8001150:	68fa      	ldr	r2, [r7, #12]
 8001152:	3208      	adds	r2, #8
 8001154:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOxHandle->pGPIOx->AFR[temp1] |= (pGPIOxHandle->GPIO_PinConfig.GPIO_AfMode << (4 * temp2));
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	68fa      	ldr	r2, [r7, #12]
 800115e:	3208      	adds	r2, #8
 8001160:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	7a5b      	ldrb	r3, [r3, #9]
 8001168:	4619      	mov	r1, r3
 800116a:	68bb      	ldr	r3, [r7, #8]
 800116c:	009b      	lsls	r3, r3, #2
 800116e:	fa01 f303 	lsl.w	r3, r1, r3
 8001172:	4619      	mov	r1, r3
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	4311      	orrs	r1, r2
 800117a:	68fa      	ldr	r2, [r7, #12]
 800117c:	3208      	adds	r2, #8
 800117e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}
}
 8001182:	bf00      	nop
 8001184:	3718      	adds	r7, #24
 8001186:	46bd      	mov	sp, r7
 8001188:	bd80      	pop	{r7, pc}
 800118a:	bf00      	nop
 800118c:	40023800 	.word	0x40023800
 8001190:	40013c00 	.word	0x40013c00
 8001194:	40013800 	.word	0x40013800

08001198 <RCC_GetPPLCLK>:
 *
 * Return: 		uint32_t PPLClk - accelerated clock speed (Hz)
 *
 */
uint32_t RCC_GetPPLCLK(void)
{
 8001198:	b480      	push	{r7}
 800119a:	af00      	add	r7, sp, #0
	//TODO
	return 0;
 800119c:	2300      	movs	r3, #0
}
 800119e:	4618      	mov	r0, r3
 80011a0:	46bd      	mov	sp, r7
 80011a2:	bc80      	pop	{r7}
 80011a4:	4770      	bx	lr
	...

080011a8 <RCC_GetAPB1CLK>:
 *
 * Return: 		uint32_t Apb1Clk - clock speed to I2C peripherals (Hz)
 *
 */
uint32_t RCC_GetAPB1CLK(void)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b084      	sub	sp, #16
 80011ac:	af00      	add	r7, sp, #0
	// 1. Get system clock source (internal, external, PLL)
	uint8_t clkSrc = ((RCC->CFGR >> 2) & 0x3);
 80011ae:	4b25      	ldr	r3, [pc, #148]	; (8001244 <RCC_GetAPB1CLK+0x9c>)
 80011b0:	689b      	ldr	r3, [r3, #8]
 80011b2:	089b      	lsrs	r3, r3, #2
 80011b4:	b2db      	uxtb	r3, r3
 80011b6:	f003 0303 	and.w	r3, r3, #3
 80011ba:	727b      	strb	r3, [r7, #9]

	uint32_t sysClk, Apb1Clk;

	if (clkSrc == 0)
 80011bc:	7a7b      	ldrb	r3, [r7, #9]
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d102      	bne.n	80011c8 <RCC_GetAPB1CLK+0x20>
	{
		// Internal oscillator
		sysClk = 16000000;
 80011c2:	4b21      	ldr	r3, [pc, #132]	; (8001248 <RCC_GetAPB1CLK+0xa0>)
 80011c4:	60fb      	str	r3, [r7, #12]
 80011c6:	e00d      	b.n	80011e4 <RCC_GetAPB1CLK+0x3c>
	}
	else if (clkSrc == 1)
 80011c8:	7a7b      	ldrb	r3, [r7, #9]
 80011ca:	2b01      	cmp	r3, #1
 80011cc:	d102      	bne.n	80011d4 <RCC_GetAPB1CLK+0x2c>
	{
		// External on-board oscillator
		sysClk = 8000000;
 80011ce:	4b1f      	ldr	r3, [pc, #124]	; (800124c <RCC_GetAPB1CLK+0xa4>)
 80011d0:	60fb      	str	r3, [r7, #12]
 80011d2:	e007      	b.n	80011e4 <RCC_GetAPB1CLK+0x3c>
	}
	else if (clkSrc == 2)
 80011d4:	7a7b      	ldrb	r3, [r7, #9]
 80011d6:	2b02      	cmp	r3, #2
 80011d8:	d104      	bne.n	80011e4 <RCC_GetAPB1CLK+0x3c>
	{
		Apb1Clk = RCC_GetPPLCLK();
 80011da:	f7ff ffdd 	bl	8001198 <RCC_GetPPLCLK>
 80011de:	6078      	str	r0, [r7, #4]
		return Apb1Clk;
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	e02b      	b.n	800123c <RCC_GetAPB1CLK+0x94>
	}

	// 2. Get the AHB prescaler value
	uint8_t temp = (RCC->CFGR >> 4) & 0xF;
 80011e4:	4b17      	ldr	r3, [pc, #92]	; (8001244 <RCC_GetAPB1CLK+0x9c>)
 80011e6:	689b      	ldr	r3, [r3, #8]
 80011e8:	091b      	lsrs	r3, r3, #4
 80011ea:	b2db      	uxtb	r3, r3
 80011ec:	f003 030f 	and.w	r3, r3, #15
 80011f0:	70fb      	strb	r3, [r7, #3]
	uint8_t ahbPre = 1, ppre1Pre = 1;
 80011f2:	2301      	movs	r3, #1
 80011f4:	72fb      	strb	r3, [r7, #11]
 80011f6:	2301      	movs	r3, #1
 80011f8:	72bb      	strb	r3, [r7, #10]

	if (temp >= 8)
 80011fa:	78fb      	ldrb	r3, [r7, #3]
 80011fc:	2b07      	cmp	r3, #7
 80011fe:	d905      	bls.n	800120c <RCC_GetAPB1CLK+0x64>
	{
		ahbPre = AHB_Prescaler[temp - 8];
 8001200:	78fb      	ldrb	r3, [r7, #3]
 8001202:	3b08      	subs	r3, #8
 8001204:	4a12      	ldr	r2, [pc, #72]	; (8001250 <RCC_GetAPB1CLK+0xa8>)
 8001206:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800120a:	72fb      	strb	r3, [r7, #11]
	}

	// 3. Get the APB1 prescaler value
	temp = (RCC->CFGR >> 10) & 0x7;
 800120c:	4b0d      	ldr	r3, [pc, #52]	; (8001244 <RCC_GetAPB1CLK+0x9c>)
 800120e:	689b      	ldr	r3, [r3, #8]
 8001210:	0a9b      	lsrs	r3, r3, #10
 8001212:	b2db      	uxtb	r3, r3
 8001214:	f003 0307 	and.w	r3, r3, #7
 8001218:	70fb      	strb	r3, [r7, #3]
	if (temp >= 4)
 800121a:	78fb      	ldrb	r3, [r7, #3]
 800121c:	2b03      	cmp	r3, #3
 800121e:	d904      	bls.n	800122a <RCC_GetAPB1CLK+0x82>
	{
		ppre1Pre = PPRE1_Prescaler[temp - 4];
 8001220:	78fb      	ldrb	r3, [r7, #3]
 8001222:	3b04      	subs	r3, #4
 8001224:	4a0b      	ldr	r2, [pc, #44]	; (8001254 <RCC_GetAPB1CLK+0xac>)
 8001226:	5cd3      	ldrb	r3, [r2, r3]
 8001228:	72bb      	strb	r3, [r7, #10]
	}

	// 4. Calculate the clock speed to I2C
	Apb1Clk = (sysClk / ahbPre) / ppre1Pre;
 800122a:	7afb      	ldrb	r3, [r7, #11]
 800122c:	68fa      	ldr	r2, [r7, #12]
 800122e:	fbb2 f2f3 	udiv	r2, r2, r3
 8001232:	7abb      	ldrb	r3, [r7, #10]
 8001234:	fbb2 f3f3 	udiv	r3, r2, r3
 8001238:	607b      	str	r3, [r7, #4]

	return Apb1Clk;
 800123a:	687b      	ldr	r3, [r7, #4]
}
 800123c:	4618      	mov	r0, r3
 800123e:	3710      	adds	r7, #16
 8001240:	46bd      	mov	sp, r7
 8001242:	bd80      	pop	{r7, pc}
 8001244:	40023800 	.word	0x40023800
 8001248:	00f42400 	.word	0x00f42400
 800124c:	007a1200 	.word	0x007a1200
 8001250:	20000000 	.word	0x20000000
 8001254:	20000010 	.word	0x20000010

08001258 <RCC_GetAPB2CLK>:
 *
 * Return: 		uint32_t Apb2Clk - clock speed to APB2 (Hz)
 *
 */
uint32_t RCC_GetAPB2CLK(void)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b084      	sub	sp, #16
 800125c:	af00      	add	r7, sp, #0
	// 1. Get system clock source (internal, external, PLL)
	uint8_t clkSrc = ((RCC->CFGR >> 2) & 0x3);
 800125e:	4b25      	ldr	r3, [pc, #148]	; (80012f4 <RCC_GetAPB2CLK+0x9c>)
 8001260:	689b      	ldr	r3, [r3, #8]
 8001262:	089b      	lsrs	r3, r3, #2
 8001264:	b2db      	uxtb	r3, r3
 8001266:	f003 0303 	and.w	r3, r3, #3
 800126a:	727b      	strb	r3, [r7, #9]

	uint32_t sysClk, Apb2Clk;

	if (clkSrc == 0)
 800126c:	7a7b      	ldrb	r3, [r7, #9]
 800126e:	2b00      	cmp	r3, #0
 8001270:	d102      	bne.n	8001278 <RCC_GetAPB2CLK+0x20>
	{
		// Internal oscillator
		sysClk = 16000000;
 8001272:	4b21      	ldr	r3, [pc, #132]	; (80012f8 <RCC_GetAPB2CLK+0xa0>)
 8001274:	60fb      	str	r3, [r7, #12]
 8001276:	e00d      	b.n	8001294 <RCC_GetAPB2CLK+0x3c>
	}
	else if (clkSrc == 1)
 8001278:	7a7b      	ldrb	r3, [r7, #9]
 800127a:	2b01      	cmp	r3, #1
 800127c:	d102      	bne.n	8001284 <RCC_GetAPB2CLK+0x2c>
	{
		// External on-board oscillator
		sysClk = 8000000;
 800127e:	4b1f      	ldr	r3, [pc, #124]	; (80012fc <RCC_GetAPB2CLK+0xa4>)
 8001280:	60fb      	str	r3, [r7, #12]
 8001282:	e007      	b.n	8001294 <RCC_GetAPB2CLK+0x3c>
	}
	else if (clkSrc == 2)
 8001284:	7a7b      	ldrb	r3, [r7, #9]
 8001286:	2b02      	cmp	r3, #2
 8001288:	d104      	bne.n	8001294 <RCC_GetAPB2CLK+0x3c>
	{
		Apb2Clk = RCC_GetPPLCLK();
 800128a:	f7ff ff85 	bl	8001198 <RCC_GetPPLCLK>
 800128e:	6078      	str	r0, [r7, #4]
		return Apb2Clk;
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	e02b      	b.n	80012ec <RCC_GetAPB2CLK+0x94>
	}

	// 2. Get the AHB prescaler value
	uint8_t temp = (RCC->CFGR >> 4) & 0xF;
 8001294:	4b17      	ldr	r3, [pc, #92]	; (80012f4 <RCC_GetAPB2CLK+0x9c>)
 8001296:	689b      	ldr	r3, [r3, #8]
 8001298:	091b      	lsrs	r3, r3, #4
 800129a:	b2db      	uxtb	r3, r3
 800129c:	f003 030f 	and.w	r3, r3, #15
 80012a0:	70fb      	strb	r3, [r7, #3]
	uint8_t ahbPre = 1, ppre2Pre = 1;
 80012a2:	2301      	movs	r3, #1
 80012a4:	72fb      	strb	r3, [r7, #11]
 80012a6:	2301      	movs	r3, #1
 80012a8:	72bb      	strb	r3, [r7, #10]

	if (temp >= 8)
 80012aa:	78fb      	ldrb	r3, [r7, #3]
 80012ac:	2b07      	cmp	r3, #7
 80012ae:	d905      	bls.n	80012bc <RCC_GetAPB2CLK+0x64>
	{
		ahbPre = AHB_Prescaler[temp - 8];
 80012b0:	78fb      	ldrb	r3, [r7, #3]
 80012b2:	3b08      	subs	r3, #8
 80012b4:	4a12      	ldr	r2, [pc, #72]	; (8001300 <RCC_GetAPB2CLK+0xa8>)
 80012b6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80012ba:	72fb      	strb	r3, [r7, #11]
	}

	// 3. Get the APB2 prescaler value
	temp = (RCC->CFGR >> 13) & 0x7;
 80012bc:	4b0d      	ldr	r3, [pc, #52]	; (80012f4 <RCC_GetAPB2CLK+0x9c>)
 80012be:	689b      	ldr	r3, [r3, #8]
 80012c0:	0b5b      	lsrs	r3, r3, #13
 80012c2:	b2db      	uxtb	r3, r3
 80012c4:	f003 0307 	and.w	r3, r3, #7
 80012c8:	70fb      	strb	r3, [r7, #3]
	if (temp >= 4)
 80012ca:	78fb      	ldrb	r3, [r7, #3]
 80012cc:	2b03      	cmp	r3, #3
 80012ce:	d904      	bls.n	80012da <RCC_GetAPB2CLK+0x82>
	{
		ppre2Pre = PPRE2_Prescaler[temp - 4];
 80012d0:	78fb      	ldrb	r3, [r7, #3]
 80012d2:	3b04      	subs	r3, #4
 80012d4:	4a0b      	ldr	r2, [pc, #44]	; (8001304 <RCC_GetAPB2CLK+0xac>)
 80012d6:	5cd3      	ldrb	r3, [r2, r3]
 80012d8:	72bb      	strb	r3, [r7, #10]
	}

	// 4. Calculate the clock speed to I2C
	Apb2Clk = (sysClk / ahbPre) / ppre2Pre;
 80012da:	7afb      	ldrb	r3, [r7, #11]
 80012dc:	68fa      	ldr	r2, [r7, #12]
 80012de:	fbb2 f2f3 	udiv	r2, r2, r3
 80012e2:	7abb      	ldrb	r3, [r7, #10]
 80012e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80012e8:	607b      	str	r3, [r7, #4]

	return Apb2Clk;
 80012ea:	687b      	ldr	r3, [r7, #4]
}
 80012ec:	4618      	mov	r0, r3
 80012ee:	3710      	adds	r7, #16
 80012f0:	46bd      	mov	sp, r7
 80012f2:	bd80      	pop	{r7, pc}
 80012f4:	40023800 	.word	0x40023800
 80012f8:	00f42400 	.word	0x00f42400
 80012fc:	007a1200 	.word	0x007a1200
 8001300:	20000000 	.word	0x20000000
 8001304:	20000014 	.word	0x20000014

08001308 <USART_PeriClockControl>:
 * Params: 		struct USART_RegDef_t* *pUSARTx - USART/UART base address
 * 				uint8_t - Enable or disable value
 *
 */
void USART_PeriClockControl(USART_RegDef_t *pUSARTx, uint8_t EnOrDi)
{
 8001308:	b480      	push	{r7}
 800130a:	b083      	sub	sp, #12
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
 8001310:	460b      	mov	r3, r1
 8001312:	70fb      	strb	r3, [r7, #3]
	if (EnOrDi == ENABLE)
 8001314:	78fb      	ldrb	r3, [r7, #3]
 8001316:	2b01      	cmp	r3, #1
 8001318:	d141      	bne.n	800139e <USART_PeriClockControl+0x96>
	{
		if (pUSARTx == USART1)
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	4a43      	ldr	r2, [pc, #268]	; (800142c <USART_PeriClockControl+0x124>)
 800131e:	4293      	cmp	r3, r2
 8001320:	d106      	bne.n	8001330 <USART_PeriClockControl+0x28>
		{
			USART1_PCLK_EN();
 8001322:	4b43      	ldr	r3, [pc, #268]	; (8001430 <USART_PeriClockControl+0x128>)
 8001324:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001326:	4a42      	ldr	r2, [pc, #264]	; (8001430 <USART_PeriClockControl+0x128>)
 8001328:	f043 0310 	orr.w	r3, r3, #16
 800132c:	6453      	str	r3, [r2, #68]	; 0x44
		else if (pUSARTx == USART6)
		{
			USART6_PCLK_DI();
		}
	}
}
 800132e:	e077      	b.n	8001420 <USART_PeriClockControl+0x118>
		else if (pUSARTx == USART2)
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	4a40      	ldr	r2, [pc, #256]	; (8001434 <USART_PeriClockControl+0x12c>)
 8001334:	4293      	cmp	r3, r2
 8001336:	d106      	bne.n	8001346 <USART_PeriClockControl+0x3e>
			USART2_PCLK_EN();
 8001338:	4b3d      	ldr	r3, [pc, #244]	; (8001430 <USART_PeriClockControl+0x128>)
 800133a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800133c:	4a3c      	ldr	r2, [pc, #240]	; (8001430 <USART_PeriClockControl+0x128>)
 800133e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001342:	6413      	str	r3, [r2, #64]	; 0x40
}
 8001344:	e06c      	b.n	8001420 <USART_PeriClockControl+0x118>
		else if (pUSARTx == USART3)
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	4a3b      	ldr	r2, [pc, #236]	; (8001438 <USART_PeriClockControl+0x130>)
 800134a:	4293      	cmp	r3, r2
 800134c:	d106      	bne.n	800135c <USART_PeriClockControl+0x54>
			USART3_PCLK_EN();
 800134e:	4b38      	ldr	r3, [pc, #224]	; (8001430 <USART_PeriClockControl+0x128>)
 8001350:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001352:	4a37      	ldr	r2, [pc, #220]	; (8001430 <USART_PeriClockControl+0x128>)
 8001354:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001358:	6413      	str	r3, [r2, #64]	; 0x40
}
 800135a:	e061      	b.n	8001420 <USART_PeriClockControl+0x118>
		else if (pUSARTx == UART4)
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	4a37      	ldr	r2, [pc, #220]	; (800143c <USART_PeriClockControl+0x134>)
 8001360:	4293      	cmp	r3, r2
 8001362:	d106      	bne.n	8001372 <USART_PeriClockControl+0x6a>
			UART4_PCLK_EN();
 8001364:	4b32      	ldr	r3, [pc, #200]	; (8001430 <USART_PeriClockControl+0x128>)
 8001366:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001368:	4a31      	ldr	r2, [pc, #196]	; (8001430 <USART_PeriClockControl+0x128>)
 800136a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800136e:	6413      	str	r3, [r2, #64]	; 0x40
}
 8001370:	e056      	b.n	8001420 <USART_PeriClockControl+0x118>
		else if (pUSARTx == UART5)
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	4a32      	ldr	r2, [pc, #200]	; (8001440 <USART_PeriClockControl+0x138>)
 8001376:	4293      	cmp	r3, r2
 8001378:	d106      	bne.n	8001388 <USART_PeriClockControl+0x80>
			UART5_PCLK_EN();
 800137a:	4b2d      	ldr	r3, [pc, #180]	; (8001430 <USART_PeriClockControl+0x128>)
 800137c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800137e:	4a2c      	ldr	r2, [pc, #176]	; (8001430 <USART_PeriClockControl+0x128>)
 8001380:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001384:	6413      	str	r3, [r2, #64]	; 0x40
}
 8001386:	e04b      	b.n	8001420 <USART_PeriClockControl+0x118>
		else if (pUSARTx == USART6)
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	4a2e      	ldr	r2, [pc, #184]	; (8001444 <USART_PeriClockControl+0x13c>)
 800138c:	4293      	cmp	r3, r2
 800138e:	d147      	bne.n	8001420 <USART_PeriClockControl+0x118>
			USART6_PCLK_EN();
 8001390:	4b27      	ldr	r3, [pc, #156]	; (8001430 <USART_PeriClockControl+0x128>)
 8001392:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001394:	4a26      	ldr	r2, [pc, #152]	; (8001430 <USART_PeriClockControl+0x128>)
 8001396:	f043 0320 	orr.w	r3, r3, #32
 800139a:	6453      	str	r3, [r2, #68]	; 0x44
}
 800139c:	e040      	b.n	8001420 <USART_PeriClockControl+0x118>
		if (pUSARTx == USART1)
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	4a22      	ldr	r2, [pc, #136]	; (800142c <USART_PeriClockControl+0x124>)
 80013a2:	4293      	cmp	r3, r2
 80013a4:	d106      	bne.n	80013b4 <USART_PeriClockControl+0xac>
			USART1_PCLK_DI();
 80013a6:	4b22      	ldr	r3, [pc, #136]	; (8001430 <USART_PeriClockControl+0x128>)
 80013a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013aa:	4a21      	ldr	r2, [pc, #132]	; (8001430 <USART_PeriClockControl+0x128>)
 80013ac:	f023 0310 	bic.w	r3, r3, #16
 80013b0:	6453      	str	r3, [r2, #68]	; 0x44
}
 80013b2:	e035      	b.n	8001420 <USART_PeriClockControl+0x118>
		else if (pUSARTx == USART2)
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	4a1f      	ldr	r2, [pc, #124]	; (8001434 <USART_PeriClockControl+0x12c>)
 80013b8:	4293      	cmp	r3, r2
 80013ba:	d106      	bne.n	80013ca <USART_PeriClockControl+0xc2>
			USART2_PCLK_DI();
 80013bc:	4b1c      	ldr	r3, [pc, #112]	; (8001430 <USART_PeriClockControl+0x128>)
 80013be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013c0:	4a1b      	ldr	r2, [pc, #108]	; (8001430 <USART_PeriClockControl+0x128>)
 80013c2:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80013c6:	6413      	str	r3, [r2, #64]	; 0x40
}
 80013c8:	e02a      	b.n	8001420 <USART_PeriClockControl+0x118>
		else if (pUSARTx == USART3)
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	4a1a      	ldr	r2, [pc, #104]	; (8001438 <USART_PeriClockControl+0x130>)
 80013ce:	4293      	cmp	r3, r2
 80013d0:	d106      	bne.n	80013e0 <USART_PeriClockControl+0xd8>
			USART3_PCLK_DI();
 80013d2:	4b17      	ldr	r3, [pc, #92]	; (8001430 <USART_PeriClockControl+0x128>)
 80013d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013d6:	4a16      	ldr	r2, [pc, #88]	; (8001430 <USART_PeriClockControl+0x128>)
 80013d8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80013dc:	6413      	str	r3, [r2, #64]	; 0x40
}
 80013de:	e01f      	b.n	8001420 <USART_PeriClockControl+0x118>
		else if (pUSARTx == UART4)
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	4a16      	ldr	r2, [pc, #88]	; (800143c <USART_PeriClockControl+0x134>)
 80013e4:	4293      	cmp	r3, r2
 80013e6:	d106      	bne.n	80013f6 <USART_PeriClockControl+0xee>
			UART4_PCLK_DI();
 80013e8:	4b11      	ldr	r3, [pc, #68]	; (8001430 <USART_PeriClockControl+0x128>)
 80013ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ec:	4a10      	ldr	r2, [pc, #64]	; (8001430 <USART_PeriClockControl+0x128>)
 80013ee:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 80013f2:	6413      	str	r3, [r2, #64]	; 0x40
}
 80013f4:	e014      	b.n	8001420 <USART_PeriClockControl+0x118>
		else if (pUSARTx == UART5)
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	4a11      	ldr	r2, [pc, #68]	; (8001440 <USART_PeriClockControl+0x138>)
 80013fa:	4293      	cmp	r3, r2
 80013fc:	d106      	bne.n	800140c <USART_PeriClockControl+0x104>
			UART5_PCLK_DI();
 80013fe:	4b0c      	ldr	r3, [pc, #48]	; (8001430 <USART_PeriClockControl+0x128>)
 8001400:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001402:	4a0b      	ldr	r2, [pc, #44]	; (8001430 <USART_PeriClockControl+0x128>)
 8001404:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8001408:	6413      	str	r3, [r2, #64]	; 0x40
}
 800140a:	e009      	b.n	8001420 <USART_PeriClockControl+0x118>
		else if (pUSARTx == USART6)
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	4a0d      	ldr	r2, [pc, #52]	; (8001444 <USART_PeriClockControl+0x13c>)
 8001410:	4293      	cmp	r3, r2
 8001412:	d105      	bne.n	8001420 <USART_PeriClockControl+0x118>
			USART6_PCLK_DI();
 8001414:	4b06      	ldr	r3, [pc, #24]	; (8001430 <USART_PeriClockControl+0x128>)
 8001416:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001418:	4a05      	ldr	r2, [pc, #20]	; (8001430 <USART_PeriClockControl+0x128>)
 800141a:	f023 0320 	bic.w	r3, r3, #32
 800141e:	6453      	str	r3, [r2, #68]	; 0x44
}
 8001420:	bf00      	nop
 8001422:	370c      	adds	r7, #12
 8001424:	46bd      	mov	sp, r7
 8001426:	bc80      	pop	{r7}
 8001428:	4770      	bx	lr
 800142a:	bf00      	nop
 800142c:	40011000 	.word	0x40011000
 8001430:	40023800 	.word	0x40023800
 8001434:	40004400 	.word	0x40004400
 8001438:	40004800 	.word	0x40004800
 800143c:	40004c00 	.word	0x40004c00
 8001440:	40005000 	.word	0x40005000
 8001444:	40011400 	.word	0x40011400

08001448 <USART_PeripheralControl>:
 * Params: 		struct USART_RegDef_t *pUSARTx - USART/UART base address
 * 				uint8_t EnOrDi - Enable or disable communication (0 or 1)
 *
 */
void USART_PeripheralControl(USART_RegDef_t *pUSARTx, uint8_t EnOrDi)
{
 8001448:	b480      	push	{r7}
 800144a:	b083      	sub	sp, #12
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
 8001450:	460b      	mov	r3, r1
 8001452:	70fb      	strb	r3, [r7, #3]
	if (EnOrDi == ENABLE)
 8001454:	78fb      	ldrb	r3, [r7, #3]
 8001456:	2b01      	cmp	r3, #1
 8001458:	d106      	bne.n	8001468 <USART_PeripheralControl+0x20>
	{
		pUSARTx->CR1 |= (1 << 13);
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	68db      	ldr	r3, [r3, #12]
 800145e:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	60da      	str	r2, [r3, #12]
	}
	else
	{
		pUSARTx->CR1 |= ~(1 << 13);
	}
}
 8001466:	e005      	b.n	8001474 <USART_PeripheralControl+0x2c>
		pUSARTx->CR1 |= ~(1 << 13);
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	68db      	ldr	r3, [r3, #12]
 800146c:	f463 5200 	orn	r2, r3, #8192	; 0x2000
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	60da      	str	r2, [r3, #12]
}
 8001474:	bf00      	nop
 8001476:	370c      	adds	r7, #12
 8001478:	46bd      	mov	sp, r7
 800147a:	bc80      	pop	{r7}
 800147c:	4770      	bx	lr

0800147e <USART_GetFlagStatus>:
 * Params: 		struct USART_RegDef_t *pUSARTx - USART base address
 * 				uint8_t USART_FLAG - flag being checked
 *
 */
uint8_t USART_GetFlagStatus(USART_RegDef_t *pUSARTx, uint8_t USART_FLAG)
{
 800147e:	b480      	push	{r7}
 8001480:	b083      	sub	sp, #12
 8001482:	af00      	add	r7, sp, #0
 8001484:	6078      	str	r0, [r7, #4]
 8001486:	460b      	mov	r3, r1
 8001488:	70fb      	strb	r3, [r7, #3]
	return (pUSARTx->SR & USART_FLAG);
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	b2da      	uxtb	r2, r3
 8001490:	78fb      	ldrb	r3, [r7, #3]
 8001492:	4013      	ands	r3, r2
 8001494:	b2db      	uxtb	r3, r3
}
 8001496:	4618      	mov	r0, r3
 8001498:	370c      	adds	r7, #12
 800149a:	46bd      	mov	sp, r7
 800149c:	bc80      	pop	{r7}
 800149e:	4770      	bx	lr

080014a0 <USART_ClearFlag>:
 * Params: 		struct USART_RegDef_t *pUSARTx - USART base address
 * 				uint8_t USART_FLAG - flag being cleared
 *
 */
void USART_ClearFlag(USART_RegDef_t *pUSARTx, uint8_t USART_FLAG)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b084      	sub	sp, #16
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
 80014a8:	460b      	mov	r3, r1
 80014aa:	70fb      	strb	r3, [r7, #3]
	int dummyRead, dummyWrite = 0xFF;
 80014ac:	23ff      	movs	r3, #255	; 0xff
 80014ae:	60fb      	str	r3, [r7, #12]

	if (USART_FLAG == USART_FLAG_PE)
 80014b0:	78fb      	ldrb	r3, [r7, #3]
 80014b2:	2b01      	cmp	r3, #1
 80014b4:	d111      	bne.n	80014da <USART_ClearFlag+0x3a>
	{
		// Clear PE by waiting for RXNE, reading from SR, writing to DR
		while (!USART_GetFlagStatus(pUSARTx, USART_FLAG_RXNE));
 80014b6:	bf00      	nop
 80014b8:	2120      	movs	r1, #32
 80014ba:	6878      	ldr	r0, [r7, #4]
 80014bc:	f7ff ffdf 	bl	800147e <USART_GetFlagStatus>
 80014c0:	4603      	mov	r3, r0
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d0f8      	beq.n	80014b8 <USART_ClearFlag+0x18>
		dummyRead = pUSARTx->SR;
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	60bb      	str	r3, [r7, #8]
		pUSARTx->DR |= dummyWrite;
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	685a      	ldr	r2, [r3, #4]
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	431a      	orrs	r2, r3
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	605a      	str	r2, [r3, #4]
		// Clear CTS by writing to 0
		pUSARTx->SR &= ~(1 << 9);
	}

	(void)dummyRead;
}
 80014d8:	e044      	b.n	8001564 <USART_ClearFlag+0xc4>
	else if (USART_FLAG == USART_FLAG_FE)
 80014da:	78fb      	ldrb	r3, [r7, #3]
 80014dc:	2b02      	cmp	r3, #2
 80014de:	d106      	bne.n	80014ee <USART_ClearFlag+0x4e>
		dummyRead = pUSARTx->SR;
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	60bb      	str	r3, [r7, #8]
		dummyRead = pUSARTx->DR;
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	685b      	ldr	r3, [r3, #4]
 80014ea:	60bb      	str	r3, [r7, #8]
}
 80014ec:	e03a      	b.n	8001564 <USART_ClearFlag+0xc4>
	else if (USART_FLAG == USART_FLAG_NF)
 80014ee:	78fb      	ldrb	r3, [r7, #3]
 80014f0:	2b04      	cmp	r3, #4
 80014f2:	d106      	bne.n	8001502 <USART_ClearFlag+0x62>
		dummyRead = pUSARTx->SR;
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	60bb      	str	r3, [r7, #8]
		dummyRead = pUSARTx->DR;
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	685b      	ldr	r3, [r3, #4]
 80014fe:	60bb      	str	r3, [r7, #8]
}
 8001500:	e030      	b.n	8001564 <USART_ClearFlag+0xc4>
	else if (USART_FLAG == USART_FLAG_ORE)
 8001502:	78fb      	ldrb	r3, [r7, #3]
 8001504:	2b08      	cmp	r3, #8
 8001506:	d106      	bne.n	8001516 <USART_ClearFlag+0x76>
		dummyRead = pUSARTx->SR;
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	60bb      	str	r3, [r7, #8]
		dummyRead = pUSARTx->DR;
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	685b      	ldr	r3, [r3, #4]
 8001512:	60bb      	str	r3, [r7, #8]
}
 8001514:	e026      	b.n	8001564 <USART_ClearFlag+0xc4>
	else if (USART_FLAG == USART_FLAG_IDLE)
 8001516:	78fb      	ldrb	r3, [r7, #3]
 8001518:	2b10      	cmp	r3, #16
 800151a:	d106      	bne.n	800152a <USART_ClearFlag+0x8a>
		dummyRead = pUSARTx->SR;
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	60bb      	str	r3, [r7, #8]
		dummyRead = pUSARTx->DR;
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	685b      	ldr	r3, [r3, #4]
 8001526:	60bb      	str	r3, [r7, #8]
}
 8001528:	e01c      	b.n	8001564 <USART_ClearFlag+0xc4>
	else if (USART_FLAG == USART_FLAG_RXNE)
 800152a:	78fb      	ldrb	r3, [r7, #3]
 800152c:	2b20      	cmp	r3, #32
 800152e:	d103      	bne.n	8001538 <USART_ClearFlag+0x98>
		dummyRead = pUSARTx->DR;
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	685b      	ldr	r3, [r3, #4]
 8001534:	60bb      	str	r3, [r7, #8]
}
 8001536:	e015      	b.n	8001564 <USART_ClearFlag+0xc4>
	else if (USART_FLAG == USART_FLAG_TC)
 8001538:	78fb      	ldrb	r3, [r7, #3]
 800153a:	2b40      	cmp	r3, #64	; 0x40
 800153c:	d109      	bne.n	8001552 <USART_ClearFlag+0xb2>
		dummyRead = pUSARTx->SR;
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	60bb      	str	r3, [r7, #8]
		pUSARTx->DR |= dummyWrite;
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	685a      	ldr	r2, [r3, #4]
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	431a      	orrs	r2, r3
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	605a      	str	r2, [r3, #4]
}
 8001550:	e008      	b.n	8001564 <USART_ClearFlag+0xc4>
	else if (USART_FLAG == USART_FLAG_TXE)
 8001552:	78fb      	ldrb	r3, [r7, #3]
 8001554:	2b80      	cmp	r3, #128	; 0x80
 8001556:	d105      	bne.n	8001564 <USART_ClearFlag+0xc4>
		pUSARTx->DR |= dummyWrite;
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	685a      	ldr	r2, [r3, #4]
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	431a      	orrs	r2, r3
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	605a      	str	r2, [r3, #4]
}
 8001564:	bf00      	nop
 8001566:	3710      	adds	r7, #16
 8001568:	46bd      	mov	sp, r7
 800156a:	bd80      	pop	{r7, pc}

0800156c <USART_SetBaudRate>:
 * Params: 		struct USART_RegDef_t *pUSARTx - USART base address
 * 				uint16_t USART_BaudRate - Baud rate to be set (bps)
 *
 */
void USART_SetBaudRate(USART_RegDef_t *pUSARTx, uint32_t USART_BaudRate)
{
 800156c:	b590      	push	{r4, r7, lr}
 800156e:	b087      	sub	sp, #28
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
 8001574:	6039      	str	r1, [r7, #0]
	uint32_t ApbClk;

	// 1. Get the peripheral clock to USART/UART
	if (pUSARTx == USART1 || pUSARTx == USART6)
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	4a49      	ldr	r2, [pc, #292]	; (80016a0 <USART_SetBaudRate+0x134>)
 800157a:	4293      	cmp	r3, r2
 800157c:	d003      	beq.n	8001586 <USART_SetBaudRate+0x1a>
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	4a48      	ldr	r2, [pc, #288]	; (80016a4 <USART_SetBaudRate+0x138>)
 8001582:	4293      	cmp	r3, r2
 8001584:	d103      	bne.n	800158e <USART_SetBaudRate+0x22>
	{
		ApbClk = RCC_GetAPB2CLK();
 8001586:	f7ff fe67 	bl	8001258 <RCC_GetAPB2CLK>
 800158a:	6178      	str	r0, [r7, #20]
 800158c:	e002      	b.n	8001594 <USART_SetBaudRate+0x28>
	}
	else
	{
		ApbClk = RCC_GetAPB1CLK();
 800158e:	f7ff fe0b 	bl	80011a8 <RCC_GetAPB1CLK>
 8001592:	6178      	str	r0, [r7, #20]
	}

	// 2. Calculate USARTDIV
	uint8_t over8 = (pUSARTx->CR1 & (1 << 15)) ? 1 : 0;
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	68db      	ldr	r3, [r3, #12]
 8001598:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800159c:	2b00      	cmp	r3, #0
 800159e:	bf14      	ite	ne
 80015a0:	2301      	movne	r3, #1
 80015a2:	2300      	moveq	r3, #0
 80015a4:	b2db      	uxtb	r3, r3
 80015a6:	73fb      	strb	r3, [r7, #15]
	float usartDiv = (ApbClk  * 100) / ((8 * (2 - over8)) * USART_BaudRate);   // Multiply hundred to get 2 decimal places
 80015a8:	697b      	ldr	r3, [r7, #20]
 80015aa:	2264      	movs	r2, #100	; 0x64
 80015ac:	fb02 f203 	mul.w	r2, r2, r3
 80015b0:	7bfb      	ldrb	r3, [r7, #15]
 80015b2:	f1c3 0302 	rsb	r3, r3, #2
 80015b6:	4619      	mov	r1, r3
 80015b8:	683b      	ldr	r3, [r7, #0]
 80015ba:	fb03 f301 	mul.w	r3, r3, r1
 80015be:	00db      	lsls	r3, r3, #3
 80015c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80015c4:	4618      	mov	r0, r3
 80015c6:	f7fe ff31 	bl	800042c <__aeabi_ui2f>
 80015ca:	4603      	mov	r3, r0
 80015cc:	60bb      	str	r3, [r7, #8]

	// 3. Calculate mantissa and fraction (See USART 25.4.4 in datasheet for formulas)
	uint16_t mantissa = usartDiv / 100;
 80015ce:	4936      	ldr	r1, [pc, #216]	; (80016a8 <USART_SetBaudRate+0x13c>)
 80015d0:	68b8      	ldr	r0, [r7, #8]
 80015d2:	f7ff f837 	bl	8000644 <__aeabi_fdiv>
 80015d6:	4603      	mov	r3, r0
 80015d8:	4618      	mov	r0, r3
 80015da:	f7ff f8cf 	bl	800077c <__aeabi_f2uiz>
 80015de:	4603      	mov	r3, r0
 80015e0:	827b      	strh	r3, [r7, #18]
	uint16_t fraction = (usartDiv - mantissa * 100) * (8 * (2 - over8));
 80015e2:	8a7b      	ldrh	r3, [r7, #18]
 80015e4:	2264      	movs	r2, #100	; 0x64
 80015e6:	fb02 f303 	mul.w	r3, r2, r3
 80015ea:	4618      	mov	r0, r3
 80015ec:	f7fe ff22 	bl	8000434 <__aeabi_i2f>
 80015f0:	4603      	mov	r3, r0
 80015f2:	4619      	mov	r1, r3
 80015f4:	68b8      	ldr	r0, [r7, #8]
 80015f6:	f7fe fe67 	bl	80002c8 <__aeabi_fsub>
 80015fa:	4603      	mov	r3, r0
 80015fc:	461c      	mov	r4, r3
 80015fe:	7bfb      	ldrb	r3, [r7, #15]
 8001600:	f1c3 0302 	rsb	r3, r3, #2
 8001604:	00db      	lsls	r3, r3, #3
 8001606:	4618      	mov	r0, r3
 8001608:	f7fe ff14 	bl	8000434 <__aeabi_i2f>
 800160c:	4603      	mov	r3, r0
 800160e:	4619      	mov	r1, r3
 8001610:	4620      	mov	r0, r4
 8001612:	f7fe ff63 	bl	80004dc <__aeabi_fmul>
 8001616:	4603      	mov	r3, r0
 8001618:	4618      	mov	r0, r3
 800161a:	f7ff f8af 	bl	800077c <__aeabi_f2uiz>
 800161e:	4603      	mov	r3, r0
 8001620:	823b      	strh	r3, [r7, #16]

	// Round fraction
	fraction = (fraction + 50) / 100;
 8001622:	8a3b      	ldrh	r3, [r7, #16]
 8001624:	3332      	adds	r3, #50	; 0x32
 8001626:	4a21      	ldr	r2, [pc, #132]	; (80016ac <USART_SetBaudRate+0x140>)
 8001628:	fb82 1203 	smull	r1, r2, r2, r3
 800162c:	1152      	asrs	r2, r2, #5
 800162e:	17db      	asrs	r3, r3, #31
 8001630:	1ad3      	subs	r3, r2, r3
 8001632:	823b      	strh	r3, [r7, #16]

	// 4. Carry over
	if (over8)
 8001634:	7bfb      	ldrb	r3, [r7, #15]
 8001636:	2b00      	cmp	r3, #0
 8001638:	d017      	beq.n	800166a <USART_SetBaudRate+0xfe>
	{
		// Fraction register is 3 bits
		if (fraction > 7)
 800163a:	8a3b      	ldrh	r3, [r7, #16]
 800163c:	2b07      	cmp	r3, #7
 800163e:	d904      	bls.n	800164a <USART_SetBaudRate+0xde>
		{
			mantissa++;
 8001640:	8a7b      	ldrh	r3, [r7, #18]
 8001642:	3301      	adds	r3, #1
 8001644:	827b      	strh	r3, [r7, #18]
			fraction = 0;
 8001646:	2300      	movs	r3, #0
 8001648:	823b      	strh	r3, [r7, #16]
		}

		pUSARTx->BRR |= (mantissa << 4);
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	689b      	ldr	r3, [r3, #8]
 800164e:	8a7a      	ldrh	r2, [r7, #18]
 8001650:	0112      	lsls	r2, r2, #4
 8001652:	431a      	orrs	r2, r3
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	609a      	str	r2, [r3, #8]
		pUSARTx->BRR |= ((fraction & 0x07) << 0);
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	689a      	ldr	r2, [r3, #8]
 800165c:	8a3b      	ldrh	r3, [r7, #16]
 800165e:	f003 0307 	and.w	r3, r3, #7
 8001662:	431a      	orrs	r2, r3
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	609a      	str	r2, [r3, #8]
		}

		pUSARTx->BRR |= (mantissa << 4);
		pUSARTx->BRR |= ((fraction & 0x0F) << 0);
	}
}
 8001668:	e016      	b.n	8001698 <USART_SetBaudRate+0x12c>
		if (fraction > 15)
 800166a:	8a3b      	ldrh	r3, [r7, #16]
 800166c:	2b0f      	cmp	r3, #15
 800166e:	d904      	bls.n	800167a <USART_SetBaudRate+0x10e>
			mantissa++;
 8001670:	8a7b      	ldrh	r3, [r7, #18]
 8001672:	3301      	adds	r3, #1
 8001674:	827b      	strh	r3, [r7, #18]
			fraction = 0;
 8001676:	2300      	movs	r3, #0
 8001678:	823b      	strh	r3, [r7, #16]
		pUSARTx->BRR |= (mantissa << 4);
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	689b      	ldr	r3, [r3, #8]
 800167e:	8a7a      	ldrh	r2, [r7, #18]
 8001680:	0112      	lsls	r2, r2, #4
 8001682:	431a      	orrs	r2, r3
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	609a      	str	r2, [r3, #8]
		pUSARTx->BRR |= ((fraction & 0x0F) << 0);
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	689a      	ldr	r2, [r3, #8]
 800168c:	8a3b      	ldrh	r3, [r7, #16]
 800168e:	f003 030f 	and.w	r3, r3, #15
 8001692:	431a      	orrs	r2, r3
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	609a      	str	r2, [r3, #8]
}
 8001698:	bf00      	nop
 800169a:	371c      	adds	r7, #28
 800169c:	46bd      	mov	sp, r7
 800169e:	bd90      	pop	{r4, r7, pc}
 80016a0:	40011000 	.word	0x40011000
 80016a4:	40011400 	.word	0x40011400
 80016a8:	42c80000 	.word	0x42c80000
 80016ac:	51eb851f 	.word	0x51eb851f

080016b0 <USART_Init>:
 *
 * Params: 		struct USART_Handle_t *pUSARTxHandle - USART peripheral handle
 *
 */
void USART_Init(USART_Handle_t *pUSARTxHandle)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b082      	sub	sp, #8
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
	// 1. Give clock signal to USART/UART bus
	USART_PeriClockControl(pUSARTxHandle->pUSARTx, ENABLE);
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	2101      	movs	r1, #1
 80016be:	4618      	mov	r0, r3
 80016c0:	f7ff fe22 	bl	8001308 <USART_PeriClockControl>

	// 2. Enable USART/UART peripheral
	USART_PeripheralControl(pUSARTxHandle->pUSARTx, ENABLE);
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	2101      	movs	r1, #1
 80016ca:	4618      	mov	r0, r3
 80016cc:	f7ff febc 	bl	8001448 <USART_PeripheralControl>

	// 3. Set the data length
	if (pUSARTxHandle->USART_Config.USART_WordLen == USART_9BIT_DATA)
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	7b5b      	ldrb	r3, [r3, #13]
 80016d4:	2b01      	cmp	r3, #1
 80016d6:	d107      	bne.n	80016e8 <USART_Init+0x38>
	{
		pUSARTxHandle->pUSARTx->CR1 |= (1 << 12);
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	68da      	ldr	r2, [r3, #12]
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80016e6:	60da      	str	r2, [r3, #12]
	}

	// 4. Parity setup
	if (pUSARTxHandle->USART_Config.USART_ParitySet != USART_PARITY_DISABLE)
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	7b9b      	ldrb	r3, [r3, #14]
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d020      	beq.n	8001732 <USART_Init+0x82>
	{
		pUSARTxHandle->pUSARTx->CR1 |= (1 << 10);
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	68da      	ldr	r2, [r3, #12]
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80016fe:	60da      	str	r2, [r3, #12]

		if (pUSARTxHandle->USART_Config.USART_ParitySet == USART_EVEN_PARITY)
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	7b9b      	ldrb	r3, [r3, #14]
 8001704:	2b01      	cmp	r3, #1
 8001706:	d108      	bne.n	800171a <USART_Init+0x6a>
		{
			pUSARTxHandle->pUSARTx->CR1 &= ~(1 << 9);
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	68da      	ldr	r2, [r3, #12]
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001716:	60da      	str	r2, [r3, #12]
 8001718:	e00b      	b.n	8001732 <USART_Init+0x82>
		}
		else if (pUSARTxHandle->USART_Config.USART_ParitySet == USART_ODD_PARITY)
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	7b9b      	ldrb	r3, [r3, #14]
 800171e:	2b02      	cmp	r3, #2
 8001720:	d107      	bne.n	8001732 <USART_Init+0x82>
		{
			pUSARTxHandle->pUSARTx->CR1 |= (1 << 9);
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	68da      	ldr	r2, [r3, #12]
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001730:	60da      	str	r2, [r3, #12]
		}
	}

	// 5. Set number of stop bits
	pUSARTxHandle->pUSARTx->CR2 &= ~(0x3 << 12);
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	691a      	ldr	r2, [r3, #16]
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8001740:	611a      	str	r2, [r3, #16]

	if (pUSARTxHandle->USART_Config.USART_StopBits == USART_HALF_STOP)
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	7b1b      	ldrb	r3, [r3, #12]
 8001746:	2b00      	cmp	r3, #0
 8001748:	d108      	bne.n	800175c <USART_Init+0xac>
	{
		pUSARTxHandle->pUSARTx->CR2 |= (1 << 12);
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	691a      	ldr	r2, [r3, #16]
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001758:	611a      	str	r2, [r3, #16]
 800175a:	e018      	b.n	800178e <USART_Init+0xde>
	}
	else if (pUSARTxHandle->USART_Config.USART_StopBits == USART_2_STOP)
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	7b1b      	ldrb	r3, [r3, #12]
 8001760:	2b03      	cmp	r3, #3
 8001762:	d108      	bne.n	8001776 <USART_Init+0xc6>
	{
		pUSARTxHandle->pUSARTx->CR2 |= (0x2 << 12);
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	691a      	ldr	r2, [r3, #16]
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001772:	611a      	str	r2, [r3, #16]
 8001774:	e00b      	b.n	800178e <USART_Init+0xde>
	}
	else if (pUSARTxHandle->USART_Config.USART_StopBits == USART_1ANDHALF_STOP)
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	7b1b      	ldrb	r3, [r3, #12]
 800177a:	2b02      	cmp	r3, #2
 800177c:	d107      	bne.n	800178e <USART_Init+0xde>
	{
		pUSARTxHandle->pUSARTx->CR2 |= (0x3 << 12);
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	691a      	ldr	r2, [r3, #16]
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	f442 5240 	orr.w	r2, r2, #12288	; 0x3000
 800178c:	611a      	str	r2, [r3, #16]
	}

	// 6. Set over sampling mode
	if (pUSARTxHandle->USART_Config.USART_Oversampling == USART_OVERSMPL_8)
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	7c1b      	ldrb	r3, [r3, #16]
 8001792:	2b01      	cmp	r3, #1
 8001794:	d108      	bne.n	80017a8 <USART_Init+0xf8>
	{
		pUSARTxHandle->pUSARTx->CR1 |= (1 << 15);
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	68da      	ldr	r2, [r3, #12]
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80017a4:	60da      	str	r2, [r3, #12]
 80017a6:	e007      	b.n	80017b8 <USART_Init+0x108>
	}
	else
	{
		pUSARTxHandle->pUSARTx->CR1 &= ~(1 << 15);
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	68da      	ldr	r2, [r3, #12]
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80017b6:	60da      	str	r2, [r3, #12]
	}

	// 7. Set baud rate
	USART_SetBaudRate(pUSARTxHandle->pUSARTx, pUSARTxHandle->USART_Config.USART_BaudRate);
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681a      	ldr	r2, [r3, #0]
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	689b      	ldr	r3, [r3, #8]
 80017c0:	4619      	mov	r1, r3
 80017c2:	4610      	mov	r0, r2
 80017c4:	f7ff fed2 	bl	800156c <USART_SetBaudRate>

	// 8. Set Tx/Rx mode
	if (pUSARTxHandle->USART_Config.USART_Mode == USART_RX_ONLY)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	791b      	ldrb	r3, [r3, #4]
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d108      	bne.n	80017e2 <USART_Init+0x132>
	{
		pUSARTxHandle->pUSARTx->CR1 |= (1 << 2);
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	68da      	ldr	r2, [r3, #12]
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f042 0204 	orr.w	r2, r2, #4
 80017de:	60da      	str	r2, [r3, #12]
 80017e0:	e018      	b.n	8001814 <USART_Init+0x164>
	}
	else if (pUSARTxHandle->USART_Config.USART_Mode == USART_TX_ONLY)
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	791b      	ldrb	r3, [r3, #4]
 80017e6:	2b01      	cmp	r3, #1
 80017e8:	d108      	bne.n	80017fc <USART_Init+0x14c>
	{
		pUSARTxHandle->pUSARTx->CR1 |= (1 << 3);
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	68da      	ldr	r2, [r3, #12]
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	f042 0208 	orr.w	r2, r2, #8
 80017f8:	60da      	str	r2, [r3, #12]
 80017fa:	e00b      	b.n	8001814 <USART_Init+0x164>
	}
	else if (pUSARTxHandle->USART_Config.USART_Mode == USART_RX_TX)
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	791b      	ldrb	r3, [r3, #4]
 8001800:	2b02      	cmp	r3, #2
 8001802:	d107      	bne.n	8001814 <USART_Init+0x164>
	{
		pUSARTxHandle->pUSARTx->CR1 |= (1 << 3) | (1 << 2);
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	68da      	ldr	r2, [r3, #12]
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	f042 020c 	orr.w	r2, r2, #12
 8001812:	60da      	str	r2, [r3, #12]
	}

	// 9. Hardware flow control setup
	pUSARTxHandle->pUSARTx->CR2 &= ~(0x3 << 8);
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	691a      	ldr	r2, [r3, #16]
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8001822:	611a      	str	r2, [r3, #16]

	if (pUSARTxHandle->USART_Config.USART_HWFlowCtrl == USART_RTS_ON)
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	7bdb      	ldrb	r3, [r3, #15]
 8001828:	2b01      	cmp	r3, #1
 800182a:	d108      	bne.n	800183e <USART_Init+0x18e>
	{
		pUSARTxHandle->pUSARTx->CR3 |= (1 << 8);
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	695a      	ldr	r2, [r3, #20]
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800183a:	615a      	str	r2, [r3, #20]
	}
	else if (pUSARTxHandle->USART_Config.USART_HWFlowCtrl == USART_RTS_CTS_ON)
	{
		pUSARTxHandle->pUSARTx->CR3 |= (0x3 << 8);
	}
}
 800183c:	e018      	b.n	8001870 <USART_Init+0x1c0>
	else if (pUSARTxHandle->USART_Config.USART_HWFlowCtrl == USART_CTS_ON)
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	7bdb      	ldrb	r3, [r3, #15]
 8001842:	2b02      	cmp	r3, #2
 8001844:	d108      	bne.n	8001858 <USART_Init+0x1a8>
		pUSARTxHandle->pUSARTx->CR3 |= (1 << 9);
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	695a      	ldr	r2, [r3, #20]
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001854:	615a      	str	r2, [r3, #20]
}
 8001856:	e00b      	b.n	8001870 <USART_Init+0x1c0>
	else if (pUSARTxHandle->USART_Config.USART_HWFlowCtrl == USART_RTS_CTS_ON)
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	7bdb      	ldrb	r3, [r3, #15]
 800185c:	2b03      	cmp	r3, #3
 800185e:	d107      	bne.n	8001870 <USART_Init+0x1c0>
		pUSARTxHandle->pUSARTx->CR3 |= (0x3 << 8);
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	695a      	ldr	r2, [r3, #20]
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 800186e:	615a      	str	r2, [r3, #20]
}
 8001870:	bf00      	nop
 8001872:	3708      	adds	r7, #8
 8001874:	46bd      	mov	sp, r7
 8001876:	bd80      	pop	{r7, pc}

08001878 <USART_Write>:
 * 				uint8_t* pTxBuffer - pointer to location of data to send
 * 				uint32_t len - number of 8-bit data packets to be sent
 *
 */
void USART_Write(USART_Handle_t *pUSARTxHandle, uint8_t *pTxBuffer, uint8_t len)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b084      	sub	sp, #16
 800187c:	af00      	add	r7, sp, #0
 800187e:	60f8      	str	r0, [r7, #12]
 8001880:	60b9      	str	r1, [r7, #8]
 8001882:	4613      	mov	r3, r2
 8001884:	71fb      	strb	r3, [r7, #7]
	while (len > 0)
 8001886:	e030      	b.n	80018ea <USART_Write+0x72>
	{
		// 1. Send start with TE
		pUSARTxHandle->pUSARTx->CR1 |= (1 << 3);
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	68da      	ldr	r2, [r3, #12]
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	f042 0208 	orr.w	r2, r2, #8
 8001896:	60da      	str	r2, [r3, #12]

		// 2. Wait for TXE flag
		while(!USART_GetFlagStatus(pUSARTxHandle->pUSARTx, USART_FLAG_TXE));
 8001898:	bf00      	nop
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	2180      	movs	r1, #128	; 0x80
 80018a0:	4618      	mov	r0, r3
 80018a2:	f7ff fdec 	bl	800147e <USART_GetFlagStatus>
 80018a6:	4603      	mov	r3, r0
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d0f6      	beq.n	800189a <USART_Write+0x22>

		// 3. Write data (how many bits depends on word length and parity)
		if (pUSARTxHandle->USART_Config.USART_WordLen == USART_9BIT_DATA)
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	7b5b      	ldrb	r3, [r3, #13]
 80018b0:	2b01      	cmp	r3, #1
 80018b2:	d10f      	bne.n	80018d4 <USART_Write+0x5c>
		{
			// Send 9 bits of data
			pUSARTxHandle->pUSARTx->DR = (uint16_t)(*pTxBuffer) & (0x01FF);
 80018b4:	68bb      	ldr	r3, [r7, #8]
 80018b6:	781a      	ldrb	r2, [r3, #0]
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	605a      	str	r2, [r3, #4]

			// If parity disabled, 9 bits of useful data sent - increment data buffer accordingly
			if (pUSARTxHandle->USART_Config.USART_ParitySet == USART_PARITY_DISABLE)
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	7b9b      	ldrb	r3, [r3, #14]
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d10b      	bne.n	80018de <USART_Write+0x66>
			{
				pTxBuffer++;
 80018c6:	68bb      	ldr	r3, [r7, #8]
 80018c8:	3301      	adds	r3, #1
 80018ca:	60bb      	str	r3, [r7, #8]
				len--;
 80018cc:	79fb      	ldrb	r3, [r7, #7]
 80018ce:	3b01      	subs	r3, #1
 80018d0:	71fb      	strb	r3, [r7, #7]
 80018d2:	e004      	b.n	80018de <USART_Write+0x66>
			}
		}
		else
		{
			pUSARTxHandle->pUSARTx->DR = *pTxBuffer;
 80018d4:	68bb      	ldr	r3, [r7, #8]
 80018d6:	781a      	ldrb	r2, [r3, #0]
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	605a      	str	r2, [r3, #4]
		}

		pTxBuffer++;
 80018de:	68bb      	ldr	r3, [r7, #8]
 80018e0:	3301      	adds	r3, #1
 80018e2:	60bb      	str	r3, [r7, #8]
		len--;
 80018e4:	79fb      	ldrb	r3, [r7, #7]
 80018e6:	3b01      	subs	r3, #1
 80018e8:	71fb      	strb	r3, [r7, #7]
	while (len > 0)
 80018ea:	79fb      	ldrb	r3, [r7, #7]
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d1cb      	bne.n	8001888 <USART_Write+0x10>
	}

	// 4. Wait for TC flag to indicate transmission complete
	while(!USART_GetFlagStatus(pUSARTxHandle->pUSARTx, USART_FLAG_TC));
 80018f0:	bf00      	nop
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	2140      	movs	r1, #64	; 0x40
 80018f8:	4618      	mov	r0, r3
 80018fa:	f7ff fdc0 	bl	800147e <USART_GetFlagStatus>
 80018fe:	4603      	mov	r3, r0
 8001900:	2b00      	cmp	r3, #0
 8001902:	d0f6      	beq.n	80018f2 <USART_Write+0x7a>

	// 5. Clear the TC bit
	USART_ClearFlag(pUSARTxHandle->pUSARTx, USART_FLAG_TC);
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	2140      	movs	r1, #64	; 0x40
 800190a:	4618      	mov	r0, r3
 800190c:	f7ff fdc8 	bl	80014a0 <USART_ClearFlag>

	// 6. End transmission by clearing TE
	pUSARTxHandle->pUSARTx->CR1 &= ~(1 << 3);
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	68da      	ldr	r2, [r3, #12]
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f022 0208 	bic.w	r2, r2, #8
 800191e:	60da      	str	r2, [r3, #12]
}
 8001920:	bf00      	nop
 8001922:	3710      	adds	r7, #16
 8001924:	46bd      	mov	sp, r7
 8001926:	bd80      	pop	{r7, pc}

08001928 <GPIO_AI_Init>:
USART_Handle_t Usart_Handle;



/* Initialize the GPIO Pin for ADC input */
void GPIO_AI_Init() {
 8001928:	b580      	push	{r7, lr}
 800192a:	b084      	sub	sp, #16
 800192c:	af00      	add	r7, sp, #0
	// Initialization of LED driving GPIO
	GPIO_Handle_t GpioAI;

	GpioAI.pGPIOx = GPIOA;
 800192e:	4b0a      	ldr	r3, [pc, #40]	; (8001958 <GPIO_AI_Init+0x30>)
 8001930:	607b      	str	r3, [r7, #4]

	GpioAI.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NUM_0;
 8001932:	2300      	movs	r3, #0
 8001934:	723b      	strb	r3, [r7, #8]
	GpioAI.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ANALOG;
 8001936:	2303      	movs	r3, #3
 8001938:	727b      	strb	r3, [r7, #9]
	GpioAI.GPIO_PinConfig.GPIO_OpType = GPIO_OTYPE_PUPL;
 800193a:	2300      	movs	r3, #0
 800193c:	733b      	strb	r3, [r7, #12]
	GpioAI.GPIO_PinConfig.GPIO_PinSpeed = GPIO_HIGH_SPEED;
 800193e:	2303      	movs	r3, #3
 8001940:	72bb      	strb	r3, [r7, #10]
	GpioAI.GPIO_PinConfig.GPIO_PuPdCtrl = GPIO_PUPD_NONE;
 8001942:	2300      	movs	r3, #0
 8001944:	72fb      	strb	r3, [r7, #11]

	GPIO_Init(&GpioAI);
 8001946:	1d3b      	adds	r3, r7, #4
 8001948:	4618      	mov	r0, r3
 800194a:	f7ff facf 	bl	8000eec <GPIO_Init>
}
 800194e:	bf00      	nop
 8001950:	3710      	adds	r7, #16
 8001952:	46bd      	mov	sp, r7
 8001954:	bd80      	pop	{r7, pc}
 8001956:	bf00      	nop
 8001958:	40020000 	.word	0x40020000

0800195c <GPIO_USART_Config>:

/*
 * Set GPIO pins PA2 and PA3 as USART2 functions
 */
void GPIO_USART_Config()
{
 800195c:	b580      	push	{r7, lr}
 800195e:	b084      	sub	sp, #16
 8001960:	af00      	add	r7, sp, #0
	GPIO_Handle_t Gpio_usartHandle;

	Gpio_usartHandle.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_AF;
 8001962:	2302      	movs	r3, #2
 8001964:	727b      	strb	r3, [r7, #9]
	Gpio_usartHandle.GPIO_PinConfig.GPIO_PuPdCtrl = GPIO_PUPD_PU;
 8001966:	2301      	movs	r3, #1
 8001968:	72fb      	strb	r3, [r7, #11]
	Gpio_usartHandle.GPIO_PinConfig.GPIO_OpType = GPIO_OTYPE_PUPL;
 800196a:	2300      	movs	r3, #0
 800196c:	733b      	strb	r3, [r7, #12]
	Gpio_usartHandle.GPIO_PinConfig.GPIO_PinSpeed = GPIO_HIGH_SPEED;
 800196e:	2303      	movs	r3, #3
 8001970:	72bb      	strb	r3, [r7, #10]
	Gpio_usartHandle.GPIO_PinConfig.GPIO_AfMode = GPIO_AF_7;
 8001972:	2307      	movs	r3, #7
 8001974:	737b      	strb	r3, [r7, #13]
	Gpio_usartHandle.pGPIOx = GPIOA;
 8001976:	4b09      	ldr	r3, [pc, #36]	; (800199c <GPIO_USART_Config+0x40>)
 8001978:	607b      	str	r3, [r7, #4]

	// Set PA2 as USART2 Tx
	Gpio_usartHandle.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NUM_2;
 800197a:	2302      	movs	r3, #2
 800197c:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&Gpio_usartHandle);
 800197e:	1d3b      	adds	r3, r7, #4
 8001980:	4618      	mov	r0, r3
 8001982:	f7ff fab3 	bl	8000eec <GPIO_Init>

	// Set PA3 as USART2 Rx
	Gpio_usartHandle.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NUM_3;
 8001986:	2303      	movs	r3, #3
 8001988:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&Gpio_usartHandle);
 800198a:	1d3b      	adds	r3, r7, #4
 800198c:	4618      	mov	r0, r3
 800198e:	f7ff faad 	bl	8000eec <GPIO_Init>
}
 8001992:	bf00      	nop
 8001994:	3710      	adds	r7, #16
 8001996:	46bd      	mov	sp, r7
 8001998:	bd80      	pop	{r7, pc}
 800199a:	bf00      	nop
 800199c:	40020000 	.word	0x40020000

080019a0 <USART2_Config>:

/*
 * Configure USART2 in Tx mode only
 */
void USART2_Config()
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	af00      	add	r7, sp, #0
	Usart_Handle.USART_Config.USART_Mode = USART_TX_ONLY;
 80019a4:	4b0e      	ldr	r3, [pc, #56]	; (80019e0 <USART2_Config+0x40>)
 80019a6:	2201      	movs	r2, #1
 80019a8:	711a      	strb	r2, [r3, #4]
	Usart_Handle.USART_Config.USART_BaudRate = USART_BAUD_9600;
 80019aa:	4b0d      	ldr	r3, [pc, #52]	; (80019e0 <USART2_Config+0x40>)
 80019ac:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80019b0:	609a      	str	r2, [r3, #8]
	Usart_Handle.USART_Config.USART_ParitySet = USART_PARITY_DISABLE;
 80019b2:	4b0b      	ldr	r3, [pc, #44]	; (80019e0 <USART2_Config+0x40>)
 80019b4:	2200      	movs	r2, #0
 80019b6:	739a      	strb	r2, [r3, #14]
	Usart_Handle.USART_Config.USART_StopBits = USART_1_STOP;
 80019b8:	4b09      	ldr	r3, [pc, #36]	; (80019e0 <USART2_Config+0x40>)
 80019ba:	2201      	movs	r2, #1
 80019bc:	731a      	strb	r2, [r3, #12]
	Usart_Handle.USART_Config.USART_WordLen = USART_8BIT_DATA;
 80019be:	4b08      	ldr	r3, [pc, #32]	; (80019e0 <USART2_Config+0x40>)
 80019c0:	2200      	movs	r2, #0
 80019c2:	735a      	strb	r2, [r3, #13]
	Usart_Handle.USART_Config.USART_Oversampling = USART_OVERSMPL_8;
 80019c4:	4b06      	ldr	r3, [pc, #24]	; (80019e0 <USART2_Config+0x40>)
 80019c6:	2201      	movs	r2, #1
 80019c8:	741a      	strb	r2, [r3, #16]
	Usart_Handle.USART_Config.USART_HWFlowCtrl = USART_HWCTRL_NONE;
 80019ca:	4b05      	ldr	r3, [pc, #20]	; (80019e0 <USART2_Config+0x40>)
 80019cc:	2200      	movs	r2, #0
 80019ce:	73da      	strb	r2, [r3, #15]
	Usart_Handle.pUSARTx = USART2;
 80019d0:	4b03      	ldr	r3, [pc, #12]	; (80019e0 <USART2_Config+0x40>)
 80019d2:	4a04      	ldr	r2, [pc, #16]	; (80019e4 <USART2_Config+0x44>)
 80019d4:	601a      	str	r2, [r3, #0]

	USART_Init(&Usart_Handle);
 80019d6:	4802      	ldr	r0, [pc, #8]	; (80019e0 <USART2_Config+0x40>)
 80019d8:	f7ff fe6a 	bl	80016b0 <USART_Init>
}
 80019dc:	bf00      	nop
 80019de:	bd80      	pop	{r7, pc}
 80019e0:	200000b8 	.word	0x200000b8
 80019e4:	40004400 	.word	0x40004400

080019e8 <ADC1_In_Init>:


/* Initialize ADC1 for 12-bit readings */
void ADC1_In_Init() {
 80019e8:	b580      	push	{r7, lr}
 80019ea:	af00      	add	r7, sp, #0
	Adc_Input.pADCx = ADC1;
 80019ec:	4b06      	ldr	r3, [pc, #24]	; (8001a08 <ADC1_In_Init+0x20>)
 80019ee:	4a07      	ldr	r2, [pc, #28]	; (8001a0c <ADC1_In_Init+0x24>)
 80019f0:	601a      	str	r2, [r3, #0]

	Adc_Input.ADC_Config.ADC_Res = ADC_RES_12BIT;
 80019f2:	4b05      	ldr	r3, [pc, #20]	; (8001a08 <ADC1_In_Init+0x20>)
 80019f4:	2200      	movs	r2, #0
 80019f6:	711a      	strb	r2, [r3, #4]
	Adc_Input.ADC_Config.ADC_PreSc = ADC_PCLK_DIV2;
 80019f8:	4b03      	ldr	r3, [pc, #12]	; (8001a08 <ADC1_In_Init+0x20>)
 80019fa:	2200      	movs	r2, #0
 80019fc:	715a      	strb	r2, [r3, #5]

	ADC_Init(&Adc_Input);
 80019fe:	4802      	ldr	r0, [pc, #8]	; (8001a08 <ADC1_In_Init+0x20>)
 8001a00:	f7fe ff50 	bl	80008a4 <ADC_Init>
}
 8001a04:	bf00      	nop
 8001a06:	bd80      	pop	{r7, pc}
 8001a08:	200000a4 	.word	0x200000a4
 8001a0c:	40012000 	.word	0x40012000

08001a10 <DMA2_Init>:

/* Initialize DMA2 stream 0 to channel 0 for ADC1 */
void DMA2_Init() {
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b086      	sub	sp, #24
 8001a14:	af00      	add	r7, sp, #0
	DMA_Handle_t Dma_adcHandle;

	Dma_adcHandle.pDMAx = DMA2;
 8001a16:	4b0c      	ldr	r3, [pc, #48]	; (8001a48 <DMA2_Init+0x38>)
 8001a18:	607b      	str	r3, [r7, #4]
	Dma_adcHandle.DMA_Stream = DMA_STREAM_0;
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	753b      	strb	r3, [r7, #20]

	Dma_adcHandle.DMA_Config.DMA_Channel = DMA_CHANNEL_0;
 8001a1e:	2300      	movs	r3, #0
 8001a20:	723b      	strb	r3, [r7, #8]
	Dma_adcHandle.DMA_Config.DMA_Dir = DMA_PERIPH_TO_MEM;
 8001a22:	2300      	movs	r3, #0
 8001a24:	727b      	strb	r3, [r7, #9]
	Dma_adcHandle.DMA_Config.DMA_PeriphInc = DMA_PERIPH_NO_INC;
 8001a26:	2300      	movs	r3, #0
 8001a28:	72bb      	strb	r3, [r7, #10]
	Dma_adcHandle.DMA_Config.DMA_MemDataSize = DMA_DATASIZE_HALFWORD;
 8001a2a:	2301      	movs	r3, #1
 8001a2c:	737b      	strb	r3, [r7, #13]
	Dma_adcHandle.DMA_Config.DMA_PeriphDataSize = DMA_DATASIZE_HALFWORD;
 8001a2e:	2301      	movs	r3, #1
 8001a30:	733b      	strb	r3, [r7, #12]
	Dma_adcHandle.DMA_Config.DMA_FIFOMode = DMA_DIRECT_EN;
 8001a32:	2300      	movs	r3, #0
 8001a34:	743b      	strb	r3, [r7, #16]

	DMA_Init(&Dma_adcHandle);
 8001a36:	1d3b      	adds	r3, r7, #4
 8001a38:	4618      	mov	r0, r3
 8001a3a:	f7fe ffd7 	bl	80009ec <DMA_Init>
}
 8001a3e:	bf00      	nop
 8001a40:	3718      	adds	r7, #24
 8001a42:	46bd      	mov	sp, r7
 8001a44:	bd80      	pop	{r7, pc}
 8001a46:	bf00      	nop
 8001a48:	40026400 	.word	0x40026400

08001a4c <main>:


int main(void) {
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b08e      	sub	sp, #56	; 0x38
 8001a50:	af00      	add	r7, sp, #0
	/* Initialize GPIO PA0 as AI */
	GPIO_AI_Init();
 8001a52:	f7ff ff69 	bl	8001928 <GPIO_AI_Init>

	/* Configure GPIO to USART2 and initialize USART2 Tx */
	GPIO_USART_Config();
 8001a56:	f7ff ff81 	bl	800195c <GPIO_USART_Config>
	USART2_Config();
 8001a5a:	f7ff ffa1 	bl	80019a0 <USART2_Config>

	/* Initialize ADC1 */
	ADC1_In_Init();
 8001a5e:	f7ff ffc3 	bl	80019e8 <ADC1_In_Init>

	/* Initialize DMA to transfer from ADC DR to data variable */
	DMA2_Init();
 8001a62:	f7ff ffd5 	bl	8001a10 <DMA2_Init>

	/* Variable for DMA to transfer to */
	uint16_t data = 0;
 8001a66:	2300      	movs	r3, #0
 8001a68:	86fb      	strh	r3, [r7, #54]	; 0x36

	while(1) {
		/* Read data */
		ADC_Read_Reg(&Adc_Input, ADC_IN0, ADC_SMP_3CYC);
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	2100      	movs	r1, #0
 8001a6e:	480a      	ldr	r0, [pc, #40]	; (8001a98 <main+0x4c>)
 8001a70:	f7fe ff4e 	bl	8000910 <ADC_Read_Reg>

		/* Output to USART2 */
		char output[50];
		sprintf(output, "ADC output is: [%i]\r\n", data);
 8001a74:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8001a76:	1d3b      	adds	r3, r7, #4
 8001a78:	4908      	ldr	r1, [pc, #32]	; (8001a9c <main+0x50>)
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	f000 f892 	bl	8001ba4 <siprintf>
		USART_Write(&Usart_Handle, (uint8_t*)output, strlen(output));
 8001a80:	1d3b      	adds	r3, r7, #4
 8001a82:	4618      	mov	r0, r3
 8001a84:	f7fe fbc4 	bl	8000210 <strlen>
 8001a88:	4603      	mov	r3, r0
 8001a8a:	b2da      	uxtb	r2, r3
 8001a8c:	1d3b      	adds	r3, r7, #4
 8001a8e:	4619      	mov	r1, r3
 8001a90:	4803      	ldr	r0, [pc, #12]	; (8001aa0 <main+0x54>)
 8001a92:	f7ff fef1 	bl	8001878 <USART_Write>
	while(1) {
 8001a96:	e7e8      	b.n	8001a6a <main+0x1e>
 8001a98:	200000a4 	.word	0x200000a4
 8001a9c:	080023c8 	.word	0x080023c8
 8001aa0:	200000b8 	.word	0x200000b8

08001aa4 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b084      	sub	sp, #16
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001aac:	4b11      	ldr	r3, [pc, #68]	; (8001af4 <_sbrk+0x50>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d102      	bne.n	8001aba <_sbrk+0x16>
		heap_end = &end;
 8001ab4:	4b0f      	ldr	r3, [pc, #60]	; (8001af4 <_sbrk+0x50>)
 8001ab6:	4a10      	ldr	r2, [pc, #64]	; (8001af8 <_sbrk+0x54>)
 8001ab8:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8001aba:	4b0e      	ldr	r3, [pc, #56]	; (8001af4 <_sbrk+0x50>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001ac0:	4b0c      	ldr	r3, [pc, #48]	; (8001af4 <_sbrk+0x50>)
 8001ac2:	681a      	ldr	r2, [r3, #0]
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	4413      	add	r3, r2
 8001ac8:	466a      	mov	r2, sp
 8001aca:	4293      	cmp	r3, r2
 8001acc:	d907      	bls.n	8001ade <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8001ace:	f000 f83f 	bl	8001b50 <__errno>
 8001ad2:	4602      	mov	r2, r0
 8001ad4:	230c      	movs	r3, #12
 8001ad6:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8001ad8:	f04f 33ff 	mov.w	r3, #4294967295
 8001adc:	e006      	b.n	8001aec <_sbrk+0x48>
	}

	heap_end += incr;
 8001ade:	4b05      	ldr	r3, [pc, #20]	; (8001af4 <_sbrk+0x50>)
 8001ae0:	681a      	ldr	r2, [r3, #0]
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	4413      	add	r3, r2
 8001ae6:	4a03      	ldr	r2, [pc, #12]	; (8001af4 <_sbrk+0x50>)
 8001ae8:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8001aea:	68fb      	ldr	r3, [r7, #12]
}
 8001aec:	4618      	mov	r0, r3
 8001aee:	3710      	adds	r7, #16
 8001af0:	46bd      	mov	sp, r7
 8001af2:	bd80      	pop	{r7, pc}
 8001af4:	20000098 	.word	0x20000098
 8001af8:	200000e8 	.word	0x200000e8

08001afc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001afc:	480d      	ldr	r0, [pc, #52]	; (8001b34 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001afe:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001b00:	480d      	ldr	r0, [pc, #52]	; (8001b38 <LoopForever+0x6>)
  ldr r1, =_edata
 8001b02:	490e      	ldr	r1, [pc, #56]	; (8001b3c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001b04:	4a0e      	ldr	r2, [pc, #56]	; (8001b40 <LoopForever+0xe>)
  movs r3, #0
 8001b06:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b08:	e002      	b.n	8001b10 <LoopCopyDataInit>

08001b0a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b0a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b0c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b0e:	3304      	adds	r3, #4

08001b10 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b10:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b12:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b14:	d3f9      	bcc.n	8001b0a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b16:	4a0b      	ldr	r2, [pc, #44]	; (8001b44 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001b18:	4c0b      	ldr	r4, [pc, #44]	; (8001b48 <LoopForever+0x16>)
  movs r3, #0
 8001b1a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b1c:	e001      	b.n	8001b22 <LoopFillZerobss>

08001b1e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b1e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b20:	3204      	adds	r2, #4

08001b22 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b22:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b24:	d3fb      	bcc.n	8001b1e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001b26:	f3af 8000 	nop.w
/* Call static constructors */
  bl __libc_init_array
 8001b2a:	f000 f817 	bl	8001b5c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001b2e:	f7ff ff8d 	bl	8001a4c <main>

08001b32 <LoopForever>:

LoopForever:
    b LoopForever
 8001b32:	e7fe      	b.n	8001b32 <LoopForever>
  ldr   r0, =_estack
 8001b34:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001b38:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b3c:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8001b40:	0800241c 	.word	0x0800241c
  ldr r2, =_sbss
 8001b44:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8001b48:	200000e4 	.word	0x200000e4

08001b4c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001b4c:	e7fe      	b.n	8001b4c <ADC_IRQHandler>
	...

08001b50 <__errno>:
 8001b50:	4b01      	ldr	r3, [pc, #4]	; (8001b58 <__errno+0x8>)
 8001b52:	6818      	ldr	r0, [r3, #0]
 8001b54:	4770      	bx	lr
 8001b56:	bf00      	nop
 8001b58:	20000018 	.word	0x20000018

08001b5c <__libc_init_array>:
 8001b5c:	b570      	push	{r4, r5, r6, lr}
 8001b5e:	4e0d      	ldr	r6, [pc, #52]	; (8001b94 <__libc_init_array+0x38>)
 8001b60:	4c0d      	ldr	r4, [pc, #52]	; (8001b98 <__libc_init_array+0x3c>)
 8001b62:	1ba4      	subs	r4, r4, r6
 8001b64:	10a4      	asrs	r4, r4, #2
 8001b66:	2500      	movs	r5, #0
 8001b68:	42a5      	cmp	r5, r4
 8001b6a:	d109      	bne.n	8001b80 <__libc_init_array+0x24>
 8001b6c:	4e0b      	ldr	r6, [pc, #44]	; (8001b9c <__libc_init_array+0x40>)
 8001b6e:	4c0c      	ldr	r4, [pc, #48]	; (8001ba0 <__libc_init_array+0x44>)
 8001b70:	f000 fc1e 	bl	80023b0 <_init>
 8001b74:	1ba4      	subs	r4, r4, r6
 8001b76:	10a4      	asrs	r4, r4, #2
 8001b78:	2500      	movs	r5, #0
 8001b7a:	42a5      	cmp	r5, r4
 8001b7c:	d105      	bne.n	8001b8a <__libc_init_array+0x2e>
 8001b7e:	bd70      	pop	{r4, r5, r6, pc}
 8001b80:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001b84:	4798      	blx	r3
 8001b86:	3501      	adds	r5, #1
 8001b88:	e7ee      	b.n	8001b68 <__libc_init_array+0xc>
 8001b8a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001b8e:	4798      	blx	r3
 8001b90:	3501      	adds	r5, #1
 8001b92:	e7f2      	b.n	8001b7a <__libc_init_array+0x1e>
 8001b94:	08002414 	.word	0x08002414
 8001b98:	08002414 	.word	0x08002414
 8001b9c:	08002414 	.word	0x08002414
 8001ba0:	08002418 	.word	0x08002418

08001ba4 <siprintf>:
 8001ba4:	b40e      	push	{r1, r2, r3}
 8001ba6:	b500      	push	{lr}
 8001ba8:	b09c      	sub	sp, #112	; 0x70
 8001baa:	ab1d      	add	r3, sp, #116	; 0x74
 8001bac:	9002      	str	r0, [sp, #8]
 8001bae:	9006      	str	r0, [sp, #24]
 8001bb0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8001bb4:	4809      	ldr	r0, [pc, #36]	; (8001bdc <siprintf+0x38>)
 8001bb6:	9107      	str	r1, [sp, #28]
 8001bb8:	9104      	str	r1, [sp, #16]
 8001bba:	4909      	ldr	r1, [pc, #36]	; (8001be0 <siprintf+0x3c>)
 8001bbc:	f853 2b04 	ldr.w	r2, [r3], #4
 8001bc0:	9105      	str	r1, [sp, #20]
 8001bc2:	6800      	ldr	r0, [r0, #0]
 8001bc4:	9301      	str	r3, [sp, #4]
 8001bc6:	a902      	add	r1, sp, #8
 8001bc8:	f000 f866 	bl	8001c98 <_svfiprintf_r>
 8001bcc:	9b02      	ldr	r3, [sp, #8]
 8001bce:	2200      	movs	r2, #0
 8001bd0:	701a      	strb	r2, [r3, #0]
 8001bd2:	b01c      	add	sp, #112	; 0x70
 8001bd4:	f85d eb04 	ldr.w	lr, [sp], #4
 8001bd8:	b003      	add	sp, #12
 8001bda:	4770      	bx	lr
 8001bdc:	20000018 	.word	0x20000018
 8001be0:	ffff0208 	.word	0xffff0208

08001be4 <__ssputs_r>:
 8001be4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001be8:	688e      	ldr	r6, [r1, #8]
 8001bea:	429e      	cmp	r6, r3
 8001bec:	4682      	mov	sl, r0
 8001bee:	460c      	mov	r4, r1
 8001bf0:	4690      	mov	r8, r2
 8001bf2:	4699      	mov	r9, r3
 8001bf4:	d837      	bhi.n	8001c66 <__ssputs_r+0x82>
 8001bf6:	898a      	ldrh	r2, [r1, #12]
 8001bf8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8001bfc:	d031      	beq.n	8001c62 <__ssputs_r+0x7e>
 8001bfe:	6825      	ldr	r5, [r4, #0]
 8001c00:	6909      	ldr	r1, [r1, #16]
 8001c02:	1a6f      	subs	r7, r5, r1
 8001c04:	6965      	ldr	r5, [r4, #20]
 8001c06:	2302      	movs	r3, #2
 8001c08:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8001c0c:	fb95 f5f3 	sdiv	r5, r5, r3
 8001c10:	f109 0301 	add.w	r3, r9, #1
 8001c14:	443b      	add	r3, r7
 8001c16:	429d      	cmp	r5, r3
 8001c18:	bf38      	it	cc
 8001c1a:	461d      	movcc	r5, r3
 8001c1c:	0553      	lsls	r3, r2, #21
 8001c1e:	d530      	bpl.n	8001c82 <__ssputs_r+0x9e>
 8001c20:	4629      	mov	r1, r5
 8001c22:	f000 fb2b 	bl	800227c <_malloc_r>
 8001c26:	4606      	mov	r6, r0
 8001c28:	b950      	cbnz	r0, 8001c40 <__ssputs_r+0x5c>
 8001c2a:	230c      	movs	r3, #12
 8001c2c:	f8ca 3000 	str.w	r3, [sl]
 8001c30:	89a3      	ldrh	r3, [r4, #12]
 8001c32:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001c36:	81a3      	strh	r3, [r4, #12]
 8001c38:	f04f 30ff 	mov.w	r0, #4294967295
 8001c3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001c40:	463a      	mov	r2, r7
 8001c42:	6921      	ldr	r1, [r4, #16]
 8001c44:	f000 faa8 	bl	8002198 <memcpy>
 8001c48:	89a3      	ldrh	r3, [r4, #12]
 8001c4a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8001c4e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c52:	81a3      	strh	r3, [r4, #12]
 8001c54:	6126      	str	r6, [r4, #16]
 8001c56:	6165      	str	r5, [r4, #20]
 8001c58:	443e      	add	r6, r7
 8001c5a:	1bed      	subs	r5, r5, r7
 8001c5c:	6026      	str	r6, [r4, #0]
 8001c5e:	60a5      	str	r5, [r4, #8]
 8001c60:	464e      	mov	r6, r9
 8001c62:	454e      	cmp	r6, r9
 8001c64:	d900      	bls.n	8001c68 <__ssputs_r+0x84>
 8001c66:	464e      	mov	r6, r9
 8001c68:	4632      	mov	r2, r6
 8001c6a:	4641      	mov	r1, r8
 8001c6c:	6820      	ldr	r0, [r4, #0]
 8001c6e:	f000 fa9e 	bl	80021ae <memmove>
 8001c72:	68a3      	ldr	r3, [r4, #8]
 8001c74:	1b9b      	subs	r3, r3, r6
 8001c76:	60a3      	str	r3, [r4, #8]
 8001c78:	6823      	ldr	r3, [r4, #0]
 8001c7a:	441e      	add	r6, r3
 8001c7c:	6026      	str	r6, [r4, #0]
 8001c7e:	2000      	movs	r0, #0
 8001c80:	e7dc      	b.n	8001c3c <__ssputs_r+0x58>
 8001c82:	462a      	mov	r2, r5
 8001c84:	f000 fb54 	bl	8002330 <_realloc_r>
 8001c88:	4606      	mov	r6, r0
 8001c8a:	2800      	cmp	r0, #0
 8001c8c:	d1e2      	bne.n	8001c54 <__ssputs_r+0x70>
 8001c8e:	6921      	ldr	r1, [r4, #16]
 8001c90:	4650      	mov	r0, sl
 8001c92:	f000 faa5 	bl	80021e0 <_free_r>
 8001c96:	e7c8      	b.n	8001c2a <__ssputs_r+0x46>

08001c98 <_svfiprintf_r>:
 8001c98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001c9c:	461d      	mov	r5, r3
 8001c9e:	898b      	ldrh	r3, [r1, #12]
 8001ca0:	061f      	lsls	r7, r3, #24
 8001ca2:	b09d      	sub	sp, #116	; 0x74
 8001ca4:	4680      	mov	r8, r0
 8001ca6:	460c      	mov	r4, r1
 8001ca8:	4616      	mov	r6, r2
 8001caa:	d50f      	bpl.n	8001ccc <_svfiprintf_r+0x34>
 8001cac:	690b      	ldr	r3, [r1, #16]
 8001cae:	b96b      	cbnz	r3, 8001ccc <_svfiprintf_r+0x34>
 8001cb0:	2140      	movs	r1, #64	; 0x40
 8001cb2:	f000 fae3 	bl	800227c <_malloc_r>
 8001cb6:	6020      	str	r0, [r4, #0]
 8001cb8:	6120      	str	r0, [r4, #16]
 8001cba:	b928      	cbnz	r0, 8001cc8 <_svfiprintf_r+0x30>
 8001cbc:	230c      	movs	r3, #12
 8001cbe:	f8c8 3000 	str.w	r3, [r8]
 8001cc2:	f04f 30ff 	mov.w	r0, #4294967295
 8001cc6:	e0c8      	b.n	8001e5a <_svfiprintf_r+0x1c2>
 8001cc8:	2340      	movs	r3, #64	; 0x40
 8001cca:	6163      	str	r3, [r4, #20]
 8001ccc:	2300      	movs	r3, #0
 8001cce:	9309      	str	r3, [sp, #36]	; 0x24
 8001cd0:	2320      	movs	r3, #32
 8001cd2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8001cd6:	2330      	movs	r3, #48	; 0x30
 8001cd8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8001cdc:	9503      	str	r5, [sp, #12]
 8001cde:	f04f 0b01 	mov.w	fp, #1
 8001ce2:	4637      	mov	r7, r6
 8001ce4:	463d      	mov	r5, r7
 8001ce6:	f815 3b01 	ldrb.w	r3, [r5], #1
 8001cea:	b10b      	cbz	r3, 8001cf0 <_svfiprintf_r+0x58>
 8001cec:	2b25      	cmp	r3, #37	; 0x25
 8001cee:	d13e      	bne.n	8001d6e <_svfiprintf_r+0xd6>
 8001cf0:	ebb7 0a06 	subs.w	sl, r7, r6
 8001cf4:	d00b      	beq.n	8001d0e <_svfiprintf_r+0x76>
 8001cf6:	4653      	mov	r3, sl
 8001cf8:	4632      	mov	r2, r6
 8001cfa:	4621      	mov	r1, r4
 8001cfc:	4640      	mov	r0, r8
 8001cfe:	f7ff ff71 	bl	8001be4 <__ssputs_r>
 8001d02:	3001      	adds	r0, #1
 8001d04:	f000 80a4 	beq.w	8001e50 <_svfiprintf_r+0x1b8>
 8001d08:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001d0a:	4453      	add	r3, sl
 8001d0c:	9309      	str	r3, [sp, #36]	; 0x24
 8001d0e:	783b      	ldrb	r3, [r7, #0]
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	f000 809d 	beq.w	8001e50 <_svfiprintf_r+0x1b8>
 8001d16:	2300      	movs	r3, #0
 8001d18:	f04f 32ff 	mov.w	r2, #4294967295
 8001d1c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001d20:	9304      	str	r3, [sp, #16]
 8001d22:	9307      	str	r3, [sp, #28]
 8001d24:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8001d28:	931a      	str	r3, [sp, #104]	; 0x68
 8001d2a:	462f      	mov	r7, r5
 8001d2c:	2205      	movs	r2, #5
 8001d2e:	f817 1b01 	ldrb.w	r1, [r7], #1
 8001d32:	4850      	ldr	r0, [pc, #320]	; (8001e74 <_svfiprintf_r+0x1dc>)
 8001d34:	f7fe fa74 	bl	8000220 <memchr>
 8001d38:	9b04      	ldr	r3, [sp, #16]
 8001d3a:	b9d0      	cbnz	r0, 8001d72 <_svfiprintf_r+0xda>
 8001d3c:	06d9      	lsls	r1, r3, #27
 8001d3e:	bf44      	itt	mi
 8001d40:	2220      	movmi	r2, #32
 8001d42:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8001d46:	071a      	lsls	r2, r3, #28
 8001d48:	bf44      	itt	mi
 8001d4a:	222b      	movmi	r2, #43	; 0x2b
 8001d4c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8001d50:	782a      	ldrb	r2, [r5, #0]
 8001d52:	2a2a      	cmp	r2, #42	; 0x2a
 8001d54:	d015      	beq.n	8001d82 <_svfiprintf_r+0xea>
 8001d56:	9a07      	ldr	r2, [sp, #28]
 8001d58:	462f      	mov	r7, r5
 8001d5a:	2000      	movs	r0, #0
 8001d5c:	250a      	movs	r5, #10
 8001d5e:	4639      	mov	r1, r7
 8001d60:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001d64:	3b30      	subs	r3, #48	; 0x30
 8001d66:	2b09      	cmp	r3, #9
 8001d68:	d94d      	bls.n	8001e06 <_svfiprintf_r+0x16e>
 8001d6a:	b1b8      	cbz	r0, 8001d9c <_svfiprintf_r+0x104>
 8001d6c:	e00f      	b.n	8001d8e <_svfiprintf_r+0xf6>
 8001d6e:	462f      	mov	r7, r5
 8001d70:	e7b8      	b.n	8001ce4 <_svfiprintf_r+0x4c>
 8001d72:	4a40      	ldr	r2, [pc, #256]	; (8001e74 <_svfiprintf_r+0x1dc>)
 8001d74:	1a80      	subs	r0, r0, r2
 8001d76:	fa0b f000 	lsl.w	r0, fp, r0
 8001d7a:	4318      	orrs	r0, r3
 8001d7c:	9004      	str	r0, [sp, #16]
 8001d7e:	463d      	mov	r5, r7
 8001d80:	e7d3      	b.n	8001d2a <_svfiprintf_r+0x92>
 8001d82:	9a03      	ldr	r2, [sp, #12]
 8001d84:	1d11      	adds	r1, r2, #4
 8001d86:	6812      	ldr	r2, [r2, #0]
 8001d88:	9103      	str	r1, [sp, #12]
 8001d8a:	2a00      	cmp	r2, #0
 8001d8c:	db01      	blt.n	8001d92 <_svfiprintf_r+0xfa>
 8001d8e:	9207      	str	r2, [sp, #28]
 8001d90:	e004      	b.n	8001d9c <_svfiprintf_r+0x104>
 8001d92:	4252      	negs	r2, r2
 8001d94:	f043 0302 	orr.w	r3, r3, #2
 8001d98:	9207      	str	r2, [sp, #28]
 8001d9a:	9304      	str	r3, [sp, #16]
 8001d9c:	783b      	ldrb	r3, [r7, #0]
 8001d9e:	2b2e      	cmp	r3, #46	; 0x2e
 8001da0:	d10c      	bne.n	8001dbc <_svfiprintf_r+0x124>
 8001da2:	787b      	ldrb	r3, [r7, #1]
 8001da4:	2b2a      	cmp	r3, #42	; 0x2a
 8001da6:	d133      	bne.n	8001e10 <_svfiprintf_r+0x178>
 8001da8:	9b03      	ldr	r3, [sp, #12]
 8001daa:	1d1a      	adds	r2, r3, #4
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	9203      	str	r2, [sp, #12]
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	bfb8      	it	lt
 8001db4:	f04f 33ff 	movlt.w	r3, #4294967295
 8001db8:	3702      	adds	r7, #2
 8001dba:	9305      	str	r3, [sp, #20]
 8001dbc:	4d2e      	ldr	r5, [pc, #184]	; (8001e78 <_svfiprintf_r+0x1e0>)
 8001dbe:	7839      	ldrb	r1, [r7, #0]
 8001dc0:	2203      	movs	r2, #3
 8001dc2:	4628      	mov	r0, r5
 8001dc4:	f7fe fa2c 	bl	8000220 <memchr>
 8001dc8:	b138      	cbz	r0, 8001dda <_svfiprintf_r+0x142>
 8001dca:	2340      	movs	r3, #64	; 0x40
 8001dcc:	1b40      	subs	r0, r0, r5
 8001dce:	fa03 f000 	lsl.w	r0, r3, r0
 8001dd2:	9b04      	ldr	r3, [sp, #16]
 8001dd4:	4303      	orrs	r3, r0
 8001dd6:	3701      	adds	r7, #1
 8001dd8:	9304      	str	r3, [sp, #16]
 8001dda:	7839      	ldrb	r1, [r7, #0]
 8001ddc:	4827      	ldr	r0, [pc, #156]	; (8001e7c <_svfiprintf_r+0x1e4>)
 8001dde:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8001de2:	2206      	movs	r2, #6
 8001de4:	1c7e      	adds	r6, r7, #1
 8001de6:	f7fe fa1b 	bl	8000220 <memchr>
 8001dea:	2800      	cmp	r0, #0
 8001dec:	d038      	beq.n	8001e60 <_svfiprintf_r+0x1c8>
 8001dee:	4b24      	ldr	r3, [pc, #144]	; (8001e80 <_svfiprintf_r+0x1e8>)
 8001df0:	bb13      	cbnz	r3, 8001e38 <_svfiprintf_r+0x1a0>
 8001df2:	9b03      	ldr	r3, [sp, #12]
 8001df4:	3307      	adds	r3, #7
 8001df6:	f023 0307 	bic.w	r3, r3, #7
 8001dfa:	3308      	adds	r3, #8
 8001dfc:	9303      	str	r3, [sp, #12]
 8001dfe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001e00:	444b      	add	r3, r9
 8001e02:	9309      	str	r3, [sp, #36]	; 0x24
 8001e04:	e76d      	b.n	8001ce2 <_svfiprintf_r+0x4a>
 8001e06:	fb05 3202 	mla	r2, r5, r2, r3
 8001e0a:	2001      	movs	r0, #1
 8001e0c:	460f      	mov	r7, r1
 8001e0e:	e7a6      	b.n	8001d5e <_svfiprintf_r+0xc6>
 8001e10:	2300      	movs	r3, #0
 8001e12:	3701      	adds	r7, #1
 8001e14:	9305      	str	r3, [sp, #20]
 8001e16:	4619      	mov	r1, r3
 8001e18:	250a      	movs	r5, #10
 8001e1a:	4638      	mov	r0, r7
 8001e1c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001e20:	3a30      	subs	r2, #48	; 0x30
 8001e22:	2a09      	cmp	r2, #9
 8001e24:	d903      	bls.n	8001e2e <_svfiprintf_r+0x196>
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d0c8      	beq.n	8001dbc <_svfiprintf_r+0x124>
 8001e2a:	9105      	str	r1, [sp, #20]
 8001e2c:	e7c6      	b.n	8001dbc <_svfiprintf_r+0x124>
 8001e2e:	fb05 2101 	mla	r1, r5, r1, r2
 8001e32:	2301      	movs	r3, #1
 8001e34:	4607      	mov	r7, r0
 8001e36:	e7f0      	b.n	8001e1a <_svfiprintf_r+0x182>
 8001e38:	ab03      	add	r3, sp, #12
 8001e3a:	9300      	str	r3, [sp, #0]
 8001e3c:	4622      	mov	r2, r4
 8001e3e:	4b11      	ldr	r3, [pc, #68]	; (8001e84 <_svfiprintf_r+0x1ec>)
 8001e40:	a904      	add	r1, sp, #16
 8001e42:	4640      	mov	r0, r8
 8001e44:	f3af 8000 	nop.w
 8001e48:	f1b0 3fff 	cmp.w	r0, #4294967295
 8001e4c:	4681      	mov	r9, r0
 8001e4e:	d1d6      	bne.n	8001dfe <_svfiprintf_r+0x166>
 8001e50:	89a3      	ldrh	r3, [r4, #12]
 8001e52:	065b      	lsls	r3, r3, #25
 8001e54:	f53f af35 	bmi.w	8001cc2 <_svfiprintf_r+0x2a>
 8001e58:	9809      	ldr	r0, [sp, #36]	; 0x24
 8001e5a:	b01d      	add	sp, #116	; 0x74
 8001e5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001e60:	ab03      	add	r3, sp, #12
 8001e62:	9300      	str	r3, [sp, #0]
 8001e64:	4622      	mov	r2, r4
 8001e66:	4b07      	ldr	r3, [pc, #28]	; (8001e84 <_svfiprintf_r+0x1ec>)
 8001e68:	a904      	add	r1, sp, #16
 8001e6a:	4640      	mov	r0, r8
 8001e6c:	f000 f882 	bl	8001f74 <_printf_i>
 8001e70:	e7ea      	b.n	8001e48 <_svfiprintf_r+0x1b0>
 8001e72:	bf00      	nop
 8001e74:	080023de 	.word	0x080023de
 8001e78:	080023e4 	.word	0x080023e4
 8001e7c:	080023e8 	.word	0x080023e8
 8001e80:	00000000 	.word	0x00000000
 8001e84:	08001be5 	.word	0x08001be5

08001e88 <_printf_common>:
 8001e88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001e8c:	4691      	mov	r9, r2
 8001e8e:	461f      	mov	r7, r3
 8001e90:	688a      	ldr	r2, [r1, #8]
 8001e92:	690b      	ldr	r3, [r1, #16]
 8001e94:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8001e98:	4293      	cmp	r3, r2
 8001e9a:	bfb8      	it	lt
 8001e9c:	4613      	movlt	r3, r2
 8001e9e:	f8c9 3000 	str.w	r3, [r9]
 8001ea2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8001ea6:	4606      	mov	r6, r0
 8001ea8:	460c      	mov	r4, r1
 8001eaa:	b112      	cbz	r2, 8001eb2 <_printf_common+0x2a>
 8001eac:	3301      	adds	r3, #1
 8001eae:	f8c9 3000 	str.w	r3, [r9]
 8001eb2:	6823      	ldr	r3, [r4, #0]
 8001eb4:	0699      	lsls	r1, r3, #26
 8001eb6:	bf42      	ittt	mi
 8001eb8:	f8d9 3000 	ldrmi.w	r3, [r9]
 8001ebc:	3302      	addmi	r3, #2
 8001ebe:	f8c9 3000 	strmi.w	r3, [r9]
 8001ec2:	6825      	ldr	r5, [r4, #0]
 8001ec4:	f015 0506 	ands.w	r5, r5, #6
 8001ec8:	d107      	bne.n	8001eda <_printf_common+0x52>
 8001eca:	f104 0a19 	add.w	sl, r4, #25
 8001ece:	68e3      	ldr	r3, [r4, #12]
 8001ed0:	f8d9 2000 	ldr.w	r2, [r9]
 8001ed4:	1a9b      	subs	r3, r3, r2
 8001ed6:	42ab      	cmp	r3, r5
 8001ed8:	dc28      	bgt.n	8001f2c <_printf_common+0xa4>
 8001eda:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8001ede:	6822      	ldr	r2, [r4, #0]
 8001ee0:	3300      	adds	r3, #0
 8001ee2:	bf18      	it	ne
 8001ee4:	2301      	movne	r3, #1
 8001ee6:	0692      	lsls	r2, r2, #26
 8001ee8:	d42d      	bmi.n	8001f46 <_printf_common+0xbe>
 8001eea:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8001eee:	4639      	mov	r1, r7
 8001ef0:	4630      	mov	r0, r6
 8001ef2:	47c0      	blx	r8
 8001ef4:	3001      	adds	r0, #1
 8001ef6:	d020      	beq.n	8001f3a <_printf_common+0xb2>
 8001ef8:	6823      	ldr	r3, [r4, #0]
 8001efa:	68e5      	ldr	r5, [r4, #12]
 8001efc:	f8d9 2000 	ldr.w	r2, [r9]
 8001f00:	f003 0306 	and.w	r3, r3, #6
 8001f04:	2b04      	cmp	r3, #4
 8001f06:	bf08      	it	eq
 8001f08:	1aad      	subeq	r5, r5, r2
 8001f0a:	68a3      	ldr	r3, [r4, #8]
 8001f0c:	6922      	ldr	r2, [r4, #16]
 8001f0e:	bf0c      	ite	eq
 8001f10:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001f14:	2500      	movne	r5, #0
 8001f16:	4293      	cmp	r3, r2
 8001f18:	bfc4      	itt	gt
 8001f1a:	1a9b      	subgt	r3, r3, r2
 8001f1c:	18ed      	addgt	r5, r5, r3
 8001f1e:	f04f 0900 	mov.w	r9, #0
 8001f22:	341a      	adds	r4, #26
 8001f24:	454d      	cmp	r5, r9
 8001f26:	d11a      	bne.n	8001f5e <_printf_common+0xd6>
 8001f28:	2000      	movs	r0, #0
 8001f2a:	e008      	b.n	8001f3e <_printf_common+0xb6>
 8001f2c:	2301      	movs	r3, #1
 8001f2e:	4652      	mov	r2, sl
 8001f30:	4639      	mov	r1, r7
 8001f32:	4630      	mov	r0, r6
 8001f34:	47c0      	blx	r8
 8001f36:	3001      	adds	r0, #1
 8001f38:	d103      	bne.n	8001f42 <_printf_common+0xba>
 8001f3a:	f04f 30ff 	mov.w	r0, #4294967295
 8001f3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001f42:	3501      	adds	r5, #1
 8001f44:	e7c3      	b.n	8001ece <_printf_common+0x46>
 8001f46:	18e1      	adds	r1, r4, r3
 8001f48:	1c5a      	adds	r2, r3, #1
 8001f4a:	2030      	movs	r0, #48	; 0x30
 8001f4c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8001f50:	4422      	add	r2, r4
 8001f52:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8001f56:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8001f5a:	3302      	adds	r3, #2
 8001f5c:	e7c5      	b.n	8001eea <_printf_common+0x62>
 8001f5e:	2301      	movs	r3, #1
 8001f60:	4622      	mov	r2, r4
 8001f62:	4639      	mov	r1, r7
 8001f64:	4630      	mov	r0, r6
 8001f66:	47c0      	blx	r8
 8001f68:	3001      	adds	r0, #1
 8001f6a:	d0e6      	beq.n	8001f3a <_printf_common+0xb2>
 8001f6c:	f109 0901 	add.w	r9, r9, #1
 8001f70:	e7d8      	b.n	8001f24 <_printf_common+0x9c>
	...

08001f74 <_printf_i>:
 8001f74:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001f78:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8001f7c:	460c      	mov	r4, r1
 8001f7e:	7e09      	ldrb	r1, [r1, #24]
 8001f80:	b085      	sub	sp, #20
 8001f82:	296e      	cmp	r1, #110	; 0x6e
 8001f84:	4617      	mov	r7, r2
 8001f86:	4606      	mov	r6, r0
 8001f88:	4698      	mov	r8, r3
 8001f8a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8001f8c:	f000 80b3 	beq.w	80020f6 <_printf_i+0x182>
 8001f90:	d822      	bhi.n	8001fd8 <_printf_i+0x64>
 8001f92:	2963      	cmp	r1, #99	; 0x63
 8001f94:	d036      	beq.n	8002004 <_printf_i+0x90>
 8001f96:	d80a      	bhi.n	8001fae <_printf_i+0x3a>
 8001f98:	2900      	cmp	r1, #0
 8001f9a:	f000 80b9 	beq.w	8002110 <_printf_i+0x19c>
 8001f9e:	2958      	cmp	r1, #88	; 0x58
 8001fa0:	f000 8083 	beq.w	80020aa <_printf_i+0x136>
 8001fa4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001fa8:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8001fac:	e032      	b.n	8002014 <_printf_i+0xa0>
 8001fae:	2964      	cmp	r1, #100	; 0x64
 8001fb0:	d001      	beq.n	8001fb6 <_printf_i+0x42>
 8001fb2:	2969      	cmp	r1, #105	; 0x69
 8001fb4:	d1f6      	bne.n	8001fa4 <_printf_i+0x30>
 8001fb6:	6820      	ldr	r0, [r4, #0]
 8001fb8:	6813      	ldr	r3, [r2, #0]
 8001fba:	0605      	lsls	r5, r0, #24
 8001fbc:	f103 0104 	add.w	r1, r3, #4
 8001fc0:	d52a      	bpl.n	8002018 <_printf_i+0xa4>
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	6011      	str	r1, [r2, #0]
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	da03      	bge.n	8001fd2 <_printf_i+0x5e>
 8001fca:	222d      	movs	r2, #45	; 0x2d
 8001fcc:	425b      	negs	r3, r3
 8001fce:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8001fd2:	486f      	ldr	r0, [pc, #444]	; (8002190 <_printf_i+0x21c>)
 8001fd4:	220a      	movs	r2, #10
 8001fd6:	e039      	b.n	800204c <_printf_i+0xd8>
 8001fd8:	2973      	cmp	r1, #115	; 0x73
 8001fda:	f000 809d 	beq.w	8002118 <_printf_i+0x1a4>
 8001fde:	d808      	bhi.n	8001ff2 <_printf_i+0x7e>
 8001fe0:	296f      	cmp	r1, #111	; 0x6f
 8001fe2:	d020      	beq.n	8002026 <_printf_i+0xb2>
 8001fe4:	2970      	cmp	r1, #112	; 0x70
 8001fe6:	d1dd      	bne.n	8001fa4 <_printf_i+0x30>
 8001fe8:	6823      	ldr	r3, [r4, #0]
 8001fea:	f043 0320 	orr.w	r3, r3, #32
 8001fee:	6023      	str	r3, [r4, #0]
 8001ff0:	e003      	b.n	8001ffa <_printf_i+0x86>
 8001ff2:	2975      	cmp	r1, #117	; 0x75
 8001ff4:	d017      	beq.n	8002026 <_printf_i+0xb2>
 8001ff6:	2978      	cmp	r1, #120	; 0x78
 8001ff8:	d1d4      	bne.n	8001fa4 <_printf_i+0x30>
 8001ffa:	2378      	movs	r3, #120	; 0x78
 8001ffc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002000:	4864      	ldr	r0, [pc, #400]	; (8002194 <_printf_i+0x220>)
 8002002:	e055      	b.n	80020b0 <_printf_i+0x13c>
 8002004:	6813      	ldr	r3, [r2, #0]
 8002006:	1d19      	adds	r1, r3, #4
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	6011      	str	r1, [r2, #0]
 800200c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002010:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002014:	2301      	movs	r3, #1
 8002016:	e08c      	b.n	8002132 <_printf_i+0x1be>
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	6011      	str	r1, [r2, #0]
 800201c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002020:	bf18      	it	ne
 8002022:	b21b      	sxthne	r3, r3
 8002024:	e7cf      	b.n	8001fc6 <_printf_i+0x52>
 8002026:	6813      	ldr	r3, [r2, #0]
 8002028:	6825      	ldr	r5, [r4, #0]
 800202a:	1d18      	adds	r0, r3, #4
 800202c:	6010      	str	r0, [r2, #0]
 800202e:	0628      	lsls	r0, r5, #24
 8002030:	d501      	bpl.n	8002036 <_printf_i+0xc2>
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	e002      	b.n	800203c <_printf_i+0xc8>
 8002036:	0668      	lsls	r0, r5, #25
 8002038:	d5fb      	bpl.n	8002032 <_printf_i+0xbe>
 800203a:	881b      	ldrh	r3, [r3, #0]
 800203c:	4854      	ldr	r0, [pc, #336]	; (8002190 <_printf_i+0x21c>)
 800203e:	296f      	cmp	r1, #111	; 0x6f
 8002040:	bf14      	ite	ne
 8002042:	220a      	movne	r2, #10
 8002044:	2208      	moveq	r2, #8
 8002046:	2100      	movs	r1, #0
 8002048:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800204c:	6865      	ldr	r5, [r4, #4]
 800204e:	60a5      	str	r5, [r4, #8]
 8002050:	2d00      	cmp	r5, #0
 8002052:	f2c0 8095 	blt.w	8002180 <_printf_i+0x20c>
 8002056:	6821      	ldr	r1, [r4, #0]
 8002058:	f021 0104 	bic.w	r1, r1, #4
 800205c:	6021      	str	r1, [r4, #0]
 800205e:	2b00      	cmp	r3, #0
 8002060:	d13d      	bne.n	80020de <_printf_i+0x16a>
 8002062:	2d00      	cmp	r5, #0
 8002064:	f040 808e 	bne.w	8002184 <_printf_i+0x210>
 8002068:	4665      	mov	r5, ip
 800206a:	2a08      	cmp	r2, #8
 800206c:	d10b      	bne.n	8002086 <_printf_i+0x112>
 800206e:	6823      	ldr	r3, [r4, #0]
 8002070:	07db      	lsls	r3, r3, #31
 8002072:	d508      	bpl.n	8002086 <_printf_i+0x112>
 8002074:	6923      	ldr	r3, [r4, #16]
 8002076:	6862      	ldr	r2, [r4, #4]
 8002078:	429a      	cmp	r2, r3
 800207a:	bfde      	ittt	le
 800207c:	2330      	movle	r3, #48	; 0x30
 800207e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002082:	f105 35ff 	addle.w	r5, r5, #4294967295
 8002086:	ebac 0305 	sub.w	r3, ip, r5
 800208a:	6123      	str	r3, [r4, #16]
 800208c:	f8cd 8000 	str.w	r8, [sp]
 8002090:	463b      	mov	r3, r7
 8002092:	aa03      	add	r2, sp, #12
 8002094:	4621      	mov	r1, r4
 8002096:	4630      	mov	r0, r6
 8002098:	f7ff fef6 	bl	8001e88 <_printf_common>
 800209c:	3001      	adds	r0, #1
 800209e:	d14d      	bne.n	800213c <_printf_i+0x1c8>
 80020a0:	f04f 30ff 	mov.w	r0, #4294967295
 80020a4:	b005      	add	sp, #20
 80020a6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80020aa:	4839      	ldr	r0, [pc, #228]	; (8002190 <_printf_i+0x21c>)
 80020ac:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80020b0:	6813      	ldr	r3, [r2, #0]
 80020b2:	6821      	ldr	r1, [r4, #0]
 80020b4:	1d1d      	adds	r5, r3, #4
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	6015      	str	r5, [r2, #0]
 80020ba:	060a      	lsls	r2, r1, #24
 80020bc:	d50b      	bpl.n	80020d6 <_printf_i+0x162>
 80020be:	07ca      	lsls	r2, r1, #31
 80020c0:	bf44      	itt	mi
 80020c2:	f041 0120 	orrmi.w	r1, r1, #32
 80020c6:	6021      	strmi	r1, [r4, #0]
 80020c8:	b91b      	cbnz	r3, 80020d2 <_printf_i+0x15e>
 80020ca:	6822      	ldr	r2, [r4, #0]
 80020cc:	f022 0220 	bic.w	r2, r2, #32
 80020d0:	6022      	str	r2, [r4, #0]
 80020d2:	2210      	movs	r2, #16
 80020d4:	e7b7      	b.n	8002046 <_printf_i+0xd2>
 80020d6:	064d      	lsls	r5, r1, #25
 80020d8:	bf48      	it	mi
 80020da:	b29b      	uxthmi	r3, r3
 80020dc:	e7ef      	b.n	80020be <_printf_i+0x14a>
 80020de:	4665      	mov	r5, ip
 80020e0:	fbb3 f1f2 	udiv	r1, r3, r2
 80020e4:	fb02 3311 	mls	r3, r2, r1, r3
 80020e8:	5cc3      	ldrb	r3, [r0, r3]
 80020ea:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80020ee:	460b      	mov	r3, r1
 80020f0:	2900      	cmp	r1, #0
 80020f2:	d1f5      	bne.n	80020e0 <_printf_i+0x16c>
 80020f4:	e7b9      	b.n	800206a <_printf_i+0xf6>
 80020f6:	6813      	ldr	r3, [r2, #0]
 80020f8:	6825      	ldr	r5, [r4, #0]
 80020fa:	6961      	ldr	r1, [r4, #20]
 80020fc:	1d18      	adds	r0, r3, #4
 80020fe:	6010      	str	r0, [r2, #0]
 8002100:	0628      	lsls	r0, r5, #24
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	d501      	bpl.n	800210a <_printf_i+0x196>
 8002106:	6019      	str	r1, [r3, #0]
 8002108:	e002      	b.n	8002110 <_printf_i+0x19c>
 800210a:	066a      	lsls	r2, r5, #25
 800210c:	d5fb      	bpl.n	8002106 <_printf_i+0x192>
 800210e:	8019      	strh	r1, [r3, #0]
 8002110:	2300      	movs	r3, #0
 8002112:	6123      	str	r3, [r4, #16]
 8002114:	4665      	mov	r5, ip
 8002116:	e7b9      	b.n	800208c <_printf_i+0x118>
 8002118:	6813      	ldr	r3, [r2, #0]
 800211a:	1d19      	adds	r1, r3, #4
 800211c:	6011      	str	r1, [r2, #0]
 800211e:	681d      	ldr	r5, [r3, #0]
 8002120:	6862      	ldr	r2, [r4, #4]
 8002122:	2100      	movs	r1, #0
 8002124:	4628      	mov	r0, r5
 8002126:	f7fe f87b 	bl	8000220 <memchr>
 800212a:	b108      	cbz	r0, 8002130 <_printf_i+0x1bc>
 800212c:	1b40      	subs	r0, r0, r5
 800212e:	6060      	str	r0, [r4, #4]
 8002130:	6863      	ldr	r3, [r4, #4]
 8002132:	6123      	str	r3, [r4, #16]
 8002134:	2300      	movs	r3, #0
 8002136:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800213a:	e7a7      	b.n	800208c <_printf_i+0x118>
 800213c:	6923      	ldr	r3, [r4, #16]
 800213e:	462a      	mov	r2, r5
 8002140:	4639      	mov	r1, r7
 8002142:	4630      	mov	r0, r6
 8002144:	47c0      	blx	r8
 8002146:	3001      	adds	r0, #1
 8002148:	d0aa      	beq.n	80020a0 <_printf_i+0x12c>
 800214a:	6823      	ldr	r3, [r4, #0]
 800214c:	079b      	lsls	r3, r3, #30
 800214e:	d413      	bmi.n	8002178 <_printf_i+0x204>
 8002150:	68e0      	ldr	r0, [r4, #12]
 8002152:	9b03      	ldr	r3, [sp, #12]
 8002154:	4298      	cmp	r0, r3
 8002156:	bfb8      	it	lt
 8002158:	4618      	movlt	r0, r3
 800215a:	e7a3      	b.n	80020a4 <_printf_i+0x130>
 800215c:	2301      	movs	r3, #1
 800215e:	464a      	mov	r2, r9
 8002160:	4639      	mov	r1, r7
 8002162:	4630      	mov	r0, r6
 8002164:	47c0      	blx	r8
 8002166:	3001      	adds	r0, #1
 8002168:	d09a      	beq.n	80020a0 <_printf_i+0x12c>
 800216a:	3501      	adds	r5, #1
 800216c:	68e3      	ldr	r3, [r4, #12]
 800216e:	9a03      	ldr	r2, [sp, #12]
 8002170:	1a9b      	subs	r3, r3, r2
 8002172:	42ab      	cmp	r3, r5
 8002174:	dcf2      	bgt.n	800215c <_printf_i+0x1e8>
 8002176:	e7eb      	b.n	8002150 <_printf_i+0x1dc>
 8002178:	2500      	movs	r5, #0
 800217a:	f104 0919 	add.w	r9, r4, #25
 800217e:	e7f5      	b.n	800216c <_printf_i+0x1f8>
 8002180:	2b00      	cmp	r3, #0
 8002182:	d1ac      	bne.n	80020de <_printf_i+0x16a>
 8002184:	7803      	ldrb	r3, [r0, #0]
 8002186:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800218a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800218e:	e76c      	b.n	800206a <_printf_i+0xf6>
 8002190:	080023ef 	.word	0x080023ef
 8002194:	08002400 	.word	0x08002400

08002198 <memcpy>:
 8002198:	b510      	push	{r4, lr}
 800219a:	1e43      	subs	r3, r0, #1
 800219c:	440a      	add	r2, r1
 800219e:	4291      	cmp	r1, r2
 80021a0:	d100      	bne.n	80021a4 <memcpy+0xc>
 80021a2:	bd10      	pop	{r4, pc}
 80021a4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80021a8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80021ac:	e7f7      	b.n	800219e <memcpy+0x6>

080021ae <memmove>:
 80021ae:	4288      	cmp	r0, r1
 80021b0:	b510      	push	{r4, lr}
 80021b2:	eb01 0302 	add.w	r3, r1, r2
 80021b6:	d807      	bhi.n	80021c8 <memmove+0x1a>
 80021b8:	1e42      	subs	r2, r0, #1
 80021ba:	4299      	cmp	r1, r3
 80021bc:	d00a      	beq.n	80021d4 <memmove+0x26>
 80021be:	f811 4b01 	ldrb.w	r4, [r1], #1
 80021c2:	f802 4f01 	strb.w	r4, [r2, #1]!
 80021c6:	e7f8      	b.n	80021ba <memmove+0xc>
 80021c8:	4283      	cmp	r3, r0
 80021ca:	d9f5      	bls.n	80021b8 <memmove+0xa>
 80021cc:	1881      	adds	r1, r0, r2
 80021ce:	1ad2      	subs	r2, r2, r3
 80021d0:	42d3      	cmn	r3, r2
 80021d2:	d100      	bne.n	80021d6 <memmove+0x28>
 80021d4:	bd10      	pop	{r4, pc}
 80021d6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80021da:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80021de:	e7f7      	b.n	80021d0 <memmove+0x22>

080021e0 <_free_r>:
 80021e0:	b538      	push	{r3, r4, r5, lr}
 80021e2:	4605      	mov	r5, r0
 80021e4:	2900      	cmp	r1, #0
 80021e6:	d045      	beq.n	8002274 <_free_r+0x94>
 80021e8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80021ec:	1f0c      	subs	r4, r1, #4
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	bfb8      	it	lt
 80021f2:	18e4      	addlt	r4, r4, r3
 80021f4:	f000 f8d2 	bl	800239c <__malloc_lock>
 80021f8:	4a1f      	ldr	r2, [pc, #124]	; (8002278 <_free_r+0x98>)
 80021fa:	6813      	ldr	r3, [r2, #0]
 80021fc:	4610      	mov	r0, r2
 80021fe:	b933      	cbnz	r3, 800220e <_free_r+0x2e>
 8002200:	6063      	str	r3, [r4, #4]
 8002202:	6014      	str	r4, [r2, #0]
 8002204:	4628      	mov	r0, r5
 8002206:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800220a:	f000 b8c8 	b.w	800239e <__malloc_unlock>
 800220e:	42a3      	cmp	r3, r4
 8002210:	d90c      	bls.n	800222c <_free_r+0x4c>
 8002212:	6821      	ldr	r1, [r4, #0]
 8002214:	1862      	adds	r2, r4, r1
 8002216:	4293      	cmp	r3, r2
 8002218:	bf04      	itt	eq
 800221a:	681a      	ldreq	r2, [r3, #0]
 800221c:	685b      	ldreq	r3, [r3, #4]
 800221e:	6063      	str	r3, [r4, #4]
 8002220:	bf04      	itt	eq
 8002222:	1852      	addeq	r2, r2, r1
 8002224:	6022      	streq	r2, [r4, #0]
 8002226:	6004      	str	r4, [r0, #0]
 8002228:	e7ec      	b.n	8002204 <_free_r+0x24>
 800222a:	4613      	mov	r3, r2
 800222c:	685a      	ldr	r2, [r3, #4]
 800222e:	b10a      	cbz	r2, 8002234 <_free_r+0x54>
 8002230:	42a2      	cmp	r2, r4
 8002232:	d9fa      	bls.n	800222a <_free_r+0x4a>
 8002234:	6819      	ldr	r1, [r3, #0]
 8002236:	1858      	adds	r0, r3, r1
 8002238:	42a0      	cmp	r0, r4
 800223a:	d10b      	bne.n	8002254 <_free_r+0x74>
 800223c:	6820      	ldr	r0, [r4, #0]
 800223e:	4401      	add	r1, r0
 8002240:	1858      	adds	r0, r3, r1
 8002242:	4282      	cmp	r2, r0
 8002244:	6019      	str	r1, [r3, #0]
 8002246:	d1dd      	bne.n	8002204 <_free_r+0x24>
 8002248:	6810      	ldr	r0, [r2, #0]
 800224a:	6852      	ldr	r2, [r2, #4]
 800224c:	605a      	str	r2, [r3, #4]
 800224e:	4401      	add	r1, r0
 8002250:	6019      	str	r1, [r3, #0]
 8002252:	e7d7      	b.n	8002204 <_free_r+0x24>
 8002254:	d902      	bls.n	800225c <_free_r+0x7c>
 8002256:	230c      	movs	r3, #12
 8002258:	602b      	str	r3, [r5, #0]
 800225a:	e7d3      	b.n	8002204 <_free_r+0x24>
 800225c:	6820      	ldr	r0, [r4, #0]
 800225e:	1821      	adds	r1, r4, r0
 8002260:	428a      	cmp	r2, r1
 8002262:	bf04      	itt	eq
 8002264:	6811      	ldreq	r1, [r2, #0]
 8002266:	6852      	ldreq	r2, [r2, #4]
 8002268:	6062      	str	r2, [r4, #4]
 800226a:	bf04      	itt	eq
 800226c:	1809      	addeq	r1, r1, r0
 800226e:	6021      	streq	r1, [r4, #0]
 8002270:	605c      	str	r4, [r3, #4]
 8002272:	e7c7      	b.n	8002204 <_free_r+0x24>
 8002274:	bd38      	pop	{r3, r4, r5, pc}
 8002276:	bf00      	nop
 8002278:	2000009c 	.word	0x2000009c

0800227c <_malloc_r>:
 800227c:	b570      	push	{r4, r5, r6, lr}
 800227e:	1ccd      	adds	r5, r1, #3
 8002280:	f025 0503 	bic.w	r5, r5, #3
 8002284:	3508      	adds	r5, #8
 8002286:	2d0c      	cmp	r5, #12
 8002288:	bf38      	it	cc
 800228a:	250c      	movcc	r5, #12
 800228c:	2d00      	cmp	r5, #0
 800228e:	4606      	mov	r6, r0
 8002290:	db01      	blt.n	8002296 <_malloc_r+0x1a>
 8002292:	42a9      	cmp	r1, r5
 8002294:	d903      	bls.n	800229e <_malloc_r+0x22>
 8002296:	230c      	movs	r3, #12
 8002298:	6033      	str	r3, [r6, #0]
 800229a:	2000      	movs	r0, #0
 800229c:	bd70      	pop	{r4, r5, r6, pc}
 800229e:	f000 f87d 	bl	800239c <__malloc_lock>
 80022a2:	4a21      	ldr	r2, [pc, #132]	; (8002328 <_malloc_r+0xac>)
 80022a4:	6814      	ldr	r4, [r2, #0]
 80022a6:	4621      	mov	r1, r4
 80022a8:	b991      	cbnz	r1, 80022d0 <_malloc_r+0x54>
 80022aa:	4c20      	ldr	r4, [pc, #128]	; (800232c <_malloc_r+0xb0>)
 80022ac:	6823      	ldr	r3, [r4, #0]
 80022ae:	b91b      	cbnz	r3, 80022b8 <_malloc_r+0x3c>
 80022b0:	4630      	mov	r0, r6
 80022b2:	f000 f863 	bl	800237c <_sbrk_r>
 80022b6:	6020      	str	r0, [r4, #0]
 80022b8:	4629      	mov	r1, r5
 80022ba:	4630      	mov	r0, r6
 80022bc:	f000 f85e 	bl	800237c <_sbrk_r>
 80022c0:	1c43      	adds	r3, r0, #1
 80022c2:	d124      	bne.n	800230e <_malloc_r+0x92>
 80022c4:	230c      	movs	r3, #12
 80022c6:	6033      	str	r3, [r6, #0]
 80022c8:	4630      	mov	r0, r6
 80022ca:	f000 f868 	bl	800239e <__malloc_unlock>
 80022ce:	e7e4      	b.n	800229a <_malloc_r+0x1e>
 80022d0:	680b      	ldr	r3, [r1, #0]
 80022d2:	1b5b      	subs	r3, r3, r5
 80022d4:	d418      	bmi.n	8002308 <_malloc_r+0x8c>
 80022d6:	2b0b      	cmp	r3, #11
 80022d8:	d90f      	bls.n	80022fa <_malloc_r+0x7e>
 80022da:	600b      	str	r3, [r1, #0]
 80022dc:	50cd      	str	r5, [r1, r3]
 80022de:	18cc      	adds	r4, r1, r3
 80022e0:	4630      	mov	r0, r6
 80022e2:	f000 f85c 	bl	800239e <__malloc_unlock>
 80022e6:	f104 000b 	add.w	r0, r4, #11
 80022ea:	1d23      	adds	r3, r4, #4
 80022ec:	f020 0007 	bic.w	r0, r0, #7
 80022f0:	1ac3      	subs	r3, r0, r3
 80022f2:	d0d3      	beq.n	800229c <_malloc_r+0x20>
 80022f4:	425a      	negs	r2, r3
 80022f6:	50e2      	str	r2, [r4, r3]
 80022f8:	e7d0      	b.n	800229c <_malloc_r+0x20>
 80022fa:	428c      	cmp	r4, r1
 80022fc:	684b      	ldr	r3, [r1, #4]
 80022fe:	bf16      	itet	ne
 8002300:	6063      	strne	r3, [r4, #4]
 8002302:	6013      	streq	r3, [r2, #0]
 8002304:	460c      	movne	r4, r1
 8002306:	e7eb      	b.n	80022e0 <_malloc_r+0x64>
 8002308:	460c      	mov	r4, r1
 800230a:	6849      	ldr	r1, [r1, #4]
 800230c:	e7cc      	b.n	80022a8 <_malloc_r+0x2c>
 800230e:	1cc4      	adds	r4, r0, #3
 8002310:	f024 0403 	bic.w	r4, r4, #3
 8002314:	42a0      	cmp	r0, r4
 8002316:	d005      	beq.n	8002324 <_malloc_r+0xa8>
 8002318:	1a21      	subs	r1, r4, r0
 800231a:	4630      	mov	r0, r6
 800231c:	f000 f82e 	bl	800237c <_sbrk_r>
 8002320:	3001      	adds	r0, #1
 8002322:	d0cf      	beq.n	80022c4 <_malloc_r+0x48>
 8002324:	6025      	str	r5, [r4, #0]
 8002326:	e7db      	b.n	80022e0 <_malloc_r+0x64>
 8002328:	2000009c 	.word	0x2000009c
 800232c:	200000a0 	.word	0x200000a0

08002330 <_realloc_r>:
 8002330:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002332:	4607      	mov	r7, r0
 8002334:	4614      	mov	r4, r2
 8002336:	460e      	mov	r6, r1
 8002338:	b921      	cbnz	r1, 8002344 <_realloc_r+0x14>
 800233a:	4611      	mov	r1, r2
 800233c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8002340:	f7ff bf9c 	b.w	800227c <_malloc_r>
 8002344:	b922      	cbnz	r2, 8002350 <_realloc_r+0x20>
 8002346:	f7ff ff4b 	bl	80021e0 <_free_r>
 800234a:	4625      	mov	r5, r4
 800234c:	4628      	mov	r0, r5
 800234e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002350:	f000 f826 	bl	80023a0 <_malloc_usable_size_r>
 8002354:	42a0      	cmp	r0, r4
 8002356:	d20f      	bcs.n	8002378 <_realloc_r+0x48>
 8002358:	4621      	mov	r1, r4
 800235a:	4638      	mov	r0, r7
 800235c:	f7ff ff8e 	bl	800227c <_malloc_r>
 8002360:	4605      	mov	r5, r0
 8002362:	2800      	cmp	r0, #0
 8002364:	d0f2      	beq.n	800234c <_realloc_r+0x1c>
 8002366:	4631      	mov	r1, r6
 8002368:	4622      	mov	r2, r4
 800236a:	f7ff ff15 	bl	8002198 <memcpy>
 800236e:	4631      	mov	r1, r6
 8002370:	4638      	mov	r0, r7
 8002372:	f7ff ff35 	bl	80021e0 <_free_r>
 8002376:	e7e9      	b.n	800234c <_realloc_r+0x1c>
 8002378:	4635      	mov	r5, r6
 800237a:	e7e7      	b.n	800234c <_realloc_r+0x1c>

0800237c <_sbrk_r>:
 800237c:	b538      	push	{r3, r4, r5, lr}
 800237e:	4c06      	ldr	r4, [pc, #24]	; (8002398 <_sbrk_r+0x1c>)
 8002380:	2300      	movs	r3, #0
 8002382:	4605      	mov	r5, r0
 8002384:	4608      	mov	r0, r1
 8002386:	6023      	str	r3, [r4, #0]
 8002388:	f7ff fb8c 	bl	8001aa4 <_sbrk>
 800238c:	1c43      	adds	r3, r0, #1
 800238e:	d102      	bne.n	8002396 <_sbrk_r+0x1a>
 8002390:	6823      	ldr	r3, [r4, #0]
 8002392:	b103      	cbz	r3, 8002396 <_sbrk_r+0x1a>
 8002394:	602b      	str	r3, [r5, #0]
 8002396:	bd38      	pop	{r3, r4, r5, pc}
 8002398:	200000e0 	.word	0x200000e0

0800239c <__malloc_lock>:
 800239c:	4770      	bx	lr

0800239e <__malloc_unlock>:
 800239e:	4770      	bx	lr

080023a0 <_malloc_usable_size_r>:
 80023a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80023a4:	1f18      	subs	r0, r3, #4
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	bfbc      	itt	lt
 80023aa:	580b      	ldrlt	r3, [r1, r0]
 80023ac:	18c0      	addlt	r0, r0, r3
 80023ae:	4770      	bx	lr

080023b0 <_init>:
 80023b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80023b2:	bf00      	nop
 80023b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80023b6:	bc08      	pop	{r3}
 80023b8:	469e      	mov	lr, r3
 80023ba:	4770      	bx	lr

080023bc <_fini>:
 80023bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80023be:	bf00      	nop
 80023c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80023c2:	bc08      	pop	{r3}
 80023c4:	469e      	mov	lr, r3
 80023c6:	4770      	bx	lr
