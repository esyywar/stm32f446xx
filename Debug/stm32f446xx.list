
stm32f446xx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002a2c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000004c  08002bfc  08002bfc  00012bfc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002c48  08002c48  00020090  2**0
                  CONTENTS
  4 .ARM          00000000  08002c48  08002c48  00020090  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002c48  08002c48  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002c48  08002c48  00012c48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002c4c  08002c4c  00012c4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  08002c50  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000080  20000090  08002ce0  00020090  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000110  08002ce0  00020110  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 12 .debug_info   000068dc  00000000  00000000  000200ba  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000105b  00000000  00000000  00026996  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000300  00000000  00000000  000279f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000288  00000000  00000000  00027cf8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0000440a  00000000  00000000  00027f80  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00003897  00000000  00000000  0002c38a  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0000d419  00000000  00000000  0002fc21  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0003d03a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000eb0  00000000  00000000  0003d0b8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000090 	.word	0x20000090
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08002be4 	.word	0x08002be4

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000094 	.word	0x20000094
 800020c:	08002be4 	.word	0x08002be4

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_frsub>:
 80002c0:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__addsf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_fsub>:
 80002c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080002cc <__addsf3>:
 80002cc:	0042      	lsls	r2, r0, #1
 80002ce:	bf1f      	itttt	ne
 80002d0:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80002d4:	ea92 0f03 	teqne	r2, r3
 80002d8:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80002dc:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80002e0:	d06a      	beq.n	80003b8 <__addsf3+0xec>
 80002e2:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80002e6:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80002ea:	bfc1      	itttt	gt
 80002ec:	18d2      	addgt	r2, r2, r3
 80002ee:	4041      	eorgt	r1, r0
 80002f0:	4048      	eorgt	r0, r1
 80002f2:	4041      	eorgt	r1, r0
 80002f4:	bfb8      	it	lt
 80002f6:	425b      	neglt	r3, r3
 80002f8:	2b19      	cmp	r3, #25
 80002fa:	bf88      	it	hi
 80002fc:	4770      	bxhi	lr
 80002fe:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000302:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000306:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 800030a:	bf18      	it	ne
 800030c:	4240      	negne	r0, r0
 800030e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000312:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000316:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 800031a:	bf18      	it	ne
 800031c:	4249      	negne	r1, r1
 800031e:	ea92 0f03 	teq	r2, r3
 8000322:	d03f      	beq.n	80003a4 <__addsf3+0xd8>
 8000324:	f1a2 0201 	sub.w	r2, r2, #1
 8000328:	fa41 fc03 	asr.w	ip, r1, r3
 800032c:	eb10 000c 	adds.w	r0, r0, ip
 8000330:	f1c3 0320 	rsb	r3, r3, #32
 8000334:	fa01 f103 	lsl.w	r1, r1, r3
 8000338:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800033c:	d502      	bpl.n	8000344 <__addsf3+0x78>
 800033e:	4249      	negs	r1, r1
 8000340:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000344:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000348:	d313      	bcc.n	8000372 <__addsf3+0xa6>
 800034a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800034e:	d306      	bcc.n	800035e <__addsf3+0x92>
 8000350:	0840      	lsrs	r0, r0, #1
 8000352:	ea4f 0131 	mov.w	r1, r1, rrx
 8000356:	f102 0201 	add.w	r2, r2, #1
 800035a:	2afe      	cmp	r2, #254	; 0xfe
 800035c:	d251      	bcs.n	8000402 <__addsf3+0x136>
 800035e:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000362:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000366:	bf08      	it	eq
 8000368:	f020 0001 	biceq.w	r0, r0, #1
 800036c:	ea40 0003 	orr.w	r0, r0, r3
 8000370:	4770      	bx	lr
 8000372:	0049      	lsls	r1, r1, #1
 8000374:	eb40 0000 	adc.w	r0, r0, r0
 8000378:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 800037c:	f1a2 0201 	sub.w	r2, r2, #1
 8000380:	d1ed      	bne.n	800035e <__addsf3+0x92>
 8000382:	fab0 fc80 	clz	ip, r0
 8000386:	f1ac 0c08 	sub.w	ip, ip, #8
 800038a:	ebb2 020c 	subs.w	r2, r2, ip
 800038e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000392:	bfaa      	itet	ge
 8000394:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000398:	4252      	neglt	r2, r2
 800039a:	4318      	orrge	r0, r3
 800039c:	bfbc      	itt	lt
 800039e:	40d0      	lsrlt	r0, r2
 80003a0:	4318      	orrlt	r0, r3
 80003a2:	4770      	bx	lr
 80003a4:	f092 0f00 	teq	r2, #0
 80003a8:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 80003ac:	bf06      	itte	eq
 80003ae:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 80003b2:	3201      	addeq	r2, #1
 80003b4:	3b01      	subne	r3, #1
 80003b6:	e7b5      	b.n	8000324 <__addsf3+0x58>
 80003b8:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80003bc:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80003c0:	bf18      	it	ne
 80003c2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80003c6:	d021      	beq.n	800040c <__addsf3+0x140>
 80003c8:	ea92 0f03 	teq	r2, r3
 80003cc:	d004      	beq.n	80003d8 <__addsf3+0x10c>
 80003ce:	f092 0f00 	teq	r2, #0
 80003d2:	bf08      	it	eq
 80003d4:	4608      	moveq	r0, r1
 80003d6:	4770      	bx	lr
 80003d8:	ea90 0f01 	teq	r0, r1
 80003dc:	bf1c      	itt	ne
 80003de:	2000      	movne	r0, #0
 80003e0:	4770      	bxne	lr
 80003e2:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 80003e6:	d104      	bne.n	80003f2 <__addsf3+0x126>
 80003e8:	0040      	lsls	r0, r0, #1
 80003ea:	bf28      	it	cs
 80003ec:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 80003f0:	4770      	bx	lr
 80003f2:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 80003f6:	bf3c      	itt	cc
 80003f8:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 80003fc:	4770      	bxcc	lr
 80003fe:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000402:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000406:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800040a:	4770      	bx	lr
 800040c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000410:	bf16      	itet	ne
 8000412:	4608      	movne	r0, r1
 8000414:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000418:	4601      	movne	r1, r0
 800041a:	0242      	lsls	r2, r0, #9
 800041c:	bf06      	itte	eq
 800041e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000422:	ea90 0f01 	teqeq	r0, r1
 8000426:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 800042a:	4770      	bx	lr

0800042c <__aeabi_ui2f>:
 800042c:	f04f 0300 	mov.w	r3, #0
 8000430:	e004      	b.n	800043c <__aeabi_i2f+0x8>
 8000432:	bf00      	nop

08000434 <__aeabi_i2f>:
 8000434:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000438:	bf48      	it	mi
 800043a:	4240      	negmi	r0, r0
 800043c:	ea5f 0c00 	movs.w	ip, r0
 8000440:	bf08      	it	eq
 8000442:	4770      	bxeq	lr
 8000444:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000448:	4601      	mov	r1, r0
 800044a:	f04f 0000 	mov.w	r0, #0
 800044e:	e01c      	b.n	800048a <__aeabi_l2f+0x2a>

08000450 <__aeabi_ul2f>:
 8000450:	ea50 0201 	orrs.w	r2, r0, r1
 8000454:	bf08      	it	eq
 8000456:	4770      	bxeq	lr
 8000458:	f04f 0300 	mov.w	r3, #0
 800045c:	e00a      	b.n	8000474 <__aeabi_l2f+0x14>
 800045e:	bf00      	nop

08000460 <__aeabi_l2f>:
 8000460:	ea50 0201 	orrs.w	r2, r0, r1
 8000464:	bf08      	it	eq
 8000466:	4770      	bxeq	lr
 8000468:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 800046c:	d502      	bpl.n	8000474 <__aeabi_l2f+0x14>
 800046e:	4240      	negs	r0, r0
 8000470:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000474:	ea5f 0c01 	movs.w	ip, r1
 8000478:	bf02      	ittt	eq
 800047a:	4684      	moveq	ip, r0
 800047c:	4601      	moveq	r1, r0
 800047e:	2000      	moveq	r0, #0
 8000480:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000484:	bf08      	it	eq
 8000486:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 800048a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800048e:	fabc f28c 	clz	r2, ip
 8000492:	3a08      	subs	r2, #8
 8000494:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000498:	db10      	blt.n	80004bc <__aeabi_l2f+0x5c>
 800049a:	fa01 fc02 	lsl.w	ip, r1, r2
 800049e:	4463      	add	r3, ip
 80004a0:	fa00 fc02 	lsl.w	ip, r0, r2
 80004a4:	f1c2 0220 	rsb	r2, r2, #32
 80004a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004ac:	fa20 f202 	lsr.w	r2, r0, r2
 80004b0:	eb43 0002 	adc.w	r0, r3, r2
 80004b4:	bf08      	it	eq
 80004b6:	f020 0001 	biceq.w	r0, r0, #1
 80004ba:	4770      	bx	lr
 80004bc:	f102 0220 	add.w	r2, r2, #32
 80004c0:	fa01 fc02 	lsl.w	ip, r1, r2
 80004c4:	f1c2 0220 	rsb	r2, r2, #32
 80004c8:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 80004cc:	fa21 f202 	lsr.w	r2, r1, r2
 80004d0:	eb43 0002 	adc.w	r0, r3, r2
 80004d4:	bf08      	it	eq
 80004d6:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80004da:	4770      	bx	lr

080004dc <__aeabi_fmul>:
 80004dc:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004e0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80004e4:	bf1e      	ittt	ne
 80004e6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80004ea:	ea92 0f0c 	teqne	r2, ip
 80004ee:	ea93 0f0c 	teqne	r3, ip
 80004f2:	d06f      	beq.n	80005d4 <__aeabi_fmul+0xf8>
 80004f4:	441a      	add	r2, r3
 80004f6:	ea80 0c01 	eor.w	ip, r0, r1
 80004fa:	0240      	lsls	r0, r0, #9
 80004fc:	bf18      	it	ne
 80004fe:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000502:	d01e      	beq.n	8000542 <__aeabi_fmul+0x66>
 8000504:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000508:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 800050c:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000510:	fba0 3101 	umull	r3, r1, r0, r1
 8000514:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000518:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 800051c:	bf3e      	ittt	cc
 800051e:	0049      	lslcc	r1, r1, #1
 8000520:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000524:	005b      	lslcc	r3, r3, #1
 8000526:	ea40 0001 	orr.w	r0, r0, r1
 800052a:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 800052e:	2afd      	cmp	r2, #253	; 0xfd
 8000530:	d81d      	bhi.n	800056e <__aeabi_fmul+0x92>
 8000532:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000536:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800053a:	bf08      	it	eq
 800053c:	f020 0001 	biceq.w	r0, r0, #1
 8000540:	4770      	bx	lr
 8000542:	f090 0f00 	teq	r0, #0
 8000546:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 800054a:	bf08      	it	eq
 800054c:	0249      	lsleq	r1, r1, #9
 800054e:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000552:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000556:	3a7f      	subs	r2, #127	; 0x7f
 8000558:	bfc2      	ittt	gt
 800055a:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 800055e:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000562:	4770      	bxgt	lr
 8000564:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000568:	f04f 0300 	mov.w	r3, #0
 800056c:	3a01      	subs	r2, #1
 800056e:	dc5d      	bgt.n	800062c <__aeabi_fmul+0x150>
 8000570:	f112 0f19 	cmn.w	r2, #25
 8000574:	bfdc      	itt	le
 8000576:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 800057a:	4770      	bxle	lr
 800057c:	f1c2 0200 	rsb	r2, r2, #0
 8000580:	0041      	lsls	r1, r0, #1
 8000582:	fa21 f102 	lsr.w	r1, r1, r2
 8000586:	f1c2 0220 	rsb	r2, r2, #32
 800058a:	fa00 fc02 	lsl.w	ip, r0, r2
 800058e:	ea5f 0031 	movs.w	r0, r1, rrx
 8000592:	f140 0000 	adc.w	r0, r0, #0
 8000596:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800059a:	bf08      	it	eq
 800059c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80005a0:	4770      	bx	lr
 80005a2:	f092 0f00 	teq	r2, #0
 80005a6:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80005aa:	bf02      	ittt	eq
 80005ac:	0040      	lsleq	r0, r0, #1
 80005ae:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80005b2:	3a01      	subeq	r2, #1
 80005b4:	d0f9      	beq.n	80005aa <__aeabi_fmul+0xce>
 80005b6:	ea40 000c 	orr.w	r0, r0, ip
 80005ba:	f093 0f00 	teq	r3, #0
 80005be:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80005c2:	bf02      	ittt	eq
 80005c4:	0049      	lsleq	r1, r1, #1
 80005c6:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80005ca:	3b01      	subeq	r3, #1
 80005cc:	d0f9      	beq.n	80005c2 <__aeabi_fmul+0xe6>
 80005ce:	ea41 010c 	orr.w	r1, r1, ip
 80005d2:	e78f      	b.n	80004f4 <__aeabi_fmul+0x18>
 80005d4:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005d8:	ea92 0f0c 	teq	r2, ip
 80005dc:	bf18      	it	ne
 80005de:	ea93 0f0c 	teqne	r3, ip
 80005e2:	d00a      	beq.n	80005fa <__aeabi_fmul+0x11e>
 80005e4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80005e8:	bf18      	it	ne
 80005ea:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80005ee:	d1d8      	bne.n	80005a2 <__aeabi_fmul+0xc6>
 80005f0:	ea80 0001 	eor.w	r0, r0, r1
 80005f4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80005f8:	4770      	bx	lr
 80005fa:	f090 0f00 	teq	r0, #0
 80005fe:	bf17      	itett	ne
 8000600:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000604:	4608      	moveq	r0, r1
 8000606:	f091 0f00 	teqne	r1, #0
 800060a:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 800060e:	d014      	beq.n	800063a <__aeabi_fmul+0x15e>
 8000610:	ea92 0f0c 	teq	r2, ip
 8000614:	d101      	bne.n	800061a <__aeabi_fmul+0x13e>
 8000616:	0242      	lsls	r2, r0, #9
 8000618:	d10f      	bne.n	800063a <__aeabi_fmul+0x15e>
 800061a:	ea93 0f0c 	teq	r3, ip
 800061e:	d103      	bne.n	8000628 <__aeabi_fmul+0x14c>
 8000620:	024b      	lsls	r3, r1, #9
 8000622:	bf18      	it	ne
 8000624:	4608      	movne	r0, r1
 8000626:	d108      	bne.n	800063a <__aeabi_fmul+0x15e>
 8000628:	ea80 0001 	eor.w	r0, r0, r1
 800062c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000630:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000634:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000638:	4770      	bx	lr
 800063a:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 800063e:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000642:	4770      	bx	lr

08000644 <__aeabi_fdiv>:
 8000644:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000648:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 800064c:	bf1e      	ittt	ne
 800064e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000652:	ea92 0f0c 	teqne	r2, ip
 8000656:	ea93 0f0c 	teqne	r3, ip
 800065a:	d069      	beq.n	8000730 <__aeabi_fdiv+0xec>
 800065c:	eba2 0203 	sub.w	r2, r2, r3
 8000660:	ea80 0c01 	eor.w	ip, r0, r1
 8000664:	0249      	lsls	r1, r1, #9
 8000666:	ea4f 2040 	mov.w	r0, r0, lsl #9
 800066a:	d037      	beq.n	80006dc <__aeabi_fdiv+0x98>
 800066c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000670:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000674:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000678:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 800067c:	428b      	cmp	r3, r1
 800067e:	bf38      	it	cc
 8000680:	005b      	lslcc	r3, r3, #1
 8000682:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000686:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 800068a:	428b      	cmp	r3, r1
 800068c:	bf24      	itt	cs
 800068e:	1a5b      	subcs	r3, r3, r1
 8000690:	ea40 000c 	orrcs.w	r0, r0, ip
 8000694:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000698:	bf24      	itt	cs
 800069a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800069e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80006a2:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 80006a6:	bf24      	itt	cs
 80006a8:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 80006ac:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80006b0:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 80006b4:	bf24      	itt	cs
 80006b6:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 80006ba:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80006be:	011b      	lsls	r3, r3, #4
 80006c0:	bf18      	it	ne
 80006c2:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 80006c6:	d1e0      	bne.n	800068a <__aeabi_fdiv+0x46>
 80006c8:	2afd      	cmp	r2, #253	; 0xfd
 80006ca:	f63f af50 	bhi.w	800056e <__aeabi_fmul+0x92>
 80006ce:	428b      	cmp	r3, r1
 80006d0:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80006d4:	bf08      	it	eq
 80006d6:	f020 0001 	biceq.w	r0, r0, #1
 80006da:	4770      	bx	lr
 80006dc:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80006e0:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80006e4:	327f      	adds	r2, #127	; 0x7f
 80006e6:	bfc2      	ittt	gt
 80006e8:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80006ec:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80006f0:	4770      	bxgt	lr
 80006f2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80006f6:	f04f 0300 	mov.w	r3, #0
 80006fa:	3a01      	subs	r2, #1
 80006fc:	e737      	b.n	800056e <__aeabi_fmul+0x92>
 80006fe:	f092 0f00 	teq	r2, #0
 8000702:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000706:	bf02      	ittt	eq
 8000708:	0040      	lsleq	r0, r0, #1
 800070a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800070e:	3a01      	subeq	r2, #1
 8000710:	d0f9      	beq.n	8000706 <__aeabi_fdiv+0xc2>
 8000712:	ea40 000c 	orr.w	r0, r0, ip
 8000716:	f093 0f00 	teq	r3, #0
 800071a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800071e:	bf02      	ittt	eq
 8000720:	0049      	lsleq	r1, r1, #1
 8000722:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000726:	3b01      	subeq	r3, #1
 8000728:	d0f9      	beq.n	800071e <__aeabi_fdiv+0xda>
 800072a:	ea41 010c 	orr.w	r1, r1, ip
 800072e:	e795      	b.n	800065c <__aeabi_fdiv+0x18>
 8000730:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000734:	ea92 0f0c 	teq	r2, ip
 8000738:	d108      	bne.n	800074c <__aeabi_fdiv+0x108>
 800073a:	0242      	lsls	r2, r0, #9
 800073c:	f47f af7d 	bne.w	800063a <__aeabi_fmul+0x15e>
 8000740:	ea93 0f0c 	teq	r3, ip
 8000744:	f47f af70 	bne.w	8000628 <__aeabi_fmul+0x14c>
 8000748:	4608      	mov	r0, r1
 800074a:	e776      	b.n	800063a <__aeabi_fmul+0x15e>
 800074c:	ea93 0f0c 	teq	r3, ip
 8000750:	d104      	bne.n	800075c <__aeabi_fdiv+0x118>
 8000752:	024b      	lsls	r3, r1, #9
 8000754:	f43f af4c 	beq.w	80005f0 <__aeabi_fmul+0x114>
 8000758:	4608      	mov	r0, r1
 800075a:	e76e      	b.n	800063a <__aeabi_fmul+0x15e>
 800075c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000760:	bf18      	it	ne
 8000762:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000766:	d1ca      	bne.n	80006fe <__aeabi_fdiv+0xba>
 8000768:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 800076c:	f47f af5c 	bne.w	8000628 <__aeabi_fmul+0x14c>
 8000770:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000774:	f47f af3c 	bne.w	80005f0 <__aeabi_fmul+0x114>
 8000778:	e75f      	b.n	800063a <__aeabi_fmul+0x15e>
 800077a:	bf00      	nop

0800077c <__aeabi_f2uiz>:
 800077c:	0042      	lsls	r2, r0, #1
 800077e:	d20e      	bcs.n	800079e <__aeabi_f2uiz+0x22>
 8000780:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000784:	d30b      	bcc.n	800079e <__aeabi_f2uiz+0x22>
 8000786:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800078a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800078e:	d409      	bmi.n	80007a4 <__aeabi_f2uiz+0x28>
 8000790:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000794:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000798:	fa23 f002 	lsr.w	r0, r3, r2
 800079c:	4770      	bx	lr
 800079e:	f04f 0000 	mov.w	r0, #0
 80007a2:	4770      	bx	lr
 80007a4:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80007a8:	d101      	bne.n	80007ae <__aeabi_f2uiz+0x32>
 80007aa:	0242      	lsls	r2, r0, #9
 80007ac:	d102      	bne.n	80007b4 <__aeabi_f2uiz+0x38>
 80007ae:	f04f 30ff 	mov.w	r0, #4294967295
 80007b2:	4770      	bx	lr
 80007b4:	f04f 0000 	mov.w	r0, #0
 80007b8:	4770      	bx	lr
 80007ba:	bf00      	nop

080007bc <ADC_PeriClockControl>:
 * Params: 		struct ADC_RegDef_t* *pADCx - ADC base address
 * 				uint8_t EnOrDi - Enable or disable value
 *
 */
void ADC_PeriClockControl(ADC_RegDef_t *pADCx, uint8_t EnOrDi)
{
 80007bc:	b480      	push	{r7}
 80007be:	b083      	sub	sp, #12
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	6078      	str	r0, [r7, #4]
 80007c4:	460b      	mov	r3, r1
 80007c6:	70fb      	strb	r3, [r7, #3]
	if (EnOrDi == ENABLE)
 80007c8:	78fb      	ldrb	r3, [r7, #3]
 80007ca:	2b01      	cmp	r3, #1
 80007cc:	d120      	bne.n	8000810 <ADC_PeriClockControl+0x54>
	{
		if (pADCx == ADC1)
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	4a22      	ldr	r2, [pc, #136]	; (800085c <ADC_PeriClockControl+0xa0>)
 80007d2:	4293      	cmp	r3, r2
 80007d4:	d106      	bne.n	80007e4 <ADC_PeriClockControl+0x28>
		{
			ADC1_PCLK_EN();
 80007d6:	4b22      	ldr	r3, [pc, #136]	; (8000860 <ADC_PeriClockControl+0xa4>)
 80007d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007da:	4a21      	ldr	r2, [pc, #132]	; (8000860 <ADC_PeriClockControl+0xa4>)
 80007dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80007e0:	6453      	str	r3, [r2, #68]	; 0x44
		else if (pADCx == ADC3)
		{
			ADC3_PCLK_DI();
		}
	}
}
 80007e2:	e035      	b.n	8000850 <ADC_PeriClockControl+0x94>
		else if (pADCx == ADC2)
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	4a1f      	ldr	r2, [pc, #124]	; (8000864 <ADC_PeriClockControl+0xa8>)
 80007e8:	4293      	cmp	r3, r2
 80007ea:	d106      	bne.n	80007fa <ADC_PeriClockControl+0x3e>
			ADC2_PCLK_EN();
 80007ec:	4b1c      	ldr	r3, [pc, #112]	; (8000860 <ADC_PeriClockControl+0xa4>)
 80007ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007f0:	4a1b      	ldr	r2, [pc, #108]	; (8000860 <ADC_PeriClockControl+0xa4>)
 80007f2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80007f6:	6453      	str	r3, [r2, #68]	; 0x44
}
 80007f8:	e02a      	b.n	8000850 <ADC_PeriClockControl+0x94>
		else if (pADCx == ADC3)
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	4a1a      	ldr	r2, [pc, #104]	; (8000868 <ADC_PeriClockControl+0xac>)
 80007fe:	4293      	cmp	r3, r2
 8000800:	d126      	bne.n	8000850 <ADC_PeriClockControl+0x94>
			ADC3_PCLK_EN();
 8000802:	4b17      	ldr	r3, [pc, #92]	; (8000860 <ADC_PeriClockControl+0xa4>)
 8000804:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000806:	4a16      	ldr	r2, [pc, #88]	; (8000860 <ADC_PeriClockControl+0xa4>)
 8000808:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800080c:	6453      	str	r3, [r2, #68]	; 0x44
}
 800080e:	e01f      	b.n	8000850 <ADC_PeriClockControl+0x94>
		if (pADCx == ADC1)
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	4a12      	ldr	r2, [pc, #72]	; (800085c <ADC_PeriClockControl+0xa0>)
 8000814:	4293      	cmp	r3, r2
 8000816:	d106      	bne.n	8000826 <ADC_PeriClockControl+0x6a>
			ADC1_PCLK_DI();
 8000818:	4b11      	ldr	r3, [pc, #68]	; (8000860 <ADC_PeriClockControl+0xa4>)
 800081a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800081c:	4a10      	ldr	r2, [pc, #64]	; (8000860 <ADC_PeriClockControl+0xa4>)
 800081e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000822:	6453      	str	r3, [r2, #68]	; 0x44
}
 8000824:	e014      	b.n	8000850 <ADC_PeriClockControl+0x94>
		else if (pADCx == ADC2)
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	4a0e      	ldr	r2, [pc, #56]	; (8000864 <ADC_PeriClockControl+0xa8>)
 800082a:	4293      	cmp	r3, r2
 800082c:	d106      	bne.n	800083c <ADC_PeriClockControl+0x80>
			ADC2_PCLK_DI();
 800082e:	4b0c      	ldr	r3, [pc, #48]	; (8000860 <ADC_PeriClockControl+0xa4>)
 8000830:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000832:	4a0b      	ldr	r2, [pc, #44]	; (8000860 <ADC_PeriClockControl+0xa4>)
 8000834:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8000838:	6453      	str	r3, [r2, #68]	; 0x44
}
 800083a:	e009      	b.n	8000850 <ADC_PeriClockControl+0x94>
		else if (pADCx == ADC3)
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	4a0a      	ldr	r2, [pc, #40]	; (8000868 <ADC_PeriClockControl+0xac>)
 8000840:	4293      	cmp	r3, r2
 8000842:	d105      	bne.n	8000850 <ADC_PeriClockControl+0x94>
			ADC3_PCLK_DI();
 8000844:	4b06      	ldr	r3, [pc, #24]	; (8000860 <ADC_PeriClockControl+0xa4>)
 8000846:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000848:	4a05      	ldr	r2, [pc, #20]	; (8000860 <ADC_PeriClockControl+0xa4>)
 800084a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800084e:	6453      	str	r3, [r2, #68]	; 0x44
}
 8000850:	bf00      	nop
 8000852:	370c      	adds	r7, #12
 8000854:	46bd      	mov	sp, r7
 8000856:	bc80      	pop	{r7}
 8000858:	4770      	bx	lr
 800085a:	bf00      	nop
 800085c:	40012000 	.word	0x40012000
 8000860:	40023800 	.word	0x40023800
 8000864:	40012100 	.word	0x40012100
 8000868:	40012200 	.word	0x40012200

0800086c <ADC_OnOff>:
 * Params:		ADC_RegDef_t *pADCx - ADC base address
 * 				uint8_t EnOrDi - On or Off
 *
 */
static void ADC_OnOff(ADC_RegDef_t *pADCx, uint8_t EnOrDi)
{
 800086c:	b480      	push	{r7}
 800086e:	b083      	sub	sp, #12
 8000870:	af00      	add	r7, sp, #0
 8000872:	6078      	str	r0, [r7, #4]
 8000874:	460b      	mov	r3, r1
 8000876:	70fb      	strb	r3, [r7, #3]
	if (EnOrDi == ENABLE)
 8000878:	78fb      	ldrb	r3, [r7, #3]
 800087a:	2b01      	cmp	r3, #1
 800087c:	d106      	bne.n	800088c <ADC_OnOff+0x20>
	{
		pADCx->CR2 |= (1 << 0);
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	689b      	ldr	r3, [r3, #8]
 8000882:	f043 0201 	orr.w	r2, r3, #1
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	609a      	str	r2, [r3, #8]
	}
	else
	{
		pADCx->CR2 &= ~(1 << 0);
	}
}
 800088a:	e005      	b.n	8000898 <ADC_OnOff+0x2c>
		pADCx->CR2 &= ~(1 << 0);
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	689b      	ldr	r3, [r3, #8]
 8000890:	f023 0201 	bic.w	r2, r3, #1
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	609a      	str	r2, [r3, #8]
}
 8000898:	bf00      	nop
 800089a:	370c      	adds	r7, #12
 800089c:	46bd      	mov	sp, r7
 800089e:	bc80      	pop	{r7}
 80008a0:	4770      	bx	lr
	...

080008a4 <ADC_Init>:
 *
 * Params: 		struct ADC_Handle_t* *pADCx - ADC handle address
 *
 */
void ADC_Init(ADC_Handle_t *pADCxHandle)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b082      	sub	sp, #8
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	6078      	str	r0, [r7, #4]
	// 1. Enable clock signal to the ADC
	ADC_PeriClockControl(pADCxHandle->pADCx, ENABLE);
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	2101      	movs	r1, #1
 80008b2:	4618      	mov	r0, r3
 80008b4:	f7ff ff82 	bl	80007bc <ADC_PeriClockControl>

	// 2. Set the ADC clock prescaler
	ADC_COMM->CCR |= (uint32_t)(pADCxHandle->ADC_Config.ADC_PreSc << 16);
 80008b8:	4b24      	ldr	r3, [pc, #144]	; (800094c <ADC_Init+0xa8>)
 80008ba:	685b      	ldr	r3, [r3, #4]
 80008bc:	687a      	ldr	r2, [r7, #4]
 80008be:	7952      	ldrb	r2, [r2, #5]
 80008c0:	0412      	lsls	r2, r2, #16
 80008c2:	4611      	mov	r1, r2
 80008c4:	4a21      	ldr	r2, [pc, #132]	; (800094c <ADC_Init+0xa8>)
 80008c6:	430b      	orrs	r3, r1
 80008c8:	6053      	str	r3, [r2, #4]

	// 3. Set ADC resolution
	pADCxHandle->pADCx->CR1 |= (uint32_t)(pADCxHandle->ADC_Config.ADC_Res << 24);
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	681b      	ldr	r3, [r3, #0]
 80008ce:	685a      	ldr	r2, [r3, #4]
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	791b      	ldrb	r3, [r3, #4]
 80008d4:	061b      	lsls	r3, r3, #24
 80008d6:	4619      	mov	r1, r3
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	430a      	orrs	r2, r1
 80008de:	605a      	str	r2, [r3, #4]

	// 4. Continuous or single read mode
	if (pADCxHandle->ADC_Config.ADC_Mode == ADC_SINGLE_READ)
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	799b      	ldrb	r3, [r3, #6]
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d108      	bne.n	80008fa <ADC_Init+0x56>
	{
		pADCxHandle->pADCx->CR2 &= ~(1 << 1);
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	689a      	ldr	r2, [r3, #8]
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	681b      	ldr	r3, [r3, #0]
 80008f2:	f022 0202 	bic.w	r2, r2, #2
 80008f6:	609a      	str	r2, [r3, #8]
 80008f8:	e00b      	b.n	8000912 <ADC_Init+0x6e>
	}
	else if (pADCxHandle->ADC_Config.ADC_Mode == ADC_CONT_READ)
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	799b      	ldrb	r3, [r3, #6]
 80008fe:	2b01      	cmp	r3, #1
 8000900:	d107      	bne.n	8000912 <ADC_Init+0x6e>
	{
		pADCxHandle->pADCx->CR2 |= (1 << 1);
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	681b      	ldr	r3, [r3, #0]
 8000906:	689a      	ldr	r2, [r3, #8]
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	f042 0202 	orr.w	r2, r2, #2
 8000910:	609a      	str	r2, [r3, #8]
	}

	// 5. Set up DMA
	if (pADCxHandle->ADC_Config.ADC_DMA_Ctrl == ADC_DMA_EN)
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	7a5b      	ldrb	r3, [r3, #9]
 8000916:	2b01      	cmp	r3, #1
 8000918:	d113      	bne.n	8000942 <ADC_Init+0x9e>
	{
		pADCxHandle->pADCx->CR2 |= (1 << 8);
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	681b      	ldr	r3, [r3, #0]
 800091e:	689a      	ldr	r2, [r3, #8]
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000928:	609a      	str	r2, [r3, #8]
		if (pADCxHandle->ADC_Config.ADC_DDS_Ctrl == ADC_DDS_EN)
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	7a9b      	ldrb	r3, [r3, #10]
 800092e:	2b01      	cmp	r3, #1
 8000930:	d107      	bne.n	8000942 <ADC_Init+0x9e>
		{
			pADCxHandle->pADCx->CR2 |= (1 << 9);
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	681b      	ldr	r3, [r3, #0]
 8000936:	689a      	ldr	r2, [r3, #8]
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000940:	609a      	str	r2, [r3, #8]
		}
	}
}
 8000942:	bf00      	nop
 8000944:	3708      	adds	r7, #8
 8000946:	46bd      	mov	sp, r7
 8000948:	bd80      	pop	{r7, pc}
 800094a:	bf00      	nop
 800094c:	40012300 	.word	0x40012300

08000950 <ADC_GetFlagStatus>:
 * Params: 		struct ADC_RegDef_t *pADCx - ADC base address
 * 				uint8_t ADC_FLAG - flag being checked
 *
 */
uint8_t ADC_GetFlagStatus(ADC_RegDef_t *pADCx, uint8_t ADC_FLAG)
{
 8000950:	b480      	push	{r7}
 8000952:	b083      	sub	sp, #12
 8000954:	af00      	add	r7, sp, #0
 8000956:	6078      	str	r0, [r7, #4]
 8000958:	460b      	mov	r3, r1
 800095a:	70fb      	strb	r3, [r7, #3]
	return (pADCx->SR & ADC_FLAG);
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	b2da      	uxtb	r2, r3
 8000962:	78fb      	ldrb	r3, [r7, #3]
 8000964:	4013      	ands	r3, r2
 8000966:	b2db      	uxtb	r3, r3
}
 8000968:	4618      	mov	r0, r3
 800096a:	370c      	adds	r7, #12
 800096c:	46bd      	mov	sp, r7
 800096e:	bc80      	pop	{r7}
 8000970:	4770      	bx	lr
	...

08000974 <ADC_IRQConfig>:
 * Params: 		uint8_t IRQNumber - IRQ position being configured
 * 				uint8_t Value - Enabling or disabling interrupt (1 or 0)
 *
 */
void ADC_IRQConfig(uint8_t IRQNumber, uint8_t EnOrDi)
{
 8000974:	b490      	push	{r4, r7}
 8000976:	b082      	sub	sp, #8
 8000978:	af00      	add	r7, sp, #0
 800097a:	4603      	mov	r3, r0
 800097c:	460a      	mov	r2, r1
 800097e:	71fb      	strb	r3, [r7, #7]
 8000980:	4613      	mov	r3, r2
 8000982:	71bb      	strb	r3, [r7, #6]
	if (EnOrDi == ENABLE)
 8000984:	79bb      	ldrb	r3, [r7, #6]
 8000986:	2b01      	cmp	r3, #1
 8000988:	d113      	bne.n	80009b2 <ADC_IRQConfig+0x3e>
	{
		NVIC_ISER->ISER[IRQNumber / 32] |= (1 << (IRQNumber % 32));
 800098a:	4a17      	ldr	r2, [pc, #92]	; (80009e8 <ADC_IRQConfig+0x74>)
 800098c:	79fb      	ldrb	r3, [r7, #7]
 800098e:	095b      	lsrs	r3, r3, #5
 8000990:	b2d8      	uxtb	r0, r3
 8000992:	4603      	mov	r3, r0
 8000994:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000998:	79fa      	ldrb	r2, [r7, #7]
 800099a:	f002 021f 	and.w	r2, r2, #31
 800099e:	2101      	movs	r1, #1
 80009a0:	fa01 f202 	lsl.w	r2, r1, r2
 80009a4:	4614      	mov	r4, r2
 80009a6:	4a10      	ldr	r2, [pc, #64]	; (80009e8 <ADC_IRQConfig+0x74>)
 80009a8:	4601      	mov	r1, r0
 80009aa:	4323      	orrs	r3, r4
 80009ac:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	}
	else if (EnOrDi == DISABLE)
	{
		NVIC_ICER->ICER[IRQNumber / 32] |= (1 << (IRQNumber % 32));
	}
}
 80009b0:	e015      	b.n	80009de <ADC_IRQConfig+0x6a>
	else if (EnOrDi == DISABLE)
 80009b2:	79bb      	ldrb	r3, [r7, #6]
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d112      	bne.n	80009de <ADC_IRQConfig+0x6a>
		NVIC_ICER->ICER[IRQNumber / 32] |= (1 << (IRQNumber % 32));
 80009b8:	4a0c      	ldr	r2, [pc, #48]	; (80009ec <ADC_IRQConfig+0x78>)
 80009ba:	79fb      	ldrb	r3, [r7, #7]
 80009bc:	095b      	lsrs	r3, r3, #5
 80009be:	b2d8      	uxtb	r0, r3
 80009c0:	4603      	mov	r3, r0
 80009c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009c6:	79fa      	ldrb	r2, [r7, #7]
 80009c8:	f002 021f 	and.w	r2, r2, #31
 80009cc:	2101      	movs	r1, #1
 80009ce:	fa01 f202 	lsl.w	r2, r1, r2
 80009d2:	4614      	mov	r4, r2
 80009d4:	4a05      	ldr	r2, [pc, #20]	; (80009ec <ADC_IRQConfig+0x78>)
 80009d6:	4601      	mov	r1, r0
 80009d8:	4323      	orrs	r3, r4
 80009da:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
}
 80009de:	bf00      	nop
 80009e0:	3708      	adds	r7, #8
 80009e2:	46bd      	mov	sp, r7
 80009e4:	bc90      	pop	{r4, r7}
 80009e6:	4770      	bx	lr
 80009e8:	e000e100 	.word	0xe000e100
 80009ec:	e000e180 	.word	0xe000e180

080009f0 <ADC_Read_Reg_IT>:
 * 				uint8_t ADC_SMP_CYC - Number of cycle to take reading
 * 				uint8_t ADC_DAQ_MODE - Take single reading or continuous mode
 *
 */
uint8_t ADC_Read_Reg_IT(ADC_Handle_t *pADCxHandle, uint8_t ADC_CHAN, uint8_t ADC_SMP_CYC)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b084      	sub	sp, #16
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	6078      	str	r0, [r7, #4]
 80009f8:	460b      	mov	r3, r1
 80009fa:	70fb      	strb	r3, [r7, #3]
 80009fc:	4613      	mov	r3, r2
 80009fe:	70bb      	strb	r3, [r7, #2]
	uint8_t state = pADCxHandle->state;
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	7c1b      	ldrb	r3, [r3, #16]
 8000a04:	73fb      	strb	r3, [r7, #15]

	if (state == ADC_READY)
 8000a06:	7bfb      	ldrb	r3, [r7, #15]
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d178      	bne.n	8000afe <ADC_Read_Reg_IT+0x10e>
	{
		pADCxHandle->state = ADC_BUSY_READ;
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	2201      	movs	r2, #1
 8000a10:	741a      	strb	r2, [r3, #16]

		// 1. Set the ADC On (Note: several steps b/w this and 'START' to allow stabilization time
		ADC_OnOff(pADCxHandle->pADCx, ENABLE);
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	681b      	ldr	r3, [r3, #0]
 8000a16:	2101      	movs	r1, #1
 8000a18:	4618      	mov	r0, r3
 8000a1a:	f7ff ff27 	bl	800086c <ADC_OnOff>

		// 2. Disable scan mode
		pADCxHandle->pADCx->CR1 &= ~(1 << 8);
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	681b      	ldr	r3, [r3, #0]
 8000a22:	685a      	ldr	r2, [r3, #4]
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000a2c:	605a      	str	r2, [r3, #4]

		// 3. Set number of channels in sequence to 1
		pADCxHandle->pADCx->SQR[0] &= ~(0xF << 20);
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	681b      	ldr	r3, [r3, #0]
 8000a32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8000a3c:	62da      	str	r2, [r3, #44]	; 0x2c

		// 4. Load the channel to be read
		pADCxHandle->pADCx->SQR[2] = (ADC_CHAN << 0);
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	681b      	ldr	r3, [r3, #0]
 8000a42:	78fa      	ldrb	r2, [r7, #3]
 8000a44:	635a      	str	r2, [r3, #52]	; 0x34

		// 5. Number of sampling cycles
		uint8_t temp1 = 1 - ADC_CHAN / 10, temp2 = ADC_CHAN % 9;
 8000a46:	78fb      	ldrb	r3, [r7, #3]
 8000a48:	4a2f      	ldr	r2, [pc, #188]	; (8000b08 <ADC_Read_Reg_IT+0x118>)
 8000a4a:	fba2 2303 	umull	r2, r3, r2, r3
 8000a4e:	08db      	lsrs	r3, r3, #3
 8000a50:	b2db      	uxtb	r3, r3
 8000a52:	f1c3 0301 	rsb	r3, r3, #1
 8000a56:	73bb      	strb	r3, [r7, #14]
 8000a58:	78fa      	ldrb	r2, [r7, #3]
 8000a5a:	4b2c      	ldr	r3, [pc, #176]	; (8000b0c <ADC_Read_Reg_IT+0x11c>)
 8000a5c:	fba3 1302 	umull	r1, r3, r3, r2
 8000a60:	0859      	lsrs	r1, r3, #1
 8000a62:	460b      	mov	r3, r1
 8000a64:	00db      	lsls	r3, r3, #3
 8000a66:	440b      	add	r3, r1
 8000a68:	1ad3      	subs	r3, r2, r3
 8000a6a:	737b      	strb	r3, [r7, #13]
		pADCxHandle->pADCx->SMPR[temp1] = (ADC_SMP_CYC << temp2);
 8000a6c:	78ba      	ldrb	r2, [r7, #2]
 8000a6e:	7b7b      	ldrb	r3, [r7, #13]
 8000a70:	fa02 f103 	lsl.w	r1, r2, r3
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	681a      	ldr	r2, [r3, #0]
 8000a78:	7bbb      	ldrb	r3, [r7, #14]
 8000a7a:	3302      	adds	r3, #2
 8000a7c:	009b      	lsls	r3, r3, #2
 8000a7e:	4413      	add	r3, r2
 8000a80:	6059      	str	r1, [r3, #4]

		// 6. Enable end of conversion interrupt
		pADCxHandle->pADCx->CR1 |= (1 << 5);
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	681b      	ldr	r3, [r3, #0]
 8000a86:	685a      	ldr	r2, [r3, #4]
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	f042 0220 	orr.w	r2, r2, #32
 8000a90:	605a      	str	r2, [r3, #4]
		ADC_IRQConfig(IRQ_POS_ADC, ENABLE);
 8000a92:	2101      	movs	r1, #1
 8000a94:	2012      	movs	r0, #18
 8000a96:	f7ff ff6d 	bl	8000974 <ADC_IRQConfig>

		// 7. Set DMA transfer if requested
		pADCxHandle->pADCx->CR2 |= (pADCxHandle->ADC_Config.ADC_DMA_Ctrl << 8);
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	681b      	ldr	r3, [r3, #0]
 8000a9e:	689a      	ldr	r2, [r3, #8]
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	7a5b      	ldrb	r3, [r3, #9]
 8000aa4:	021b      	lsls	r3, r3, #8
 8000aa6:	4619      	mov	r1, r3
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	430a      	orrs	r2, r1
 8000aae:	609a      	str	r2, [r3, #8]
		pADCxHandle->pADCx->CR2 |= (pADCxHandle->ADC_Config.ADC_DDS_Ctrl << 9);
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	689a      	ldr	r2, [r3, #8]
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	7a9b      	ldrb	r3, [r3, #10]
 8000aba:	025b      	lsls	r3, r3, #9
 8000abc:	4619      	mov	r1, r3
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	430a      	orrs	r2, r1
 8000ac4:	609a      	str	r2, [r3, #8]

		// 8. Either set trigger or begin conversion
		if (pADCxHandle->ADC_Config.ADC_Trig_Pol == ADC_EXTEN_DI)
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	79db      	ldrb	r3, [r3, #7]
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d108      	bne.n	8000ae0 <ADC_Read_Reg_IT+0xf0>
		{
			// Start conversion of regular channels
			pADCxHandle->pADCx->CR2 |= (1 << 30);
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	689a      	ldr	r2, [r3, #8]
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8000adc:	609a      	str	r2, [r3, #8]
 8000ade:	e00e      	b.n	8000afe <ADC_Read_Reg_IT+0x10e>
		}
		else
		{
			// Configure external trigger and trigger source
			pADCxHandle->pADCx->CR2 |= (uint32_t)(pADCxHandle->ADC_Config.ADC_Trig_Pol << 28) | (uint32_t)(pADCxHandle->ADC_Config.ADC_Trig_Src << 24);
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	6899      	ldr	r1, [r3, #8]
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	79db      	ldrb	r3, [r3, #7]
 8000aea:	071b      	lsls	r3, r3, #28
 8000aec:	461a      	mov	r2, r3
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	7a1b      	ldrb	r3, [r3, #8]
 8000af2:	061b      	lsls	r3, r3, #24
 8000af4:	431a      	orrs	r2, r3
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	430a      	orrs	r2, r1
 8000afc:	609a      	str	r2, [r3, #8]
		}
	}

	return state;
 8000afe:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b00:	4618      	mov	r0, r3
 8000b02:	3710      	adds	r7, #16
 8000b04:	46bd      	mov	sp, r7
 8000b06:	bd80      	pop	{r7, pc}
 8000b08:	cccccccd 	.word	0xcccccccd
 8000b0c:	38e38e39 	.word	0x38e38e39

08000b10 <ADC_EV_IRQHandling>:
 *
 * Params: 		struct ADC_Handle_t* *pADCx - ADC handle address
 *
 */
void ADC_EV_IRQHandling(ADC_Handle_t *pADCxHandle)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b082      	sub	sp, #8
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	6078      	str	r0, [r7, #4]
	// 1. Is analog watchdog interrupt?
	if (ADC_GetFlagStatus(pADCxHandle->pADCx, ADC_FLAG_AWD))
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	2101      	movs	r1, #1
 8000b1e:	4618      	mov	r0, r3
 8000b20:	f7ff ff16 	bl	8000950 <ADC_GetFlagStatus>
 8000b24:	4603      	mov	r3, r0
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d007      	beq.n	8000b3a <ADC_EV_IRQHandling+0x2a>
	{
		pADCxHandle->pADCx->SR &= ~(1 << 5);
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	681a      	ldr	r2, [r3, #0]
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	f022 0220 	bic.w	r2, r2, #32
 8000b38:	601a      	str	r2, [r3, #0]
	}

	// 2. Is end of conversion interrupt?
	if (ADC_GetFlagStatus(pADCxHandle->pADCx, ADC_FLAG_EOC))
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	681b      	ldr	r3, [r3, #0]
 8000b3e:	2102      	movs	r1, #2
 8000b40:	4618      	mov	r0, r3
 8000b42:	f7ff ff05 	bl	8000950 <ADC_GetFlagStatus>
 8000b46:	4603      	mov	r3, r0
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d002      	beq.n	8000b52 <ADC_EV_IRQHandling+0x42>
	{
		ADC_Read_IT_Handle(pADCxHandle);
 8000b4c:	6878      	ldr	r0, [r7, #4]
 8000b4e:	f000 f826 	bl	8000b9e <ADC_Read_IT_Handle>
	}

	// 3. Is injected channel end of conversion interrupt?
	if (ADC_GetFlagStatus(pADCxHandle->pADCx, ADC_FLAG_JEOC))
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	2104      	movs	r1, #4
 8000b58:	4618      	mov	r0, r3
 8000b5a:	f7ff fef9 	bl	8000950 <ADC_GetFlagStatus>
 8000b5e:	4603      	mov	r3, r0
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d007      	beq.n	8000b74 <ADC_EV_IRQHandling+0x64>
	{
		pADCxHandle->pADCx->SR &= ~(1 << 3);
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	681a      	ldr	r2, [r3, #0]
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	f022 0208 	bic.w	r2, r2, #8
 8000b72:	601a      	str	r2, [r3, #0]
	}

	// 4. Is overrun interrupt?
	if (ADC_GetFlagStatus(pADCxHandle->pADCx, ADC_FLAG_OVR))
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	2120      	movs	r1, #32
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	f7ff fee8 	bl	8000950 <ADC_GetFlagStatus>
 8000b80:	4603      	mov	r3, r0
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d007      	beq.n	8000b96 <ADC_EV_IRQHandling+0x86>
	{
		pADCxHandle->pADCx->SR &= ~(1 << 0);
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	681a      	ldr	r2, [r3, #0]
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	f022 0201 	bic.w	r2, r2, #1
 8000b94:	601a      	str	r2, [r3, #0]
	}
}
 8000b96:	bf00      	nop
 8000b98:	3708      	adds	r7, #8
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	bd80      	pop	{r7, pc}

08000b9e <ADC_Read_IT_Handle>:
 *
 * Params: 		struct ADC_Handle_t* *pADCx - ADC handle address
 *
 */
void ADC_Read_IT_Handle(ADC_Handle_t *pADCxHandle)
{
 8000b9e:	b580      	push	{r7, lr}
 8000ba0:	b082      	sub	sp, #8
 8000ba2:	af00      	add	r7, sp, #0
 8000ba4:	6078      	str	r0, [r7, #4]
	// Read value from DR into buffer
	*(pADCxHandle->pDataBuffer) = pADCxHandle->pADCx->DR & 0xFFFF;
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	681b      	ldr	r3, [r3, #0]
 8000baa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	68db      	ldr	r3, [r3, #12]
 8000bb0:	b292      	uxth	r2, r2
 8000bb2:	801a      	strh	r2, [r3, #0]

	if (pADCxHandle->ADC_Config.ADC_Mode == ADC_CONT_READ)
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	799b      	ldrb	r3, [r3, #6]
 8000bb8:	2b01      	cmp	r3, #1
 8000bba:	d104      	bne.n	8000bc6 <ADC_Read_IT_Handle+0x28>
	{
		// If in continuous mode, send callback on each read
		ADC_ApplicationCallbackEvent(pADCxHandle, ADC_READ_CMPLT);
 8000bbc:	2100      	movs	r1, #0
 8000bbe:	6878      	ldr	r0, [r7, #4]
 8000bc0:	f3af 8000 	nop.w
		{
			ADC_OnOff(pADCxHandle->pADCx, DISABLE);
			ADC_ApplicationCallbackEvent(pADCxHandle, ADC_READ_CMPLT);
		}
	}
}
 8000bc4:	e01c      	b.n	8000c00 <ADC_Read_IT_Handle+0x62>
	else if (pADCxHandle->ADC_Config.ADC_Mode == ADC_SINGLE_READ)
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	799b      	ldrb	r3, [r3, #6]
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d118      	bne.n	8000c00 <ADC_Read_IT_Handle+0x62>
		(pADCxHandle->pDataBuffer)++;
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	68db      	ldr	r3, [r3, #12]
 8000bd2:	1c9a      	adds	r2, r3, #2
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	60da      	str	r2, [r3, #12]
		pADCxHandle->dataLen--;
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	7c5b      	ldrb	r3, [r3, #17]
 8000bdc:	3b01      	subs	r3, #1
 8000bde:	b2da      	uxtb	r2, r3
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	745a      	strb	r2, [r3, #17]
		if (pADCxHandle->dataLen == 0)
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	7c5b      	ldrb	r3, [r3, #17]
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d109      	bne.n	8000c00 <ADC_Read_IT_Handle+0x62>
			ADC_OnOff(pADCxHandle->pADCx, DISABLE);
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	2100      	movs	r1, #0
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	f7ff fe3a 	bl	800086c <ADC_OnOff>
			ADC_ApplicationCallbackEvent(pADCxHandle, ADC_READ_CMPLT);
 8000bf8:	2100      	movs	r1, #0
 8000bfa:	6878      	ldr	r0, [r7, #4]
 8000bfc:	f3af 8000 	nop.w
}
 8000c00:	bf00      	nop
 8000c02:	3708      	adds	r7, #8
 8000c04:	46bd      	mov	sp, r7
 8000c06:	bd80      	pop	{r7, pc}

08000c08 <DMA_PeriClockControl>:
 * Params: 		struct DMA_RegDef_t *pDMAx - DMA base address
 * 				uint8_t EnOrDi - Enable or disable value
 *
 */
void DMA_PeriClockControl(DMA_RegDef_t *pDMAx, uint8_t EnOrDi)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	b083      	sub	sp, #12
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	6078      	str	r0, [r7, #4]
 8000c10:	460b      	mov	r3, r1
 8000c12:	70fb      	strb	r3, [r7, #3]
	if (EnOrDi == ENABLE)
 8000c14:	78fb      	ldrb	r3, [r7, #3]
 8000c16:	2b01      	cmp	r3, #1
 8000c18:	d115      	bne.n	8000c46 <DMA_PeriClockControl+0x3e>
	{
		if (pDMAx == DMA1)
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	4a17      	ldr	r2, [pc, #92]	; (8000c7c <DMA_PeriClockControl+0x74>)
 8000c1e:	4293      	cmp	r3, r2
 8000c20:	d106      	bne.n	8000c30 <DMA_PeriClockControl+0x28>
		{
			DMA1_PCLK_EN();
 8000c22:	4b17      	ldr	r3, [pc, #92]	; (8000c80 <DMA_PeriClockControl+0x78>)
 8000c24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c26:	4a16      	ldr	r2, [pc, #88]	; (8000c80 <DMA_PeriClockControl+0x78>)
 8000c28:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000c2c:	6313      	str	r3, [r2, #48]	; 0x30
		else if (pDMAx == DMA2)
		{
			DMA2_PCLK_DI();
		}
	}
}
 8000c2e:	e01f      	b.n	8000c70 <DMA_PeriClockControl+0x68>
		else if (pDMAx == DMA2)
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	4a14      	ldr	r2, [pc, #80]	; (8000c84 <DMA_PeriClockControl+0x7c>)
 8000c34:	4293      	cmp	r3, r2
 8000c36:	d11b      	bne.n	8000c70 <DMA_PeriClockControl+0x68>
			DMA2_PCLK_EN();
 8000c38:	4b11      	ldr	r3, [pc, #68]	; (8000c80 <DMA_PeriClockControl+0x78>)
 8000c3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c3c:	4a10      	ldr	r2, [pc, #64]	; (8000c80 <DMA_PeriClockControl+0x78>)
 8000c3e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000c42:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000c44:	e014      	b.n	8000c70 <DMA_PeriClockControl+0x68>
		if (pDMAx == DMA1)
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	4a0c      	ldr	r2, [pc, #48]	; (8000c7c <DMA_PeriClockControl+0x74>)
 8000c4a:	4293      	cmp	r3, r2
 8000c4c:	d106      	bne.n	8000c5c <DMA_PeriClockControl+0x54>
			DMA1_PCLK_DI();
 8000c4e:	4b0c      	ldr	r3, [pc, #48]	; (8000c80 <DMA_PeriClockControl+0x78>)
 8000c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c52:	4a0b      	ldr	r2, [pc, #44]	; (8000c80 <DMA_PeriClockControl+0x78>)
 8000c54:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8000c58:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000c5a:	e009      	b.n	8000c70 <DMA_PeriClockControl+0x68>
		else if (pDMAx == DMA2)
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	4a09      	ldr	r2, [pc, #36]	; (8000c84 <DMA_PeriClockControl+0x7c>)
 8000c60:	4293      	cmp	r3, r2
 8000c62:	d105      	bne.n	8000c70 <DMA_PeriClockControl+0x68>
			DMA2_PCLK_DI();
 8000c64:	4b06      	ldr	r3, [pc, #24]	; (8000c80 <DMA_PeriClockControl+0x78>)
 8000c66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c68:	4a05      	ldr	r2, [pc, #20]	; (8000c80 <DMA_PeriClockControl+0x78>)
 8000c6a:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8000c6e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000c70:	bf00      	nop
 8000c72:	370c      	adds	r7, #12
 8000c74:	46bd      	mov	sp, r7
 8000c76:	bc80      	pop	{r7}
 8000c78:	4770      	bx	lr
 8000c7a:	bf00      	nop
 8000c7c:	40026000 	.word	0x40026000
 8000c80:	40023800 	.word	0x40023800
 8000c84:	40026400 	.word	0x40026400

08000c88 <DMA_StartStop>:


static void DMA_StartStop(DMA_Handle_t *pDMAxHandle, uint8_t EnOrDi)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	b085      	sub	sp, #20
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
 8000c90:	460b      	mov	r3, r1
 8000c92:	70fb      	strb	r3, [r7, #3]
	uint8_t streamNum = pDMAxHandle->DMA_Stream;
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	7c1b      	ldrb	r3, [r3, #16]
 8000c98:	73fb      	strb	r3, [r7, #15]

	if (EnOrDi == ENABLE)
 8000c9a:	78fb      	ldrb	r3, [r7, #3]
 8000c9c:	2b01      	cmp	r3, #1
 8000c9e:	d116      	bne.n	8000cce <DMA_StartStop+0x46>
	{
		pDMAxHandle->pDMAx->DMA_Strm[streamNum].SCR |= (1 << 0);
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	6819      	ldr	r1, [r3, #0]
 8000ca4:	7bfa      	ldrb	r2, [r7, #15]
 8000ca6:	4613      	mov	r3, r2
 8000ca8:	005b      	lsls	r3, r3, #1
 8000caa:	4413      	add	r3, r2
 8000cac:	00db      	lsls	r3, r3, #3
 8000cae:	440b      	add	r3, r1
 8000cb0:	3310      	adds	r3, #16
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	687a      	ldr	r2, [r7, #4]
 8000cb6:	6810      	ldr	r0, [r2, #0]
 8000cb8:	7bfa      	ldrb	r2, [r7, #15]
 8000cba:	f043 0101 	orr.w	r1, r3, #1
 8000cbe:	4613      	mov	r3, r2
 8000cc0:	005b      	lsls	r3, r3, #1
 8000cc2:	4413      	add	r3, r2
 8000cc4:	00db      	lsls	r3, r3, #3
 8000cc6:	4403      	add	r3, r0
 8000cc8:	3310      	adds	r3, #16
 8000cca:	6019      	str	r1, [r3, #0]
	}
	else
	{
		pDMAxHandle->pDMAx->DMA_Strm[streamNum].SCR &= ~(1 << 0);
	}
}
 8000ccc:	e015      	b.n	8000cfa <DMA_StartStop+0x72>
		pDMAxHandle->pDMAx->DMA_Strm[streamNum].SCR &= ~(1 << 0);
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	6819      	ldr	r1, [r3, #0]
 8000cd2:	7bfa      	ldrb	r2, [r7, #15]
 8000cd4:	4613      	mov	r3, r2
 8000cd6:	005b      	lsls	r3, r3, #1
 8000cd8:	4413      	add	r3, r2
 8000cda:	00db      	lsls	r3, r3, #3
 8000cdc:	440b      	add	r3, r1
 8000cde:	3310      	adds	r3, #16
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	687a      	ldr	r2, [r7, #4]
 8000ce4:	6810      	ldr	r0, [r2, #0]
 8000ce6:	7bfa      	ldrb	r2, [r7, #15]
 8000ce8:	f023 0101 	bic.w	r1, r3, #1
 8000cec:	4613      	mov	r3, r2
 8000cee:	005b      	lsls	r3, r3, #1
 8000cf0:	4413      	add	r3, r2
 8000cf2:	00db      	lsls	r3, r3, #3
 8000cf4:	4403      	add	r3, r0
 8000cf6:	3310      	adds	r3, #16
 8000cf8:	6019      	str	r1, [r3, #0]
}
 8000cfa:	bf00      	nop
 8000cfc:	3714      	adds	r7, #20
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	bc80      	pop	{r7}
 8000d02:	4770      	bx	lr

08000d04 <DMA_Init>:
 *
 * Params: 		struct DMA_Handle_t *pDMAxHandle - DMA handle address
 *
 */
void DMA_Init(DMA_Handle_t *pDMAxHandle)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b084      	sub	sp, #16
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
	// 1. Turn on peripheral clock
	DMA_PeriClockControl(pDMAxHandle->pDMAx, ENABLE);
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	2101      	movs	r1, #1
 8000d12:	4618      	mov	r0, r3
 8000d14:	f7ff ff78 	bl	8000c08 <DMA_PeriClockControl>

	uint8_t streamNum = pDMAxHandle->DMA_Stream;
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	7c1b      	ldrb	r3, [r3, #16]
 8000d1c:	73fb      	strb	r3, [r7, #15]

	// 2. Set the channel number
	pDMAxHandle->pDMAx->DMA_Strm[streamNum].SCR |= (pDMAxHandle->DMA_Config.DMA_Channel << 25);
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	6819      	ldr	r1, [r3, #0]
 8000d22:	7bfa      	ldrb	r2, [r7, #15]
 8000d24:	4613      	mov	r3, r2
 8000d26:	005b      	lsls	r3, r3, #1
 8000d28:	4413      	add	r3, r2
 8000d2a:	00db      	lsls	r3, r3, #3
 8000d2c:	440b      	add	r3, r1
 8000d2e:	3310      	adds	r3, #16
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	687a      	ldr	r2, [r7, #4]
 8000d34:	7912      	ldrb	r2, [r2, #4]
 8000d36:	0652      	lsls	r2, r2, #25
 8000d38:	4611      	mov	r1, r2
 8000d3a:	687a      	ldr	r2, [r7, #4]
 8000d3c:	6810      	ldr	r0, [r2, #0]
 8000d3e:	7bfa      	ldrb	r2, [r7, #15]
 8000d40:	4319      	orrs	r1, r3
 8000d42:	4613      	mov	r3, r2
 8000d44:	005b      	lsls	r3, r3, #1
 8000d46:	4413      	add	r3, r2
 8000d48:	00db      	lsls	r3, r3, #3
 8000d4a:	4403      	add	r3, r0
 8000d4c:	3310      	adds	r3, #16
 8000d4e:	6019      	str	r1, [r3, #0]

	// 3. Stream priority
	pDMAxHandle->pDMAx->DMA_Strm[streamNum].SCR |= (pDMAxHandle->DMA_Config.DMA_Priority << 16);
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	6819      	ldr	r1, [r3, #0]
 8000d54:	7bfa      	ldrb	r2, [r7, #15]
 8000d56:	4613      	mov	r3, r2
 8000d58:	005b      	lsls	r3, r3, #1
 8000d5a:	4413      	add	r3, r2
 8000d5c:	00db      	lsls	r3, r3, #3
 8000d5e:	440b      	add	r3, r1
 8000d60:	3310      	adds	r3, #16
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	687a      	ldr	r2, [r7, #4]
 8000d66:	7ad2      	ldrb	r2, [r2, #11]
 8000d68:	0412      	lsls	r2, r2, #16
 8000d6a:	4611      	mov	r1, r2
 8000d6c:	687a      	ldr	r2, [r7, #4]
 8000d6e:	6810      	ldr	r0, [r2, #0]
 8000d70:	7bfa      	ldrb	r2, [r7, #15]
 8000d72:	4319      	orrs	r1, r3
 8000d74:	4613      	mov	r3, r2
 8000d76:	005b      	lsls	r3, r3, #1
 8000d78:	4413      	add	r3, r2
 8000d7a:	00db      	lsls	r3, r3, #3
 8000d7c:	4403      	add	r3, r0
 8000d7e:	3310      	adds	r3, #16
 8000d80:	6019      	str	r1, [r3, #0]

	// 4. FIFO mode (direct mode)
	pDMAxHandle->pDMAx->DMA_Strm[streamNum].SFCR |= (pDMAxHandle->DMA_Config.DMA_FIFOMode << 2);
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	6819      	ldr	r1, [r3, #0]
 8000d86:	7bfa      	ldrb	r2, [r7, #15]
 8000d88:	4613      	mov	r3, r2
 8000d8a:	005b      	lsls	r3, r3, #1
 8000d8c:	4413      	add	r3, r2
 8000d8e:	00db      	lsls	r3, r3, #3
 8000d90:	440b      	add	r3, r1
 8000d92:	3324      	adds	r3, #36	; 0x24
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	687a      	ldr	r2, [r7, #4]
 8000d98:	7b12      	ldrb	r2, [r2, #12]
 8000d9a:	0092      	lsls	r2, r2, #2
 8000d9c:	4611      	mov	r1, r2
 8000d9e:	687a      	ldr	r2, [r7, #4]
 8000da0:	6810      	ldr	r0, [r2, #0]
 8000da2:	7bfa      	ldrb	r2, [r7, #15]
 8000da4:	4319      	orrs	r1, r3
 8000da6:	4613      	mov	r3, r2
 8000da8:	005b      	lsls	r3, r3, #1
 8000daa:	4413      	add	r3, r2
 8000dac:	00db      	lsls	r3, r3, #3
 8000dae:	4403      	add	r3, r0
 8000db0:	3324      	adds	r3, #36	; 0x24
 8000db2:	6019      	str	r1, [r3, #0]

	// 5. FIFO threshold
	pDMAxHandle->pDMAx->DMA_Strm[streamNum].SFCR &= ~(0x3 << 0);
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	6819      	ldr	r1, [r3, #0]
 8000db8:	7bfa      	ldrb	r2, [r7, #15]
 8000dba:	4613      	mov	r3, r2
 8000dbc:	005b      	lsls	r3, r3, #1
 8000dbe:	4413      	add	r3, r2
 8000dc0:	00db      	lsls	r3, r3, #3
 8000dc2:	440b      	add	r3, r1
 8000dc4:	3324      	adds	r3, #36	; 0x24
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	687a      	ldr	r2, [r7, #4]
 8000dca:	6810      	ldr	r0, [r2, #0]
 8000dcc:	7bfa      	ldrb	r2, [r7, #15]
 8000dce:	f023 0103 	bic.w	r1, r3, #3
 8000dd2:	4613      	mov	r3, r2
 8000dd4:	005b      	lsls	r3, r3, #1
 8000dd6:	4413      	add	r3, r2
 8000dd8:	00db      	lsls	r3, r3, #3
 8000dda:	4403      	add	r3, r0
 8000ddc:	3324      	adds	r3, #36	; 0x24
 8000dde:	6019      	str	r1, [r3, #0]
	pDMAxHandle->pDMAx->DMA_Strm[streamNum].SFCR |= (pDMAxHandle->DMA_Config.DMA_FIFOThresh << 0);
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	6819      	ldr	r1, [r3, #0]
 8000de4:	7bfa      	ldrb	r2, [r7, #15]
 8000de6:	4613      	mov	r3, r2
 8000de8:	005b      	lsls	r3, r3, #1
 8000dea:	4413      	add	r3, r2
 8000dec:	00db      	lsls	r3, r3, #3
 8000dee:	440b      	add	r3, r1
 8000df0:	3324      	adds	r3, #36	; 0x24
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	687a      	ldr	r2, [r7, #4]
 8000df6:	7b52      	ldrb	r2, [r2, #13]
 8000df8:	4611      	mov	r1, r2
 8000dfa:	687a      	ldr	r2, [r7, #4]
 8000dfc:	6810      	ldr	r0, [r2, #0]
 8000dfe:	7bfa      	ldrb	r2, [r7, #15]
 8000e00:	4319      	orrs	r1, r3
 8000e02:	4613      	mov	r3, r2
 8000e04:	005b      	lsls	r3, r3, #1
 8000e06:	4413      	add	r3, r2
 8000e08:	00db      	lsls	r3, r3, #3
 8000e0a:	4403      	add	r3, r0
 8000e0c:	3324      	adds	r3, #36	; 0x24
 8000e0e:	6019      	str	r1, [r3, #0]

	// 6. Set transfer direction
	pDMAxHandle->pDMAx->DMA_Strm[streamNum].SCR |= (pDMAxHandle->DMA_Config.DMA_Dir << 6);
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	6819      	ldr	r1, [r3, #0]
 8000e14:	7bfa      	ldrb	r2, [r7, #15]
 8000e16:	4613      	mov	r3, r2
 8000e18:	005b      	lsls	r3, r3, #1
 8000e1a:	4413      	add	r3, r2
 8000e1c:	00db      	lsls	r3, r3, #3
 8000e1e:	440b      	add	r3, r1
 8000e20:	3310      	adds	r3, #16
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	687a      	ldr	r2, [r7, #4]
 8000e26:	7952      	ldrb	r2, [r2, #5]
 8000e28:	0192      	lsls	r2, r2, #6
 8000e2a:	4611      	mov	r1, r2
 8000e2c:	687a      	ldr	r2, [r7, #4]
 8000e2e:	6810      	ldr	r0, [r2, #0]
 8000e30:	7bfa      	ldrb	r2, [r7, #15]
 8000e32:	4319      	orrs	r1, r3
 8000e34:	4613      	mov	r3, r2
 8000e36:	005b      	lsls	r3, r3, #1
 8000e38:	4413      	add	r3, r2
 8000e3a:	00db      	lsls	r3, r3, #3
 8000e3c:	4403      	add	r3, r0
 8000e3e:	3310      	adds	r3, #16
 8000e40:	6019      	str	r1, [r3, #0]

	// 7. Peripheral increment
	if (pDMAxHandle->DMA_Config.DMA_PeriphInc == DMA_PERIPH_INC)
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	799b      	ldrb	r3, [r3, #6]
 8000e46:	2b01      	cmp	r3, #1
 8000e48:	d12b      	bne.n	8000ea2 <DMA_Init+0x19e>
	{
		pDMAxHandle->pDMAx->DMA_Strm[streamNum].SCR |= (1 << 9);
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	6819      	ldr	r1, [r3, #0]
 8000e4e:	7bfa      	ldrb	r2, [r7, #15]
 8000e50:	4613      	mov	r3, r2
 8000e52:	005b      	lsls	r3, r3, #1
 8000e54:	4413      	add	r3, r2
 8000e56:	00db      	lsls	r3, r3, #3
 8000e58:	440b      	add	r3, r1
 8000e5a:	3310      	adds	r3, #16
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	687a      	ldr	r2, [r7, #4]
 8000e60:	6810      	ldr	r0, [r2, #0]
 8000e62:	7bfa      	ldrb	r2, [r7, #15]
 8000e64:	f443 7100 	orr.w	r1, r3, #512	; 0x200
 8000e68:	4613      	mov	r3, r2
 8000e6a:	005b      	lsls	r3, r3, #1
 8000e6c:	4413      	add	r3, r2
 8000e6e:	00db      	lsls	r3, r3, #3
 8000e70:	4403      	add	r3, r0
 8000e72:	3310      	adds	r3, #16
 8000e74:	6019      	str	r1, [r3, #0]
		pDMAxHandle->pDMAx->DMA_Strm[streamNum].SCR &= ~(1 << 15);
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	6819      	ldr	r1, [r3, #0]
 8000e7a:	7bfa      	ldrb	r2, [r7, #15]
 8000e7c:	4613      	mov	r3, r2
 8000e7e:	005b      	lsls	r3, r3, #1
 8000e80:	4413      	add	r3, r2
 8000e82:	00db      	lsls	r3, r3, #3
 8000e84:	440b      	add	r3, r1
 8000e86:	3310      	adds	r3, #16
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	687a      	ldr	r2, [r7, #4]
 8000e8c:	6810      	ldr	r0, [r2, #0]
 8000e8e:	7bfa      	ldrb	r2, [r7, #15]
 8000e90:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8000e94:	4613      	mov	r3, r2
 8000e96:	005b      	lsls	r3, r3, #1
 8000e98:	4413      	add	r3, r2
 8000e9a:	00db      	lsls	r3, r3, #3
 8000e9c:	4403      	add	r3, r0
 8000e9e:	3310      	adds	r3, #16
 8000ea0:	6019      	str	r1, [r3, #0]
	}

	// 8. Memory increment
	if (pDMAxHandle->DMA_Config.DMA_MemInc == DMA_MEM_INC)
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	79db      	ldrb	r3, [r3, #7]
 8000ea6:	2b01      	cmp	r3, #1
 8000ea8:	d115      	bne.n	8000ed6 <DMA_Init+0x1d2>
	{
		pDMAxHandle->pDMAx->DMA_Strm[streamNum].SCR |= (1 << 10);
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	6819      	ldr	r1, [r3, #0]
 8000eae:	7bfa      	ldrb	r2, [r7, #15]
 8000eb0:	4613      	mov	r3, r2
 8000eb2:	005b      	lsls	r3, r3, #1
 8000eb4:	4413      	add	r3, r2
 8000eb6:	00db      	lsls	r3, r3, #3
 8000eb8:	440b      	add	r3, r1
 8000eba:	3310      	adds	r3, #16
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	687a      	ldr	r2, [r7, #4]
 8000ec0:	6810      	ldr	r0, [r2, #0]
 8000ec2:	7bfa      	ldrb	r2, [r7, #15]
 8000ec4:	f443 6180 	orr.w	r1, r3, #1024	; 0x400
 8000ec8:	4613      	mov	r3, r2
 8000eca:	005b      	lsls	r3, r3, #1
 8000ecc:	4413      	add	r3, r2
 8000ece:	00db      	lsls	r3, r3, #3
 8000ed0:	4403      	add	r3, r0
 8000ed2:	3310      	adds	r3, #16
 8000ed4:	6019      	str	r1, [r3, #0]
	}

	// 9. Peripheral burst
	pDMAxHandle->pDMAx->DMA_Strm[streamNum].SCR |= (pDMAxHandle->DMA_Config.DMA_PBurst << 21);
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	6819      	ldr	r1, [r3, #0]
 8000eda:	7bfa      	ldrb	r2, [r7, #15]
 8000edc:	4613      	mov	r3, r2
 8000ede:	005b      	lsls	r3, r3, #1
 8000ee0:	4413      	add	r3, r2
 8000ee2:	00db      	lsls	r3, r3, #3
 8000ee4:	440b      	add	r3, r1
 8000ee6:	3310      	adds	r3, #16
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	687a      	ldr	r2, [r7, #4]
 8000eec:	7bd2      	ldrb	r2, [r2, #15]
 8000eee:	0552      	lsls	r2, r2, #21
 8000ef0:	4611      	mov	r1, r2
 8000ef2:	687a      	ldr	r2, [r7, #4]
 8000ef4:	6810      	ldr	r0, [r2, #0]
 8000ef6:	7bfa      	ldrb	r2, [r7, #15]
 8000ef8:	4319      	orrs	r1, r3
 8000efa:	4613      	mov	r3, r2
 8000efc:	005b      	lsls	r3, r3, #1
 8000efe:	4413      	add	r3, r2
 8000f00:	00db      	lsls	r3, r3, #3
 8000f02:	4403      	add	r3, r0
 8000f04:	3310      	adds	r3, #16
 8000f06:	6019      	str	r1, [r3, #0]

	// 10. Memory burst
	pDMAxHandle->pDMAx->DMA_Strm[streamNum].SCR |= (pDMAxHandle->DMA_Config.DMA_MBurst << 23);
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	6819      	ldr	r1, [r3, #0]
 8000f0c:	7bfa      	ldrb	r2, [r7, #15]
 8000f0e:	4613      	mov	r3, r2
 8000f10:	005b      	lsls	r3, r3, #1
 8000f12:	4413      	add	r3, r2
 8000f14:	00db      	lsls	r3, r3, #3
 8000f16:	440b      	add	r3, r1
 8000f18:	3310      	adds	r3, #16
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	687a      	ldr	r2, [r7, #4]
 8000f1e:	7b92      	ldrb	r2, [r2, #14]
 8000f20:	05d2      	lsls	r2, r2, #23
 8000f22:	4611      	mov	r1, r2
 8000f24:	687a      	ldr	r2, [r7, #4]
 8000f26:	6810      	ldr	r0, [r2, #0]
 8000f28:	7bfa      	ldrb	r2, [r7, #15]
 8000f2a:	4319      	orrs	r1, r3
 8000f2c:	4613      	mov	r3, r2
 8000f2e:	005b      	lsls	r3, r3, #1
 8000f30:	4413      	add	r3, r2
 8000f32:	00db      	lsls	r3, r3, #3
 8000f34:	4403      	add	r3, r0
 8000f36:	3310      	adds	r3, #16
 8000f38:	6019      	str	r1, [r3, #0]

	// 11. Set peripheral and memory data sizes
	pDMAxHandle->pDMAx->DMA_Strm[streamNum].SCR |= (pDMAxHandle->DMA_Config.DMA_PeriphDataSize << 11);
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	6819      	ldr	r1, [r3, #0]
 8000f3e:	7bfa      	ldrb	r2, [r7, #15]
 8000f40:	4613      	mov	r3, r2
 8000f42:	005b      	lsls	r3, r3, #1
 8000f44:	4413      	add	r3, r2
 8000f46:	00db      	lsls	r3, r3, #3
 8000f48:	440b      	add	r3, r1
 8000f4a:	3310      	adds	r3, #16
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	687a      	ldr	r2, [r7, #4]
 8000f50:	7a12      	ldrb	r2, [r2, #8]
 8000f52:	02d2      	lsls	r2, r2, #11
 8000f54:	4611      	mov	r1, r2
 8000f56:	687a      	ldr	r2, [r7, #4]
 8000f58:	6810      	ldr	r0, [r2, #0]
 8000f5a:	7bfa      	ldrb	r2, [r7, #15]
 8000f5c:	4319      	orrs	r1, r3
 8000f5e:	4613      	mov	r3, r2
 8000f60:	005b      	lsls	r3, r3, #1
 8000f62:	4413      	add	r3, r2
 8000f64:	00db      	lsls	r3, r3, #3
 8000f66:	4403      	add	r3, r0
 8000f68:	3310      	adds	r3, #16
 8000f6a:	6019      	str	r1, [r3, #0]
	pDMAxHandle->pDMAx->DMA_Strm[streamNum].SCR |= (pDMAxHandle->DMA_Config.DMA_MemDataSize << 13);
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	6819      	ldr	r1, [r3, #0]
 8000f70:	7bfa      	ldrb	r2, [r7, #15]
 8000f72:	4613      	mov	r3, r2
 8000f74:	005b      	lsls	r3, r3, #1
 8000f76:	4413      	add	r3, r2
 8000f78:	00db      	lsls	r3, r3, #3
 8000f7a:	440b      	add	r3, r1
 8000f7c:	3310      	adds	r3, #16
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	687a      	ldr	r2, [r7, #4]
 8000f82:	7a52      	ldrb	r2, [r2, #9]
 8000f84:	0352      	lsls	r2, r2, #13
 8000f86:	4611      	mov	r1, r2
 8000f88:	687a      	ldr	r2, [r7, #4]
 8000f8a:	6810      	ldr	r0, [r2, #0]
 8000f8c:	7bfa      	ldrb	r2, [r7, #15]
 8000f8e:	4319      	orrs	r1, r3
 8000f90:	4613      	mov	r3, r2
 8000f92:	005b      	lsls	r3, r3, #1
 8000f94:	4413      	add	r3, r2
 8000f96:	00db      	lsls	r3, r3, #3
 8000f98:	4403      	add	r3, r0
 8000f9a:	3310      	adds	r3, #16
 8000f9c:	6019      	str	r1, [r3, #0]

	// 12. Set  normal, circle or peripheral control mode
	if (pDMAxHandle->DMA_Config.DMA_Mode == DMA_MODE_PFCCTRL)
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	7a9b      	ldrb	r3, [r3, #10]
 8000fa2:	2b02      	cmp	r3, #2
 8000fa4:	d116      	bne.n	8000fd4 <DMA_Init+0x2d0>
	{
		pDMAxHandle->pDMAx->DMA_Strm[streamNum].SCR |= (1 << 5);
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	6819      	ldr	r1, [r3, #0]
 8000faa:	7bfa      	ldrb	r2, [r7, #15]
 8000fac:	4613      	mov	r3, r2
 8000fae:	005b      	lsls	r3, r3, #1
 8000fb0:	4413      	add	r3, r2
 8000fb2:	00db      	lsls	r3, r3, #3
 8000fb4:	440b      	add	r3, r1
 8000fb6:	3310      	adds	r3, #16
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	687a      	ldr	r2, [r7, #4]
 8000fbc:	6810      	ldr	r0, [r2, #0]
 8000fbe:	7bfa      	ldrb	r2, [r7, #15]
 8000fc0:	f043 0120 	orr.w	r1, r3, #32
 8000fc4:	4613      	mov	r3, r2
 8000fc6:	005b      	lsls	r3, r3, #1
 8000fc8:	4413      	add	r3, r2
 8000fca:	00db      	lsls	r3, r3, #3
 8000fcc:	4403      	add	r3, r0
 8000fce:	3310      	adds	r3, #16
 8000fd0:	6019      	str	r1, [r3, #0]
	}
	else if (pDMAxHandle->DMA_Config.DMA_Mode == DMA_MODE_CIRC)
	{
		pDMAxHandle->pDMAx->DMA_Strm[streamNum].SCR |= (1 << 8);
	}
}
 8000fd2:	e019      	b.n	8001008 <DMA_Init+0x304>
	else if (pDMAxHandle->DMA_Config.DMA_Mode == DMA_MODE_CIRC)
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	7a9b      	ldrb	r3, [r3, #10]
 8000fd8:	2b01      	cmp	r3, #1
 8000fda:	d115      	bne.n	8001008 <DMA_Init+0x304>
		pDMAxHandle->pDMAx->DMA_Strm[streamNum].SCR |= (1 << 8);
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	6819      	ldr	r1, [r3, #0]
 8000fe0:	7bfa      	ldrb	r2, [r7, #15]
 8000fe2:	4613      	mov	r3, r2
 8000fe4:	005b      	lsls	r3, r3, #1
 8000fe6:	4413      	add	r3, r2
 8000fe8:	00db      	lsls	r3, r3, #3
 8000fea:	440b      	add	r3, r1
 8000fec:	3310      	adds	r3, #16
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	687a      	ldr	r2, [r7, #4]
 8000ff2:	6810      	ldr	r0, [r2, #0]
 8000ff4:	7bfa      	ldrb	r2, [r7, #15]
 8000ff6:	f443 7180 	orr.w	r1, r3, #256	; 0x100
 8000ffa:	4613      	mov	r3, r2
 8000ffc:	005b      	lsls	r3, r3, #1
 8000ffe:	4413      	add	r3, r2
 8001000:	00db      	lsls	r3, r3, #3
 8001002:	4403      	add	r3, r0
 8001004:	3310      	adds	r3, #16
 8001006:	6019      	str	r1, [r3, #0]
}
 8001008:	bf00      	nop
 800100a:	3710      	adds	r7, #16
 800100c:	46bd      	mov	sp, r7
 800100e:	bd80      	pop	{r7, pc}

08001010 <DMA_GetFlagStatus>:
 * Params: 		struct ADC_RegDef_t *pADCx - ADC base address
 * 				uint8_t ADC_FLAG - flag being checked
 *
 */
uint8_t DMA_GetFlagStatus(DMA_Handle_t *pDMAxHandle, uint8_t DMA_FLAG)
{
 8001010:	b480      	push	{r7}
 8001012:	b085      	sub	sp, #20
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
 8001018:	460b      	mov	r3, r1
 800101a:	70fb      	strb	r3, [r7, #3]
	uint8_t streamNum = pDMAxHandle->DMA_Stream;
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	7c1b      	ldrb	r3, [r3, #16]
 8001020:	73fb      	strb	r3, [r7, #15]
	uint8_t temp = streamNum % 4;
 8001022:	7bfb      	ldrb	r3, [r7, #15]
 8001024:	f003 0303 	and.w	r3, r3, #3
 8001028:	73bb      	strb	r3, [r7, #14]
	uint32_t statusReg = (streamNum < 4) ? (pDMAxHandle->pDMAx->LISR) : (pDMAxHandle->pDMAx->HISR);
 800102a:	7bfb      	ldrb	r3, [r7, #15]
 800102c:	2b03      	cmp	r3, #3
 800102e:	d803      	bhi.n	8001038 <DMA_GetFlagStatus+0x28>
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	e002      	b.n	800103e <DMA_GetFlagStatus+0x2e>
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	685b      	ldr	r3, [r3, #4]
 800103e:	60bb      	str	r3, [r7, #8]

	switch (DMA_FLAG)
 8001040:	78fb      	ldrb	r3, [r7, #3]
 8001042:	2b04      	cmp	r3, #4
 8001044:	d848      	bhi.n	80010d8 <DMA_GetFlagStatus+0xc8>
 8001046:	a201      	add	r2, pc, #4	; (adr r2, 800104c <DMA_GetFlagStatus+0x3c>)
 8001048:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800104c:	08001061 	.word	0x08001061
 8001050:	08001079 	.word	0x08001079
 8001054:	08001091 	.word	0x08001091
 8001058:	080010a9 	.word	0x080010a9
 800105c:	080010c1 	.word	0x080010c1
	{
		case DMA_FLAG_FEIF:
		{
			return (statusReg & (1 << FEIF_Flag[temp]));
 8001060:	7bbb      	ldrb	r3, [r7, #14]
 8001062:	4a20      	ldr	r2, [pc, #128]	; (80010e4 <DMA_GetFlagStatus+0xd4>)
 8001064:	5cd3      	ldrb	r3, [r2, r3]
 8001066:	461a      	mov	r2, r3
 8001068:	2301      	movs	r3, #1
 800106a:	4093      	lsls	r3, r2
 800106c:	b2da      	uxtb	r2, r3
 800106e:	68bb      	ldr	r3, [r7, #8]
 8001070:	b2db      	uxtb	r3, r3
 8001072:	4013      	ands	r3, r2
 8001074:	b2db      	uxtb	r3, r3
 8001076:	e030      	b.n	80010da <DMA_GetFlagStatus+0xca>
		}
		case DMA_FLAG_DMEIF:
		{
			return (statusReg & (1 << DMEIF_Flag[temp]));
 8001078:	7bbb      	ldrb	r3, [r7, #14]
 800107a:	4a1b      	ldr	r2, [pc, #108]	; (80010e8 <DMA_GetFlagStatus+0xd8>)
 800107c:	5cd3      	ldrb	r3, [r2, r3]
 800107e:	461a      	mov	r2, r3
 8001080:	2301      	movs	r3, #1
 8001082:	4093      	lsls	r3, r2
 8001084:	b2da      	uxtb	r2, r3
 8001086:	68bb      	ldr	r3, [r7, #8]
 8001088:	b2db      	uxtb	r3, r3
 800108a:	4013      	ands	r3, r2
 800108c:	b2db      	uxtb	r3, r3
 800108e:	e024      	b.n	80010da <DMA_GetFlagStatus+0xca>
		}
		case DMA_FLAG_TEIF:
		{
			return (statusReg & (1 << TEIF_Flag[temp]));
 8001090:	7bbb      	ldrb	r3, [r7, #14]
 8001092:	4a16      	ldr	r2, [pc, #88]	; (80010ec <DMA_GetFlagStatus+0xdc>)
 8001094:	5cd3      	ldrb	r3, [r2, r3]
 8001096:	461a      	mov	r2, r3
 8001098:	2301      	movs	r3, #1
 800109a:	4093      	lsls	r3, r2
 800109c:	b2da      	uxtb	r2, r3
 800109e:	68bb      	ldr	r3, [r7, #8]
 80010a0:	b2db      	uxtb	r3, r3
 80010a2:	4013      	ands	r3, r2
 80010a4:	b2db      	uxtb	r3, r3
 80010a6:	e018      	b.n	80010da <DMA_GetFlagStatus+0xca>
		}
		case DMA_FLAG_HTIF:
		{
			return (statusReg & (1 << HTIF_Flag[temp]));
 80010a8:	7bbb      	ldrb	r3, [r7, #14]
 80010aa:	4a11      	ldr	r2, [pc, #68]	; (80010f0 <DMA_GetFlagStatus+0xe0>)
 80010ac:	5cd3      	ldrb	r3, [r2, r3]
 80010ae:	461a      	mov	r2, r3
 80010b0:	2301      	movs	r3, #1
 80010b2:	4093      	lsls	r3, r2
 80010b4:	b2da      	uxtb	r2, r3
 80010b6:	68bb      	ldr	r3, [r7, #8]
 80010b8:	b2db      	uxtb	r3, r3
 80010ba:	4013      	ands	r3, r2
 80010bc:	b2db      	uxtb	r3, r3
 80010be:	e00c      	b.n	80010da <DMA_GetFlagStatus+0xca>
		}
		case DMA_FLAG_TCIF:
		{
			return (statusReg & (1 << TCIF_Flag[temp]));
 80010c0:	7bbb      	ldrb	r3, [r7, #14]
 80010c2:	4a0c      	ldr	r2, [pc, #48]	; (80010f4 <DMA_GetFlagStatus+0xe4>)
 80010c4:	5cd3      	ldrb	r3, [r2, r3]
 80010c6:	461a      	mov	r2, r3
 80010c8:	2301      	movs	r3, #1
 80010ca:	4093      	lsls	r3, r2
 80010cc:	b2da      	uxtb	r2, r3
 80010ce:	68bb      	ldr	r3, [r7, #8]
 80010d0:	b2db      	uxtb	r3, r3
 80010d2:	4013      	ands	r3, r2
 80010d4:	b2db      	uxtb	r3, r3
 80010d6:	e000      	b.n	80010da <DMA_GetFlagStatus+0xca>
		}
		default:
		{
			return 0;
 80010d8:	2300      	movs	r3, #0
		}
	}
}
 80010da:	4618      	mov	r0, r3
 80010dc:	3714      	adds	r7, #20
 80010de:	46bd      	mov	sp, r7
 80010e0:	bc80      	pop	{r7}
 80010e2:	4770      	bx	lr
 80010e4:	20000000 	.word	0x20000000
 80010e8:	20000004 	.word	0x20000004
 80010ec:	20000008 	.word	0x20000008
 80010f0:	2000000c 	.word	0x2000000c
 80010f4:	20000010 	.word	0x20000010

080010f8 <DMA_IRQConfig>:
 * Params: 		uint8_t IRQNumber - IRQ position being configured
 * 				uint8_t Value - Enabling or disabling interrupt (1 or 0)
 *
 */
void DMA_IRQConfig(uint8_t IRQNumber, uint8_t EnOrDi)
{
 80010f8:	b490      	push	{r4, r7}
 80010fa:	b082      	sub	sp, #8
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	4603      	mov	r3, r0
 8001100:	460a      	mov	r2, r1
 8001102:	71fb      	strb	r3, [r7, #7]
 8001104:	4613      	mov	r3, r2
 8001106:	71bb      	strb	r3, [r7, #6]
	if (EnOrDi == ENABLE)
 8001108:	79bb      	ldrb	r3, [r7, #6]
 800110a:	2b01      	cmp	r3, #1
 800110c:	d113      	bne.n	8001136 <DMA_IRQConfig+0x3e>
	{
		NVIC_ISER->ISER[IRQNumber / 32] |= (1 << (IRQNumber % 32));
 800110e:	4a17      	ldr	r2, [pc, #92]	; (800116c <DMA_IRQConfig+0x74>)
 8001110:	79fb      	ldrb	r3, [r7, #7]
 8001112:	095b      	lsrs	r3, r3, #5
 8001114:	b2d8      	uxtb	r0, r3
 8001116:	4603      	mov	r3, r0
 8001118:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800111c:	79fa      	ldrb	r2, [r7, #7]
 800111e:	f002 021f 	and.w	r2, r2, #31
 8001122:	2101      	movs	r1, #1
 8001124:	fa01 f202 	lsl.w	r2, r1, r2
 8001128:	4614      	mov	r4, r2
 800112a:	4a10      	ldr	r2, [pc, #64]	; (800116c <DMA_IRQConfig+0x74>)
 800112c:	4601      	mov	r1, r0
 800112e:	4323      	orrs	r3, r4
 8001130:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	}
	else if (EnOrDi == DISABLE)
	{
		NVIC_ICER->ICER[IRQNumber / 32] |= (1 << (IRQNumber % 32));
	}
}
 8001134:	e015      	b.n	8001162 <DMA_IRQConfig+0x6a>
	else if (EnOrDi == DISABLE)
 8001136:	79bb      	ldrb	r3, [r7, #6]
 8001138:	2b00      	cmp	r3, #0
 800113a:	d112      	bne.n	8001162 <DMA_IRQConfig+0x6a>
		NVIC_ICER->ICER[IRQNumber / 32] |= (1 << (IRQNumber % 32));
 800113c:	4a0c      	ldr	r2, [pc, #48]	; (8001170 <DMA_IRQConfig+0x78>)
 800113e:	79fb      	ldrb	r3, [r7, #7]
 8001140:	095b      	lsrs	r3, r3, #5
 8001142:	b2d8      	uxtb	r0, r3
 8001144:	4603      	mov	r3, r0
 8001146:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800114a:	79fa      	ldrb	r2, [r7, #7]
 800114c:	f002 021f 	and.w	r2, r2, #31
 8001150:	2101      	movs	r1, #1
 8001152:	fa01 f202 	lsl.w	r2, r1, r2
 8001156:	4614      	mov	r4, r2
 8001158:	4a05      	ldr	r2, [pc, #20]	; (8001170 <DMA_IRQConfig+0x78>)
 800115a:	4601      	mov	r1, r0
 800115c:	4323      	orrs	r3, r4
 800115e:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
}
 8001162:	bf00      	nop
 8001164:	3708      	adds	r7, #8
 8001166:	46bd      	mov	sp, r7
 8001168:	bc90      	pop	{r4, r7}
 800116a:	4770      	bx	lr
 800116c:	e000e100 	.word	0xe000e100
 8001170:	e000e180 	.word	0xe000e180

08001174 <DMA_EV_IRQHandling>:
 *
 * Params: 		struct DMA_Handle_t *pDMAxHandle - DMA handle address
 *
 */
void DMA_EV_IRQHandling(DMA_Handle_t *pDMAxHandle)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b082      	sub	sp, #8
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
	// Is transfer complete interrupt?
	if (DMA_GetFlagStatus(pDMAxHandle, DMA_FLAG_TCIF))
 800117c:	2104      	movs	r1, #4
 800117e:	6878      	ldr	r0, [r7, #4]
 8001180:	f7ff ff46 	bl	8001010 <DMA_GetFlagStatus>
 8001184:	4603      	mov	r3, r0
 8001186:	2b00      	cmp	r3, #0
 8001188:	d002      	beq.n	8001190 <DMA_EV_IRQHandling+0x1c>
	{
		DMA_Trans_Cmplt_Handle_IT(pDMAxHandle);
 800118a:	6878      	ldr	r0, [r7, #4]
 800118c:	f000 f90c 	bl	80013a8 <DMA_Trans_Cmplt_Handle_IT>
	}
}
 8001190:	bf00      	nop
 8001192:	3708      	adds	r7, #8
 8001194:	46bd      	mov	sp, r7
 8001196:	bd80      	pop	{r7, pc}

08001198 <DMA_Stream_IRQ_Enable>:
 *
 * Params: 		DMA_Handle_t *pDMAxHandle - DMA handle address
 *
 */
static void DMA_Stream_IRQ_Enable(DMA_Handle_t *pDMAxHandle)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b082      	sub	sp, #8
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
	if (pDMAxHandle->pDMAx == DMA1)
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	4a44      	ldr	r2, [pc, #272]	; (80012b8 <DMA_Stream_IRQ_Enable+0x120>)
 80011a6:	4293      	cmp	r3, r2
 80011a8:	d13e      	bne.n	8001228 <DMA_Stream_IRQ_Enable+0x90>
	{
		switch (pDMAxHandle->DMA_Stream)
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	7c1b      	ldrb	r3, [r3, #16]
 80011ae:	2b07      	cmp	r3, #7
 80011b0:	d87e      	bhi.n	80012b0 <DMA_Stream_IRQ_Enable+0x118>
 80011b2:	a201      	add	r2, pc, #4	; (adr r2, 80011b8 <DMA_Stream_IRQ_Enable+0x20>)
 80011b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011b8:	080011d9 	.word	0x080011d9
 80011bc:	080011e3 	.word	0x080011e3
 80011c0:	080011ed 	.word	0x080011ed
 80011c4:	080011f7 	.word	0x080011f7
 80011c8:	08001201 	.word	0x08001201
 80011cc:	0800120b 	.word	0x0800120b
 80011d0:	08001215 	.word	0x08001215
 80011d4:	0800121f 	.word	0x0800121f
		{
			case (DMA_STREAM_0):
			{
				DMA_IRQConfig(IRQ_DMA1_STREAM0, ENABLE);
 80011d8:	2101      	movs	r1, #1
 80011da:	200b      	movs	r0, #11
 80011dc:	f7ff ff8c 	bl	80010f8 <DMA_IRQConfig>
			} break;
 80011e0:	e066      	b.n	80012b0 <DMA_Stream_IRQ_Enable+0x118>
			case (DMA_STREAM_1):
			{
				DMA_IRQConfig(IRQ_DMA1_STREAM1, ENABLE);
 80011e2:	2101      	movs	r1, #1
 80011e4:	200c      	movs	r0, #12
 80011e6:	f7ff ff87 	bl	80010f8 <DMA_IRQConfig>
			} break;
 80011ea:	e061      	b.n	80012b0 <DMA_Stream_IRQ_Enable+0x118>
			case (DMA_STREAM_2):
			{
				DMA_IRQConfig(IRQ_DMA1_STREAM2, ENABLE);
 80011ec:	2101      	movs	r1, #1
 80011ee:	200d      	movs	r0, #13
 80011f0:	f7ff ff82 	bl	80010f8 <DMA_IRQConfig>
			} break;
 80011f4:	e05c      	b.n	80012b0 <DMA_Stream_IRQ_Enable+0x118>
			case (DMA_STREAM_3):
			{
				DMA_IRQConfig(IRQ_DMA1_STREAM3, ENABLE);
 80011f6:	2101      	movs	r1, #1
 80011f8:	200e      	movs	r0, #14
 80011fa:	f7ff ff7d 	bl	80010f8 <DMA_IRQConfig>
			} break;
 80011fe:	e057      	b.n	80012b0 <DMA_Stream_IRQ_Enable+0x118>
			case (DMA_STREAM_4):
			{
				DMA_IRQConfig(IRQ_DMA1_STREAM4, ENABLE);
 8001200:	2101      	movs	r1, #1
 8001202:	200f      	movs	r0, #15
 8001204:	f7ff ff78 	bl	80010f8 <DMA_IRQConfig>
			} break;
 8001208:	e052      	b.n	80012b0 <DMA_Stream_IRQ_Enable+0x118>
			case (DMA_STREAM_5):
			{
				DMA_IRQConfig(IRQ_DMA1_STREAM5, ENABLE);
 800120a:	2101      	movs	r1, #1
 800120c:	2010      	movs	r0, #16
 800120e:	f7ff ff73 	bl	80010f8 <DMA_IRQConfig>
			} break;
 8001212:	e04d      	b.n	80012b0 <DMA_Stream_IRQ_Enable+0x118>
			case (DMA_STREAM_6):
			{
				DMA_IRQConfig(IRQ_DMA1_STREAM6, ENABLE);
 8001214:	2101      	movs	r1, #1
 8001216:	2011      	movs	r0, #17
 8001218:	f7ff ff6e 	bl	80010f8 <DMA_IRQConfig>
			} break;
 800121c:	e048      	b.n	80012b0 <DMA_Stream_IRQ_Enable+0x118>
			case (DMA_STREAM_7):
			{
				DMA_IRQConfig(IRQ_DMA1_STREAM7, ENABLE);
 800121e:	2101      	movs	r1, #1
 8001220:	202f      	movs	r0, #47	; 0x2f
 8001222:	f7ff ff69 	bl	80010f8 <DMA_IRQConfig>
			{
				DMA_IRQConfig(IRQ_DMA2_STREAM7, ENABLE);
			}
		}
	}
}
 8001226:	e043      	b.n	80012b0 <DMA_Stream_IRQ_Enable+0x118>
	else if (pDMAxHandle->pDMAx == DMA2)
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	4a23      	ldr	r2, [pc, #140]	; (80012bc <DMA_Stream_IRQ_Enable+0x124>)
 800122e:	4293      	cmp	r3, r2
 8001230:	d13e      	bne.n	80012b0 <DMA_Stream_IRQ_Enable+0x118>
		switch (pDMAxHandle->DMA_Stream)
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	7c1b      	ldrb	r3, [r3, #16]
 8001236:	2b07      	cmp	r3, #7
 8001238:	d83a      	bhi.n	80012b0 <DMA_Stream_IRQ_Enable+0x118>
 800123a:	a201      	add	r2, pc, #4	; (adr r2, 8001240 <DMA_Stream_IRQ_Enable+0xa8>)
 800123c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001240:	08001261 	.word	0x08001261
 8001244:	0800126b 	.word	0x0800126b
 8001248:	08001275 	.word	0x08001275
 800124c:	0800127f 	.word	0x0800127f
 8001250:	08001289 	.word	0x08001289
 8001254:	08001293 	.word	0x08001293
 8001258:	0800129d 	.word	0x0800129d
 800125c:	080012a7 	.word	0x080012a7
				DMA_IRQConfig(IRQ_DMA2_STREAM0, ENABLE);
 8001260:	2101      	movs	r1, #1
 8001262:	2038      	movs	r0, #56	; 0x38
 8001264:	f7ff ff48 	bl	80010f8 <DMA_IRQConfig>
			} break;
 8001268:	e022      	b.n	80012b0 <DMA_Stream_IRQ_Enable+0x118>
				DMA_IRQConfig(IRQ_DMA2_STREAM1, ENABLE);
 800126a:	2101      	movs	r1, #1
 800126c:	2039      	movs	r0, #57	; 0x39
 800126e:	f7ff ff43 	bl	80010f8 <DMA_IRQConfig>
			} break;
 8001272:	e01d      	b.n	80012b0 <DMA_Stream_IRQ_Enable+0x118>
				DMA_IRQConfig(IRQ_DMA2_STREAM2, ENABLE);
 8001274:	2101      	movs	r1, #1
 8001276:	203a      	movs	r0, #58	; 0x3a
 8001278:	f7ff ff3e 	bl	80010f8 <DMA_IRQConfig>
			} break;
 800127c:	e018      	b.n	80012b0 <DMA_Stream_IRQ_Enable+0x118>
				DMA_IRQConfig(IRQ_DMA2_STREAM3, ENABLE);
 800127e:	2101      	movs	r1, #1
 8001280:	203b      	movs	r0, #59	; 0x3b
 8001282:	f7ff ff39 	bl	80010f8 <DMA_IRQConfig>
			} break;
 8001286:	e013      	b.n	80012b0 <DMA_Stream_IRQ_Enable+0x118>
				DMA_IRQConfig(IRQ_DMA2_STREAM4, ENABLE);
 8001288:	2101      	movs	r1, #1
 800128a:	203c      	movs	r0, #60	; 0x3c
 800128c:	f7ff ff34 	bl	80010f8 <DMA_IRQConfig>
			} break;
 8001290:	e00e      	b.n	80012b0 <DMA_Stream_IRQ_Enable+0x118>
				DMA_IRQConfig(IRQ_DMA2_STREAM5, ENABLE);
 8001292:	2101      	movs	r1, #1
 8001294:	2044      	movs	r0, #68	; 0x44
 8001296:	f7ff ff2f 	bl	80010f8 <DMA_IRQConfig>
			} break;
 800129a:	e009      	b.n	80012b0 <DMA_Stream_IRQ_Enable+0x118>
				DMA_IRQConfig(IRQ_DMA2_STREAM6, ENABLE);
 800129c:	2101      	movs	r1, #1
 800129e:	2045      	movs	r0, #69	; 0x45
 80012a0:	f7ff ff2a 	bl	80010f8 <DMA_IRQConfig>
			} break;
 80012a4:	e004      	b.n	80012b0 <DMA_Stream_IRQ_Enable+0x118>
				DMA_IRQConfig(IRQ_DMA2_STREAM7, ENABLE);
 80012a6:	2101      	movs	r1, #1
 80012a8:	2046      	movs	r0, #70	; 0x46
 80012aa:	f7ff ff25 	bl	80010f8 <DMA_IRQConfig>
}
 80012ae:	e7ff      	b.n	80012b0 <DMA_Stream_IRQ_Enable+0x118>
 80012b0:	bf00      	nop
 80012b2:	3708      	adds	r7, #8
 80012b4:	46bd      	mov	sp, r7
 80012b6:	bd80      	pop	{r7, pc}
 80012b8:	40026000 	.word	0x40026000
 80012bc:	40026400 	.word	0x40026400

080012c0 <DMA_Start_IT>:
 * 				uint32_t *pDestArrd - destination address
 * 				uint16_t dataLen - length of data to transfer
 *
 */
uint8_t DMA_Start_IT(DMA_Handle_t *pDMAxHandle, uint32_t *pSrcAddr, uint32_t *pDestArrd, uint16_t dataLen)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b086      	sub	sp, #24
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	60f8      	str	r0, [r7, #12]
 80012c8:	60b9      	str	r1, [r7, #8]
 80012ca:	607a      	str	r2, [r7, #4]
 80012cc:	807b      	strh	r3, [r7, #2]
	uint8_t state = pDMAxHandle->state;
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	7c5b      	ldrb	r3, [r3, #17]
 80012d2:	75fb      	strb	r3, [r7, #23]

	if (state == DMA_READY)
 80012d4:	7dfb      	ldrb	r3, [r7, #23]
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d161      	bne.n	800139e <DMA_Start_IT+0xde>
	{
		pDMAxHandle->state = DMA_BUSY;
 80012da:	68fb      	ldr	r3, [r7, #12]
 80012dc:	2201      	movs	r2, #1
 80012de:	745a      	strb	r2, [r3, #17]

		uint8_t streamNum = pDMAxHandle->DMA_Stream;
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	7c1b      	ldrb	r3, [r3, #16]
 80012e4:	75bb      	strb	r3, [r7, #22]

		// 1. Set the source and destination address depending on direction
		if (pDMAxHandle->DMA_Config.DMA_Dir == DMA_MEM_TO_PERIPH)
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	795b      	ldrb	r3, [r3, #5]
 80012ea:	2b01      	cmp	r3, #1
 80012ec:	d117      	bne.n	800131e <DMA_Start_IT+0x5e>
		{
			pDMAxHandle->pDMAx->DMA_Strm[streamNum].SM0AR = (uint32_t)pSrcAddr;
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	6818      	ldr	r0, [r3, #0]
 80012f2:	7dbb      	ldrb	r3, [r7, #22]
 80012f4:	68b9      	ldr	r1, [r7, #8]
 80012f6:	1c5a      	adds	r2, r3, #1
 80012f8:	4613      	mov	r3, r2
 80012fa:	005b      	lsls	r3, r3, #1
 80012fc:	4413      	add	r3, r2
 80012fe:	00db      	lsls	r3, r3, #3
 8001300:	4403      	add	r3, r0
 8001302:	3304      	adds	r3, #4
 8001304:	6019      	str	r1, [r3, #0]
			pDMAxHandle->pDMAx->DMA_Strm[streamNum].SPAR = (uint32_t)pDestArrd;
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	6818      	ldr	r0, [r3, #0]
 800130a:	7dbb      	ldrb	r3, [r7, #22]
 800130c:	6879      	ldr	r1, [r7, #4]
 800130e:	1c5a      	adds	r2, r3, #1
 8001310:	4613      	mov	r3, r2
 8001312:	005b      	lsls	r3, r3, #1
 8001314:	4413      	add	r3, r2
 8001316:	00db      	lsls	r3, r3, #3
 8001318:	4403      	add	r3, r0
 800131a:	6019      	str	r1, [r3, #0]
 800131c:	e016      	b.n	800134c <DMA_Start_IT+0x8c>
		}
		else
		{
			pDMAxHandle->pDMAx->DMA_Strm[streamNum].SPAR = (uint32_t)pSrcAddr;
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	6818      	ldr	r0, [r3, #0]
 8001322:	7dbb      	ldrb	r3, [r7, #22]
 8001324:	68b9      	ldr	r1, [r7, #8]
 8001326:	1c5a      	adds	r2, r3, #1
 8001328:	4613      	mov	r3, r2
 800132a:	005b      	lsls	r3, r3, #1
 800132c:	4413      	add	r3, r2
 800132e:	00db      	lsls	r3, r3, #3
 8001330:	4403      	add	r3, r0
 8001332:	6019      	str	r1, [r3, #0]
			pDMAxHandle->pDMAx->DMA_Strm[streamNum].SM0AR = (uint32_t)pDestArrd;
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	6818      	ldr	r0, [r3, #0]
 8001338:	7dbb      	ldrb	r3, [r7, #22]
 800133a:	6879      	ldr	r1, [r7, #4]
 800133c:	1c5a      	adds	r2, r3, #1
 800133e:	4613      	mov	r3, r2
 8001340:	005b      	lsls	r3, r3, #1
 8001342:	4413      	add	r3, r2
 8001344:	00db      	lsls	r3, r3, #3
 8001346:	4403      	add	r3, r0
 8001348:	3304      	adds	r3, #4
 800134a:	6019      	str	r1, [r3, #0]
		}

		// 2. Set number of data items to transfer
		pDMAxHandle->pDMAx->DMA_Strm[streamNum].SNDTR = (uint32_t)(dataLen & 0xFF);
 800134c:	8879      	ldrh	r1, [r7, #2]
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	6818      	ldr	r0, [r3, #0]
 8001352:	7dba      	ldrb	r2, [r7, #22]
 8001354:	b2c9      	uxtb	r1, r1
 8001356:	4613      	mov	r3, r2
 8001358:	005b      	lsls	r3, r3, #1
 800135a:	4413      	add	r3, r2
 800135c:	00db      	lsls	r3, r3, #3
 800135e:	4403      	add	r3, r0
 8001360:	3314      	adds	r3, #20
 8001362:	6019      	str	r1, [r3, #0]

		// 3. Set transfer complete interrupt
		pDMAxHandle->pDMAx->DMA_Strm[streamNum].SCR |= (1 << 4);
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	6819      	ldr	r1, [r3, #0]
 8001368:	7dba      	ldrb	r2, [r7, #22]
 800136a:	4613      	mov	r3, r2
 800136c:	005b      	lsls	r3, r3, #1
 800136e:	4413      	add	r3, r2
 8001370:	00db      	lsls	r3, r3, #3
 8001372:	440b      	add	r3, r1
 8001374:	3310      	adds	r3, #16
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	68fa      	ldr	r2, [r7, #12]
 800137a:	6810      	ldr	r0, [r2, #0]
 800137c:	7dba      	ldrb	r2, [r7, #22]
 800137e:	f043 0110 	orr.w	r1, r3, #16
 8001382:	4613      	mov	r3, r2
 8001384:	005b      	lsls	r3, r3, #1
 8001386:	4413      	add	r3, r2
 8001388:	00db      	lsls	r3, r3, #3
 800138a:	4403      	add	r3, r0
 800138c:	3310      	adds	r3, #16
 800138e:	6019      	str	r1, [r3, #0]
		DMA_Stream_IRQ_Enable(pDMAxHandle);
 8001390:	68f8      	ldr	r0, [r7, #12]
 8001392:	f7ff ff01 	bl	8001198 <DMA_Stream_IRQ_Enable>

		// 4. Start the transfer
		DMA_StartStop(pDMAxHandle, ENABLE);
 8001396:	2101      	movs	r1, #1
 8001398:	68f8      	ldr	r0, [r7, #12]
 800139a:	f7ff fc75 	bl	8000c88 <DMA_StartStop>
	}

	return state;
 800139e:	7dfb      	ldrb	r3, [r7, #23]
}
 80013a0:	4618      	mov	r0, r3
 80013a2:	3718      	adds	r7, #24
 80013a4:	46bd      	mov	sp, r7
 80013a6:	bd80      	pop	{r7, pc}

080013a8 <DMA_Trans_Cmplt_Handle_IT>:
 *
 * Params: 		struct DMA_Handle_t *pDMAxHandle - DMA handle address
 *
 */
static void DMA_Trans_Cmplt_Handle_IT(DMA_Handle_t *pDMAxHandle)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b082      	sub	sp, #8
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
	// 1. If not in circular mode and data to be transfered is 0, close transfer
	if (pDMAxHandle->DMA_Config.DMA_Mode != DMA_MODE_CIRC && pDMAxHandle->pDMAx->DMA_Strm[pDMAxHandle->DMA_Stream].SNDTR == 0)
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	7a9b      	ldrb	r3, [r3, #10]
 80013b4:	2b01      	cmp	r3, #1
 80013b6:	d011      	beq.n	80013dc <DMA_Trans_Cmplt_Handle_IT+0x34>
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681a      	ldr	r2, [r3, #0]
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	7c1b      	ldrb	r3, [r3, #16]
 80013c0:	4619      	mov	r1, r3
 80013c2:	460b      	mov	r3, r1
 80013c4:	005b      	lsls	r3, r3, #1
 80013c6:	440b      	add	r3, r1
 80013c8:	00db      	lsls	r3, r3, #3
 80013ca:	4413      	add	r3, r2
 80013cc:	3314      	adds	r3, #20
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d103      	bne.n	80013dc <DMA_Trans_Cmplt_Handle_IT+0x34>
	{
		DMA_Close_IT(pDMAxHandle);
 80013d4:	6878      	ldr	r0, [r7, #4]
 80013d6:	f000 f809 	bl	80013ec <DMA_Close_IT>
 80013da:	e003      	b.n	80013e4 <DMA_Trans_Cmplt_Handle_IT+0x3c>
	}
	else
	{
		DMA_ApplicationCallbackEvent(pDMAxHandle, DMA_TRANSFER_CMPLT);
 80013dc:	2100      	movs	r1, #0
 80013de:	6878      	ldr	r0, [r7, #4]
 80013e0:	f000 ff6a 	bl	80022b8 <DMA_ApplicationCallbackEvent>
	}
}
 80013e4:	bf00      	nop
 80013e6:	3708      	adds	r7, #8
 80013e8:	46bd      	mov	sp, r7
 80013ea:	bd80      	pop	{r7, pc}

080013ec <DMA_Close_IT>:
 * Brief: 		Closes the DMA transfers and resets state
 *
 * Params: 		struct DMA_Handle_t *pDMAxHandle - DMA handle address
 *
 */
void DMA_Close_IT(DMA_Handle_t *pDMAxHandle) {
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b084      	sub	sp, #16
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
	uint8_t streamNum = pDMAxHandle->DMA_Stream;
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	7c1b      	ldrb	r3, [r3, #16]
 80013f8:	73fb      	strb	r3, [r7, #15]

	// 1. Reset transfer complete interrupt
	pDMAxHandle->pDMAx->DMA_Strm[streamNum].SCR &= ~(1 << 4);
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	6819      	ldr	r1, [r3, #0]
 80013fe:	7bfa      	ldrb	r2, [r7, #15]
 8001400:	4613      	mov	r3, r2
 8001402:	005b      	lsls	r3, r3, #1
 8001404:	4413      	add	r3, r2
 8001406:	00db      	lsls	r3, r3, #3
 8001408:	440b      	add	r3, r1
 800140a:	3310      	adds	r3, #16
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	687a      	ldr	r2, [r7, #4]
 8001410:	6810      	ldr	r0, [r2, #0]
 8001412:	7bfa      	ldrb	r2, [r7, #15]
 8001414:	f023 0110 	bic.w	r1, r3, #16
 8001418:	4613      	mov	r3, r2
 800141a:	005b      	lsls	r3, r3, #1
 800141c:	4413      	add	r3, r2
 800141e:	00db      	lsls	r3, r3, #3
 8001420:	4403      	add	r3, r0
 8001422:	3310      	adds	r3, #16
 8001424:	6019      	str	r1, [r3, #0]

	// 2. Reset handle fields
	pDMAxHandle->state = DMA_READY;
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	2200      	movs	r2, #0
 800142a:	745a      	strb	r2, [r3, #17]

	// 3. Send callback
	DMA_ApplicationCallbackEvent(pDMAxHandle, DMA_TRANSFER_CMPLT);
 800142c:	2100      	movs	r1, #0
 800142e:	6878      	ldr	r0, [r7, #4]
 8001430:	f000 ff42 	bl	80022b8 <DMA_ApplicationCallbackEvent>
}
 8001434:	bf00      	nop
 8001436:	3710      	adds	r7, #16
 8001438:	46bd      	mov	sp, r7
 800143a:	bd80      	pop	{r7, pc}

0800143c <GPIO_PortCode>:
 *
 * Params: 		struct GPIO_RegDef_t* - GPIO register base address
 *
 */
uint8_t GPIO_PortCode(GPIO_RegDef_t *pGPIOx)
{
 800143c:	b480      	push	{r7}
 800143e:	b083      	sub	sp, #12
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
	if (pGPIOx == GPIOA)
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	4a1a      	ldr	r2, [pc, #104]	; (80014b0 <GPIO_PortCode+0x74>)
 8001448:	4293      	cmp	r3, r2
 800144a:	d101      	bne.n	8001450 <GPIO_PortCode+0x14>
	{
		return 0;
 800144c:	2300      	movs	r3, #0
 800144e:	e02a      	b.n	80014a6 <GPIO_PortCode+0x6a>
	}
	else if (pGPIOx == GPIOB)
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	4a18      	ldr	r2, [pc, #96]	; (80014b4 <GPIO_PortCode+0x78>)
 8001454:	4293      	cmp	r3, r2
 8001456:	d101      	bne.n	800145c <GPIO_PortCode+0x20>
	{
		return 1;
 8001458:	2301      	movs	r3, #1
 800145a:	e024      	b.n	80014a6 <GPIO_PortCode+0x6a>
	}
	else if (pGPIOx == GPIOC)
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	4a16      	ldr	r2, [pc, #88]	; (80014b8 <GPIO_PortCode+0x7c>)
 8001460:	4293      	cmp	r3, r2
 8001462:	d101      	bne.n	8001468 <GPIO_PortCode+0x2c>
	{
		return 2;
 8001464:	2302      	movs	r3, #2
 8001466:	e01e      	b.n	80014a6 <GPIO_PortCode+0x6a>
	}
	else if (pGPIOx == GPIOD)
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	4a14      	ldr	r2, [pc, #80]	; (80014bc <GPIO_PortCode+0x80>)
 800146c:	4293      	cmp	r3, r2
 800146e:	d101      	bne.n	8001474 <GPIO_PortCode+0x38>
	{
		return 3;
 8001470:	2303      	movs	r3, #3
 8001472:	e018      	b.n	80014a6 <GPIO_PortCode+0x6a>
	}
	else if (pGPIOx == GPIOE)
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	4a12      	ldr	r2, [pc, #72]	; (80014c0 <GPIO_PortCode+0x84>)
 8001478:	4293      	cmp	r3, r2
 800147a:	d101      	bne.n	8001480 <GPIO_PortCode+0x44>
	{
		return 4;
 800147c:	2304      	movs	r3, #4
 800147e:	e012      	b.n	80014a6 <GPIO_PortCode+0x6a>
	}
	else if (pGPIOx == GPIOF)
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	4a10      	ldr	r2, [pc, #64]	; (80014c4 <GPIO_PortCode+0x88>)
 8001484:	4293      	cmp	r3, r2
 8001486:	d101      	bne.n	800148c <GPIO_PortCode+0x50>
	{
		return 5;
 8001488:	2305      	movs	r3, #5
 800148a:	e00c      	b.n	80014a6 <GPIO_PortCode+0x6a>
	}
	else if (pGPIOx == GPIOG)
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	4a0e      	ldr	r2, [pc, #56]	; (80014c8 <GPIO_PortCode+0x8c>)
 8001490:	4293      	cmp	r3, r2
 8001492:	d101      	bne.n	8001498 <GPIO_PortCode+0x5c>
	{
		return 6;
 8001494:	2306      	movs	r3, #6
 8001496:	e006      	b.n	80014a6 <GPIO_PortCode+0x6a>
	}
	else if (pGPIOx == GPIOH)
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	4a0c      	ldr	r2, [pc, #48]	; (80014cc <GPIO_PortCode+0x90>)
 800149c:	4293      	cmp	r3, r2
 800149e:	d101      	bne.n	80014a4 <GPIO_PortCode+0x68>
	{
		return 7;
 80014a0:	2307      	movs	r3, #7
 80014a2:	e000      	b.n	80014a6 <GPIO_PortCode+0x6a>
	}

	return 0;
 80014a4:	2300      	movs	r3, #0
}
 80014a6:	4618      	mov	r0, r3
 80014a8:	370c      	adds	r7, #12
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bc80      	pop	{r7}
 80014ae:	4770      	bx	lr
 80014b0:	40020000 	.word	0x40020000
 80014b4:	40020400 	.word	0x40020400
 80014b8:	40020800 	.word	0x40020800
 80014bc:	40020c00 	.word	0x40020c00
 80014c0:	40021000 	.word	0x40021000
 80014c4:	40021400 	.word	0x40021400
 80014c8:	40021800 	.word	0x40021800
 80014cc:	40021c00 	.word	0x40021c00

080014d0 <GPIO_PeriClockControl>:
 * Params: 		struct GPIO_RegDef_t* - GPIO register base address
 * 				uint8_t - Enable or disable value
 *
 */
void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnOrDi)
{
 80014d0:	b480      	push	{r7}
 80014d2:	b083      	sub	sp, #12
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
 80014d8:	460b      	mov	r3, r1
 80014da:	70fb      	strb	r3, [r7, #3]
	if (EnOrDi == ENABLE)
 80014dc:	78fb      	ldrb	r3, [r7, #3]
 80014de:	2b01      	cmp	r3, #1
 80014e0:	d157      	bne.n	8001592 <GPIO_PeriClockControl+0xc2>
	{
		if (pGPIOx == GPIOA)
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	4a59      	ldr	r2, [pc, #356]	; (800164c <GPIO_PeriClockControl+0x17c>)
 80014e6:	4293      	cmp	r3, r2
 80014e8:	d106      	bne.n	80014f8 <GPIO_PeriClockControl+0x28>
		{
			GPIOA_PCLK_EN();
 80014ea:	4b59      	ldr	r3, [pc, #356]	; (8001650 <GPIO_PeriClockControl+0x180>)
 80014ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ee:	4a58      	ldr	r2, [pc, #352]	; (8001650 <GPIO_PeriClockControl+0x180>)
 80014f0:	f043 0301 	orr.w	r3, r3, #1
 80014f4:	6313      	str	r3, [r2, #48]	; 0x30
		else if (pGPIOx == GPIOH)
		{
			GPIOH_PCLK_DI();
		}
	}
}
 80014f6:	e0a3      	b.n	8001640 <GPIO_PeriClockControl+0x170>
		else if (pGPIOx == GPIOB)
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	4a56      	ldr	r2, [pc, #344]	; (8001654 <GPIO_PeriClockControl+0x184>)
 80014fc:	4293      	cmp	r3, r2
 80014fe:	d106      	bne.n	800150e <GPIO_PeriClockControl+0x3e>
			GPIOB_PCLK_EN();
 8001500:	4b53      	ldr	r3, [pc, #332]	; (8001650 <GPIO_PeriClockControl+0x180>)
 8001502:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001504:	4a52      	ldr	r2, [pc, #328]	; (8001650 <GPIO_PeriClockControl+0x180>)
 8001506:	f043 0302 	orr.w	r3, r3, #2
 800150a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800150c:	e098      	b.n	8001640 <GPIO_PeriClockControl+0x170>
		else if (pGPIOx == GPIOC)
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	4a51      	ldr	r2, [pc, #324]	; (8001658 <GPIO_PeriClockControl+0x188>)
 8001512:	4293      	cmp	r3, r2
 8001514:	d106      	bne.n	8001524 <GPIO_PeriClockControl+0x54>
			GPIOC_PCLK_EN();
 8001516:	4b4e      	ldr	r3, [pc, #312]	; (8001650 <GPIO_PeriClockControl+0x180>)
 8001518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800151a:	4a4d      	ldr	r2, [pc, #308]	; (8001650 <GPIO_PeriClockControl+0x180>)
 800151c:	f043 0304 	orr.w	r3, r3, #4
 8001520:	6313      	str	r3, [r2, #48]	; 0x30
}
 8001522:	e08d      	b.n	8001640 <GPIO_PeriClockControl+0x170>
		else if (pGPIOx == GPIOD)
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	4a4d      	ldr	r2, [pc, #308]	; (800165c <GPIO_PeriClockControl+0x18c>)
 8001528:	4293      	cmp	r3, r2
 800152a:	d106      	bne.n	800153a <GPIO_PeriClockControl+0x6a>
			GPIOD_PCLK_EN();
 800152c:	4b48      	ldr	r3, [pc, #288]	; (8001650 <GPIO_PeriClockControl+0x180>)
 800152e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001530:	4a47      	ldr	r2, [pc, #284]	; (8001650 <GPIO_PeriClockControl+0x180>)
 8001532:	f043 0308 	orr.w	r3, r3, #8
 8001536:	6313      	str	r3, [r2, #48]	; 0x30
}
 8001538:	e082      	b.n	8001640 <GPIO_PeriClockControl+0x170>
		else if (pGPIOx == GPIOE)
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	4a48      	ldr	r2, [pc, #288]	; (8001660 <GPIO_PeriClockControl+0x190>)
 800153e:	4293      	cmp	r3, r2
 8001540:	d106      	bne.n	8001550 <GPIO_PeriClockControl+0x80>
			GPIOE_PCLK_EN();
 8001542:	4b43      	ldr	r3, [pc, #268]	; (8001650 <GPIO_PeriClockControl+0x180>)
 8001544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001546:	4a42      	ldr	r2, [pc, #264]	; (8001650 <GPIO_PeriClockControl+0x180>)
 8001548:	f043 0310 	orr.w	r3, r3, #16
 800154c:	6313      	str	r3, [r2, #48]	; 0x30
}
 800154e:	e077      	b.n	8001640 <GPIO_PeriClockControl+0x170>
		else if (pGPIOx == GPIOF)
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	4a44      	ldr	r2, [pc, #272]	; (8001664 <GPIO_PeriClockControl+0x194>)
 8001554:	4293      	cmp	r3, r2
 8001556:	d106      	bne.n	8001566 <GPIO_PeriClockControl+0x96>
			GPIOF_PCLK_EN();
 8001558:	4b3d      	ldr	r3, [pc, #244]	; (8001650 <GPIO_PeriClockControl+0x180>)
 800155a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800155c:	4a3c      	ldr	r2, [pc, #240]	; (8001650 <GPIO_PeriClockControl+0x180>)
 800155e:	f043 0320 	orr.w	r3, r3, #32
 8001562:	6313      	str	r3, [r2, #48]	; 0x30
}
 8001564:	e06c      	b.n	8001640 <GPIO_PeriClockControl+0x170>
		else if (pGPIOx == GPIOG)
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	4a3f      	ldr	r2, [pc, #252]	; (8001668 <GPIO_PeriClockControl+0x198>)
 800156a:	4293      	cmp	r3, r2
 800156c:	d106      	bne.n	800157c <GPIO_PeriClockControl+0xac>
			GPIOG_PCLK_EN();
 800156e:	4b38      	ldr	r3, [pc, #224]	; (8001650 <GPIO_PeriClockControl+0x180>)
 8001570:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001572:	4a37      	ldr	r2, [pc, #220]	; (8001650 <GPIO_PeriClockControl+0x180>)
 8001574:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001578:	6313      	str	r3, [r2, #48]	; 0x30
}
 800157a:	e061      	b.n	8001640 <GPIO_PeriClockControl+0x170>
		else if (pGPIOx == GPIOH)
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	4a3b      	ldr	r2, [pc, #236]	; (800166c <GPIO_PeriClockControl+0x19c>)
 8001580:	4293      	cmp	r3, r2
 8001582:	d15d      	bne.n	8001640 <GPIO_PeriClockControl+0x170>
			GPIOH_PCLK_EN();
 8001584:	4b32      	ldr	r3, [pc, #200]	; (8001650 <GPIO_PeriClockControl+0x180>)
 8001586:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001588:	4a31      	ldr	r2, [pc, #196]	; (8001650 <GPIO_PeriClockControl+0x180>)
 800158a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800158e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8001590:	e056      	b.n	8001640 <GPIO_PeriClockControl+0x170>
		if (pGPIOx == GPIOA)
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	4a2d      	ldr	r2, [pc, #180]	; (800164c <GPIO_PeriClockControl+0x17c>)
 8001596:	4293      	cmp	r3, r2
 8001598:	d106      	bne.n	80015a8 <GPIO_PeriClockControl+0xd8>
			GPIOA_PCLK_DI();
 800159a:	4b2d      	ldr	r3, [pc, #180]	; (8001650 <GPIO_PeriClockControl+0x180>)
 800159c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800159e:	4a2c      	ldr	r2, [pc, #176]	; (8001650 <GPIO_PeriClockControl+0x180>)
 80015a0:	f023 0301 	bic.w	r3, r3, #1
 80015a4:	6313      	str	r3, [r2, #48]	; 0x30
}
 80015a6:	e04b      	b.n	8001640 <GPIO_PeriClockControl+0x170>
		else if (pGPIOx == GPIOB)
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	4a2a      	ldr	r2, [pc, #168]	; (8001654 <GPIO_PeriClockControl+0x184>)
 80015ac:	4293      	cmp	r3, r2
 80015ae:	d106      	bne.n	80015be <GPIO_PeriClockControl+0xee>
			GPIOB_PCLK_DI();
 80015b0:	4b27      	ldr	r3, [pc, #156]	; (8001650 <GPIO_PeriClockControl+0x180>)
 80015b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015b4:	4a26      	ldr	r2, [pc, #152]	; (8001650 <GPIO_PeriClockControl+0x180>)
 80015b6:	f023 0302 	bic.w	r3, r3, #2
 80015ba:	6313      	str	r3, [r2, #48]	; 0x30
}
 80015bc:	e040      	b.n	8001640 <GPIO_PeriClockControl+0x170>
		else if (pGPIOx == GPIOC)
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	4a25      	ldr	r2, [pc, #148]	; (8001658 <GPIO_PeriClockControl+0x188>)
 80015c2:	4293      	cmp	r3, r2
 80015c4:	d106      	bne.n	80015d4 <GPIO_PeriClockControl+0x104>
			GPIOC_PCLK_DI();
 80015c6:	4b22      	ldr	r3, [pc, #136]	; (8001650 <GPIO_PeriClockControl+0x180>)
 80015c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ca:	4a21      	ldr	r2, [pc, #132]	; (8001650 <GPIO_PeriClockControl+0x180>)
 80015cc:	f023 0304 	bic.w	r3, r3, #4
 80015d0:	6313      	str	r3, [r2, #48]	; 0x30
}
 80015d2:	e035      	b.n	8001640 <GPIO_PeriClockControl+0x170>
		else if (pGPIOx == GPIOD)
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	4a21      	ldr	r2, [pc, #132]	; (800165c <GPIO_PeriClockControl+0x18c>)
 80015d8:	4293      	cmp	r3, r2
 80015da:	d106      	bne.n	80015ea <GPIO_PeriClockControl+0x11a>
			GPIOD_PCLK_DI();
 80015dc:	4b1c      	ldr	r3, [pc, #112]	; (8001650 <GPIO_PeriClockControl+0x180>)
 80015de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015e0:	4a1b      	ldr	r2, [pc, #108]	; (8001650 <GPIO_PeriClockControl+0x180>)
 80015e2:	f023 0308 	bic.w	r3, r3, #8
 80015e6:	6313      	str	r3, [r2, #48]	; 0x30
}
 80015e8:	e02a      	b.n	8001640 <GPIO_PeriClockControl+0x170>
		else if (pGPIOx == GPIOE)
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	4a1c      	ldr	r2, [pc, #112]	; (8001660 <GPIO_PeriClockControl+0x190>)
 80015ee:	4293      	cmp	r3, r2
 80015f0:	d106      	bne.n	8001600 <GPIO_PeriClockControl+0x130>
			GPIOE_PCLK_DI();
 80015f2:	4b17      	ldr	r3, [pc, #92]	; (8001650 <GPIO_PeriClockControl+0x180>)
 80015f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015f6:	4a16      	ldr	r2, [pc, #88]	; (8001650 <GPIO_PeriClockControl+0x180>)
 80015f8:	f023 0310 	bic.w	r3, r3, #16
 80015fc:	6313      	str	r3, [r2, #48]	; 0x30
}
 80015fe:	e01f      	b.n	8001640 <GPIO_PeriClockControl+0x170>
		else if (pGPIOx == GPIOF)
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	4a18      	ldr	r2, [pc, #96]	; (8001664 <GPIO_PeriClockControl+0x194>)
 8001604:	4293      	cmp	r3, r2
 8001606:	d106      	bne.n	8001616 <GPIO_PeriClockControl+0x146>
			GPIOF_PCLK_DI();
 8001608:	4b11      	ldr	r3, [pc, #68]	; (8001650 <GPIO_PeriClockControl+0x180>)
 800160a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800160c:	4a10      	ldr	r2, [pc, #64]	; (8001650 <GPIO_PeriClockControl+0x180>)
 800160e:	f023 0320 	bic.w	r3, r3, #32
 8001612:	6313      	str	r3, [r2, #48]	; 0x30
}
 8001614:	e014      	b.n	8001640 <GPIO_PeriClockControl+0x170>
		else if (pGPIOx == GPIOG)
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	4a13      	ldr	r2, [pc, #76]	; (8001668 <GPIO_PeriClockControl+0x198>)
 800161a:	4293      	cmp	r3, r2
 800161c:	d106      	bne.n	800162c <GPIO_PeriClockControl+0x15c>
			GPIOG_PCLK_DI();
 800161e:	4b0c      	ldr	r3, [pc, #48]	; (8001650 <GPIO_PeriClockControl+0x180>)
 8001620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001622:	4a0b      	ldr	r2, [pc, #44]	; (8001650 <GPIO_PeriClockControl+0x180>)
 8001624:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001628:	6313      	str	r3, [r2, #48]	; 0x30
}
 800162a:	e009      	b.n	8001640 <GPIO_PeriClockControl+0x170>
		else if (pGPIOx == GPIOH)
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	4a0f      	ldr	r2, [pc, #60]	; (800166c <GPIO_PeriClockControl+0x19c>)
 8001630:	4293      	cmp	r3, r2
 8001632:	d105      	bne.n	8001640 <GPIO_PeriClockControl+0x170>
			GPIOH_PCLK_DI();
 8001634:	4b06      	ldr	r3, [pc, #24]	; (8001650 <GPIO_PeriClockControl+0x180>)
 8001636:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001638:	4a05      	ldr	r2, [pc, #20]	; (8001650 <GPIO_PeriClockControl+0x180>)
 800163a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800163e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8001640:	bf00      	nop
 8001642:	370c      	adds	r7, #12
 8001644:	46bd      	mov	sp, r7
 8001646:	bc80      	pop	{r7}
 8001648:	4770      	bx	lr
 800164a:	bf00      	nop
 800164c:	40020000 	.word	0x40020000
 8001650:	40023800 	.word	0x40023800
 8001654:	40020400 	.word	0x40020400
 8001658:	40020800 	.word	0x40020800
 800165c:	40020c00 	.word	0x40020c00
 8001660:	40021000 	.word	0x40021000
 8001664:	40021400 	.word	0x40021400
 8001668:	40021800 	.word	0x40021800
 800166c:	40021c00 	.word	0x40021c00

08001670 <GPIO_Init>:
 * Params:		struct GPIO_Handle_t*
 *
 *
 */
void GPIO_Init(GPIO_Handle_t *pGPIOxHandle)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b086      	sub	sp, #24
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
	// Enable clock to GPIO port
	GPIO_PeriClockControl(pGPIOxHandle->pGPIOx, ENABLE);
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	2101      	movs	r1, #1
 800167e:	4618      	mov	r0, r3
 8001680:	f7ff ff26 	bl	80014d0 <GPIO_PeriClockControl>

	uint32_t temp = 0;
 8001684:	2300      	movs	r3, #0
 8001686:	617b      	str	r3, [r7, #20]

	// 1. Set GPIO pin mode
	if (pGPIOxHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG)
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	795b      	ldrb	r3, [r3, #5]
 800168c:	2b03      	cmp	r3, #3
 800168e:	d822      	bhi.n	80016d6 <GPIO_Init+0x66>
	{
		temp = (pGPIOxHandle->GPIO_PinConfig.GPIO_PinMode << (2 * pGPIOxHandle->GPIO_PinConfig.GPIO_PinNumber));
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	795b      	ldrb	r3, [r3, #5]
 8001694:	461a      	mov	r2, r3
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	791b      	ldrb	r3, [r3, #4]
 800169a:	005b      	lsls	r3, r3, #1
 800169c:	fa02 f303 	lsl.w	r3, r2, r3
 80016a0:	617b      	str	r3, [r7, #20]
		pGPIOxHandle->pGPIOx->MODER &= ~((0x3) << (2 * pGPIOxHandle->GPIO_PinConfig.GPIO_PinNumber));
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	681a      	ldr	r2, [r3, #0]
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	791b      	ldrb	r3, [r3, #4]
 80016ac:	005b      	lsls	r3, r3, #1
 80016ae:	2103      	movs	r1, #3
 80016b0:	fa01 f303 	lsl.w	r3, r1, r3
 80016b4:	43db      	mvns	r3, r3
 80016b6:	4619      	mov	r1, r3
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	400a      	ands	r2, r1
 80016be:	601a      	str	r2, [r3, #0]
		pGPIOxHandle->pGPIOx->MODER |= temp;
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	6819      	ldr	r1, [r3, #0]
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	697a      	ldr	r2, [r7, #20]
 80016cc:	430a      	orrs	r2, r1
 80016ce:	601a      	str	r2, [r3, #0]
		temp = 0;
 80016d0:	2300      	movs	r3, #0
 80016d2:	617b      	str	r3, [r7, #20]
 80016d4:	e07c      	b.n	80017d0 <GPIO_Init+0x160>
	}
	else {
		//For setting to interrupt mode...

		// Enable clock to SYSCFG (needed to set IRQ in EXTI)
		SYSCFG_PCLK_EN();
 80016d6:	4b8e      	ldr	r3, [pc, #568]	; (8001910 <GPIO_Init+0x2a0>)
 80016d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016da:	4a8d      	ldr	r2, [pc, #564]	; (8001910 <GPIO_Init+0x2a0>)
 80016dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016e0:	6453      	str	r3, [r2, #68]	; 0x44

		// 1. Set rising/falling edge trigger(s)
		if (pGPIOxHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_IT_MODE_RT)
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	795b      	ldrb	r3, [r3, #5]
 80016e6:	2b04      	cmp	r3, #4
 80016e8:	d117      	bne.n	800171a <GPIO_Init+0xaa>
		{
			EXTI->RTSR |= (1 << pGPIOxHandle->GPIO_PinConfig.GPIO_PinNumber);
 80016ea:	4b8a      	ldr	r3, [pc, #552]	; (8001914 <GPIO_Init+0x2a4>)
 80016ec:	689b      	ldr	r3, [r3, #8]
 80016ee:	687a      	ldr	r2, [r7, #4]
 80016f0:	7912      	ldrb	r2, [r2, #4]
 80016f2:	4611      	mov	r1, r2
 80016f4:	2201      	movs	r2, #1
 80016f6:	408a      	lsls	r2, r1
 80016f8:	4611      	mov	r1, r2
 80016fa:	4a86      	ldr	r2, [pc, #536]	; (8001914 <GPIO_Init+0x2a4>)
 80016fc:	430b      	orrs	r3, r1
 80016fe:	6093      	str	r3, [r2, #8]
			EXTI->FTSR &= ~(1 << pGPIOxHandle->GPIO_PinConfig.GPIO_PinNumber);
 8001700:	4b84      	ldr	r3, [pc, #528]	; (8001914 <GPIO_Init+0x2a4>)
 8001702:	68db      	ldr	r3, [r3, #12]
 8001704:	687a      	ldr	r2, [r7, #4]
 8001706:	7912      	ldrb	r2, [r2, #4]
 8001708:	4611      	mov	r1, r2
 800170a:	2201      	movs	r2, #1
 800170c:	408a      	lsls	r2, r1
 800170e:	43d2      	mvns	r2, r2
 8001710:	4611      	mov	r1, r2
 8001712:	4a80      	ldr	r2, [pc, #512]	; (8001914 <GPIO_Init+0x2a4>)
 8001714:	400b      	ands	r3, r1
 8001716:	60d3      	str	r3, [r2, #12]
 8001718:	e035      	b.n	8001786 <GPIO_Init+0x116>
		}
		else if (pGPIOxHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_IT_MODE_FT)
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	795b      	ldrb	r3, [r3, #5]
 800171e:	2b05      	cmp	r3, #5
 8001720:	d117      	bne.n	8001752 <GPIO_Init+0xe2>
		{
			EXTI->FTSR |= (1 << pGPIOxHandle->GPIO_PinConfig.GPIO_PinNumber);
 8001722:	4b7c      	ldr	r3, [pc, #496]	; (8001914 <GPIO_Init+0x2a4>)
 8001724:	68db      	ldr	r3, [r3, #12]
 8001726:	687a      	ldr	r2, [r7, #4]
 8001728:	7912      	ldrb	r2, [r2, #4]
 800172a:	4611      	mov	r1, r2
 800172c:	2201      	movs	r2, #1
 800172e:	408a      	lsls	r2, r1
 8001730:	4611      	mov	r1, r2
 8001732:	4a78      	ldr	r2, [pc, #480]	; (8001914 <GPIO_Init+0x2a4>)
 8001734:	430b      	orrs	r3, r1
 8001736:	60d3      	str	r3, [r2, #12]
			EXTI->RTSR &= ~(1 << pGPIOxHandle->GPIO_PinConfig.GPIO_PinNumber);
 8001738:	4b76      	ldr	r3, [pc, #472]	; (8001914 <GPIO_Init+0x2a4>)
 800173a:	689b      	ldr	r3, [r3, #8]
 800173c:	687a      	ldr	r2, [r7, #4]
 800173e:	7912      	ldrb	r2, [r2, #4]
 8001740:	4611      	mov	r1, r2
 8001742:	2201      	movs	r2, #1
 8001744:	408a      	lsls	r2, r1
 8001746:	43d2      	mvns	r2, r2
 8001748:	4611      	mov	r1, r2
 800174a:	4a72      	ldr	r2, [pc, #456]	; (8001914 <GPIO_Init+0x2a4>)
 800174c:	400b      	ands	r3, r1
 800174e:	6093      	str	r3, [r2, #8]
 8001750:	e019      	b.n	8001786 <GPIO_Init+0x116>
		}
		else if (pGPIOxHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_IT_MODE_RFT)
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	795b      	ldrb	r3, [r3, #5]
 8001756:	2b06      	cmp	r3, #6
 8001758:	d115      	bne.n	8001786 <GPIO_Init+0x116>
		{
			EXTI->RTSR |= (1 << pGPIOxHandle->GPIO_PinConfig.GPIO_PinNumber);
 800175a:	4b6e      	ldr	r3, [pc, #440]	; (8001914 <GPIO_Init+0x2a4>)
 800175c:	689b      	ldr	r3, [r3, #8]
 800175e:	687a      	ldr	r2, [r7, #4]
 8001760:	7912      	ldrb	r2, [r2, #4]
 8001762:	4611      	mov	r1, r2
 8001764:	2201      	movs	r2, #1
 8001766:	408a      	lsls	r2, r1
 8001768:	4611      	mov	r1, r2
 800176a:	4a6a      	ldr	r2, [pc, #424]	; (8001914 <GPIO_Init+0x2a4>)
 800176c:	430b      	orrs	r3, r1
 800176e:	6093      	str	r3, [r2, #8]
			EXTI->FTSR |= (1 << pGPIOxHandle->GPIO_PinConfig.GPIO_PinNumber);
 8001770:	4b68      	ldr	r3, [pc, #416]	; (8001914 <GPIO_Init+0x2a4>)
 8001772:	68db      	ldr	r3, [r3, #12]
 8001774:	687a      	ldr	r2, [r7, #4]
 8001776:	7912      	ldrb	r2, [r2, #4]
 8001778:	4611      	mov	r1, r2
 800177a:	2201      	movs	r2, #1
 800177c:	408a      	lsls	r2, r1
 800177e:	4611      	mov	r1, r2
 8001780:	4a64      	ldr	r2, [pc, #400]	; (8001914 <GPIO_Init+0x2a4>)
 8001782:	430b      	orrs	r3, r1
 8001784:	60d3      	str	r3, [r2, #12]
		}

		// 2. Configure GPIO port selection in SYSCFG
		uint8_t temp1 = pGPIOxHandle->GPIO_PinConfig.GPIO_PinNumber / 4;
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	791b      	ldrb	r3, [r3, #4]
 800178a:	089b      	lsrs	r3, r3, #2
 800178c:	74fb      	strb	r3, [r7, #19]
		uint8_t temp2 = pGPIOxHandle->GPIO_PinConfig.GPIO_PinNumber % 4;
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	791b      	ldrb	r3, [r3, #4]
 8001792:	f003 0303 	and.w	r3, r3, #3
 8001796:	74bb      	strb	r3, [r7, #18]
		uint8_t portCode = GPIO_PortCode(pGPIOxHandle->pGPIOx);
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	4618      	mov	r0, r3
 800179e:	f7ff fe4d 	bl	800143c <GPIO_PortCode>
 80017a2:	4603      	mov	r3, r0
 80017a4:	747b      	strb	r3, [r7, #17]
		SYSCFG->EXTICR[temp1] = portCode << (temp2 * 4);
 80017a6:	7c7a      	ldrb	r2, [r7, #17]
 80017a8:	7cbb      	ldrb	r3, [r7, #18]
 80017aa:	009b      	lsls	r3, r3, #2
 80017ac:	fa02 f103 	lsl.w	r1, r2, r3
 80017b0:	4a59      	ldr	r2, [pc, #356]	; (8001918 <GPIO_Init+0x2a8>)
 80017b2:	7cfb      	ldrb	r3, [r7, #19]
 80017b4:	3302      	adds	r3, #2
 80017b6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

		// 3. Enable EXTI interrupt using interrupt register masking
		EXTI->IMR |= (1 << pGPIOxHandle->GPIO_PinConfig.GPIO_PinNumber);
 80017ba:	4b56      	ldr	r3, [pc, #344]	; (8001914 <GPIO_Init+0x2a4>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	687a      	ldr	r2, [r7, #4]
 80017c0:	7912      	ldrb	r2, [r2, #4]
 80017c2:	4611      	mov	r1, r2
 80017c4:	2201      	movs	r2, #1
 80017c6:	408a      	lsls	r2, r1
 80017c8:	4611      	mov	r1, r2
 80017ca:	4a52      	ldr	r2, [pc, #328]	; (8001914 <GPIO_Init+0x2a4>)
 80017cc:	430b      	orrs	r3, r1
 80017ce:	6013      	str	r3, [r2, #0]
	}

	// 2. Set pin speed
	temp = (pGPIOxHandle->GPIO_PinConfig.GPIO_PinSpeed << (2 * pGPIOxHandle->GPIO_PinConfig.GPIO_PinNumber));
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	799b      	ldrb	r3, [r3, #6]
 80017d4:	461a      	mov	r2, r3
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	791b      	ldrb	r3, [r3, #4]
 80017da:	005b      	lsls	r3, r3, #1
 80017dc:	fa02 f303 	lsl.w	r3, r2, r3
 80017e0:	617b      	str	r3, [r7, #20]
	pGPIOxHandle->pGPIOx->OSPEEDR &= ~((0x3) << (2 * pGPIOxHandle->GPIO_PinConfig.GPIO_PinNumber));
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	689a      	ldr	r2, [r3, #8]
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	791b      	ldrb	r3, [r3, #4]
 80017ec:	005b      	lsls	r3, r3, #1
 80017ee:	2103      	movs	r1, #3
 80017f0:	fa01 f303 	lsl.w	r3, r1, r3
 80017f4:	43db      	mvns	r3, r3
 80017f6:	4619      	mov	r1, r3
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	400a      	ands	r2, r1
 80017fe:	609a      	str	r2, [r3, #8]
	pGPIOxHandle->pGPIOx->OSPEEDR |= temp;
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	6899      	ldr	r1, [r3, #8]
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	697a      	ldr	r2, [r7, #20]
 800180c:	430a      	orrs	r2, r1
 800180e:	609a      	str	r2, [r3, #8]
	temp = 0;
 8001810:	2300      	movs	r3, #0
 8001812:	617b      	str	r3, [r7, #20]

	// 3. Set pin pull-up or pull-down mode
	temp = (pGPIOxHandle->GPIO_PinConfig.GPIO_PuPdCtrl << (2 * pGPIOxHandle->GPIO_PinConfig.GPIO_PinNumber));
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	79db      	ldrb	r3, [r3, #7]
 8001818:	461a      	mov	r2, r3
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	791b      	ldrb	r3, [r3, #4]
 800181e:	005b      	lsls	r3, r3, #1
 8001820:	fa02 f303 	lsl.w	r3, r2, r3
 8001824:	617b      	str	r3, [r7, #20]
	pGPIOxHandle->pGPIOx->PUPDR &= ~((0x3) << (2 * pGPIOxHandle->GPIO_PinConfig.GPIO_PinNumber));
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	68da      	ldr	r2, [r3, #12]
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	791b      	ldrb	r3, [r3, #4]
 8001830:	005b      	lsls	r3, r3, #1
 8001832:	2103      	movs	r1, #3
 8001834:	fa01 f303 	lsl.w	r3, r1, r3
 8001838:	43db      	mvns	r3, r3
 800183a:	4619      	mov	r1, r3
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	400a      	ands	r2, r1
 8001842:	60da      	str	r2, [r3, #12]
	pGPIOxHandle->pGPIOx->PUPDR |= temp;
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	68d9      	ldr	r1, [r3, #12]
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	697a      	ldr	r2, [r7, #20]
 8001850:	430a      	orrs	r2, r1
 8001852:	60da      	str	r2, [r3, #12]
	temp = 0;
 8001854:	2300      	movs	r3, #0
 8001856:	617b      	str	r3, [r7, #20]

	// 4. Configure pin output type (push-pull or open drain)
	temp = (pGPIOxHandle->GPIO_PinConfig.GPIO_OpType << pGPIOxHandle->GPIO_PinConfig.GPIO_PinNumber);
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	7a1b      	ldrb	r3, [r3, #8]
 800185c:	461a      	mov	r2, r3
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	791b      	ldrb	r3, [r3, #4]
 8001862:	fa02 f303 	lsl.w	r3, r2, r3
 8001866:	617b      	str	r3, [r7, #20]
	pGPIOxHandle->pGPIOx->OTYPER &= ~((0x1) <<  pGPIOxHandle->GPIO_PinConfig.GPIO_PinNumber);
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	685a      	ldr	r2, [r3, #4]
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	791b      	ldrb	r3, [r3, #4]
 8001872:	4619      	mov	r1, r3
 8001874:	2301      	movs	r3, #1
 8001876:	408b      	lsls	r3, r1
 8001878:	43db      	mvns	r3, r3
 800187a:	4619      	mov	r1, r3
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	400a      	ands	r2, r1
 8001882:	605a      	str	r2, [r3, #4]
	pGPIOxHandle->pGPIOx->OTYPER |= temp;
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	6859      	ldr	r1, [r3, #4]
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	697a      	ldr	r2, [r7, #20]
 8001890:	430a      	orrs	r2, r1
 8001892:	605a      	str	r2, [r3, #4]
	temp = 0;
 8001894:	2300      	movs	r3, #0
 8001896:	617b      	str	r3, [r7, #20]

	// 5. Configure alternate mode function
	if (pGPIOxHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_AF)
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	795b      	ldrb	r3, [r3, #5]
 800189c:	2b02      	cmp	r3, #2
 800189e:	d132      	bne.n	8001906 <GPIO_Init+0x296>
	{
		uint32_t temp1, temp2;
		temp1 = pGPIOxHandle->GPIO_PinConfig.GPIO_PinNumber / 8;
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	791b      	ldrb	r3, [r3, #4]
 80018a4:	08db      	lsrs	r3, r3, #3
 80018a6:	b2db      	uxtb	r3, r3
 80018a8:	60fb      	str	r3, [r7, #12]
		temp2 = pGPIOxHandle->GPIO_PinConfig.GPIO_PinNumber % 8;
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	791b      	ldrb	r3, [r3, #4]
 80018ae:	f003 0307 	and.w	r3, r3, #7
 80018b2:	60bb      	str	r3, [r7, #8]

		pGPIOxHandle->pGPIOx->AFR[temp1] &= ~((0xF) << (4 * temp2));
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	68fa      	ldr	r2, [r7, #12]
 80018ba:	3208      	adds	r2, #8
 80018bc:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80018c0:	68bb      	ldr	r3, [r7, #8]
 80018c2:	009b      	lsls	r3, r3, #2
 80018c4:	210f      	movs	r1, #15
 80018c6:	fa01 f303 	lsl.w	r3, r1, r3
 80018ca:	43db      	mvns	r3, r3
 80018cc:	4619      	mov	r1, r3
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	4011      	ands	r1, r2
 80018d4:	68fa      	ldr	r2, [r7, #12]
 80018d6:	3208      	adds	r2, #8
 80018d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOxHandle->pGPIOx->AFR[temp1] |= (pGPIOxHandle->GPIO_PinConfig.GPIO_AfMode << (4 * temp2));
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	68fa      	ldr	r2, [r7, #12]
 80018e2:	3208      	adds	r2, #8
 80018e4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	7a5b      	ldrb	r3, [r3, #9]
 80018ec:	4619      	mov	r1, r3
 80018ee:	68bb      	ldr	r3, [r7, #8]
 80018f0:	009b      	lsls	r3, r3, #2
 80018f2:	fa01 f303 	lsl.w	r3, r1, r3
 80018f6:	4619      	mov	r1, r3
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	4311      	orrs	r1, r2
 80018fe:	68fa      	ldr	r2, [r7, #12]
 8001900:	3208      	adds	r2, #8
 8001902:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}
}
 8001906:	bf00      	nop
 8001908:	3718      	adds	r7, #24
 800190a:	46bd      	mov	sp, r7
 800190c:	bd80      	pop	{r7, pc}
 800190e:	bf00      	nop
 8001910:	40023800 	.word	0x40023800
 8001914:	40013c00 	.word	0x40013c00
 8001918:	40013800 	.word	0x40013800

0800191c <RCC_GetPPLCLK>:
 *
 * Return: 		uint32_t PPLClk - accelerated clock speed (Hz)
 *
 */
uint32_t RCC_GetPPLCLK(void)
{
 800191c:	b480      	push	{r7}
 800191e:	af00      	add	r7, sp, #0
	//TODO
	return 0;
 8001920:	2300      	movs	r3, #0
}
 8001922:	4618      	mov	r0, r3
 8001924:	46bd      	mov	sp, r7
 8001926:	bc80      	pop	{r7}
 8001928:	4770      	bx	lr
	...

0800192c <RCC_GetAPB1CLK>:
 *
 * Return: 		uint32_t Apb1Clk - clock speed to I2C peripherals (Hz)
 *
 */
uint32_t RCC_GetAPB1CLK(void)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b084      	sub	sp, #16
 8001930:	af00      	add	r7, sp, #0
	// 1. Get system clock source (internal, external, PLL)
	uint8_t clkSrc = ((RCC->CFGR >> 2) & 0x3);
 8001932:	4b25      	ldr	r3, [pc, #148]	; (80019c8 <RCC_GetAPB1CLK+0x9c>)
 8001934:	689b      	ldr	r3, [r3, #8]
 8001936:	089b      	lsrs	r3, r3, #2
 8001938:	b2db      	uxtb	r3, r3
 800193a:	f003 0303 	and.w	r3, r3, #3
 800193e:	727b      	strb	r3, [r7, #9]

	uint32_t sysClk, Apb1Clk;

	if (clkSrc == 0)
 8001940:	7a7b      	ldrb	r3, [r7, #9]
 8001942:	2b00      	cmp	r3, #0
 8001944:	d102      	bne.n	800194c <RCC_GetAPB1CLK+0x20>
	{
		// Internal oscillator
		sysClk = 16000000;
 8001946:	4b21      	ldr	r3, [pc, #132]	; (80019cc <RCC_GetAPB1CLK+0xa0>)
 8001948:	60fb      	str	r3, [r7, #12]
 800194a:	e00d      	b.n	8001968 <RCC_GetAPB1CLK+0x3c>
	}
	else if (clkSrc == 1)
 800194c:	7a7b      	ldrb	r3, [r7, #9]
 800194e:	2b01      	cmp	r3, #1
 8001950:	d102      	bne.n	8001958 <RCC_GetAPB1CLK+0x2c>
	{
		// External on-board oscillator
		sysClk = 8000000;
 8001952:	4b1f      	ldr	r3, [pc, #124]	; (80019d0 <RCC_GetAPB1CLK+0xa4>)
 8001954:	60fb      	str	r3, [r7, #12]
 8001956:	e007      	b.n	8001968 <RCC_GetAPB1CLK+0x3c>
	}
	else if (clkSrc == 2)
 8001958:	7a7b      	ldrb	r3, [r7, #9]
 800195a:	2b02      	cmp	r3, #2
 800195c:	d104      	bne.n	8001968 <RCC_GetAPB1CLK+0x3c>
	{
		Apb1Clk = RCC_GetPPLCLK();
 800195e:	f7ff ffdd 	bl	800191c <RCC_GetPPLCLK>
 8001962:	6078      	str	r0, [r7, #4]
		return Apb1Clk;
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	e02b      	b.n	80019c0 <RCC_GetAPB1CLK+0x94>
	}

	// 2. Get the AHB prescaler value
	uint8_t temp = (RCC->CFGR >> 4) & 0xF;
 8001968:	4b17      	ldr	r3, [pc, #92]	; (80019c8 <RCC_GetAPB1CLK+0x9c>)
 800196a:	689b      	ldr	r3, [r3, #8]
 800196c:	091b      	lsrs	r3, r3, #4
 800196e:	b2db      	uxtb	r3, r3
 8001970:	f003 030f 	and.w	r3, r3, #15
 8001974:	70fb      	strb	r3, [r7, #3]
	uint8_t ahbPre = 1, ppre1Pre = 1;
 8001976:	2301      	movs	r3, #1
 8001978:	72fb      	strb	r3, [r7, #11]
 800197a:	2301      	movs	r3, #1
 800197c:	72bb      	strb	r3, [r7, #10]

	if (temp >= 8)
 800197e:	78fb      	ldrb	r3, [r7, #3]
 8001980:	2b07      	cmp	r3, #7
 8001982:	d905      	bls.n	8001990 <RCC_GetAPB1CLK+0x64>
	{
		ahbPre = AHB_Prescaler[temp - 8];
 8001984:	78fb      	ldrb	r3, [r7, #3]
 8001986:	3b08      	subs	r3, #8
 8001988:	4a12      	ldr	r2, [pc, #72]	; (80019d4 <RCC_GetAPB1CLK+0xa8>)
 800198a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800198e:	72fb      	strb	r3, [r7, #11]
	}

	// 3. Get the APB1 prescaler value
	temp = (RCC->CFGR >> 10) & 0x7;
 8001990:	4b0d      	ldr	r3, [pc, #52]	; (80019c8 <RCC_GetAPB1CLK+0x9c>)
 8001992:	689b      	ldr	r3, [r3, #8]
 8001994:	0a9b      	lsrs	r3, r3, #10
 8001996:	b2db      	uxtb	r3, r3
 8001998:	f003 0307 	and.w	r3, r3, #7
 800199c:	70fb      	strb	r3, [r7, #3]
	if (temp >= 4)
 800199e:	78fb      	ldrb	r3, [r7, #3]
 80019a0:	2b03      	cmp	r3, #3
 80019a2:	d904      	bls.n	80019ae <RCC_GetAPB1CLK+0x82>
	{
		ppre1Pre = PPRE1_Prescaler[temp - 4];
 80019a4:	78fb      	ldrb	r3, [r7, #3]
 80019a6:	3b04      	subs	r3, #4
 80019a8:	4a0b      	ldr	r2, [pc, #44]	; (80019d8 <RCC_GetAPB1CLK+0xac>)
 80019aa:	5cd3      	ldrb	r3, [r2, r3]
 80019ac:	72bb      	strb	r3, [r7, #10]
	}

	// 4. Calculate the clock speed to I2C
	Apb1Clk = (sysClk / ahbPre) / ppre1Pre;
 80019ae:	7afb      	ldrb	r3, [r7, #11]
 80019b0:	68fa      	ldr	r2, [r7, #12]
 80019b2:	fbb2 f2f3 	udiv	r2, r2, r3
 80019b6:	7abb      	ldrb	r3, [r7, #10]
 80019b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80019bc:	607b      	str	r3, [r7, #4]

	return Apb1Clk;
 80019be:	687b      	ldr	r3, [r7, #4]
}
 80019c0:	4618      	mov	r0, r3
 80019c2:	3710      	adds	r7, #16
 80019c4:	46bd      	mov	sp, r7
 80019c6:	bd80      	pop	{r7, pc}
 80019c8:	40023800 	.word	0x40023800
 80019cc:	00f42400 	.word	0x00f42400
 80019d0:	007a1200 	.word	0x007a1200
 80019d4:	20000014 	.word	0x20000014
 80019d8:	20000024 	.word	0x20000024

080019dc <RCC_GetAPB2CLK>:
 *
 * Return: 		uint32_t Apb2Clk - clock speed to APB2 (Hz)
 *
 */
uint32_t RCC_GetAPB2CLK(void)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b084      	sub	sp, #16
 80019e0:	af00      	add	r7, sp, #0
	// 1. Get system clock source (internal, external, PLL)
	uint8_t clkSrc = ((RCC->CFGR >> 2) & 0x3);
 80019e2:	4b25      	ldr	r3, [pc, #148]	; (8001a78 <RCC_GetAPB2CLK+0x9c>)
 80019e4:	689b      	ldr	r3, [r3, #8]
 80019e6:	089b      	lsrs	r3, r3, #2
 80019e8:	b2db      	uxtb	r3, r3
 80019ea:	f003 0303 	and.w	r3, r3, #3
 80019ee:	727b      	strb	r3, [r7, #9]

	uint32_t sysClk, Apb2Clk;

	if (clkSrc == 0)
 80019f0:	7a7b      	ldrb	r3, [r7, #9]
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d102      	bne.n	80019fc <RCC_GetAPB2CLK+0x20>
	{
		// Internal oscillator
		sysClk = 16000000;
 80019f6:	4b21      	ldr	r3, [pc, #132]	; (8001a7c <RCC_GetAPB2CLK+0xa0>)
 80019f8:	60fb      	str	r3, [r7, #12]
 80019fa:	e00d      	b.n	8001a18 <RCC_GetAPB2CLK+0x3c>
	}
	else if (clkSrc == 1)
 80019fc:	7a7b      	ldrb	r3, [r7, #9]
 80019fe:	2b01      	cmp	r3, #1
 8001a00:	d102      	bne.n	8001a08 <RCC_GetAPB2CLK+0x2c>
	{
		// External on-board oscillator
		sysClk = 8000000;
 8001a02:	4b1f      	ldr	r3, [pc, #124]	; (8001a80 <RCC_GetAPB2CLK+0xa4>)
 8001a04:	60fb      	str	r3, [r7, #12]
 8001a06:	e007      	b.n	8001a18 <RCC_GetAPB2CLK+0x3c>
	}
	else if (clkSrc == 2)
 8001a08:	7a7b      	ldrb	r3, [r7, #9]
 8001a0a:	2b02      	cmp	r3, #2
 8001a0c:	d104      	bne.n	8001a18 <RCC_GetAPB2CLK+0x3c>
	{
		Apb2Clk = RCC_GetPPLCLK();
 8001a0e:	f7ff ff85 	bl	800191c <RCC_GetPPLCLK>
 8001a12:	6078      	str	r0, [r7, #4]
		return Apb2Clk;
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	e02b      	b.n	8001a70 <RCC_GetAPB2CLK+0x94>
	}

	// 2. Get the AHB prescaler value
	uint8_t temp = (RCC->CFGR >> 4) & 0xF;
 8001a18:	4b17      	ldr	r3, [pc, #92]	; (8001a78 <RCC_GetAPB2CLK+0x9c>)
 8001a1a:	689b      	ldr	r3, [r3, #8]
 8001a1c:	091b      	lsrs	r3, r3, #4
 8001a1e:	b2db      	uxtb	r3, r3
 8001a20:	f003 030f 	and.w	r3, r3, #15
 8001a24:	70fb      	strb	r3, [r7, #3]
	uint8_t ahbPre = 1, ppre2Pre = 1;
 8001a26:	2301      	movs	r3, #1
 8001a28:	72fb      	strb	r3, [r7, #11]
 8001a2a:	2301      	movs	r3, #1
 8001a2c:	72bb      	strb	r3, [r7, #10]

	if (temp >= 8)
 8001a2e:	78fb      	ldrb	r3, [r7, #3]
 8001a30:	2b07      	cmp	r3, #7
 8001a32:	d905      	bls.n	8001a40 <RCC_GetAPB2CLK+0x64>
	{
		ahbPre = AHB_Prescaler[temp - 8];
 8001a34:	78fb      	ldrb	r3, [r7, #3]
 8001a36:	3b08      	subs	r3, #8
 8001a38:	4a12      	ldr	r2, [pc, #72]	; (8001a84 <RCC_GetAPB2CLK+0xa8>)
 8001a3a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001a3e:	72fb      	strb	r3, [r7, #11]
	}

	// 3. Get the APB2 prescaler value
	temp = (RCC->CFGR >> 13) & 0x7;
 8001a40:	4b0d      	ldr	r3, [pc, #52]	; (8001a78 <RCC_GetAPB2CLK+0x9c>)
 8001a42:	689b      	ldr	r3, [r3, #8]
 8001a44:	0b5b      	lsrs	r3, r3, #13
 8001a46:	b2db      	uxtb	r3, r3
 8001a48:	f003 0307 	and.w	r3, r3, #7
 8001a4c:	70fb      	strb	r3, [r7, #3]
	if (temp >= 4)
 8001a4e:	78fb      	ldrb	r3, [r7, #3]
 8001a50:	2b03      	cmp	r3, #3
 8001a52:	d904      	bls.n	8001a5e <RCC_GetAPB2CLK+0x82>
	{
		ppre2Pre = PPRE2_Prescaler[temp - 4];
 8001a54:	78fb      	ldrb	r3, [r7, #3]
 8001a56:	3b04      	subs	r3, #4
 8001a58:	4a0b      	ldr	r2, [pc, #44]	; (8001a88 <RCC_GetAPB2CLK+0xac>)
 8001a5a:	5cd3      	ldrb	r3, [r2, r3]
 8001a5c:	72bb      	strb	r3, [r7, #10]
	}

	// 4. Calculate the clock speed to I2C
	Apb2Clk = (sysClk / ahbPre) / ppre2Pre;
 8001a5e:	7afb      	ldrb	r3, [r7, #11]
 8001a60:	68fa      	ldr	r2, [r7, #12]
 8001a62:	fbb2 f2f3 	udiv	r2, r2, r3
 8001a66:	7abb      	ldrb	r3, [r7, #10]
 8001a68:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a6c:	607b      	str	r3, [r7, #4]

	return Apb2Clk;
 8001a6e:	687b      	ldr	r3, [r7, #4]
}
 8001a70:	4618      	mov	r0, r3
 8001a72:	3710      	adds	r7, #16
 8001a74:	46bd      	mov	sp, r7
 8001a76:	bd80      	pop	{r7, pc}
 8001a78:	40023800 	.word	0x40023800
 8001a7c:	00f42400 	.word	0x00f42400
 8001a80:	007a1200 	.word	0x007a1200
 8001a84:	20000014 	.word	0x20000014
 8001a88:	20000028 	.word	0x20000028

08001a8c <USART_PeriClockControl>:
 * Params: 		struct USART_RegDef_t* *pUSARTx - USART/UART base address
 * 				uint8_t - Enable or disable value
 *
 */
void USART_PeriClockControl(USART_RegDef_t *pUSARTx, uint8_t EnOrDi)
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	b083      	sub	sp, #12
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
 8001a94:	460b      	mov	r3, r1
 8001a96:	70fb      	strb	r3, [r7, #3]
	if (EnOrDi == ENABLE)
 8001a98:	78fb      	ldrb	r3, [r7, #3]
 8001a9a:	2b01      	cmp	r3, #1
 8001a9c:	d141      	bne.n	8001b22 <USART_PeriClockControl+0x96>
	{
		if (pUSARTx == USART1)
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	4a43      	ldr	r2, [pc, #268]	; (8001bb0 <USART_PeriClockControl+0x124>)
 8001aa2:	4293      	cmp	r3, r2
 8001aa4:	d106      	bne.n	8001ab4 <USART_PeriClockControl+0x28>
		{
			USART1_PCLK_EN();
 8001aa6:	4b43      	ldr	r3, [pc, #268]	; (8001bb4 <USART_PeriClockControl+0x128>)
 8001aa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001aaa:	4a42      	ldr	r2, [pc, #264]	; (8001bb4 <USART_PeriClockControl+0x128>)
 8001aac:	f043 0310 	orr.w	r3, r3, #16
 8001ab0:	6453      	str	r3, [r2, #68]	; 0x44
		else if (pUSARTx == USART6)
		{
			USART6_PCLK_DI();
		}
	}
}
 8001ab2:	e077      	b.n	8001ba4 <USART_PeriClockControl+0x118>
		else if (pUSARTx == USART2)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	4a40      	ldr	r2, [pc, #256]	; (8001bb8 <USART_PeriClockControl+0x12c>)
 8001ab8:	4293      	cmp	r3, r2
 8001aba:	d106      	bne.n	8001aca <USART_PeriClockControl+0x3e>
			USART2_PCLK_EN();
 8001abc:	4b3d      	ldr	r3, [pc, #244]	; (8001bb4 <USART_PeriClockControl+0x128>)
 8001abe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ac0:	4a3c      	ldr	r2, [pc, #240]	; (8001bb4 <USART_PeriClockControl+0x128>)
 8001ac2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ac6:	6413      	str	r3, [r2, #64]	; 0x40
}
 8001ac8:	e06c      	b.n	8001ba4 <USART_PeriClockControl+0x118>
		else if (pUSARTx == USART3)
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	4a3b      	ldr	r2, [pc, #236]	; (8001bbc <USART_PeriClockControl+0x130>)
 8001ace:	4293      	cmp	r3, r2
 8001ad0:	d106      	bne.n	8001ae0 <USART_PeriClockControl+0x54>
			USART3_PCLK_EN();
 8001ad2:	4b38      	ldr	r3, [pc, #224]	; (8001bb4 <USART_PeriClockControl+0x128>)
 8001ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ad6:	4a37      	ldr	r2, [pc, #220]	; (8001bb4 <USART_PeriClockControl+0x128>)
 8001ad8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001adc:	6413      	str	r3, [r2, #64]	; 0x40
}
 8001ade:	e061      	b.n	8001ba4 <USART_PeriClockControl+0x118>
		else if (pUSARTx == UART4)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	4a37      	ldr	r2, [pc, #220]	; (8001bc0 <USART_PeriClockControl+0x134>)
 8001ae4:	4293      	cmp	r3, r2
 8001ae6:	d106      	bne.n	8001af6 <USART_PeriClockControl+0x6a>
			UART4_PCLK_EN();
 8001ae8:	4b32      	ldr	r3, [pc, #200]	; (8001bb4 <USART_PeriClockControl+0x128>)
 8001aea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aec:	4a31      	ldr	r2, [pc, #196]	; (8001bb4 <USART_PeriClockControl+0x128>)
 8001aee:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001af2:	6413      	str	r3, [r2, #64]	; 0x40
}
 8001af4:	e056      	b.n	8001ba4 <USART_PeriClockControl+0x118>
		else if (pUSARTx == UART5)
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	4a32      	ldr	r2, [pc, #200]	; (8001bc4 <USART_PeriClockControl+0x138>)
 8001afa:	4293      	cmp	r3, r2
 8001afc:	d106      	bne.n	8001b0c <USART_PeriClockControl+0x80>
			UART5_PCLK_EN();
 8001afe:	4b2d      	ldr	r3, [pc, #180]	; (8001bb4 <USART_PeriClockControl+0x128>)
 8001b00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b02:	4a2c      	ldr	r2, [pc, #176]	; (8001bb4 <USART_PeriClockControl+0x128>)
 8001b04:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001b08:	6413      	str	r3, [r2, #64]	; 0x40
}
 8001b0a:	e04b      	b.n	8001ba4 <USART_PeriClockControl+0x118>
		else if (pUSARTx == USART6)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	4a2e      	ldr	r2, [pc, #184]	; (8001bc8 <USART_PeriClockControl+0x13c>)
 8001b10:	4293      	cmp	r3, r2
 8001b12:	d147      	bne.n	8001ba4 <USART_PeriClockControl+0x118>
			USART6_PCLK_EN();
 8001b14:	4b27      	ldr	r3, [pc, #156]	; (8001bb4 <USART_PeriClockControl+0x128>)
 8001b16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b18:	4a26      	ldr	r2, [pc, #152]	; (8001bb4 <USART_PeriClockControl+0x128>)
 8001b1a:	f043 0320 	orr.w	r3, r3, #32
 8001b1e:	6453      	str	r3, [r2, #68]	; 0x44
}
 8001b20:	e040      	b.n	8001ba4 <USART_PeriClockControl+0x118>
		if (pUSARTx == USART1)
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	4a22      	ldr	r2, [pc, #136]	; (8001bb0 <USART_PeriClockControl+0x124>)
 8001b26:	4293      	cmp	r3, r2
 8001b28:	d106      	bne.n	8001b38 <USART_PeriClockControl+0xac>
			USART1_PCLK_DI();
 8001b2a:	4b22      	ldr	r3, [pc, #136]	; (8001bb4 <USART_PeriClockControl+0x128>)
 8001b2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b2e:	4a21      	ldr	r2, [pc, #132]	; (8001bb4 <USART_PeriClockControl+0x128>)
 8001b30:	f023 0310 	bic.w	r3, r3, #16
 8001b34:	6453      	str	r3, [r2, #68]	; 0x44
}
 8001b36:	e035      	b.n	8001ba4 <USART_PeriClockControl+0x118>
		else if (pUSARTx == USART2)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	4a1f      	ldr	r2, [pc, #124]	; (8001bb8 <USART_PeriClockControl+0x12c>)
 8001b3c:	4293      	cmp	r3, r2
 8001b3e:	d106      	bne.n	8001b4e <USART_PeriClockControl+0xc2>
			USART2_PCLK_DI();
 8001b40:	4b1c      	ldr	r3, [pc, #112]	; (8001bb4 <USART_PeriClockControl+0x128>)
 8001b42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b44:	4a1b      	ldr	r2, [pc, #108]	; (8001bb4 <USART_PeriClockControl+0x128>)
 8001b46:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8001b4a:	6413      	str	r3, [r2, #64]	; 0x40
}
 8001b4c:	e02a      	b.n	8001ba4 <USART_PeriClockControl+0x118>
		else if (pUSARTx == USART3)
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	4a1a      	ldr	r2, [pc, #104]	; (8001bbc <USART_PeriClockControl+0x130>)
 8001b52:	4293      	cmp	r3, r2
 8001b54:	d106      	bne.n	8001b64 <USART_PeriClockControl+0xd8>
			USART3_PCLK_DI();
 8001b56:	4b17      	ldr	r3, [pc, #92]	; (8001bb4 <USART_PeriClockControl+0x128>)
 8001b58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b5a:	4a16      	ldr	r2, [pc, #88]	; (8001bb4 <USART_PeriClockControl+0x128>)
 8001b5c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b60:	6413      	str	r3, [r2, #64]	; 0x40
}
 8001b62:	e01f      	b.n	8001ba4 <USART_PeriClockControl+0x118>
		else if (pUSARTx == UART4)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	4a16      	ldr	r2, [pc, #88]	; (8001bc0 <USART_PeriClockControl+0x134>)
 8001b68:	4293      	cmp	r3, r2
 8001b6a:	d106      	bne.n	8001b7a <USART_PeriClockControl+0xee>
			UART4_PCLK_DI();
 8001b6c:	4b11      	ldr	r3, [pc, #68]	; (8001bb4 <USART_PeriClockControl+0x128>)
 8001b6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b70:	4a10      	ldr	r2, [pc, #64]	; (8001bb4 <USART_PeriClockControl+0x128>)
 8001b72:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8001b76:	6413      	str	r3, [r2, #64]	; 0x40
}
 8001b78:	e014      	b.n	8001ba4 <USART_PeriClockControl+0x118>
		else if (pUSARTx == UART5)
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	4a11      	ldr	r2, [pc, #68]	; (8001bc4 <USART_PeriClockControl+0x138>)
 8001b7e:	4293      	cmp	r3, r2
 8001b80:	d106      	bne.n	8001b90 <USART_PeriClockControl+0x104>
			UART5_PCLK_DI();
 8001b82:	4b0c      	ldr	r3, [pc, #48]	; (8001bb4 <USART_PeriClockControl+0x128>)
 8001b84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b86:	4a0b      	ldr	r2, [pc, #44]	; (8001bb4 <USART_PeriClockControl+0x128>)
 8001b88:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8001b8c:	6413      	str	r3, [r2, #64]	; 0x40
}
 8001b8e:	e009      	b.n	8001ba4 <USART_PeriClockControl+0x118>
		else if (pUSARTx == USART6)
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	4a0d      	ldr	r2, [pc, #52]	; (8001bc8 <USART_PeriClockControl+0x13c>)
 8001b94:	4293      	cmp	r3, r2
 8001b96:	d105      	bne.n	8001ba4 <USART_PeriClockControl+0x118>
			USART6_PCLK_DI();
 8001b98:	4b06      	ldr	r3, [pc, #24]	; (8001bb4 <USART_PeriClockControl+0x128>)
 8001b9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b9c:	4a05      	ldr	r2, [pc, #20]	; (8001bb4 <USART_PeriClockControl+0x128>)
 8001b9e:	f023 0320 	bic.w	r3, r3, #32
 8001ba2:	6453      	str	r3, [r2, #68]	; 0x44
}
 8001ba4:	bf00      	nop
 8001ba6:	370c      	adds	r7, #12
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	bc80      	pop	{r7}
 8001bac:	4770      	bx	lr
 8001bae:	bf00      	nop
 8001bb0:	40011000 	.word	0x40011000
 8001bb4:	40023800 	.word	0x40023800
 8001bb8:	40004400 	.word	0x40004400
 8001bbc:	40004800 	.word	0x40004800
 8001bc0:	40004c00 	.word	0x40004c00
 8001bc4:	40005000 	.word	0x40005000
 8001bc8:	40011400 	.word	0x40011400

08001bcc <USART_PeripheralControl>:
 * Params: 		struct USART_RegDef_t *pUSARTx - USART/UART base address
 * 				uint8_t EnOrDi - Enable or disable communication (0 or 1)
 *
 */
void USART_PeripheralControl(USART_RegDef_t *pUSARTx, uint8_t EnOrDi)
{
 8001bcc:	b480      	push	{r7}
 8001bce:	b083      	sub	sp, #12
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
 8001bd4:	460b      	mov	r3, r1
 8001bd6:	70fb      	strb	r3, [r7, #3]
	if (EnOrDi == ENABLE)
 8001bd8:	78fb      	ldrb	r3, [r7, #3]
 8001bda:	2b01      	cmp	r3, #1
 8001bdc:	d106      	bne.n	8001bec <USART_PeripheralControl+0x20>
	{
		pUSARTx->CR1 |= (1 << 13);
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	68db      	ldr	r3, [r3, #12]
 8001be2:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	60da      	str	r2, [r3, #12]
	}
	else
	{
		pUSARTx->CR1 |= ~(1 << 13);
	}
}
 8001bea:	e005      	b.n	8001bf8 <USART_PeripheralControl+0x2c>
		pUSARTx->CR1 |= ~(1 << 13);
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	68db      	ldr	r3, [r3, #12]
 8001bf0:	f463 5200 	orn	r2, r3, #8192	; 0x2000
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	60da      	str	r2, [r3, #12]
}
 8001bf8:	bf00      	nop
 8001bfa:	370c      	adds	r7, #12
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	bc80      	pop	{r7}
 8001c00:	4770      	bx	lr

08001c02 <USART_GetFlagStatus>:
 * Params: 		struct USART_RegDef_t *pUSARTx - USART base address
 * 				uint8_t USART_FLAG - flag being checked
 *
 */
uint8_t USART_GetFlagStatus(USART_RegDef_t *pUSARTx, uint8_t USART_FLAG)
{
 8001c02:	b480      	push	{r7}
 8001c04:	b083      	sub	sp, #12
 8001c06:	af00      	add	r7, sp, #0
 8001c08:	6078      	str	r0, [r7, #4]
 8001c0a:	460b      	mov	r3, r1
 8001c0c:	70fb      	strb	r3, [r7, #3]
	return (pUSARTx->SR & USART_FLAG);
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	b2da      	uxtb	r2, r3
 8001c14:	78fb      	ldrb	r3, [r7, #3]
 8001c16:	4013      	ands	r3, r2
 8001c18:	b2db      	uxtb	r3, r3
}
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	370c      	adds	r7, #12
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	bc80      	pop	{r7}
 8001c22:	4770      	bx	lr

08001c24 <USART_ClearFlag>:
 * Params: 		struct USART_RegDef_t *pUSARTx - USART base address
 * 				uint8_t USART_FLAG - flag being cleared
 *
 */
void USART_ClearFlag(USART_RegDef_t *pUSARTx, uint8_t USART_FLAG)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b084      	sub	sp, #16
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
 8001c2c:	460b      	mov	r3, r1
 8001c2e:	70fb      	strb	r3, [r7, #3]
	int dummyRead, dummyWrite = 0xFF;
 8001c30:	23ff      	movs	r3, #255	; 0xff
 8001c32:	60fb      	str	r3, [r7, #12]

	if (USART_FLAG == USART_FLAG_PE)
 8001c34:	78fb      	ldrb	r3, [r7, #3]
 8001c36:	2b01      	cmp	r3, #1
 8001c38:	d111      	bne.n	8001c5e <USART_ClearFlag+0x3a>
	{
		// Clear PE by waiting for RXNE, reading from SR, writing to DR
		while (!USART_GetFlagStatus(pUSARTx, USART_FLAG_RXNE));
 8001c3a:	bf00      	nop
 8001c3c:	2120      	movs	r1, #32
 8001c3e:	6878      	ldr	r0, [r7, #4]
 8001c40:	f7ff ffdf 	bl	8001c02 <USART_GetFlagStatus>
 8001c44:	4603      	mov	r3, r0
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d0f8      	beq.n	8001c3c <USART_ClearFlag+0x18>
		dummyRead = pUSARTx->SR;
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	60bb      	str	r3, [r7, #8]
		pUSARTx->DR |= dummyWrite;
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	685a      	ldr	r2, [r3, #4]
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	431a      	orrs	r2, r3
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	605a      	str	r2, [r3, #4]
		// Clear CTS by writing to 0
		pUSARTx->SR &= ~(1 << 9);
	}

	(void)dummyRead;
}
 8001c5c:	e044      	b.n	8001ce8 <USART_ClearFlag+0xc4>
	else if (USART_FLAG == USART_FLAG_FE)
 8001c5e:	78fb      	ldrb	r3, [r7, #3]
 8001c60:	2b02      	cmp	r3, #2
 8001c62:	d106      	bne.n	8001c72 <USART_ClearFlag+0x4e>
		dummyRead = pUSARTx->SR;
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	60bb      	str	r3, [r7, #8]
		dummyRead = pUSARTx->DR;
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	685b      	ldr	r3, [r3, #4]
 8001c6e:	60bb      	str	r3, [r7, #8]
}
 8001c70:	e03a      	b.n	8001ce8 <USART_ClearFlag+0xc4>
	else if (USART_FLAG == USART_FLAG_NF)
 8001c72:	78fb      	ldrb	r3, [r7, #3]
 8001c74:	2b04      	cmp	r3, #4
 8001c76:	d106      	bne.n	8001c86 <USART_ClearFlag+0x62>
		dummyRead = pUSARTx->SR;
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	60bb      	str	r3, [r7, #8]
		dummyRead = pUSARTx->DR;
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	685b      	ldr	r3, [r3, #4]
 8001c82:	60bb      	str	r3, [r7, #8]
}
 8001c84:	e030      	b.n	8001ce8 <USART_ClearFlag+0xc4>
	else if (USART_FLAG == USART_FLAG_ORE)
 8001c86:	78fb      	ldrb	r3, [r7, #3]
 8001c88:	2b08      	cmp	r3, #8
 8001c8a:	d106      	bne.n	8001c9a <USART_ClearFlag+0x76>
		dummyRead = pUSARTx->SR;
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	60bb      	str	r3, [r7, #8]
		dummyRead = pUSARTx->DR;
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	685b      	ldr	r3, [r3, #4]
 8001c96:	60bb      	str	r3, [r7, #8]
}
 8001c98:	e026      	b.n	8001ce8 <USART_ClearFlag+0xc4>
	else if (USART_FLAG == USART_FLAG_IDLE)
 8001c9a:	78fb      	ldrb	r3, [r7, #3]
 8001c9c:	2b10      	cmp	r3, #16
 8001c9e:	d106      	bne.n	8001cae <USART_ClearFlag+0x8a>
		dummyRead = pUSARTx->SR;
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	60bb      	str	r3, [r7, #8]
		dummyRead = pUSARTx->DR;
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	685b      	ldr	r3, [r3, #4]
 8001caa:	60bb      	str	r3, [r7, #8]
}
 8001cac:	e01c      	b.n	8001ce8 <USART_ClearFlag+0xc4>
	else if (USART_FLAG == USART_FLAG_RXNE)
 8001cae:	78fb      	ldrb	r3, [r7, #3]
 8001cb0:	2b20      	cmp	r3, #32
 8001cb2:	d103      	bne.n	8001cbc <USART_ClearFlag+0x98>
		dummyRead = pUSARTx->DR;
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	685b      	ldr	r3, [r3, #4]
 8001cb8:	60bb      	str	r3, [r7, #8]
}
 8001cba:	e015      	b.n	8001ce8 <USART_ClearFlag+0xc4>
	else if (USART_FLAG == USART_FLAG_TC)
 8001cbc:	78fb      	ldrb	r3, [r7, #3]
 8001cbe:	2b40      	cmp	r3, #64	; 0x40
 8001cc0:	d109      	bne.n	8001cd6 <USART_ClearFlag+0xb2>
		dummyRead = pUSARTx->SR;
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	60bb      	str	r3, [r7, #8]
		pUSARTx->DR |= dummyWrite;
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	685a      	ldr	r2, [r3, #4]
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	431a      	orrs	r2, r3
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	605a      	str	r2, [r3, #4]
}
 8001cd4:	e008      	b.n	8001ce8 <USART_ClearFlag+0xc4>
	else if (USART_FLAG == USART_FLAG_TXE)
 8001cd6:	78fb      	ldrb	r3, [r7, #3]
 8001cd8:	2b80      	cmp	r3, #128	; 0x80
 8001cda:	d105      	bne.n	8001ce8 <USART_ClearFlag+0xc4>
		pUSARTx->DR |= dummyWrite;
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	685a      	ldr	r2, [r3, #4]
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	431a      	orrs	r2, r3
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	605a      	str	r2, [r3, #4]
}
 8001ce8:	bf00      	nop
 8001cea:	3710      	adds	r7, #16
 8001cec:	46bd      	mov	sp, r7
 8001cee:	bd80      	pop	{r7, pc}

08001cf0 <USART_SetBaudRate>:
 * Params: 		struct USART_RegDef_t *pUSARTx - USART base address
 * 				uint16_t USART_BaudRate - Baud rate to be set (bps)
 *
 */
void USART_SetBaudRate(USART_RegDef_t *pUSARTx, uint32_t USART_BaudRate)
{
 8001cf0:	b590      	push	{r4, r7, lr}
 8001cf2:	b087      	sub	sp, #28
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
 8001cf8:	6039      	str	r1, [r7, #0]
	uint32_t ApbClk;

	// 1. Get the peripheral clock to USART/UART
	if (pUSARTx == USART1 || pUSARTx == USART6)
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	4a49      	ldr	r2, [pc, #292]	; (8001e24 <USART_SetBaudRate+0x134>)
 8001cfe:	4293      	cmp	r3, r2
 8001d00:	d003      	beq.n	8001d0a <USART_SetBaudRate+0x1a>
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	4a48      	ldr	r2, [pc, #288]	; (8001e28 <USART_SetBaudRate+0x138>)
 8001d06:	4293      	cmp	r3, r2
 8001d08:	d103      	bne.n	8001d12 <USART_SetBaudRate+0x22>
	{
		ApbClk = RCC_GetAPB2CLK();
 8001d0a:	f7ff fe67 	bl	80019dc <RCC_GetAPB2CLK>
 8001d0e:	6178      	str	r0, [r7, #20]
 8001d10:	e002      	b.n	8001d18 <USART_SetBaudRate+0x28>
	}
	else
	{
		ApbClk = RCC_GetAPB1CLK();
 8001d12:	f7ff fe0b 	bl	800192c <RCC_GetAPB1CLK>
 8001d16:	6178      	str	r0, [r7, #20]
	}

	// 2. Calculate USARTDIV
	uint8_t over8 = (pUSARTx->CR1 & (1 << 15)) ? 1 : 0;
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	68db      	ldr	r3, [r3, #12]
 8001d1c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	bf14      	ite	ne
 8001d24:	2301      	movne	r3, #1
 8001d26:	2300      	moveq	r3, #0
 8001d28:	b2db      	uxtb	r3, r3
 8001d2a:	73fb      	strb	r3, [r7, #15]
	float usartDiv = (ApbClk  * 100) / ((8 * (2 - over8)) * USART_BaudRate);   // Multiply hundred to get 2 decimal places
 8001d2c:	697b      	ldr	r3, [r7, #20]
 8001d2e:	2264      	movs	r2, #100	; 0x64
 8001d30:	fb02 f203 	mul.w	r2, r2, r3
 8001d34:	7bfb      	ldrb	r3, [r7, #15]
 8001d36:	f1c3 0302 	rsb	r3, r3, #2
 8001d3a:	4619      	mov	r1, r3
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	fb03 f301 	mul.w	r3, r3, r1
 8001d42:	00db      	lsls	r3, r3, #3
 8001d44:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d48:	4618      	mov	r0, r3
 8001d4a:	f7fe fb6f 	bl	800042c <__aeabi_ui2f>
 8001d4e:	4603      	mov	r3, r0
 8001d50:	60bb      	str	r3, [r7, #8]

	// 3. Calculate mantissa and fraction (See USART 25.4.4 in datasheet for formulas)
	uint16_t mantissa = usartDiv / 100;
 8001d52:	4936      	ldr	r1, [pc, #216]	; (8001e2c <USART_SetBaudRate+0x13c>)
 8001d54:	68b8      	ldr	r0, [r7, #8]
 8001d56:	f7fe fc75 	bl	8000644 <__aeabi_fdiv>
 8001d5a:	4603      	mov	r3, r0
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	f7fe fd0d 	bl	800077c <__aeabi_f2uiz>
 8001d62:	4603      	mov	r3, r0
 8001d64:	827b      	strh	r3, [r7, #18]
	uint16_t fraction = (usartDiv - mantissa * 100) * (8 * (2 - over8));
 8001d66:	8a7b      	ldrh	r3, [r7, #18]
 8001d68:	2264      	movs	r2, #100	; 0x64
 8001d6a:	fb02 f303 	mul.w	r3, r2, r3
 8001d6e:	4618      	mov	r0, r3
 8001d70:	f7fe fb60 	bl	8000434 <__aeabi_i2f>
 8001d74:	4603      	mov	r3, r0
 8001d76:	4619      	mov	r1, r3
 8001d78:	68b8      	ldr	r0, [r7, #8]
 8001d7a:	f7fe faa5 	bl	80002c8 <__aeabi_fsub>
 8001d7e:	4603      	mov	r3, r0
 8001d80:	461c      	mov	r4, r3
 8001d82:	7bfb      	ldrb	r3, [r7, #15]
 8001d84:	f1c3 0302 	rsb	r3, r3, #2
 8001d88:	00db      	lsls	r3, r3, #3
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	f7fe fb52 	bl	8000434 <__aeabi_i2f>
 8001d90:	4603      	mov	r3, r0
 8001d92:	4619      	mov	r1, r3
 8001d94:	4620      	mov	r0, r4
 8001d96:	f7fe fba1 	bl	80004dc <__aeabi_fmul>
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	f7fe fced 	bl	800077c <__aeabi_f2uiz>
 8001da2:	4603      	mov	r3, r0
 8001da4:	823b      	strh	r3, [r7, #16]

	// Round fraction
	fraction = (fraction + 50) / 100;
 8001da6:	8a3b      	ldrh	r3, [r7, #16]
 8001da8:	3332      	adds	r3, #50	; 0x32
 8001daa:	4a21      	ldr	r2, [pc, #132]	; (8001e30 <USART_SetBaudRate+0x140>)
 8001dac:	fb82 1203 	smull	r1, r2, r2, r3
 8001db0:	1152      	asrs	r2, r2, #5
 8001db2:	17db      	asrs	r3, r3, #31
 8001db4:	1ad3      	subs	r3, r2, r3
 8001db6:	823b      	strh	r3, [r7, #16]

	// 4. Carry over
	if (over8)
 8001db8:	7bfb      	ldrb	r3, [r7, #15]
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d017      	beq.n	8001dee <USART_SetBaudRate+0xfe>
	{
		// Fraction register is 3 bits
		if (fraction > 7)
 8001dbe:	8a3b      	ldrh	r3, [r7, #16]
 8001dc0:	2b07      	cmp	r3, #7
 8001dc2:	d904      	bls.n	8001dce <USART_SetBaudRate+0xde>
		{
			mantissa++;
 8001dc4:	8a7b      	ldrh	r3, [r7, #18]
 8001dc6:	3301      	adds	r3, #1
 8001dc8:	827b      	strh	r3, [r7, #18]
			fraction = 0;
 8001dca:	2300      	movs	r3, #0
 8001dcc:	823b      	strh	r3, [r7, #16]
		}

		pUSARTx->BRR |= (mantissa << 4);
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	689b      	ldr	r3, [r3, #8]
 8001dd2:	8a7a      	ldrh	r2, [r7, #18]
 8001dd4:	0112      	lsls	r2, r2, #4
 8001dd6:	431a      	orrs	r2, r3
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	609a      	str	r2, [r3, #8]
		pUSARTx->BRR |= ((fraction & 0x07) << 0);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	689a      	ldr	r2, [r3, #8]
 8001de0:	8a3b      	ldrh	r3, [r7, #16]
 8001de2:	f003 0307 	and.w	r3, r3, #7
 8001de6:	431a      	orrs	r2, r3
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	609a      	str	r2, [r3, #8]
		}

		pUSARTx->BRR |= (mantissa << 4);
		pUSARTx->BRR |= ((fraction & 0x0F) << 0);
	}
}
 8001dec:	e016      	b.n	8001e1c <USART_SetBaudRate+0x12c>
		if (fraction > 15)
 8001dee:	8a3b      	ldrh	r3, [r7, #16]
 8001df0:	2b0f      	cmp	r3, #15
 8001df2:	d904      	bls.n	8001dfe <USART_SetBaudRate+0x10e>
			mantissa++;
 8001df4:	8a7b      	ldrh	r3, [r7, #18]
 8001df6:	3301      	adds	r3, #1
 8001df8:	827b      	strh	r3, [r7, #18]
			fraction = 0;
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	823b      	strh	r3, [r7, #16]
		pUSARTx->BRR |= (mantissa << 4);
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	689b      	ldr	r3, [r3, #8]
 8001e02:	8a7a      	ldrh	r2, [r7, #18]
 8001e04:	0112      	lsls	r2, r2, #4
 8001e06:	431a      	orrs	r2, r3
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	609a      	str	r2, [r3, #8]
		pUSARTx->BRR |= ((fraction & 0x0F) << 0);
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	689a      	ldr	r2, [r3, #8]
 8001e10:	8a3b      	ldrh	r3, [r7, #16]
 8001e12:	f003 030f 	and.w	r3, r3, #15
 8001e16:	431a      	orrs	r2, r3
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	609a      	str	r2, [r3, #8]
}
 8001e1c:	bf00      	nop
 8001e1e:	371c      	adds	r7, #28
 8001e20:	46bd      	mov	sp, r7
 8001e22:	bd90      	pop	{r4, r7, pc}
 8001e24:	40011000 	.word	0x40011000
 8001e28:	40011400 	.word	0x40011400
 8001e2c:	42c80000 	.word	0x42c80000
 8001e30:	51eb851f 	.word	0x51eb851f

08001e34 <USART_Init>:
 *
 * Params: 		struct USART_Handle_t *pUSARTxHandle - USART peripheral handle
 *
 */
void USART_Init(USART_Handle_t *pUSARTxHandle)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b082      	sub	sp, #8
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
	// 1. Give clock signal to USART/UART bus
	USART_PeriClockControl(pUSARTxHandle->pUSARTx, ENABLE);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	2101      	movs	r1, #1
 8001e42:	4618      	mov	r0, r3
 8001e44:	f7ff fe22 	bl	8001a8c <USART_PeriClockControl>

	// 2. Enable USART/UART peripheral
	USART_PeripheralControl(pUSARTxHandle->pUSARTx, ENABLE);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	2101      	movs	r1, #1
 8001e4e:	4618      	mov	r0, r3
 8001e50:	f7ff febc 	bl	8001bcc <USART_PeripheralControl>

	// 3. Set the data length
	if (pUSARTxHandle->USART_Config.USART_WordLen == USART_9BIT_DATA)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	7b5b      	ldrb	r3, [r3, #13]
 8001e58:	2b01      	cmp	r3, #1
 8001e5a:	d107      	bne.n	8001e6c <USART_Init+0x38>
	{
		pUSARTxHandle->pUSARTx->CR1 |= (1 << 12);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	68da      	ldr	r2, [r3, #12]
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001e6a:	60da      	str	r2, [r3, #12]
	}

	// 4. Parity setup
	if (pUSARTxHandle->USART_Config.USART_ParitySet != USART_PARITY_DISABLE)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	7b9b      	ldrb	r3, [r3, #14]
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d020      	beq.n	8001eb6 <USART_Init+0x82>
	{
		pUSARTxHandle->pUSARTx->CR1 |= (1 << 10);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	68da      	ldr	r2, [r3, #12]
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001e82:	60da      	str	r2, [r3, #12]

		if (pUSARTxHandle->USART_Config.USART_ParitySet == USART_EVEN_PARITY)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	7b9b      	ldrb	r3, [r3, #14]
 8001e88:	2b01      	cmp	r3, #1
 8001e8a:	d108      	bne.n	8001e9e <USART_Init+0x6a>
		{
			pUSARTxHandle->pUSARTx->CR1 &= ~(1 << 9);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	68da      	ldr	r2, [r3, #12]
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001e9a:	60da      	str	r2, [r3, #12]
 8001e9c:	e00b      	b.n	8001eb6 <USART_Init+0x82>
		}
		else if (pUSARTxHandle->USART_Config.USART_ParitySet == USART_ODD_PARITY)
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	7b9b      	ldrb	r3, [r3, #14]
 8001ea2:	2b02      	cmp	r3, #2
 8001ea4:	d107      	bne.n	8001eb6 <USART_Init+0x82>
		{
			pUSARTxHandle->pUSARTx->CR1 |= (1 << 9);
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	68da      	ldr	r2, [r3, #12]
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001eb4:	60da      	str	r2, [r3, #12]
		}
	}

	// 5. Set number of stop bits
	pUSARTxHandle->pUSARTx->CR2 &= ~(0x3 << 12);
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	691a      	ldr	r2, [r3, #16]
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8001ec4:	611a      	str	r2, [r3, #16]

	if (pUSARTxHandle->USART_Config.USART_StopBits == USART_HALF_STOP)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	7b1b      	ldrb	r3, [r3, #12]
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d108      	bne.n	8001ee0 <USART_Init+0xac>
	{
		pUSARTxHandle->pUSARTx->CR2 |= (1 << 12);
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	691a      	ldr	r2, [r3, #16]
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001edc:	611a      	str	r2, [r3, #16]
 8001ede:	e018      	b.n	8001f12 <USART_Init+0xde>
	}
	else if (pUSARTxHandle->USART_Config.USART_StopBits == USART_2_STOP)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	7b1b      	ldrb	r3, [r3, #12]
 8001ee4:	2b03      	cmp	r3, #3
 8001ee6:	d108      	bne.n	8001efa <USART_Init+0xc6>
	{
		pUSARTxHandle->pUSARTx->CR2 |= (0x2 << 12);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	691a      	ldr	r2, [r3, #16]
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001ef6:	611a      	str	r2, [r3, #16]
 8001ef8:	e00b      	b.n	8001f12 <USART_Init+0xde>
	}
	else if (pUSARTxHandle->USART_Config.USART_StopBits == USART_1ANDHALF_STOP)
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	7b1b      	ldrb	r3, [r3, #12]
 8001efe:	2b02      	cmp	r3, #2
 8001f00:	d107      	bne.n	8001f12 <USART_Init+0xde>
	{
		pUSARTxHandle->pUSARTx->CR2 |= (0x3 << 12);
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	691a      	ldr	r2, [r3, #16]
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f442 5240 	orr.w	r2, r2, #12288	; 0x3000
 8001f10:	611a      	str	r2, [r3, #16]
	}

	// 6. Set over sampling mode
	if (pUSARTxHandle->USART_Config.USART_Oversampling == USART_OVERSMPL_8)
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	7c1b      	ldrb	r3, [r3, #16]
 8001f16:	2b01      	cmp	r3, #1
 8001f18:	d108      	bne.n	8001f2c <USART_Init+0xf8>
	{
		pUSARTxHandle->pUSARTx->CR1 |= (1 << 15);
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	68da      	ldr	r2, [r3, #12]
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001f28:	60da      	str	r2, [r3, #12]
 8001f2a:	e007      	b.n	8001f3c <USART_Init+0x108>
	}
	else
	{
		pUSARTxHandle->pUSARTx->CR1 &= ~(1 << 15);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	68da      	ldr	r2, [r3, #12]
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001f3a:	60da      	str	r2, [r3, #12]
	}

	// 7. Set baud rate
	USART_SetBaudRate(pUSARTxHandle->pUSARTx, pUSARTxHandle->USART_Config.USART_BaudRate);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681a      	ldr	r2, [r3, #0]
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	689b      	ldr	r3, [r3, #8]
 8001f44:	4619      	mov	r1, r3
 8001f46:	4610      	mov	r0, r2
 8001f48:	f7ff fed2 	bl	8001cf0 <USART_SetBaudRate>

	// 8. Set Tx/Rx mode
	if (pUSARTxHandle->USART_Config.USART_Mode == USART_RX_ONLY)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	791b      	ldrb	r3, [r3, #4]
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d108      	bne.n	8001f66 <USART_Init+0x132>
	{
		pUSARTxHandle->pUSARTx->CR1 |= (1 << 2);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	68da      	ldr	r2, [r3, #12]
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f042 0204 	orr.w	r2, r2, #4
 8001f62:	60da      	str	r2, [r3, #12]
 8001f64:	e018      	b.n	8001f98 <USART_Init+0x164>
	}
	else if (pUSARTxHandle->USART_Config.USART_Mode == USART_TX_ONLY)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	791b      	ldrb	r3, [r3, #4]
 8001f6a:	2b01      	cmp	r3, #1
 8001f6c:	d108      	bne.n	8001f80 <USART_Init+0x14c>
	{
		pUSARTxHandle->pUSARTx->CR1 |= (1 << 3);
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	68da      	ldr	r2, [r3, #12]
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f042 0208 	orr.w	r2, r2, #8
 8001f7c:	60da      	str	r2, [r3, #12]
 8001f7e:	e00b      	b.n	8001f98 <USART_Init+0x164>
	}
	else if (pUSARTxHandle->USART_Config.USART_Mode == USART_RX_TX)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	791b      	ldrb	r3, [r3, #4]
 8001f84:	2b02      	cmp	r3, #2
 8001f86:	d107      	bne.n	8001f98 <USART_Init+0x164>
	{
		pUSARTxHandle->pUSARTx->CR1 |= (1 << 3) | (1 << 2);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	68da      	ldr	r2, [r3, #12]
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f042 020c 	orr.w	r2, r2, #12
 8001f96:	60da      	str	r2, [r3, #12]
	}

	// 9. Hardware flow control setup
	pUSARTxHandle->pUSARTx->CR2 &= ~(0x3 << 8);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	691a      	ldr	r2, [r3, #16]
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8001fa6:	611a      	str	r2, [r3, #16]

	if (pUSARTxHandle->USART_Config.USART_HWFlowCtrl == USART_RTS_ON)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	7bdb      	ldrb	r3, [r3, #15]
 8001fac:	2b01      	cmp	r3, #1
 8001fae:	d108      	bne.n	8001fc2 <USART_Init+0x18e>
	{
		pUSARTxHandle->pUSARTx->CR3 |= (1 << 8);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	695a      	ldr	r2, [r3, #20]
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001fbe:	615a      	str	r2, [r3, #20]
	}
	else if (pUSARTxHandle->USART_Config.USART_HWFlowCtrl == USART_RTS_CTS_ON)
	{
		pUSARTxHandle->pUSARTx->CR3 |= (0x3 << 8);
	}
}
 8001fc0:	e018      	b.n	8001ff4 <USART_Init+0x1c0>
	else if (pUSARTxHandle->USART_Config.USART_HWFlowCtrl == USART_CTS_ON)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	7bdb      	ldrb	r3, [r3, #15]
 8001fc6:	2b02      	cmp	r3, #2
 8001fc8:	d108      	bne.n	8001fdc <USART_Init+0x1a8>
		pUSARTxHandle->pUSARTx->CR3 |= (1 << 9);
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	695a      	ldr	r2, [r3, #20]
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001fd8:	615a      	str	r2, [r3, #20]
}
 8001fda:	e00b      	b.n	8001ff4 <USART_Init+0x1c0>
	else if (pUSARTxHandle->USART_Config.USART_HWFlowCtrl == USART_RTS_CTS_ON)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	7bdb      	ldrb	r3, [r3, #15]
 8001fe0:	2b03      	cmp	r3, #3
 8001fe2:	d107      	bne.n	8001ff4 <USART_Init+0x1c0>
		pUSARTxHandle->pUSARTx->CR3 |= (0x3 << 8);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	695a      	ldr	r2, [r3, #20]
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8001ff2:	615a      	str	r2, [r3, #20]
}
 8001ff4:	bf00      	nop
 8001ff6:	3708      	adds	r7, #8
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	bd80      	pop	{r7, pc}

08001ffc <USART_Write>:
 * 				uint8_t* pTxBuffer - pointer to location of data to send
 * 				uint32_t len - number of 8-bit data packets to be sent
 *
 */
void USART_Write(USART_Handle_t *pUSARTxHandle, uint8_t *pTxBuffer, uint8_t len)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b084      	sub	sp, #16
 8002000:	af00      	add	r7, sp, #0
 8002002:	60f8      	str	r0, [r7, #12]
 8002004:	60b9      	str	r1, [r7, #8]
 8002006:	4613      	mov	r3, r2
 8002008:	71fb      	strb	r3, [r7, #7]
	while (len > 0)
 800200a:	e030      	b.n	800206e <USART_Write+0x72>
	{
		// 1. Send start with TE
		pUSARTxHandle->pUSARTx->CR1 |= (1 << 3);
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	68da      	ldr	r2, [r3, #12]
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f042 0208 	orr.w	r2, r2, #8
 800201a:	60da      	str	r2, [r3, #12]

		// 2. Wait for TXE flag
		while(!USART_GetFlagStatus(pUSARTxHandle->pUSARTx, USART_FLAG_TXE));
 800201c:	bf00      	nop
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	2180      	movs	r1, #128	; 0x80
 8002024:	4618      	mov	r0, r3
 8002026:	f7ff fdec 	bl	8001c02 <USART_GetFlagStatus>
 800202a:	4603      	mov	r3, r0
 800202c:	2b00      	cmp	r3, #0
 800202e:	d0f6      	beq.n	800201e <USART_Write+0x22>

		// 3. Write data (how many bits depends on word length and parity)
		if (pUSARTxHandle->USART_Config.USART_WordLen == USART_9BIT_DATA)
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	7b5b      	ldrb	r3, [r3, #13]
 8002034:	2b01      	cmp	r3, #1
 8002036:	d10f      	bne.n	8002058 <USART_Write+0x5c>
		{
			// Send 9 bits of data
			pUSARTxHandle->pUSARTx->DR = (uint16_t)(*pTxBuffer) & (0x01FF);
 8002038:	68bb      	ldr	r3, [r7, #8]
 800203a:	781a      	ldrb	r2, [r3, #0]
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	605a      	str	r2, [r3, #4]

			// If parity disabled, 9 bits of useful data sent - increment data buffer accordingly
			if (pUSARTxHandle->USART_Config.USART_ParitySet == USART_PARITY_DISABLE)
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	7b9b      	ldrb	r3, [r3, #14]
 8002046:	2b00      	cmp	r3, #0
 8002048:	d10b      	bne.n	8002062 <USART_Write+0x66>
			{
				pTxBuffer++;
 800204a:	68bb      	ldr	r3, [r7, #8]
 800204c:	3301      	adds	r3, #1
 800204e:	60bb      	str	r3, [r7, #8]
				len--;
 8002050:	79fb      	ldrb	r3, [r7, #7]
 8002052:	3b01      	subs	r3, #1
 8002054:	71fb      	strb	r3, [r7, #7]
 8002056:	e004      	b.n	8002062 <USART_Write+0x66>
			}
		}
		else
		{
			pUSARTxHandle->pUSARTx->DR = *pTxBuffer;
 8002058:	68bb      	ldr	r3, [r7, #8]
 800205a:	781a      	ldrb	r2, [r3, #0]
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	605a      	str	r2, [r3, #4]
		}

		pTxBuffer++;
 8002062:	68bb      	ldr	r3, [r7, #8]
 8002064:	3301      	adds	r3, #1
 8002066:	60bb      	str	r3, [r7, #8]
		len--;
 8002068:	79fb      	ldrb	r3, [r7, #7]
 800206a:	3b01      	subs	r3, #1
 800206c:	71fb      	strb	r3, [r7, #7]
	while (len > 0)
 800206e:	79fb      	ldrb	r3, [r7, #7]
 8002070:	2b00      	cmp	r3, #0
 8002072:	d1cb      	bne.n	800200c <USART_Write+0x10>
	}

	// 4. Wait for TC flag to indicate transmission complete
	while(!USART_GetFlagStatus(pUSARTxHandle->pUSARTx, USART_FLAG_TC));
 8002074:	bf00      	nop
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	2140      	movs	r1, #64	; 0x40
 800207c:	4618      	mov	r0, r3
 800207e:	f7ff fdc0 	bl	8001c02 <USART_GetFlagStatus>
 8002082:	4603      	mov	r3, r0
 8002084:	2b00      	cmp	r3, #0
 8002086:	d0f6      	beq.n	8002076 <USART_Write+0x7a>

	// 5. Clear the TC bit
	USART_ClearFlag(pUSARTxHandle->pUSARTx, USART_FLAG_TC);
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	2140      	movs	r1, #64	; 0x40
 800208e:	4618      	mov	r0, r3
 8002090:	f7ff fdc8 	bl	8001c24 <USART_ClearFlag>

	// 6. End transmission by clearing TE
	pUSARTxHandle->pUSARTx->CR1 &= ~(1 << 3);
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	68da      	ldr	r2, [r3, #12]
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f022 0208 	bic.w	r2, r2, #8
 80020a2:	60da      	str	r2, [r3, #12]
}
 80020a4:	bf00      	nop
 80020a6:	3710      	adds	r7, #16
 80020a8:	46bd      	mov	sp, r7
 80020aa:	bd80      	pop	{r7, pc}

080020ac <GPIO_AI_Init>:
/* Variable for DMA to transfer to */
uint16_t data = 0;


/* Initialize the GPIO Pin for ADC input */
void GPIO_AI_Init() {
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b084      	sub	sp, #16
 80020b0:	af00      	add	r7, sp, #0
	// Initialization of LED driving GPIO
	GPIO_Handle_t GpioAI;

	GpioAI.pGPIOx = GPIOA;
 80020b2:	4b0a      	ldr	r3, [pc, #40]	; (80020dc <GPIO_AI_Init+0x30>)
 80020b4:	607b      	str	r3, [r7, #4]

	GpioAI.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NUM_0;
 80020b6:	2300      	movs	r3, #0
 80020b8:	723b      	strb	r3, [r7, #8]
	GpioAI.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ANALOG;
 80020ba:	2303      	movs	r3, #3
 80020bc:	727b      	strb	r3, [r7, #9]
	GpioAI.GPIO_PinConfig.GPIO_OpType = GPIO_OTYPE_PUPL;
 80020be:	2300      	movs	r3, #0
 80020c0:	733b      	strb	r3, [r7, #12]
	GpioAI.GPIO_PinConfig.GPIO_PinSpeed = GPIO_HIGH_SPEED;
 80020c2:	2303      	movs	r3, #3
 80020c4:	72bb      	strb	r3, [r7, #10]
	GpioAI.GPIO_PinConfig.GPIO_PuPdCtrl = GPIO_PUPD_NONE;
 80020c6:	2300      	movs	r3, #0
 80020c8:	72fb      	strb	r3, [r7, #11]

	GPIO_Init(&GpioAI);
 80020ca:	1d3b      	adds	r3, r7, #4
 80020cc:	4618      	mov	r0, r3
 80020ce:	f7ff facf 	bl	8001670 <GPIO_Init>
}
 80020d2:	bf00      	nop
 80020d4:	3710      	adds	r7, #16
 80020d6:	46bd      	mov	sp, r7
 80020d8:	bd80      	pop	{r7, pc}
 80020da:	bf00      	nop
 80020dc:	40020000 	.word	0x40020000

080020e0 <GPIO_USART_Config>:

/*
 * Set GPIO pins PA2 and PA3 as USART2 functions
 */
void GPIO_USART_Config()
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b084      	sub	sp, #16
 80020e4:	af00      	add	r7, sp, #0
	GPIO_Handle_t Gpio_usartHandle;

	Gpio_usartHandle.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_AF;
 80020e6:	2302      	movs	r3, #2
 80020e8:	727b      	strb	r3, [r7, #9]
	Gpio_usartHandle.GPIO_PinConfig.GPIO_PuPdCtrl = GPIO_PUPD_PU;
 80020ea:	2301      	movs	r3, #1
 80020ec:	72fb      	strb	r3, [r7, #11]
	Gpio_usartHandle.GPIO_PinConfig.GPIO_OpType = GPIO_OTYPE_PUPL;
 80020ee:	2300      	movs	r3, #0
 80020f0:	733b      	strb	r3, [r7, #12]
	Gpio_usartHandle.GPIO_PinConfig.GPIO_PinSpeed = GPIO_HIGH_SPEED;
 80020f2:	2303      	movs	r3, #3
 80020f4:	72bb      	strb	r3, [r7, #10]
	Gpio_usartHandle.GPIO_PinConfig.GPIO_AfMode = GPIO_AF_7;
 80020f6:	2307      	movs	r3, #7
 80020f8:	737b      	strb	r3, [r7, #13]
	Gpio_usartHandle.pGPIOx = GPIOA;
 80020fa:	4b09      	ldr	r3, [pc, #36]	; (8002120 <GPIO_USART_Config+0x40>)
 80020fc:	607b      	str	r3, [r7, #4]

	// Set PA2 as USART2 Tx
	Gpio_usartHandle.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NUM_2;
 80020fe:	2302      	movs	r3, #2
 8002100:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&Gpio_usartHandle);
 8002102:	1d3b      	adds	r3, r7, #4
 8002104:	4618      	mov	r0, r3
 8002106:	f7ff fab3 	bl	8001670 <GPIO_Init>

	// Set PA3 as USART2 Rx
	Gpio_usartHandle.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NUM_3;
 800210a:	2303      	movs	r3, #3
 800210c:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&Gpio_usartHandle);
 800210e:	1d3b      	adds	r3, r7, #4
 8002110:	4618      	mov	r0, r3
 8002112:	f7ff faad 	bl	8001670 <GPIO_Init>
}
 8002116:	bf00      	nop
 8002118:	3710      	adds	r7, #16
 800211a:	46bd      	mov	sp, r7
 800211c:	bd80      	pop	{r7, pc}
 800211e:	bf00      	nop
 8002120:	40020000 	.word	0x40020000

08002124 <USART2_Config>:

/*
 * Configure USART2 in Tx mode only
 */
void USART2_Config()
{
 8002124:	b580      	push	{r7, lr}
 8002126:	af00      	add	r7, sp, #0
	Usart_Handle.USART_Config.USART_Mode = USART_TX_ONLY;
 8002128:	4b0e      	ldr	r3, [pc, #56]	; (8002164 <USART2_Config+0x40>)
 800212a:	2201      	movs	r2, #1
 800212c:	711a      	strb	r2, [r3, #4]
	Usart_Handle.USART_Config.USART_BaudRate = USART_BAUD_9600;
 800212e:	4b0d      	ldr	r3, [pc, #52]	; (8002164 <USART2_Config+0x40>)
 8002130:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002134:	609a      	str	r2, [r3, #8]
	Usart_Handle.USART_Config.USART_ParitySet = USART_PARITY_DISABLE;
 8002136:	4b0b      	ldr	r3, [pc, #44]	; (8002164 <USART2_Config+0x40>)
 8002138:	2200      	movs	r2, #0
 800213a:	739a      	strb	r2, [r3, #14]
	Usart_Handle.USART_Config.USART_StopBits = USART_1_STOP;
 800213c:	4b09      	ldr	r3, [pc, #36]	; (8002164 <USART2_Config+0x40>)
 800213e:	2201      	movs	r2, #1
 8002140:	731a      	strb	r2, [r3, #12]
	Usart_Handle.USART_Config.USART_WordLen = USART_8BIT_DATA;
 8002142:	4b08      	ldr	r3, [pc, #32]	; (8002164 <USART2_Config+0x40>)
 8002144:	2200      	movs	r2, #0
 8002146:	735a      	strb	r2, [r3, #13]
	Usart_Handle.USART_Config.USART_Oversampling = USART_OVERSMPL_8;
 8002148:	4b06      	ldr	r3, [pc, #24]	; (8002164 <USART2_Config+0x40>)
 800214a:	2201      	movs	r2, #1
 800214c:	741a      	strb	r2, [r3, #16]
	Usart_Handle.USART_Config.USART_HWFlowCtrl = USART_HWCTRL_NONE;
 800214e:	4b05      	ldr	r3, [pc, #20]	; (8002164 <USART2_Config+0x40>)
 8002150:	2200      	movs	r2, #0
 8002152:	73da      	strb	r2, [r3, #15]
	Usart_Handle.pUSARTx = USART2;
 8002154:	4b03      	ldr	r3, [pc, #12]	; (8002164 <USART2_Config+0x40>)
 8002156:	4a04      	ldr	r2, [pc, #16]	; (8002168 <USART2_Config+0x44>)
 8002158:	601a      	str	r2, [r3, #0]

	USART_Init(&Usart_Handle);
 800215a:	4802      	ldr	r0, [pc, #8]	; (8002164 <USART2_Config+0x40>)
 800215c:	f7ff fe6a 	bl	8001e34 <USART_Init>
}
 8002160:	bf00      	nop
 8002162:	bd80      	pop	{r7, pc}
 8002164:	200000d0 	.word	0x200000d0
 8002168:	40004400 	.word	0x40004400

0800216c <ADC1_In_Init>:


/* Initialize ADC1 for 12-bit readings */
void ADC1_In_Init() {
 800216c:	b580      	push	{r7, lr}
 800216e:	af00      	add	r7, sp, #0
	Adc_Input.pADCx = ADC1;
 8002170:	4b0b      	ldr	r3, [pc, #44]	; (80021a0 <ADC1_In_Init+0x34>)
 8002172:	4a0c      	ldr	r2, [pc, #48]	; (80021a4 <ADC1_In_Init+0x38>)
 8002174:	601a      	str	r2, [r3, #0]

	Adc_Input.ADC_Config.ADC_Res = ADC_RES_12BIT;
 8002176:	4b0a      	ldr	r3, [pc, #40]	; (80021a0 <ADC1_In_Init+0x34>)
 8002178:	2200      	movs	r2, #0
 800217a:	711a      	strb	r2, [r3, #4]
	Adc_Input.ADC_Config.ADC_PreSc = ADC_PCLK_DIV2;
 800217c:	4b08      	ldr	r3, [pc, #32]	; (80021a0 <ADC1_In_Init+0x34>)
 800217e:	2200      	movs	r2, #0
 8002180:	715a      	strb	r2, [r3, #5]
	Adc_Input.ADC_Config.ADC_Mode = ADC_CONT_READ;
 8002182:	4b07      	ldr	r3, [pc, #28]	; (80021a0 <ADC1_In_Init+0x34>)
 8002184:	2201      	movs	r2, #1
 8002186:	719a      	strb	r2, [r3, #6]
	Adc_Input.ADC_Config.ADC_DMA_Ctrl = ADC_DMA_EN;
 8002188:	4b05      	ldr	r3, [pc, #20]	; (80021a0 <ADC1_In_Init+0x34>)
 800218a:	2201      	movs	r2, #1
 800218c:	725a      	strb	r2, [r3, #9]
	Adc_Input.ADC_Config.ADC_DDS_Ctrl = ADC_DDS_EN;
 800218e:	4b04      	ldr	r3, [pc, #16]	; (80021a0 <ADC1_In_Init+0x34>)
 8002190:	2201      	movs	r2, #1
 8002192:	729a      	strb	r2, [r3, #10]

	ADC_Init(&Adc_Input);
 8002194:	4802      	ldr	r0, [pc, #8]	; (80021a0 <ADC1_In_Init+0x34>)
 8002196:	f7fe fb85 	bl	80008a4 <ADC_Init>
}
 800219a:	bf00      	nop
 800219c:	bd80      	pop	{r7, pc}
 800219e:	bf00      	nop
 80021a0:	200000bc 	.word	0x200000bc
 80021a4:	40012000 	.word	0x40012000

080021a8 <DMA2_Init>:

/* Initialize DMA2 stream 0 to channel 0 for ADC1 */
void DMA2_Init() {
 80021a8:	b580      	push	{r7, lr}
 80021aa:	af00      	add	r7, sp, #0
	Dma_adcHandle.pDMAx = DMA2;
 80021ac:	4b12      	ldr	r3, [pc, #72]	; (80021f8 <DMA2_Init+0x50>)
 80021ae:	4a13      	ldr	r2, [pc, #76]	; (80021fc <DMA2_Init+0x54>)
 80021b0:	601a      	str	r2, [r3, #0]
	Dma_adcHandle.DMA_Stream = DMA_STREAM_0;
 80021b2:	4b11      	ldr	r3, [pc, #68]	; (80021f8 <DMA2_Init+0x50>)
 80021b4:	2200      	movs	r2, #0
 80021b6:	741a      	strb	r2, [r3, #16]

	Dma_adcHandle.DMA_Config.DMA_Channel = DMA_CHANNEL_0;
 80021b8:	4b0f      	ldr	r3, [pc, #60]	; (80021f8 <DMA2_Init+0x50>)
 80021ba:	2200      	movs	r2, #0
 80021bc:	711a      	strb	r2, [r3, #4]
	Dma_adcHandle.DMA_Config.DMA_Priority = DMA_PRIOR_HIGH;
 80021be:	4b0e      	ldr	r3, [pc, #56]	; (80021f8 <DMA2_Init+0x50>)
 80021c0:	2202      	movs	r2, #2
 80021c2:	72da      	strb	r2, [r3, #11]
	Dma_adcHandle.DMA_Config.DMA_Dir = DMA_PERIPH_TO_MEM;
 80021c4:	4b0c      	ldr	r3, [pc, #48]	; (80021f8 <DMA2_Init+0x50>)
 80021c6:	2200      	movs	r2, #0
 80021c8:	715a      	strb	r2, [r3, #5]
	Dma_adcHandle.DMA_Config.DMA_PeriphInc = DMA_PERIPH_NO_INC;
 80021ca:	4b0b      	ldr	r3, [pc, #44]	; (80021f8 <DMA2_Init+0x50>)
 80021cc:	2200      	movs	r2, #0
 80021ce:	719a      	strb	r2, [r3, #6]
	Dma_adcHandle.DMA_Config.DMA_MemInc = DMA_MEM_NO_INC;
 80021d0:	4b09      	ldr	r3, [pc, #36]	; (80021f8 <DMA2_Init+0x50>)
 80021d2:	2200      	movs	r2, #0
 80021d4:	71da      	strb	r2, [r3, #7]
	Dma_adcHandle.DMA_Config.DMA_MemDataSize = DMA_DATASIZE_HALFWORD;
 80021d6:	4b08      	ldr	r3, [pc, #32]	; (80021f8 <DMA2_Init+0x50>)
 80021d8:	2201      	movs	r2, #1
 80021da:	725a      	strb	r2, [r3, #9]
	Dma_adcHandle.DMA_Config.DMA_PeriphDataSize = DMA_DATASIZE_HALFWORD;
 80021dc:	4b06      	ldr	r3, [pc, #24]	; (80021f8 <DMA2_Init+0x50>)
 80021de:	2201      	movs	r2, #1
 80021e0:	721a      	strb	r2, [r3, #8]
	Dma_adcHandle.DMA_Config.DMA_Mode = DMA_MODE_CIRC;
 80021e2:	4b05      	ldr	r3, [pc, #20]	; (80021f8 <DMA2_Init+0x50>)
 80021e4:	2201      	movs	r2, #1
 80021e6:	729a      	strb	r2, [r3, #10]
	Dma_adcHandle.DMA_Config.DMA_FIFOMode = DMA_DIRECT_EN;
 80021e8:	4b03      	ldr	r3, [pc, #12]	; (80021f8 <DMA2_Init+0x50>)
 80021ea:	2200      	movs	r2, #0
 80021ec:	731a      	strb	r2, [r3, #12]

	DMA_Init(&Dma_adcHandle);
 80021ee:	4802      	ldr	r0, [pc, #8]	; (80021f8 <DMA2_Init+0x50>)
 80021f0:	f7fe fd88 	bl	8000d04 <DMA_Init>
}
 80021f4:	bf00      	nop
 80021f6:	bd80      	pop	{r7, pc}
 80021f8:	200000f8 	.word	0x200000f8
 80021fc:	40026400 	.word	0x40026400

08002200 <USART2_Output>:

void USART2_Output() {
 8002200:	b580      	push	{r7, lr}
 8002202:	b08e      	sub	sp, #56	; 0x38
 8002204:	af00      	add	r7, sp, #0
	/* Output to USART2 */
	char output[50];
	sprintf(output, "ADC output is: [%i]\r\n", data);
 8002206:	4b0b      	ldr	r3, [pc, #44]	; (8002234 <USART2_Output+0x34>)
 8002208:	881b      	ldrh	r3, [r3, #0]
 800220a:	461a      	mov	r2, r3
 800220c:	1d3b      	adds	r3, r7, #4
 800220e:	490a      	ldr	r1, [pc, #40]	; (8002238 <USART2_Output+0x38>)
 8002210:	4618      	mov	r0, r3
 8002212:	f000 f8e1 	bl	80023d8 <siprintf>
	USART_Write(&Usart_Handle, (uint8_t*)output, strlen(output));
 8002216:	1d3b      	adds	r3, r7, #4
 8002218:	4618      	mov	r0, r3
 800221a:	f7fd fff9 	bl	8000210 <strlen>
 800221e:	4603      	mov	r3, r0
 8002220:	b2da      	uxtb	r2, r3
 8002222:	1d3b      	adds	r3, r7, #4
 8002224:	4619      	mov	r1, r3
 8002226:	4805      	ldr	r0, [pc, #20]	; (800223c <USART2_Output+0x3c>)
 8002228:	f7ff fee8 	bl	8001ffc <USART_Write>
}
 800222c:	bf00      	nop
 800222e:	3738      	adds	r7, #56	; 0x38
 8002230:	46bd      	mov	sp, r7
 8002232:	bd80      	pop	{r7, pc}
 8002234:	200000ac 	.word	0x200000ac
 8002238:	08002bfc 	.word	0x08002bfc
 800223c:	200000d0 	.word	0x200000d0

08002240 <ADC_IRQHandler>:

/* Call implemented ADC IRQ handler */
void ADC_IRQHandler() {
 8002240:	b580      	push	{r7, lr}
 8002242:	af00      	add	r7, sp, #0
	ADC_EV_IRQHandling(&Adc_Input);
 8002244:	4802      	ldr	r0, [pc, #8]	; (8002250 <ADC_IRQHandler+0x10>)
 8002246:	f7fe fc63 	bl	8000b10 <ADC_EV_IRQHandling>
}
 800224a:	bf00      	nop
 800224c:	bd80      	pop	{r7, pc}
 800224e:	bf00      	nop
 8002250:	200000bc 	.word	0x200000bc

08002254 <DMA2_Stream0_IRQHandler>:

/* Call implemented DMA IRQ Handler */
void DMA2_Stream0_IRQHandler() {
 8002254:	b580      	push	{r7, lr}
 8002256:	af00      	add	r7, sp, #0
	DMA_EV_IRQHandling(&Dma_adcHandle);
 8002258:	4802      	ldr	r0, [pc, #8]	; (8002264 <DMA2_Stream0_IRQHandler+0x10>)
 800225a:	f7fe ff8b 	bl	8001174 <DMA_EV_IRQHandling>
}
 800225e:	bf00      	nop
 8002260:	bd80      	pop	{r7, pc}
 8002262:	bf00      	nop
 8002264:	200000f8 	.word	0x200000f8

08002268 <main>:


int main(void) {
 8002268:	b580      	push	{r7, lr}
 800226a:	af00      	add	r7, sp, #0
	/* Initialize GPIO PA0 as AI */
	GPIO_AI_Init();
 800226c:	f7ff ff1e 	bl	80020ac <GPIO_AI_Init>

	/* Configure GPIO to USART2 and initialize USART2 Tx */
	GPIO_USART_Config();
 8002270:	f7ff ff36 	bl	80020e0 <GPIO_USART_Config>
	USART2_Config();
 8002274:	f7ff ff56 	bl	8002124 <USART2_Config>

	/* Initialize ADC1 */
	ADC1_In_Init();
 8002278:	f7ff ff78 	bl	800216c <ADC1_In_Init>

	/* Initialize DMA to transfer from ADC DR to data variable */
	DMA2_Init();
 800227c:	f7ff ff94 	bl	80021a8 <DMA2_Init>

	/* Set interrupt ready */
	while(DMA_Start_IT(&Dma_adcHandle, (uint32_t*)&ADC1->DR, (uint32_t*)&data, (uint16_t)1) != DMA_READY);
 8002280:	bf00      	nop
 8002282:	2301      	movs	r3, #1
 8002284:	4a08      	ldr	r2, [pc, #32]	; (80022a8 <main+0x40>)
 8002286:	4909      	ldr	r1, [pc, #36]	; (80022ac <main+0x44>)
 8002288:	4809      	ldr	r0, [pc, #36]	; (80022b0 <main+0x48>)
 800228a:	f7ff f819 	bl	80012c0 <DMA_Start_IT>
 800228e:	4603      	mov	r3, r0
 8002290:	2b00      	cmp	r3, #0
 8002292:	d1f6      	bne.n	8002282 <main+0x1a>

	/* Begin continuous read from ADC */
	while(ADC_Read_Reg_IT(&Adc_Input, ADC_IN0, ADC_SMP_480CYC) != ADC_READY);
 8002294:	bf00      	nop
 8002296:	2207      	movs	r2, #7
 8002298:	2100      	movs	r1, #0
 800229a:	4806      	ldr	r0, [pc, #24]	; (80022b4 <main+0x4c>)
 800229c:	f7fe fba8 	bl	80009f0 <ADC_Read_Reg_IT>
 80022a0:	4603      	mov	r3, r0
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d1f7      	bne.n	8002296 <main+0x2e>

	while(1) {
 80022a6:	e7fe      	b.n	80022a6 <main+0x3e>
 80022a8:	200000ac 	.word	0x200000ac
 80022ac:	4001204c 	.word	0x4001204c
 80022b0:	200000f8 	.word	0x200000f8
 80022b4:	200000bc 	.word	0x200000bc

080022b8 <DMA_ApplicationCallbackEvent>:

	return 0;
}

/* When DMA returns complete, output ADC result on USART2 */
void DMA_ApplicationCallbackEvent(DMA_Handle_t *pDMAxHandle, uint8_t event) {
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b082      	sub	sp, #8
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
 80022c0:	460b      	mov	r3, r1
 80022c2:	70fb      	strb	r3, [r7, #3]
	if (event == DMA_TRANSFER_CMPLT)
 80022c4:	78fb      	ldrb	r3, [r7, #3]
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d101      	bne.n	80022ce <DMA_ApplicationCallbackEvent+0x16>
	{
		USART2_Output();
 80022ca:	f7ff ff99 	bl	8002200 <USART2_Output>
	}
}
 80022ce:	bf00      	nop
 80022d0:	3708      	adds	r7, #8
 80022d2:	46bd      	mov	sp, r7
 80022d4:	bd80      	pop	{r7, pc}
	...

080022d8 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	b084      	sub	sp, #16
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80022e0:	4b11      	ldr	r3, [pc, #68]	; (8002328 <_sbrk+0x50>)
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d102      	bne.n	80022ee <_sbrk+0x16>
		heap_end = &end;
 80022e8:	4b0f      	ldr	r3, [pc, #60]	; (8002328 <_sbrk+0x50>)
 80022ea:	4a10      	ldr	r2, [pc, #64]	; (800232c <_sbrk+0x54>)
 80022ec:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80022ee:	4b0e      	ldr	r3, [pc, #56]	; (8002328 <_sbrk+0x50>)
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80022f4:	4b0c      	ldr	r3, [pc, #48]	; (8002328 <_sbrk+0x50>)
 80022f6:	681a      	ldr	r2, [r3, #0]
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	4413      	add	r3, r2
 80022fc:	466a      	mov	r2, sp
 80022fe:	4293      	cmp	r3, r2
 8002300:	d907      	bls.n	8002312 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8002302:	f000 f83f 	bl	8002384 <__errno>
 8002306:	4602      	mov	r2, r0
 8002308:	230c      	movs	r3, #12
 800230a:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 800230c:	f04f 33ff 	mov.w	r3, #4294967295
 8002310:	e006      	b.n	8002320 <_sbrk+0x48>
	}

	heap_end += incr;
 8002312:	4b05      	ldr	r3, [pc, #20]	; (8002328 <_sbrk+0x50>)
 8002314:	681a      	ldr	r2, [r3, #0]
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	4413      	add	r3, r2
 800231a:	4a03      	ldr	r2, [pc, #12]	; (8002328 <_sbrk+0x50>)
 800231c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800231e:	68fb      	ldr	r3, [r7, #12]
}
 8002320:	4618      	mov	r0, r3
 8002322:	3710      	adds	r7, #16
 8002324:	46bd      	mov	sp, r7
 8002326:	bd80      	pop	{r7, pc}
 8002328:	200000b0 	.word	0x200000b0
 800232c:	20000110 	.word	0x20000110

08002330 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002330:	480d      	ldr	r0, [pc, #52]	; (8002368 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002332:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002334:	480d      	ldr	r0, [pc, #52]	; (800236c <LoopForever+0x6>)
  ldr r1, =_edata
 8002336:	490e      	ldr	r1, [pc, #56]	; (8002370 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002338:	4a0e      	ldr	r2, [pc, #56]	; (8002374 <LoopForever+0xe>)
  movs r3, #0
 800233a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800233c:	e002      	b.n	8002344 <LoopCopyDataInit>

0800233e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800233e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002340:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002342:	3304      	adds	r3, #4

08002344 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002344:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002346:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002348:	d3f9      	bcc.n	800233e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800234a:	4a0b      	ldr	r2, [pc, #44]	; (8002378 <LoopForever+0x12>)
  ldr r4, =_ebss
 800234c:	4c0b      	ldr	r4, [pc, #44]	; (800237c <LoopForever+0x16>)
  movs r3, #0
 800234e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002350:	e001      	b.n	8002356 <LoopFillZerobss>

08002352 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002352:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002354:	3204      	adds	r2, #4

08002356 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002356:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002358:	d3fb      	bcc.n	8002352 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800235a:	f3af 8000 	nop.w
/* Call static constructors */
  bl __libc_init_array
 800235e:	f000 f817 	bl	8002390 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002362:	f7ff ff81 	bl	8002268 <main>

08002366 <LoopForever>:

LoopForever:
    b LoopForever
 8002366:	e7fe      	b.n	8002366 <LoopForever>
  ldr   r0, =_estack
 8002368:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800236c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002370:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 8002374:	08002c50 	.word	0x08002c50
  ldr r2, =_sbss
 8002378:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 800237c:	20000110 	.word	0x20000110

08002380 <BusFault_Handler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002380:	e7fe      	b.n	8002380 <BusFault_Handler>
	...

08002384 <__errno>:
 8002384:	4b01      	ldr	r3, [pc, #4]	; (800238c <__errno+0x8>)
 8002386:	6818      	ldr	r0, [r3, #0]
 8002388:	4770      	bx	lr
 800238a:	bf00      	nop
 800238c:	2000002c 	.word	0x2000002c

08002390 <__libc_init_array>:
 8002390:	b570      	push	{r4, r5, r6, lr}
 8002392:	4e0d      	ldr	r6, [pc, #52]	; (80023c8 <__libc_init_array+0x38>)
 8002394:	4c0d      	ldr	r4, [pc, #52]	; (80023cc <__libc_init_array+0x3c>)
 8002396:	1ba4      	subs	r4, r4, r6
 8002398:	10a4      	asrs	r4, r4, #2
 800239a:	2500      	movs	r5, #0
 800239c:	42a5      	cmp	r5, r4
 800239e:	d109      	bne.n	80023b4 <__libc_init_array+0x24>
 80023a0:	4e0b      	ldr	r6, [pc, #44]	; (80023d0 <__libc_init_array+0x40>)
 80023a2:	4c0c      	ldr	r4, [pc, #48]	; (80023d4 <__libc_init_array+0x44>)
 80023a4:	f000 fc1e 	bl	8002be4 <_init>
 80023a8:	1ba4      	subs	r4, r4, r6
 80023aa:	10a4      	asrs	r4, r4, #2
 80023ac:	2500      	movs	r5, #0
 80023ae:	42a5      	cmp	r5, r4
 80023b0:	d105      	bne.n	80023be <__libc_init_array+0x2e>
 80023b2:	bd70      	pop	{r4, r5, r6, pc}
 80023b4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80023b8:	4798      	blx	r3
 80023ba:	3501      	adds	r5, #1
 80023bc:	e7ee      	b.n	800239c <__libc_init_array+0xc>
 80023be:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80023c2:	4798      	blx	r3
 80023c4:	3501      	adds	r5, #1
 80023c6:	e7f2      	b.n	80023ae <__libc_init_array+0x1e>
 80023c8:	08002c48 	.word	0x08002c48
 80023cc:	08002c48 	.word	0x08002c48
 80023d0:	08002c48 	.word	0x08002c48
 80023d4:	08002c4c 	.word	0x08002c4c

080023d8 <siprintf>:
 80023d8:	b40e      	push	{r1, r2, r3}
 80023da:	b500      	push	{lr}
 80023dc:	b09c      	sub	sp, #112	; 0x70
 80023de:	ab1d      	add	r3, sp, #116	; 0x74
 80023e0:	9002      	str	r0, [sp, #8]
 80023e2:	9006      	str	r0, [sp, #24]
 80023e4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80023e8:	4809      	ldr	r0, [pc, #36]	; (8002410 <siprintf+0x38>)
 80023ea:	9107      	str	r1, [sp, #28]
 80023ec:	9104      	str	r1, [sp, #16]
 80023ee:	4909      	ldr	r1, [pc, #36]	; (8002414 <siprintf+0x3c>)
 80023f0:	f853 2b04 	ldr.w	r2, [r3], #4
 80023f4:	9105      	str	r1, [sp, #20]
 80023f6:	6800      	ldr	r0, [r0, #0]
 80023f8:	9301      	str	r3, [sp, #4]
 80023fa:	a902      	add	r1, sp, #8
 80023fc:	f000 f866 	bl	80024cc <_svfiprintf_r>
 8002400:	9b02      	ldr	r3, [sp, #8]
 8002402:	2200      	movs	r2, #0
 8002404:	701a      	strb	r2, [r3, #0]
 8002406:	b01c      	add	sp, #112	; 0x70
 8002408:	f85d eb04 	ldr.w	lr, [sp], #4
 800240c:	b003      	add	sp, #12
 800240e:	4770      	bx	lr
 8002410:	2000002c 	.word	0x2000002c
 8002414:	ffff0208 	.word	0xffff0208

08002418 <__ssputs_r>:
 8002418:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800241c:	688e      	ldr	r6, [r1, #8]
 800241e:	429e      	cmp	r6, r3
 8002420:	4682      	mov	sl, r0
 8002422:	460c      	mov	r4, r1
 8002424:	4690      	mov	r8, r2
 8002426:	4699      	mov	r9, r3
 8002428:	d837      	bhi.n	800249a <__ssputs_r+0x82>
 800242a:	898a      	ldrh	r2, [r1, #12]
 800242c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8002430:	d031      	beq.n	8002496 <__ssputs_r+0x7e>
 8002432:	6825      	ldr	r5, [r4, #0]
 8002434:	6909      	ldr	r1, [r1, #16]
 8002436:	1a6f      	subs	r7, r5, r1
 8002438:	6965      	ldr	r5, [r4, #20]
 800243a:	2302      	movs	r3, #2
 800243c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002440:	fb95 f5f3 	sdiv	r5, r5, r3
 8002444:	f109 0301 	add.w	r3, r9, #1
 8002448:	443b      	add	r3, r7
 800244a:	429d      	cmp	r5, r3
 800244c:	bf38      	it	cc
 800244e:	461d      	movcc	r5, r3
 8002450:	0553      	lsls	r3, r2, #21
 8002452:	d530      	bpl.n	80024b6 <__ssputs_r+0x9e>
 8002454:	4629      	mov	r1, r5
 8002456:	f000 fb2b 	bl	8002ab0 <_malloc_r>
 800245a:	4606      	mov	r6, r0
 800245c:	b950      	cbnz	r0, 8002474 <__ssputs_r+0x5c>
 800245e:	230c      	movs	r3, #12
 8002460:	f8ca 3000 	str.w	r3, [sl]
 8002464:	89a3      	ldrh	r3, [r4, #12]
 8002466:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800246a:	81a3      	strh	r3, [r4, #12]
 800246c:	f04f 30ff 	mov.w	r0, #4294967295
 8002470:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002474:	463a      	mov	r2, r7
 8002476:	6921      	ldr	r1, [r4, #16]
 8002478:	f000 faa8 	bl	80029cc <memcpy>
 800247c:	89a3      	ldrh	r3, [r4, #12]
 800247e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8002482:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002486:	81a3      	strh	r3, [r4, #12]
 8002488:	6126      	str	r6, [r4, #16]
 800248a:	6165      	str	r5, [r4, #20]
 800248c:	443e      	add	r6, r7
 800248e:	1bed      	subs	r5, r5, r7
 8002490:	6026      	str	r6, [r4, #0]
 8002492:	60a5      	str	r5, [r4, #8]
 8002494:	464e      	mov	r6, r9
 8002496:	454e      	cmp	r6, r9
 8002498:	d900      	bls.n	800249c <__ssputs_r+0x84>
 800249a:	464e      	mov	r6, r9
 800249c:	4632      	mov	r2, r6
 800249e:	4641      	mov	r1, r8
 80024a0:	6820      	ldr	r0, [r4, #0]
 80024a2:	f000 fa9e 	bl	80029e2 <memmove>
 80024a6:	68a3      	ldr	r3, [r4, #8]
 80024a8:	1b9b      	subs	r3, r3, r6
 80024aa:	60a3      	str	r3, [r4, #8]
 80024ac:	6823      	ldr	r3, [r4, #0]
 80024ae:	441e      	add	r6, r3
 80024b0:	6026      	str	r6, [r4, #0]
 80024b2:	2000      	movs	r0, #0
 80024b4:	e7dc      	b.n	8002470 <__ssputs_r+0x58>
 80024b6:	462a      	mov	r2, r5
 80024b8:	f000 fb54 	bl	8002b64 <_realloc_r>
 80024bc:	4606      	mov	r6, r0
 80024be:	2800      	cmp	r0, #0
 80024c0:	d1e2      	bne.n	8002488 <__ssputs_r+0x70>
 80024c2:	6921      	ldr	r1, [r4, #16]
 80024c4:	4650      	mov	r0, sl
 80024c6:	f000 faa5 	bl	8002a14 <_free_r>
 80024ca:	e7c8      	b.n	800245e <__ssputs_r+0x46>

080024cc <_svfiprintf_r>:
 80024cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80024d0:	461d      	mov	r5, r3
 80024d2:	898b      	ldrh	r3, [r1, #12]
 80024d4:	061f      	lsls	r7, r3, #24
 80024d6:	b09d      	sub	sp, #116	; 0x74
 80024d8:	4680      	mov	r8, r0
 80024da:	460c      	mov	r4, r1
 80024dc:	4616      	mov	r6, r2
 80024de:	d50f      	bpl.n	8002500 <_svfiprintf_r+0x34>
 80024e0:	690b      	ldr	r3, [r1, #16]
 80024e2:	b96b      	cbnz	r3, 8002500 <_svfiprintf_r+0x34>
 80024e4:	2140      	movs	r1, #64	; 0x40
 80024e6:	f000 fae3 	bl	8002ab0 <_malloc_r>
 80024ea:	6020      	str	r0, [r4, #0]
 80024ec:	6120      	str	r0, [r4, #16]
 80024ee:	b928      	cbnz	r0, 80024fc <_svfiprintf_r+0x30>
 80024f0:	230c      	movs	r3, #12
 80024f2:	f8c8 3000 	str.w	r3, [r8]
 80024f6:	f04f 30ff 	mov.w	r0, #4294967295
 80024fa:	e0c8      	b.n	800268e <_svfiprintf_r+0x1c2>
 80024fc:	2340      	movs	r3, #64	; 0x40
 80024fe:	6163      	str	r3, [r4, #20]
 8002500:	2300      	movs	r3, #0
 8002502:	9309      	str	r3, [sp, #36]	; 0x24
 8002504:	2320      	movs	r3, #32
 8002506:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800250a:	2330      	movs	r3, #48	; 0x30
 800250c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002510:	9503      	str	r5, [sp, #12]
 8002512:	f04f 0b01 	mov.w	fp, #1
 8002516:	4637      	mov	r7, r6
 8002518:	463d      	mov	r5, r7
 800251a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800251e:	b10b      	cbz	r3, 8002524 <_svfiprintf_r+0x58>
 8002520:	2b25      	cmp	r3, #37	; 0x25
 8002522:	d13e      	bne.n	80025a2 <_svfiprintf_r+0xd6>
 8002524:	ebb7 0a06 	subs.w	sl, r7, r6
 8002528:	d00b      	beq.n	8002542 <_svfiprintf_r+0x76>
 800252a:	4653      	mov	r3, sl
 800252c:	4632      	mov	r2, r6
 800252e:	4621      	mov	r1, r4
 8002530:	4640      	mov	r0, r8
 8002532:	f7ff ff71 	bl	8002418 <__ssputs_r>
 8002536:	3001      	adds	r0, #1
 8002538:	f000 80a4 	beq.w	8002684 <_svfiprintf_r+0x1b8>
 800253c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800253e:	4453      	add	r3, sl
 8002540:	9309      	str	r3, [sp, #36]	; 0x24
 8002542:	783b      	ldrb	r3, [r7, #0]
 8002544:	2b00      	cmp	r3, #0
 8002546:	f000 809d 	beq.w	8002684 <_svfiprintf_r+0x1b8>
 800254a:	2300      	movs	r3, #0
 800254c:	f04f 32ff 	mov.w	r2, #4294967295
 8002550:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002554:	9304      	str	r3, [sp, #16]
 8002556:	9307      	str	r3, [sp, #28]
 8002558:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800255c:	931a      	str	r3, [sp, #104]	; 0x68
 800255e:	462f      	mov	r7, r5
 8002560:	2205      	movs	r2, #5
 8002562:	f817 1b01 	ldrb.w	r1, [r7], #1
 8002566:	4850      	ldr	r0, [pc, #320]	; (80026a8 <_svfiprintf_r+0x1dc>)
 8002568:	f7fd fe5a 	bl	8000220 <memchr>
 800256c:	9b04      	ldr	r3, [sp, #16]
 800256e:	b9d0      	cbnz	r0, 80025a6 <_svfiprintf_r+0xda>
 8002570:	06d9      	lsls	r1, r3, #27
 8002572:	bf44      	itt	mi
 8002574:	2220      	movmi	r2, #32
 8002576:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800257a:	071a      	lsls	r2, r3, #28
 800257c:	bf44      	itt	mi
 800257e:	222b      	movmi	r2, #43	; 0x2b
 8002580:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8002584:	782a      	ldrb	r2, [r5, #0]
 8002586:	2a2a      	cmp	r2, #42	; 0x2a
 8002588:	d015      	beq.n	80025b6 <_svfiprintf_r+0xea>
 800258a:	9a07      	ldr	r2, [sp, #28]
 800258c:	462f      	mov	r7, r5
 800258e:	2000      	movs	r0, #0
 8002590:	250a      	movs	r5, #10
 8002592:	4639      	mov	r1, r7
 8002594:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002598:	3b30      	subs	r3, #48	; 0x30
 800259a:	2b09      	cmp	r3, #9
 800259c:	d94d      	bls.n	800263a <_svfiprintf_r+0x16e>
 800259e:	b1b8      	cbz	r0, 80025d0 <_svfiprintf_r+0x104>
 80025a0:	e00f      	b.n	80025c2 <_svfiprintf_r+0xf6>
 80025a2:	462f      	mov	r7, r5
 80025a4:	e7b8      	b.n	8002518 <_svfiprintf_r+0x4c>
 80025a6:	4a40      	ldr	r2, [pc, #256]	; (80026a8 <_svfiprintf_r+0x1dc>)
 80025a8:	1a80      	subs	r0, r0, r2
 80025aa:	fa0b f000 	lsl.w	r0, fp, r0
 80025ae:	4318      	orrs	r0, r3
 80025b0:	9004      	str	r0, [sp, #16]
 80025b2:	463d      	mov	r5, r7
 80025b4:	e7d3      	b.n	800255e <_svfiprintf_r+0x92>
 80025b6:	9a03      	ldr	r2, [sp, #12]
 80025b8:	1d11      	adds	r1, r2, #4
 80025ba:	6812      	ldr	r2, [r2, #0]
 80025bc:	9103      	str	r1, [sp, #12]
 80025be:	2a00      	cmp	r2, #0
 80025c0:	db01      	blt.n	80025c6 <_svfiprintf_r+0xfa>
 80025c2:	9207      	str	r2, [sp, #28]
 80025c4:	e004      	b.n	80025d0 <_svfiprintf_r+0x104>
 80025c6:	4252      	negs	r2, r2
 80025c8:	f043 0302 	orr.w	r3, r3, #2
 80025cc:	9207      	str	r2, [sp, #28]
 80025ce:	9304      	str	r3, [sp, #16]
 80025d0:	783b      	ldrb	r3, [r7, #0]
 80025d2:	2b2e      	cmp	r3, #46	; 0x2e
 80025d4:	d10c      	bne.n	80025f0 <_svfiprintf_r+0x124>
 80025d6:	787b      	ldrb	r3, [r7, #1]
 80025d8:	2b2a      	cmp	r3, #42	; 0x2a
 80025da:	d133      	bne.n	8002644 <_svfiprintf_r+0x178>
 80025dc:	9b03      	ldr	r3, [sp, #12]
 80025de:	1d1a      	adds	r2, r3, #4
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	9203      	str	r2, [sp, #12]
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	bfb8      	it	lt
 80025e8:	f04f 33ff 	movlt.w	r3, #4294967295
 80025ec:	3702      	adds	r7, #2
 80025ee:	9305      	str	r3, [sp, #20]
 80025f0:	4d2e      	ldr	r5, [pc, #184]	; (80026ac <_svfiprintf_r+0x1e0>)
 80025f2:	7839      	ldrb	r1, [r7, #0]
 80025f4:	2203      	movs	r2, #3
 80025f6:	4628      	mov	r0, r5
 80025f8:	f7fd fe12 	bl	8000220 <memchr>
 80025fc:	b138      	cbz	r0, 800260e <_svfiprintf_r+0x142>
 80025fe:	2340      	movs	r3, #64	; 0x40
 8002600:	1b40      	subs	r0, r0, r5
 8002602:	fa03 f000 	lsl.w	r0, r3, r0
 8002606:	9b04      	ldr	r3, [sp, #16]
 8002608:	4303      	orrs	r3, r0
 800260a:	3701      	adds	r7, #1
 800260c:	9304      	str	r3, [sp, #16]
 800260e:	7839      	ldrb	r1, [r7, #0]
 8002610:	4827      	ldr	r0, [pc, #156]	; (80026b0 <_svfiprintf_r+0x1e4>)
 8002612:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002616:	2206      	movs	r2, #6
 8002618:	1c7e      	adds	r6, r7, #1
 800261a:	f7fd fe01 	bl	8000220 <memchr>
 800261e:	2800      	cmp	r0, #0
 8002620:	d038      	beq.n	8002694 <_svfiprintf_r+0x1c8>
 8002622:	4b24      	ldr	r3, [pc, #144]	; (80026b4 <_svfiprintf_r+0x1e8>)
 8002624:	bb13      	cbnz	r3, 800266c <_svfiprintf_r+0x1a0>
 8002626:	9b03      	ldr	r3, [sp, #12]
 8002628:	3307      	adds	r3, #7
 800262a:	f023 0307 	bic.w	r3, r3, #7
 800262e:	3308      	adds	r3, #8
 8002630:	9303      	str	r3, [sp, #12]
 8002632:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002634:	444b      	add	r3, r9
 8002636:	9309      	str	r3, [sp, #36]	; 0x24
 8002638:	e76d      	b.n	8002516 <_svfiprintf_r+0x4a>
 800263a:	fb05 3202 	mla	r2, r5, r2, r3
 800263e:	2001      	movs	r0, #1
 8002640:	460f      	mov	r7, r1
 8002642:	e7a6      	b.n	8002592 <_svfiprintf_r+0xc6>
 8002644:	2300      	movs	r3, #0
 8002646:	3701      	adds	r7, #1
 8002648:	9305      	str	r3, [sp, #20]
 800264a:	4619      	mov	r1, r3
 800264c:	250a      	movs	r5, #10
 800264e:	4638      	mov	r0, r7
 8002650:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002654:	3a30      	subs	r2, #48	; 0x30
 8002656:	2a09      	cmp	r2, #9
 8002658:	d903      	bls.n	8002662 <_svfiprintf_r+0x196>
 800265a:	2b00      	cmp	r3, #0
 800265c:	d0c8      	beq.n	80025f0 <_svfiprintf_r+0x124>
 800265e:	9105      	str	r1, [sp, #20]
 8002660:	e7c6      	b.n	80025f0 <_svfiprintf_r+0x124>
 8002662:	fb05 2101 	mla	r1, r5, r1, r2
 8002666:	2301      	movs	r3, #1
 8002668:	4607      	mov	r7, r0
 800266a:	e7f0      	b.n	800264e <_svfiprintf_r+0x182>
 800266c:	ab03      	add	r3, sp, #12
 800266e:	9300      	str	r3, [sp, #0]
 8002670:	4622      	mov	r2, r4
 8002672:	4b11      	ldr	r3, [pc, #68]	; (80026b8 <_svfiprintf_r+0x1ec>)
 8002674:	a904      	add	r1, sp, #16
 8002676:	4640      	mov	r0, r8
 8002678:	f3af 8000 	nop.w
 800267c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8002680:	4681      	mov	r9, r0
 8002682:	d1d6      	bne.n	8002632 <_svfiprintf_r+0x166>
 8002684:	89a3      	ldrh	r3, [r4, #12]
 8002686:	065b      	lsls	r3, r3, #25
 8002688:	f53f af35 	bmi.w	80024f6 <_svfiprintf_r+0x2a>
 800268c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800268e:	b01d      	add	sp, #116	; 0x74
 8002690:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002694:	ab03      	add	r3, sp, #12
 8002696:	9300      	str	r3, [sp, #0]
 8002698:	4622      	mov	r2, r4
 800269a:	4b07      	ldr	r3, [pc, #28]	; (80026b8 <_svfiprintf_r+0x1ec>)
 800269c:	a904      	add	r1, sp, #16
 800269e:	4640      	mov	r0, r8
 80026a0:	f000 f882 	bl	80027a8 <_printf_i>
 80026a4:	e7ea      	b.n	800267c <_svfiprintf_r+0x1b0>
 80026a6:	bf00      	nop
 80026a8:	08002c12 	.word	0x08002c12
 80026ac:	08002c18 	.word	0x08002c18
 80026b0:	08002c1c 	.word	0x08002c1c
 80026b4:	00000000 	.word	0x00000000
 80026b8:	08002419 	.word	0x08002419

080026bc <_printf_common>:
 80026bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80026c0:	4691      	mov	r9, r2
 80026c2:	461f      	mov	r7, r3
 80026c4:	688a      	ldr	r2, [r1, #8]
 80026c6:	690b      	ldr	r3, [r1, #16]
 80026c8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80026cc:	4293      	cmp	r3, r2
 80026ce:	bfb8      	it	lt
 80026d0:	4613      	movlt	r3, r2
 80026d2:	f8c9 3000 	str.w	r3, [r9]
 80026d6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80026da:	4606      	mov	r6, r0
 80026dc:	460c      	mov	r4, r1
 80026de:	b112      	cbz	r2, 80026e6 <_printf_common+0x2a>
 80026e0:	3301      	adds	r3, #1
 80026e2:	f8c9 3000 	str.w	r3, [r9]
 80026e6:	6823      	ldr	r3, [r4, #0]
 80026e8:	0699      	lsls	r1, r3, #26
 80026ea:	bf42      	ittt	mi
 80026ec:	f8d9 3000 	ldrmi.w	r3, [r9]
 80026f0:	3302      	addmi	r3, #2
 80026f2:	f8c9 3000 	strmi.w	r3, [r9]
 80026f6:	6825      	ldr	r5, [r4, #0]
 80026f8:	f015 0506 	ands.w	r5, r5, #6
 80026fc:	d107      	bne.n	800270e <_printf_common+0x52>
 80026fe:	f104 0a19 	add.w	sl, r4, #25
 8002702:	68e3      	ldr	r3, [r4, #12]
 8002704:	f8d9 2000 	ldr.w	r2, [r9]
 8002708:	1a9b      	subs	r3, r3, r2
 800270a:	42ab      	cmp	r3, r5
 800270c:	dc28      	bgt.n	8002760 <_printf_common+0xa4>
 800270e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8002712:	6822      	ldr	r2, [r4, #0]
 8002714:	3300      	adds	r3, #0
 8002716:	bf18      	it	ne
 8002718:	2301      	movne	r3, #1
 800271a:	0692      	lsls	r2, r2, #26
 800271c:	d42d      	bmi.n	800277a <_printf_common+0xbe>
 800271e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002722:	4639      	mov	r1, r7
 8002724:	4630      	mov	r0, r6
 8002726:	47c0      	blx	r8
 8002728:	3001      	adds	r0, #1
 800272a:	d020      	beq.n	800276e <_printf_common+0xb2>
 800272c:	6823      	ldr	r3, [r4, #0]
 800272e:	68e5      	ldr	r5, [r4, #12]
 8002730:	f8d9 2000 	ldr.w	r2, [r9]
 8002734:	f003 0306 	and.w	r3, r3, #6
 8002738:	2b04      	cmp	r3, #4
 800273a:	bf08      	it	eq
 800273c:	1aad      	subeq	r5, r5, r2
 800273e:	68a3      	ldr	r3, [r4, #8]
 8002740:	6922      	ldr	r2, [r4, #16]
 8002742:	bf0c      	ite	eq
 8002744:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002748:	2500      	movne	r5, #0
 800274a:	4293      	cmp	r3, r2
 800274c:	bfc4      	itt	gt
 800274e:	1a9b      	subgt	r3, r3, r2
 8002750:	18ed      	addgt	r5, r5, r3
 8002752:	f04f 0900 	mov.w	r9, #0
 8002756:	341a      	adds	r4, #26
 8002758:	454d      	cmp	r5, r9
 800275a:	d11a      	bne.n	8002792 <_printf_common+0xd6>
 800275c:	2000      	movs	r0, #0
 800275e:	e008      	b.n	8002772 <_printf_common+0xb6>
 8002760:	2301      	movs	r3, #1
 8002762:	4652      	mov	r2, sl
 8002764:	4639      	mov	r1, r7
 8002766:	4630      	mov	r0, r6
 8002768:	47c0      	blx	r8
 800276a:	3001      	adds	r0, #1
 800276c:	d103      	bne.n	8002776 <_printf_common+0xba>
 800276e:	f04f 30ff 	mov.w	r0, #4294967295
 8002772:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002776:	3501      	adds	r5, #1
 8002778:	e7c3      	b.n	8002702 <_printf_common+0x46>
 800277a:	18e1      	adds	r1, r4, r3
 800277c:	1c5a      	adds	r2, r3, #1
 800277e:	2030      	movs	r0, #48	; 0x30
 8002780:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002784:	4422      	add	r2, r4
 8002786:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800278a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800278e:	3302      	adds	r3, #2
 8002790:	e7c5      	b.n	800271e <_printf_common+0x62>
 8002792:	2301      	movs	r3, #1
 8002794:	4622      	mov	r2, r4
 8002796:	4639      	mov	r1, r7
 8002798:	4630      	mov	r0, r6
 800279a:	47c0      	blx	r8
 800279c:	3001      	adds	r0, #1
 800279e:	d0e6      	beq.n	800276e <_printf_common+0xb2>
 80027a0:	f109 0901 	add.w	r9, r9, #1
 80027a4:	e7d8      	b.n	8002758 <_printf_common+0x9c>
	...

080027a8 <_printf_i>:
 80027a8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80027ac:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80027b0:	460c      	mov	r4, r1
 80027b2:	7e09      	ldrb	r1, [r1, #24]
 80027b4:	b085      	sub	sp, #20
 80027b6:	296e      	cmp	r1, #110	; 0x6e
 80027b8:	4617      	mov	r7, r2
 80027ba:	4606      	mov	r6, r0
 80027bc:	4698      	mov	r8, r3
 80027be:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80027c0:	f000 80b3 	beq.w	800292a <_printf_i+0x182>
 80027c4:	d822      	bhi.n	800280c <_printf_i+0x64>
 80027c6:	2963      	cmp	r1, #99	; 0x63
 80027c8:	d036      	beq.n	8002838 <_printf_i+0x90>
 80027ca:	d80a      	bhi.n	80027e2 <_printf_i+0x3a>
 80027cc:	2900      	cmp	r1, #0
 80027ce:	f000 80b9 	beq.w	8002944 <_printf_i+0x19c>
 80027d2:	2958      	cmp	r1, #88	; 0x58
 80027d4:	f000 8083 	beq.w	80028de <_printf_i+0x136>
 80027d8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80027dc:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80027e0:	e032      	b.n	8002848 <_printf_i+0xa0>
 80027e2:	2964      	cmp	r1, #100	; 0x64
 80027e4:	d001      	beq.n	80027ea <_printf_i+0x42>
 80027e6:	2969      	cmp	r1, #105	; 0x69
 80027e8:	d1f6      	bne.n	80027d8 <_printf_i+0x30>
 80027ea:	6820      	ldr	r0, [r4, #0]
 80027ec:	6813      	ldr	r3, [r2, #0]
 80027ee:	0605      	lsls	r5, r0, #24
 80027f0:	f103 0104 	add.w	r1, r3, #4
 80027f4:	d52a      	bpl.n	800284c <_printf_i+0xa4>
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	6011      	str	r1, [r2, #0]
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	da03      	bge.n	8002806 <_printf_i+0x5e>
 80027fe:	222d      	movs	r2, #45	; 0x2d
 8002800:	425b      	negs	r3, r3
 8002802:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8002806:	486f      	ldr	r0, [pc, #444]	; (80029c4 <_printf_i+0x21c>)
 8002808:	220a      	movs	r2, #10
 800280a:	e039      	b.n	8002880 <_printf_i+0xd8>
 800280c:	2973      	cmp	r1, #115	; 0x73
 800280e:	f000 809d 	beq.w	800294c <_printf_i+0x1a4>
 8002812:	d808      	bhi.n	8002826 <_printf_i+0x7e>
 8002814:	296f      	cmp	r1, #111	; 0x6f
 8002816:	d020      	beq.n	800285a <_printf_i+0xb2>
 8002818:	2970      	cmp	r1, #112	; 0x70
 800281a:	d1dd      	bne.n	80027d8 <_printf_i+0x30>
 800281c:	6823      	ldr	r3, [r4, #0]
 800281e:	f043 0320 	orr.w	r3, r3, #32
 8002822:	6023      	str	r3, [r4, #0]
 8002824:	e003      	b.n	800282e <_printf_i+0x86>
 8002826:	2975      	cmp	r1, #117	; 0x75
 8002828:	d017      	beq.n	800285a <_printf_i+0xb2>
 800282a:	2978      	cmp	r1, #120	; 0x78
 800282c:	d1d4      	bne.n	80027d8 <_printf_i+0x30>
 800282e:	2378      	movs	r3, #120	; 0x78
 8002830:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002834:	4864      	ldr	r0, [pc, #400]	; (80029c8 <_printf_i+0x220>)
 8002836:	e055      	b.n	80028e4 <_printf_i+0x13c>
 8002838:	6813      	ldr	r3, [r2, #0]
 800283a:	1d19      	adds	r1, r3, #4
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	6011      	str	r1, [r2, #0]
 8002840:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002844:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002848:	2301      	movs	r3, #1
 800284a:	e08c      	b.n	8002966 <_printf_i+0x1be>
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	6011      	str	r1, [r2, #0]
 8002850:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002854:	bf18      	it	ne
 8002856:	b21b      	sxthne	r3, r3
 8002858:	e7cf      	b.n	80027fa <_printf_i+0x52>
 800285a:	6813      	ldr	r3, [r2, #0]
 800285c:	6825      	ldr	r5, [r4, #0]
 800285e:	1d18      	adds	r0, r3, #4
 8002860:	6010      	str	r0, [r2, #0]
 8002862:	0628      	lsls	r0, r5, #24
 8002864:	d501      	bpl.n	800286a <_printf_i+0xc2>
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	e002      	b.n	8002870 <_printf_i+0xc8>
 800286a:	0668      	lsls	r0, r5, #25
 800286c:	d5fb      	bpl.n	8002866 <_printf_i+0xbe>
 800286e:	881b      	ldrh	r3, [r3, #0]
 8002870:	4854      	ldr	r0, [pc, #336]	; (80029c4 <_printf_i+0x21c>)
 8002872:	296f      	cmp	r1, #111	; 0x6f
 8002874:	bf14      	ite	ne
 8002876:	220a      	movne	r2, #10
 8002878:	2208      	moveq	r2, #8
 800287a:	2100      	movs	r1, #0
 800287c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002880:	6865      	ldr	r5, [r4, #4]
 8002882:	60a5      	str	r5, [r4, #8]
 8002884:	2d00      	cmp	r5, #0
 8002886:	f2c0 8095 	blt.w	80029b4 <_printf_i+0x20c>
 800288a:	6821      	ldr	r1, [r4, #0]
 800288c:	f021 0104 	bic.w	r1, r1, #4
 8002890:	6021      	str	r1, [r4, #0]
 8002892:	2b00      	cmp	r3, #0
 8002894:	d13d      	bne.n	8002912 <_printf_i+0x16a>
 8002896:	2d00      	cmp	r5, #0
 8002898:	f040 808e 	bne.w	80029b8 <_printf_i+0x210>
 800289c:	4665      	mov	r5, ip
 800289e:	2a08      	cmp	r2, #8
 80028a0:	d10b      	bne.n	80028ba <_printf_i+0x112>
 80028a2:	6823      	ldr	r3, [r4, #0]
 80028a4:	07db      	lsls	r3, r3, #31
 80028a6:	d508      	bpl.n	80028ba <_printf_i+0x112>
 80028a8:	6923      	ldr	r3, [r4, #16]
 80028aa:	6862      	ldr	r2, [r4, #4]
 80028ac:	429a      	cmp	r2, r3
 80028ae:	bfde      	ittt	le
 80028b0:	2330      	movle	r3, #48	; 0x30
 80028b2:	f805 3c01 	strble.w	r3, [r5, #-1]
 80028b6:	f105 35ff 	addle.w	r5, r5, #4294967295
 80028ba:	ebac 0305 	sub.w	r3, ip, r5
 80028be:	6123      	str	r3, [r4, #16]
 80028c0:	f8cd 8000 	str.w	r8, [sp]
 80028c4:	463b      	mov	r3, r7
 80028c6:	aa03      	add	r2, sp, #12
 80028c8:	4621      	mov	r1, r4
 80028ca:	4630      	mov	r0, r6
 80028cc:	f7ff fef6 	bl	80026bc <_printf_common>
 80028d0:	3001      	adds	r0, #1
 80028d2:	d14d      	bne.n	8002970 <_printf_i+0x1c8>
 80028d4:	f04f 30ff 	mov.w	r0, #4294967295
 80028d8:	b005      	add	sp, #20
 80028da:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80028de:	4839      	ldr	r0, [pc, #228]	; (80029c4 <_printf_i+0x21c>)
 80028e0:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80028e4:	6813      	ldr	r3, [r2, #0]
 80028e6:	6821      	ldr	r1, [r4, #0]
 80028e8:	1d1d      	adds	r5, r3, #4
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	6015      	str	r5, [r2, #0]
 80028ee:	060a      	lsls	r2, r1, #24
 80028f0:	d50b      	bpl.n	800290a <_printf_i+0x162>
 80028f2:	07ca      	lsls	r2, r1, #31
 80028f4:	bf44      	itt	mi
 80028f6:	f041 0120 	orrmi.w	r1, r1, #32
 80028fa:	6021      	strmi	r1, [r4, #0]
 80028fc:	b91b      	cbnz	r3, 8002906 <_printf_i+0x15e>
 80028fe:	6822      	ldr	r2, [r4, #0]
 8002900:	f022 0220 	bic.w	r2, r2, #32
 8002904:	6022      	str	r2, [r4, #0]
 8002906:	2210      	movs	r2, #16
 8002908:	e7b7      	b.n	800287a <_printf_i+0xd2>
 800290a:	064d      	lsls	r5, r1, #25
 800290c:	bf48      	it	mi
 800290e:	b29b      	uxthmi	r3, r3
 8002910:	e7ef      	b.n	80028f2 <_printf_i+0x14a>
 8002912:	4665      	mov	r5, ip
 8002914:	fbb3 f1f2 	udiv	r1, r3, r2
 8002918:	fb02 3311 	mls	r3, r2, r1, r3
 800291c:	5cc3      	ldrb	r3, [r0, r3]
 800291e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8002922:	460b      	mov	r3, r1
 8002924:	2900      	cmp	r1, #0
 8002926:	d1f5      	bne.n	8002914 <_printf_i+0x16c>
 8002928:	e7b9      	b.n	800289e <_printf_i+0xf6>
 800292a:	6813      	ldr	r3, [r2, #0]
 800292c:	6825      	ldr	r5, [r4, #0]
 800292e:	6961      	ldr	r1, [r4, #20]
 8002930:	1d18      	adds	r0, r3, #4
 8002932:	6010      	str	r0, [r2, #0]
 8002934:	0628      	lsls	r0, r5, #24
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	d501      	bpl.n	800293e <_printf_i+0x196>
 800293a:	6019      	str	r1, [r3, #0]
 800293c:	e002      	b.n	8002944 <_printf_i+0x19c>
 800293e:	066a      	lsls	r2, r5, #25
 8002940:	d5fb      	bpl.n	800293a <_printf_i+0x192>
 8002942:	8019      	strh	r1, [r3, #0]
 8002944:	2300      	movs	r3, #0
 8002946:	6123      	str	r3, [r4, #16]
 8002948:	4665      	mov	r5, ip
 800294a:	e7b9      	b.n	80028c0 <_printf_i+0x118>
 800294c:	6813      	ldr	r3, [r2, #0]
 800294e:	1d19      	adds	r1, r3, #4
 8002950:	6011      	str	r1, [r2, #0]
 8002952:	681d      	ldr	r5, [r3, #0]
 8002954:	6862      	ldr	r2, [r4, #4]
 8002956:	2100      	movs	r1, #0
 8002958:	4628      	mov	r0, r5
 800295a:	f7fd fc61 	bl	8000220 <memchr>
 800295e:	b108      	cbz	r0, 8002964 <_printf_i+0x1bc>
 8002960:	1b40      	subs	r0, r0, r5
 8002962:	6060      	str	r0, [r4, #4]
 8002964:	6863      	ldr	r3, [r4, #4]
 8002966:	6123      	str	r3, [r4, #16]
 8002968:	2300      	movs	r3, #0
 800296a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800296e:	e7a7      	b.n	80028c0 <_printf_i+0x118>
 8002970:	6923      	ldr	r3, [r4, #16]
 8002972:	462a      	mov	r2, r5
 8002974:	4639      	mov	r1, r7
 8002976:	4630      	mov	r0, r6
 8002978:	47c0      	blx	r8
 800297a:	3001      	adds	r0, #1
 800297c:	d0aa      	beq.n	80028d4 <_printf_i+0x12c>
 800297e:	6823      	ldr	r3, [r4, #0]
 8002980:	079b      	lsls	r3, r3, #30
 8002982:	d413      	bmi.n	80029ac <_printf_i+0x204>
 8002984:	68e0      	ldr	r0, [r4, #12]
 8002986:	9b03      	ldr	r3, [sp, #12]
 8002988:	4298      	cmp	r0, r3
 800298a:	bfb8      	it	lt
 800298c:	4618      	movlt	r0, r3
 800298e:	e7a3      	b.n	80028d8 <_printf_i+0x130>
 8002990:	2301      	movs	r3, #1
 8002992:	464a      	mov	r2, r9
 8002994:	4639      	mov	r1, r7
 8002996:	4630      	mov	r0, r6
 8002998:	47c0      	blx	r8
 800299a:	3001      	adds	r0, #1
 800299c:	d09a      	beq.n	80028d4 <_printf_i+0x12c>
 800299e:	3501      	adds	r5, #1
 80029a0:	68e3      	ldr	r3, [r4, #12]
 80029a2:	9a03      	ldr	r2, [sp, #12]
 80029a4:	1a9b      	subs	r3, r3, r2
 80029a6:	42ab      	cmp	r3, r5
 80029a8:	dcf2      	bgt.n	8002990 <_printf_i+0x1e8>
 80029aa:	e7eb      	b.n	8002984 <_printf_i+0x1dc>
 80029ac:	2500      	movs	r5, #0
 80029ae:	f104 0919 	add.w	r9, r4, #25
 80029b2:	e7f5      	b.n	80029a0 <_printf_i+0x1f8>
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d1ac      	bne.n	8002912 <_printf_i+0x16a>
 80029b8:	7803      	ldrb	r3, [r0, #0]
 80029ba:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80029be:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80029c2:	e76c      	b.n	800289e <_printf_i+0xf6>
 80029c4:	08002c23 	.word	0x08002c23
 80029c8:	08002c34 	.word	0x08002c34

080029cc <memcpy>:
 80029cc:	b510      	push	{r4, lr}
 80029ce:	1e43      	subs	r3, r0, #1
 80029d0:	440a      	add	r2, r1
 80029d2:	4291      	cmp	r1, r2
 80029d4:	d100      	bne.n	80029d8 <memcpy+0xc>
 80029d6:	bd10      	pop	{r4, pc}
 80029d8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80029dc:	f803 4f01 	strb.w	r4, [r3, #1]!
 80029e0:	e7f7      	b.n	80029d2 <memcpy+0x6>

080029e2 <memmove>:
 80029e2:	4288      	cmp	r0, r1
 80029e4:	b510      	push	{r4, lr}
 80029e6:	eb01 0302 	add.w	r3, r1, r2
 80029ea:	d807      	bhi.n	80029fc <memmove+0x1a>
 80029ec:	1e42      	subs	r2, r0, #1
 80029ee:	4299      	cmp	r1, r3
 80029f0:	d00a      	beq.n	8002a08 <memmove+0x26>
 80029f2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80029f6:	f802 4f01 	strb.w	r4, [r2, #1]!
 80029fa:	e7f8      	b.n	80029ee <memmove+0xc>
 80029fc:	4283      	cmp	r3, r0
 80029fe:	d9f5      	bls.n	80029ec <memmove+0xa>
 8002a00:	1881      	adds	r1, r0, r2
 8002a02:	1ad2      	subs	r2, r2, r3
 8002a04:	42d3      	cmn	r3, r2
 8002a06:	d100      	bne.n	8002a0a <memmove+0x28>
 8002a08:	bd10      	pop	{r4, pc}
 8002a0a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8002a0e:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8002a12:	e7f7      	b.n	8002a04 <memmove+0x22>

08002a14 <_free_r>:
 8002a14:	b538      	push	{r3, r4, r5, lr}
 8002a16:	4605      	mov	r5, r0
 8002a18:	2900      	cmp	r1, #0
 8002a1a:	d045      	beq.n	8002aa8 <_free_r+0x94>
 8002a1c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002a20:	1f0c      	subs	r4, r1, #4
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	bfb8      	it	lt
 8002a26:	18e4      	addlt	r4, r4, r3
 8002a28:	f000 f8d2 	bl	8002bd0 <__malloc_lock>
 8002a2c:	4a1f      	ldr	r2, [pc, #124]	; (8002aac <_free_r+0x98>)
 8002a2e:	6813      	ldr	r3, [r2, #0]
 8002a30:	4610      	mov	r0, r2
 8002a32:	b933      	cbnz	r3, 8002a42 <_free_r+0x2e>
 8002a34:	6063      	str	r3, [r4, #4]
 8002a36:	6014      	str	r4, [r2, #0]
 8002a38:	4628      	mov	r0, r5
 8002a3a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002a3e:	f000 b8c8 	b.w	8002bd2 <__malloc_unlock>
 8002a42:	42a3      	cmp	r3, r4
 8002a44:	d90c      	bls.n	8002a60 <_free_r+0x4c>
 8002a46:	6821      	ldr	r1, [r4, #0]
 8002a48:	1862      	adds	r2, r4, r1
 8002a4a:	4293      	cmp	r3, r2
 8002a4c:	bf04      	itt	eq
 8002a4e:	681a      	ldreq	r2, [r3, #0]
 8002a50:	685b      	ldreq	r3, [r3, #4]
 8002a52:	6063      	str	r3, [r4, #4]
 8002a54:	bf04      	itt	eq
 8002a56:	1852      	addeq	r2, r2, r1
 8002a58:	6022      	streq	r2, [r4, #0]
 8002a5a:	6004      	str	r4, [r0, #0]
 8002a5c:	e7ec      	b.n	8002a38 <_free_r+0x24>
 8002a5e:	4613      	mov	r3, r2
 8002a60:	685a      	ldr	r2, [r3, #4]
 8002a62:	b10a      	cbz	r2, 8002a68 <_free_r+0x54>
 8002a64:	42a2      	cmp	r2, r4
 8002a66:	d9fa      	bls.n	8002a5e <_free_r+0x4a>
 8002a68:	6819      	ldr	r1, [r3, #0]
 8002a6a:	1858      	adds	r0, r3, r1
 8002a6c:	42a0      	cmp	r0, r4
 8002a6e:	d10b      	bne.n	8002a88 <_free_r+0x74>
 8002a70:	6820      	ldr	r0, [r4, #0]
 8002a72:	4401      	add	r1, r0
 8002a74:	1858      	adds	r0, r3, r1
 8002a76:	4282      	cmp	r2, r0
 8002a78:	6019      	str	r1, [r3, #0]
 8002a7a:	d1dd      	bne.n	8002a38 <_free_r+0x24>
 8002a7c:	6810      	ldr	r0, [r2, #0]
 8002a7e:	6852      	ldr	r2, [r2, #4]
 8002a80:	605a      	str	r2, [r3, #4]
 8002a82:	4401      	add	r1, r0
 8002a84:	6019      	str	r1, [r3, #0]
 8002a86:	e7d7      	b.n	8002a38 <_free_r+0x24>
 8002a88:	d902      	bls.n	8002a90 <_free_r+0x7c>
 8002a8a:	230c      	movs	r3, #12
 8002a8c:	602b      	str	r3, [r5, #0]
 8002a8e:	e7d3      	b.n	8002a38 <_free_r+0x24>
 8002a90:	6820      	ldr	r0, [r4, #0]
 8002a92:	1821      	adds	r1, r4, r0
 8002a94:	428a      	cmp	r2, r1
 8002a96:	bf04      	itt	eq
 8002a98:	6811      	ldreq	r1, [r2, #0]
 8002a9a:	6852      	ldreq	r2, [r2, #4]
 8002a9c:	6062      	str	r2, [r4, #4]
 8002a9e:	bf04      	itt	eq
 8002aa0:	1809      	addeq	r1, r1, r0
 8002aa2:	6021      	streq	r1, [r4, #0]
 8002aa4:	605c      	str	r4, [r3, #4]
 8002aa6:	e7c7      	b.n	8002a38 <_free_r+0x24>
 8002aa8:	bd38      	pop	{r3, r4, r5, pc}
 8002aaa:	bf00      	nop
 8002aac:	200000b4 	.word	0x200000b4

08002ab0 <_malloc_r>:
 8002ab0:	b570      	push	{r4, r5, r6, lr}
 8002ab2:	1ccd      	adds	r5, r1, #3
 8002ab4:	f025 0503 	bic.w	r5, r5, #3
 8002ab8:	3508      	adds	r5, #8
 8002aba:	2d0c      	cmp	r5, #12
 8002abc:	bf38      	it	cc
 8002abe:	250c      	movcc	r5, #12
 8002ac0:	2d00      	cmp	r5, #0
 8002ac2:	4606      	mov	r6, r0
 8002ac4:	db01      	blt.n	8002aca <_malloc_r+0x1a>
 8002ac6:	42a9      	cmp	r1, r5
 8002ac8:	d903      	bls.n	8002ad2 <_malloc_r+0x22>
 8002aca:	230c      	movs	r3, #12
 8002acc:	6033      	str	r3, [r6, #0]
 8002ace:	2000      	movs	r0, #0
 8002ad0:	bd70      	pop	{r4, r5, r6, pc}
 8002ad2:	f000 f87d 	bl	8002bd0 <__malloc_lock>
 8002ad6:	4a21      	ldr	r2, [pc, #132]	; (8002b5c <_malloc_r+0xac>)
 8002ad8:	6814      	ldr	r4, [r2, #0]
 8002ada:	4621      	mov	r1, r4
 8002adc:	b991      	cbnz	r1, 8002b04 <_malloc_r+0x54>
 8002ade:	4c20      	ldr	r4, [pc, #128]	; (8002b60 <_malloc_r+0xb0>)
 8002ae0:	6823      	ldr	r3, [r4, #0]
 8002ae2:	b91b      	cbnz	r3, 8002aec <_malloc_r+0x3c>
 8002ae4:	4630      	mov	r0, r6
 8002ae6:	f000 f863 	bl	8002bb0 <_sbrk_r>
 8002aea:	6020      	str	r0, [r4, #0]
 8002aec:	4629      	mov	r1, r5
 8002aee:	4630      	mov	r0, r6
 8002af0:	f000 f85e 	bl	8002bb0 <_sbrk_r>
 8002af4:	1c43      	adds	r3, r0, #1
 8002af6:	d124      	bne.n	8002b42 <_malloc_r+0x92>
 8002af8:	230c      	movs	r3, #12
 8002afa:	6033      	str	r3, [r6, #0]
 8002afc:	4630      	mov	r0, r6
 8002afe:	f000 f868 	bl	8002bd2 <__malloc_unlock>
 8002b02:	e7e4      	b.n	8002ace <_malloc_r+0x1e>
 8002b04:	680b      	ldr	r3, [r1, #0]
 8002b06:	1b5b      	subs	r3, r3, r5
 8002b08:	d418      	bmi.n	8002b3c <_malloc_r+0x8c>
 8002b0a:	2b0b      	cmp	r3, #11
 8002b0c:	d90f      	bls.n	8002b2e <_malloc_r+0x7e>
 8002b0e:	600b      	str	r3, [r1, #0]
 8002b10:	50cd      	str	r5, [r1, r3]
 8002b12:	18cc      	adds	r4, r1, r3
 8002b14:	4630      	mov	r0, r6
 8002b16:	f000 f85c 	bl	8002bd2 <__malloc_unlock>
 8002b1a:	f104 000b 	add.w	r0, r4, #11
 8002b1e:	1d23      	adds	r3, r4, #4
 8002b20:	f020 0007 	bic.w	r0, r0, #7
 8002b24:	1ac3      	subs	r3, r0, r3
 8002b26:	d0d3      	beq.n	8002ad0 <_malloc_r+0x20>
 8002b28:	425a      	negs	r2, r3
 8002b2a:	50e2      	str	r2, [r4, r3]
 8002b2c:	e7d0      	b.n	8002ad0 <_malloc_r+0x20>
 8002b2e:	428c      	cmp	r4, r1
 8002b30:	684b      	ldr	r3, [r1, #4]
 8002b32:	bf16      	itet	ne
 8002b34:	6063      	strne	r3, [r4, #4]
 8002b36:	6013      	streq	r3, [r2, #0]
 8002b38:	460c      	movne	r4, r1
 8002b3a:	e7eb      	b.n	8002b14 <_malloc_r+0x64>
 8002b3c:	460c      	mov	r4, r1
 8002b3e:	6849      	ldr	r1, [r1, #4]
 8002b40:	e7cc      	b.n	8002adc <_malloc_r+0x2c>
 8002b42:	1cc4      	adds	r4, r0, #3
 8002b44:	f024 0403 	bic.w	r4, r4, #3
 8002b48:	42a0      	cmp	r0, r4
 8002b4a:	d005      	beq.n	8002b58 <_malloc_r+0xa8>
 8002b4c:	1a21      	subs	r1, r4, r0
 8002b4e:	4630      	mov	r0, r6
 8002b50:	f000 f82e 	bl	8002bb0 <_sbrk_r>
 8002b54:	3001      	adds	r0, #1
 8002b56:	d0cf      	beq.n	8002af8 <_malloc_r+0x48>
 8002b58:	6025      	str	r5, [r4, #0]
 8002b5a:	e7db      	b.n	8002b14 <_malloc_r+0x64>
 8002b5c:	200000b4 	.word	0x200000b4
 8002b60:	200000b8 	.word	0x200000b8

08002b64 <_realloc_r>:
 8002b64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b66:	4607      	mov	r7, r0
 8002b68:	4614      	mov	r4, r2
 8002b6a:	460e      	mov	r6, r1
 8002b6c:	b921      	cbnz	r1, 8002b78 <_realloc_r+0x14>
 8002b6e:	4611      	mov	r1, r2
 8002b70:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8002b74:	f7ff bf9c 	b.w	8002ab0 <_malloc_r>
 8002b78:	b922      	cbnz	r2, 8002b84 <_realloc_r+0x20>
 8002b7a:	f7ff ff4b 	bl	8002a14 <_free_r>
 8002b7e:	4625      	mov	r5, r4
 8002b80:	4628      	mov	r0, r5
 8002b82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002b84:	f000 f826 	bl	8002bd4 <_malloc_usable_size_r>
 8002b88:	42a0      	cmp	r0, r4
 8002b8a:	d20f      	bcs.n	8002bac <_realloc_r+0x48>
 8002b8c:	4621      	mov	r1, r4
 8002b8e:	4638      	mov	r0, r7
 8002b90:	f7ff ff8e 	bl	8002ab0 <_malloc_r>
 8002b94:	4605      	mov	r5, r0
 8002b96:	2800      	cmp	r0, #0
 8002b98:	d0f2      	beq.n	8002b80 <_realloc_r+0x1c>
 8002b9a:	4631      	mov	r1, r6
 8002b9c:	4622      	mov	r2, r4
 8002b9e:	f7ff ff15 	bl	80029cc <memcpy>
 8002ba2:	4631      	mov	r1, r6
 8002ba4:	4638      	mov	r0, r7
 8002ba6:	f7ff ff35 	bl	8002a14 <_free_r>
 8002baa:	e7e9      	b.n	8002b80 <_realloc_r+0x1c>
 8002bac:	4635      	mov	r5, r6
 8002bae:	e7e7      	b.n	8002b80 <_realloc_r+0x1c>

08002bb0 <_sbrk_r>:
 8002bb0:	b538      	push	{r3, r4, r5, lr}
 8002bb2:	4c06      	ldr	r4, [pc, #24]	; (8002bcc <_sbrk_r+0x1c>)
 8002bb4:	2300      	movs	r3, #0
 8002bb6:	4605      	mov	r5, r0
 8002bb8:	4608      	mov	r0, r1
 8002bba:	6023      	str	r3, [r4, #0]
 8002bbc:	f7ff fb8c 	bl	80022d8 <_sbrk>
 8002bc0:	1c43      	adds	r3, r0, #1
 8002bc2:	d102      	bne.n	8002bca <_sbrk_r+0x1a>
 8002bc4:	6823      	ldr	r3, [r4, #0]
 8002bc6:	b103      	cbz	r3, 8002bca <_sbrk_r+0x1a>
 8002bc8:	602b      	str	r3, [r5, #0]
 8002bca:	bd38      	pop	{r3, r4, r5, pc}
 8002bcc:	2000010c 	.word	0x2000010c

08002bd0 <__malloc_lock>:
 8002bd0:	4770      	bx	lr

08002bd2 <__malloc_unlock>:
 8002bd2:	4770      	bx	lr

08002bd4 <_malloc_usable_size_r>:
 8002bd4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002bd8:	1f18      	subs	r0, r3, #4
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	bfbc      	itt	lt
 8002bde:	580b      	ldrlt	r3, [r1, r0]
 8002be0:	18c0      	addlt	r0, r0, r3
 8002be2:	4770      	bx	lr

08002be4 <_init>:
 8002be4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002be6:	bf00      	nop
 8002be8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002bea:	bc08      	pop	{r3}
 8002bec:	469e      	mov	lr, r3
 8002bee:	4770      	bx	lr

08002bf0 <_fini>:
 8002bf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002bf2:	bf00      	nop
 8002bf4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002bf6:	bc08      	pop	{r3}
 8002bf8:	469e      	mov	lr, r3
 8002bfa:	4770      	bx	lr
