
stm32f446xx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002b50  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c8  08002d20  08002d20  00012d20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002de8  08002de8  00020084  2**0
                  CONTENTS
  4 .ARM          00000000  08002de8  08002de8  00020084  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002de8  08002de8  00020084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002de8  08002de8  00012de8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002dec  08002dec  00012dec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  08002df0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000110  20000084  08002e74  00020084  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000194  08002e74  00020194  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000533c  00000000  00000000  000200ae  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000cee  00000000  00000000  000253ea  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000248  00000000  00000000  000260d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000001e0  00000000  00000000  00026320  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00003e8e  00000000  00000000  00026500  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00002e64  00000000  00000000  0002a38e  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0000c6ea  00000000  00000000  0002d1f2  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000398dc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001330  00000000  00000000  00039958  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000084 	.word	0x20000084
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08002d08 	.word	0x08002d08

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000088 	.word	0x20000088
 800020c:	08002d08 	.word	0x08002d08

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_frsub>:
 80002c0:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__addsf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_fsub>:
 80002c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080002cc <__addsf3>:
 80002cc:	0042      	lsls	r2, r0, #1
 80002ce:	bf1f      	itttt	ne
 80002d0:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80002d4:	ea92 0f03 	teqne	r2, r3
 80002d8:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80002dc:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80002e0:	d06a      	beq.n	80003b8 <__addsf3+0xec>
 80002e2:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80002e6:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80002ea:	bfc1      	itttt	gt
 80002ec:	18d2      	addgt	r2, r2, r3
 80002ee:	4041      	eorgt	r1, r0
 80002f0:	4048      	eorgt	r0, r1
 80002f2:	4041      	eorgt	r1, r0
 80002f4:	bfb8      	it	lt
 80002f6:	425b      	neglt	r3, r3
 80002f8:	2b19      	cmp	r3, #25
 80002fa:	bf88      	it	hi
 80002fc:	4770      	bxhi	lr
 80002fe:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000302:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000306:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 800030a:	bf18      	it	ne
 800030c:	4240      	negne	r0, r0
 800030e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000312:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000316:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 800031a:	bf18      	it	ne
 800031c:	4249      	negne	r1, r1
 800031e:	ea92 0f03 	teq	r2, r3
 8000322:	d03f      	beq.n	80003a4 <__addsf3+0xd8>
 8000324:	f1a2 0201 	sub.w	r2, r2, #1
 8000328:	fa41 fc03 	asr.w	ip, r1, r3
 800032c:	eb10 000c 	adds.w	r0, r0, ip
 8000330:	f1c3 0320 	rsb	r3, r3, #32
 8000334:	fa01 f103 	lsl.w	r1, r1, r3
 8000338:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800033c:	d502      	bpl.n	8000344 <__addsf3+0x78>
 800033e:	4249      	negs	r1, r1
 8000340:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000344:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000348:	d313      	bcc.n	8000372 <__addsf3+0xa6>
 800034a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800034e:	d306      	bcc.n	800035e <__addsf3+0x92>
 8000350:	0840      	lsrs	r0, r0, #1
 8000352:	ea4f 0131 	mov.w	r1, r1, rrx
 8000356:	f102 0201 	add.w	r2, r2, #1
 800035a:	2afe      	cmp	r2, #254	; 0xfe
 800035c:	d251      	bcs.n	8000402 <__addsf3+0x136>
 800035e:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000362:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000366:	bf08      	it	eq
 8000368:	f020 0001 	biceq.w	r0, r0, #1
 800036c:	ea40 0003 	orr.w	r0, r0, r3
 8000370:	4770      	bx	lr
 8000372:	0049      	lsls	r1, r1, #1
 8000374:	eb40 0000 	adc.w	r0, r0, r0
 8000378:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 800037c:	f1a2 0201 	sub.w	r2, r2, #1
 8000380:	d1ed      	bne.n	800035e <__addsf3+0x92>
 8000382:	fab0 fc80 	clz	ip, r0
 8000386:	f1ac 0c08 	sub.w	ip, ip, #8
 800038a:	ebb2 020c 	subs.w	r2, r2, ip
 800038e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000392:	bfaa      	itet	ge
 8000394:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000398:	4252      	neglt	r2, r2
 800039a:	4318      	orrge	r0, r3
 800039c:	bfbc      	itt	lt
 800039e:	40d0      	lsrlt	r0, r2
 80003a0:	4318      	orrlt	r0, r3
 80003a2:	4770      	bx	lr
 80003a4:	f092 0f00 	teq	r2, #0
 80003a8:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 80003ac:	bf06      	itte	eq
 80003ae:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 80003b2:	3201      	addeq	r2, #1
 80003b4:	3b01      	subne	r3, #1
 80003b6:	e7b5      	b.n	8000324 <__addsf3+0x58>
 80003b8:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80003bc:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80003c0:	bf18      	it	ne
 80003c2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80003c6:	d021      	beq.n	800040c <__addsf3+0x140>
 80003c8:	ea92 0f03 	teq	r2, r3
 80003cc:	d004      	beq.n	80003d8 <__addsf3+0x10c>
 80003ce:	f092 0f00 	teq	r2, #0
 80003d2:	bf08      	it	eq
 80003d4:	4608      	moveq	r0, r1
 80003d6:	4770      	bx	lr
 80003d8:	ea90 0f01 	teq	r0, r1
 80003dc:	bf1c      	itt	ne
 80003de:	2000      	movne	r0, #0
 80003e0:	4770      	bxne	lr
 80003e2:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 80003e6:	d104      	bne.n	80003f2 <__addsf3+0x126>
 80003e8:	0040      	lsls	r0, r0, #1
 80003ea:	bf28      	it	cs
 80003ec:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 80003f0:	4770      	bx	lr
 80003f2:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 80003f6:	bf3c      	itt	cc
 80003f8:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 80003fc:	4770      	bxcc	lr
 80003fe:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000402:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000406:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800040a:	4770      	bx	lr
 800040c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000410:	bf16      	itet	ne
 8000412:	4608      	movne	r0, r1
 8000414:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000418:	4601      	movne	r1, r0
 800041a:	0242      	lsls	r2, r0, #9
 800041c:	bf06      	itte	eq
 800041e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000422:	ea90 0f01 	teqeq	r0, r1
 8000426:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 800042a:	4770      	bx	lr

0800042c <__aeabi_ui2f>:
 800042c:	f04f 0300 	mov.w	r3, #0
 8000430:	e004      	b.n	800043c <__aeabi_i2f+0x8>
 8000432:	bf00      	nop

08000434 <__aeabi_i2f>:
 8000434:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000438:	bf48      	it	mi
 800043a:	4240      	negmi	r0, r0
 800043c:	ea5f 0c00 	movs.w	ip, r0
 8000440:	bf08      	it	eq
 8000442:	4770      	bxeq	lr
 8000444:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000448:	4601      	mov	r1, r0
 800044a:	f04f 0000 	mov.w	r0, #0
 800044e:	e01c      	b.n	800048a <__aeabi_l2f+0x2a>

08000450 <__aeabi_ul2f>:
 8000450:	ea50 0201 	orrs.w	r2, r0, r1
 8000454:	bf08      	it	eq
 8000456:	4770      	bxeq	lr
 8000458:	f04f 0300 	mov.w	r3, #0
 800045c:	e00a      	b.n	8000474 <__aeabi_l2f+0x14>
 800045e:	bf00      	nop

08000460 <__aeabi_l2f>:
 8000460:	ea50 0201 	orrs.w	r2, r0, r1
 8000464:	bf08      	it	eq
 8000466:	4770      	bxeq	lr
 8000468:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 800046c:	d502      	bpl.n	8000474 <__aeabi_l2f+0x14>
 800046e:	4240      	negs	r0, r0
 8000470:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000474:	ea5f 0c01 	movs.w	ip, r1
 8000478:	bf02      	ittt	eq
 800047a:	4684      	moveq	ip, r0
 800047c:	4601      	moveq	r1, r0
 800047e:	2000      	moveq	r0, #0
 8000480:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000484:	bf08      	it	eq
 8000486:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 800048a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800048e:	fabc f28c 	clz	r2, ip
 8000492:	3a08      	subs	r2, #8
 8000494:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000498:	db10      	blt.n	80004bc <__aeabi_l2f+0x5c>
 800049a:	fa01 fc02 	lsl.w	ip, r1, r2
 800049e:	4463      	add	r3, ip
 80004a0:	fa00 fc02 	lsl.w	ip, r0, r2
 80004a4:	f1c2 0220 	rsb	r2, r2, #32
 80004a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004ac:	fa20 f202 	lsr.w	r2, r0, r2
 80004b0:	eb43 0002 	adc.w	r0, r3, r2
 80004b4:	bf08      	it	eq
 80004b6:	f020 0001 	biceq.w	r0, r0, #1
 80004ba:	4770      	bx	lr
 80004bc:	f102 0220 	add.w	r2, r2, #32
 80004c0:	fa01 fc02 	lsl.w	ip, r1, r2
 80004c4:	f1c2 0220 	rsb	r2, r2, #32
 80004c8:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 80004cc:	fa21 f202 	lsr.w	r2, r1, r2
 80004d0:	eb43 0002 	adc.w	r0, r3, r2
 80004d4:	bf08      	it	eq
 80004d6:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80004da:	4770      	bx	lr

080004dc <__aeabi_fmul>:
 80004dc:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004e0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80004e4:	bf1e      	ittt	ne
 80004e6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80004ea:	ea92 0f0c 	teqne	r2, ip
 80004ee:	ea93 0f0c 	teqne	r3, ip
 80004f2:	d06f      	beq.n	80005d4 <__aeabi_fmul+0xf8>
 80004f4:	441a      	add	r2, r3
 80004f6:	ea80 0c01 	eor.w	ip, r0, r1
 80004fa:	0240      	lsls	r0, r0, #9
 80004fc:	bf18      	it	ne
 80004fe:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000502:	d01e      	beq.n	8000542 <__aeabi_fmul+0x66>
 8000504:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000508:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 800050c:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000510:	fba0 3101 	umull	r3, r1, r0, r1
 8000514:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000518:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 800051c:	bf3e      	ittt	cc
 800051e:	0049      	lslcc	r1, r1, #1
 8000520:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000524:	005b      	lslcc	r3, r3, #1
 8000526:	ea40 0001 	orr.w	r0, r0, r1
 800052a:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 800052e:	2afd      	cmp	r2, #253	; 0xfd
 8000530:	d81d      	bhi.n	800056e <__aeabi_fmul+0x92>
 8000532:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000536:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800053a:	bf08      	it	eq
 800053c:	f020 0001 	biceq.w	r0, r0, #1
 8000540:	4770      	bx	lr
 8000542:	f090 0f00 	teq	r0, #0
 8000546:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 800054a:	bf08      	it	eq
 800054c:	0249      	lsleq	r1, r1, #9
 800054e:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000552:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000556:	3a7f      	subs	r2, #127	; 0x7f
 8000558:	bfc2      	ittt	gt
 800055a:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 800055e:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000562:	4770      	bxgt	lr
 8000564:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000568:	f04f 0300 	mov.w	r3, #0
 800056c:	3a01      	subs	r2, #1
 800056e:	dc5d      	bgt.n	800062c <__aeabi_fmul+0x150>
 8000570:	f112 0f19 	cmn.w	r2, #25
 8000574:	bfdc      	itt	le
 8000576:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 800057a:	4770      	bxle	lr
 800057c:	f1c2 0200 	rsb	r2, r2, #0
 8000580:	0041      	lsls	r1, r0, #1
 8000582:	fa21 f102 	lsr.w	r1, r1, r2
 8000586:	f1c2 0220 	rsb	r2, r2, #32
 800058a:	fa00 fc02 	lsl.w	ip, r0, r2
 800058e:	ea5f 0031 	movs.w	r0, r1, rrx
 8000592:	f140 0000 	adc.w	r0, r0, #0
 8000596:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800059a:	bf08      	it	eq
 800059c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80005a0:	4770      	bx	lr
 80005a2:	f092 0f00 	teq	r2, #0
 80005a6:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80005aa:	bf02      	ittt	eq
 80005ac:	0040      	lsleq	r0, r0, #1
 80005ae:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80005b2:	3a01      	subeq	r2, #1
 80005b4:	d0f9      	beq.n	80005aa <__aeabi_fmul+0xce>
 80005b6:	ea40 000c 	orr.w	r0, r0, ip
 80005ba:	f093 0f00 	teq	r3, #0
 80005be:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80005c2:	bf02      	ittt	eq
 80005c4:	0049      	lsleq	r1, r1, #1
 80005c6:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80005ca:	3b01      	subeq	r3, #1
 80005cc:	d0f9      	beq.n	80005c2 <__aeabi_fmul+0xe6>
 80005ce:	ea41 010c 	orr.w	r1, r1, ip
 80005d2:	e78f      	b.n	80004f4 <__aeabi_fmul+0x18>
 80005d4:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005d8:	ea92 0f0c 	teq	r2, ip
 80005dc:	bf18      	it	ne
 80005de:	ea93 0f0c 	teqne	r3, ip
 80005e2:	d00a      	beq.n	80005fa <__aeabi_fmul+0x11e>
 80005e4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80005e8:	bf18      	it	ne
 80005ea:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80005ee:	d1d8      	bne.n	80005a2 <__aeabi_fmul+0xc6>
 80005f0:	ea80 0001 	eor.w	r0, r0, r1
 80005f4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80005f8:	4770      	bx	lr
 80005fa:	f090 0f00 	teq	r0, #0
 80005fe:	bf17      	itett	ne
 8000600:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000604:	4608      	moveq	r0, r1
 8000606:	f091 0f00 	teqne	r1, #0
 800060a:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 800060e:	d014      	beq.n	800063a <__aeabi_fmul+0x15e>
 8000610:	ea92 0f0c 	teq	r2, ip
 8000614:	d101      	bne.n	800061a <__aeabi_fmul+0x13e>
 8000616:	0242      	lsls	r2, r0, #9
 8000618:	d10f      	bne.n	800063a <__aeabi_fmul+0x15e>
 800061a:	ea93 0f0c 	teq	r3, ip
 800061e:	d103      	bne.n	8000628 <__aeabi_fmul+0x14c>
 8000620:	024b      	lsls	r3, r1, #9
 8000622:	bf18      	it	ne
 8000624:	4608      	movne	r0, r1
 8000626:	d108      	bne.n	800063a <__aeabi_fmul+0x15e>
 8000628:	ea80 0001 	eor.w	r0, r0, r1
 800062c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000630:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000634:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000638:	4770      	bx	lr
 800063a:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 800063e:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000642:	4770      	bx	lr

08000644 <__aeabi_fdiv>:
 8000644:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000648:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 800064c:	bf1e      	ittt	ne
 800064e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000652:	ea92 0f0c 	teqne	r2, ip
 8000656:	ea93 0f0c 	teqne	r3, ip
 800065a:	d069      	beq.n	8000730 <__aeabi_fdiv+0xec>
 800065c:	eba2 0203 	sub.w	r2, r2, r3
 8000660:	ea80 0c01 	eor.w	ip, r0, r1
 8000664:	0249      	lsls	r1, r1, #9
 8000666:	ea4f 2040 	mov.w	r0, r0, lsl #9
 800066a:	d037      	beq.n	80006dc <__aeabi_fdiv+0x98>
 800066c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000670:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000674:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000678:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 800067c:	428b      	cmp	r3, r1
 800067e:	bf38      	it	cc
 8000680:	005b      	lslcc	r3, r3, #1
 8000682:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000686:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 800068a:	428b      	cmp	r3, r1
 800068c:	bf24      	itt	cs
 800068e:	1a5b      	subcs	r3, r3, r1
 8000690:	ea40 000c 	orrcs.w	r0, r0, ip
 8000694:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000698:	bf24      	itt	cs
 800069a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800069e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80006a2:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 80006a6:	bf24      	itt	cs
 80006a8:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 80006ac:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80006b0:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 80006b4:	bf24      	itt	cs
 80006b6:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 80006ba:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80006be:	011b      	lsls	r3, r3, #4
 80006c0:	bf18      	it	ne
 80006c2:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 80006c6:	d1e0      	bne.n	800068a <__aeabi_fdiv+0x46>
 80006c8:	2afd      	cmp	r2, #253	; 0xfd
 80006ca:	f63f af50 	bhi.w	800056e <__aeabi_fmul+0x92>
 80006ce:	428b      	cmp	r3, r1
 80006d0:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80006d4:	bf08      	it	eq
 80006d6:	f020 0001 	biceq.w	r0, r0, #1
 80006da:	4770      	bx	lr
 80006dc:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80006e0:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80006e4:	327f      	adds	r2, #127	; 0x7f
 80006e6:	bfc2      	ittt	gt
 80006e8:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80006ec:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80006f0:	4770      	bxgt	lr
 80006f2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80006f6:	f04f 0300 	mov.w	r3, #0
 80006fa:	3a01      	subs	r2, #1
 80006fc:	e737      	b.n	800056e <__aeabi_fmul+0x92>
 80006fe:	f092 0f00 	teq	r2, #0
 8000702:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000706:	bf02      	ittt	eq
 8000708:	0040      	lsleq	r0, r0, #1
 800070a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800070e:	3a01      	subeq	r2, #1
 8000710:	d0f9      	beq.n	8000706 <__aeabi_fdiv+0xc2>
 8000712:	ea40 000c 	orr.w	r0, r0, ip
 8000716:	f093 0f00 	teq	r3, #0
 800071a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800071e:	bf02      	ittt	eq
 8000720:	0049      	lsleq	r1, r1, #1
 8000722:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000726:	3b01      	subeq	r3, #1
 8000728:	d0f9      	beq.n	800071e <__aeabi_fdiv+0xda>
 800072a:	ea41 010c 	orr.w	r1, r1, ip
 800072e:	e795      	b.n	800065c <__aeabi_fdiv+0x18>
 8000730:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000734:	ea92 0f0c 	teq	r2, ip
 8000738:	d108      	bne.n	800074c <__aeabi_fdiv+0x108>
 800073a:	0242      	lsls	r2, r0, #9
 800073c:	f47f af7d 	bne.w	800063a <__aeabi_fmul+0x15e>
 8000740:	ea93 0f0c 	teq	r3, ip
 8000744:	f47f af70 	bne.w	8000628 <__aeabi_fmul+0x14c>
 8000748:	4608      	mov	r0, r1
 800074a:	e776      	b.n	800063a <__aeabi_fmul+0x15e>
 800074c:	ea93 0f0c 	teq	r3, ip
 8000750:	d104      	bne.n	800075c <__aeabi_fdiv+0x118>
 8000752:	024b      	lsls	r3, r1, #9
 8000754:	f43f af4c 	beq.w	80005f0 <__aeabi_fmul+0x114>
 8000758:	4608      	mov	r0, r1
 800075a:	e76e      	b.n	800063a <__aeabi_fmul+0x15e>
 800075c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000760:	bf18      	it	ne
 8000762:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000766:	d1ca      	bne.n	80006fe <__aeabi_fdiv+0xba>
 8000768:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 800076c:	f47f af5c 	bne.w	8000628 <__aeabi_fmul+0x14c>
 8000770:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000774:	f47f af3c 	bne.w	80005f0 <__aeabi_fmul+0x114>
 8000778:	e75f      	b.n	800063a <__aeabi_fmul+0x15e>
 800077a:	bf00      	nop

0800077c <__aeabi_f2uiz>:
 800077c:	0042      	lsls	r2, r0, #1
 800077e:	d20e      	bcs.n	800079e <__aeabi_f2uiz+0x22>
 8000780:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000784:	d30b      	bcc.n	800079e <__aeabi_f2uiz+0x22>
 8000786:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800078a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800078e:	d409      	bmi.n	80007a4 <__aeabi_f2uiz+0x28>
 8000790:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000794:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000798:	fa23 f002 	lsr.w	r0, r3, r2
 800079c:	4770      	bx	lr
 800079e:	f04f 0000 	mov.w	r0, #0
 80007a2:	4770      	bx	lr
 80007a4:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80007a8:	d101      	bne.n	80007ae <__aeabi_f2uiz+0x32>
 80007aa:	0242      	lsls	r2, r0, #9
 80007ac:	d102      	bne.n	80007b4 <__aeabi_f2uiz+0x38>
 80007ae:	f04f 30ff 	mov.w	r0, #4294967295
 80007b2:	4770      	bx	lr
 80007b4:	f04f 0000 	mov.w	r0, #0
 80007b8:	4770      	bx	lr
 80007ba:	bf00      	nop

080007bc <ADC_PeriClockControl>:
 * Params: 		struct ADC_RegDef_t* *pADCx - ADC base address
 * 				uint8_t EnOrDi - Enable or disable value
 *
 */
void ADC_PeriClockControl(ADC_RegDef_t *pADCx, uint8_t EnOrDi)
{
 80007bc:	b480      	push	{r7}
 80007be:	b083      	sub	sp, #12
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	6078      	str	r0, [r7, #4]
 80007c4:	460b      	mov	r3, r1
 80007c6:	70fb      	strb	r3, [r7, #3]
	if (EnOrDi == ENABLE)
 80007c8:	78fb      	ldrb	r3, [r7, #3]
 80007ca:	2b01      	cmp	r3, #1
 80007cc:	d120      	bne.n	8000810 <ADC_PeriClockControl+0x54>
	{
		if (pADCx == ADC1)
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	4a22      	ldr	r2, [pc, #136]	; (800085c <ADC_PeriClockControl+0xa0>)
 80007d2:	4293      	cmp	r3, r2
 80007d4:	d106      	bne.n	80007e4 <ADC_PeriClockControl+0x28>
		{
			ADC1_PCLK_EN();
 80007d6:	4b22      	ldr	r3, [pc, #136]	; (8000860 <ADC_PeriClockControl+0xa4>)
 80007d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007da:	4a21      	ldr	r2, [pc, #132]	; (8000860 <ADC_PeriClockControl+0xa4>)
 80007dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80007e0:	6453      	str	r3, [r2, #68]	; 0x44
		else if (pADCx == ADC3)
		{
			ADC3_PCLK_DI();
		}
	}
}
 80007e2:	e035      	b.n	8000850 <ADC_PeriClockControl+0x94>
		else if (pADCx == ADC2)
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	4a1f      	ldr	r2, [pc, #124]	; (8000864 <ADC_PeriClockControl+0xa8>)
 80007e8:	4293      	cmp	r3, r2
 80007ea:	d106      	bne.n	80007fa <ADC_PeriClockControl+0x3e>
			ADC2_PCLK_EN();
 80007ec:	4b1c      	ldr	r3, [pc, #112]	; (8000860 <ADC_PeriClockControl+0xa4>)
 80007ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007f0:	4a1b      	ldr	r2, [pc, #108]	; (8000860 <ADC_PeriClockControl+0xa4>)
 80007f2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80007f6:	6453      	str	r3, [r2, #68]	; 0x44
}
 80007f8:	e02a      	b.n	8000850 <ADC_PeriClockControl+0x94>
		else if (pADCx == ADC3)
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	4a1a      	ldr	r2, [pc, #104]	; (8000868 <ADC_PeriClockControl+0xac>)
 80007fe:	4293      	cmp	r3, r2
 8000800:	d126      	bne.n	8000850 <ADC_PeriClockControl+0x94>
			ADC3_PCLK_EN();
 8000802:	4b17      	ldr	r3, [pc, #92]	; (8000860 <ADC_PeriClockControl+0xa4>)
 8000804:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000806:	4a16      	ldr	r2, [pc, #88]	; (8000860 <ADC_PeriClockControl+0xa4>)
 8000808:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800080c:	6453      	str	r3, [r2, #68]	; 0x44
}
 800080e:	e01f      	b.n	8000850 <ADC_PeriClockControl+0x94>
		if (pADCx == ADC1)
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	4a12      	ldr	r2, [pc, #72]	; (800085c <ADC_PeriClockControl+0xa0>)
 8000814:	4293      	cmp	r3, r2
 8000816:	d106      	bne.n	8000826 <ADC_PeriClockControl+0x6a>
			ADC1_PCLK_DI();
 8000818:	4b11      	ldr	r3, [pc, #68]	; (8000860 <ADC_PeriClockControl+0xa4>)
 800081a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800081c:	4a10      	ldr	r2, [pc, #64]	; (8000860 <ADC_PeriClockControl+0xa4>)
 800081e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000822:	6453      	str	r3, [r2, #68]	; 0x44
}
 8000824:	e014      	b.n	8000850 <ADC_PeriClockControl+0x94>
		else if (pADCx == ADC2)
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	4a0e      	ldr	r2, [pc, #56]	; (8000864 <ADC_PeriClockControl+0xa8>)
 800082a:	4293      	cmp	r3, r2
 800082c:	d106      	bne.n	800083c <ADC_PeriClockControl+0x80>
			ADC2_PCLK_DI();
 800082e:	4b0c      	ldr	r3, [pc, #48]	; (8000860 <ADC_PeriClockControl+0xa4>)
 8000830:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000832:	4a0b      	ldr	r2, [pc, #44]	; (8000860 <ADC_PeriClockControl+0xa4>)
 8000834:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8000838:	6453      	str	r3, [r2, #68]	; 0x44
}
 800083a:	e009      	b.n	8000850 <ADC_PeriClockControl+0x94>
		else if (pADCx == ADC3)
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	4a0a      	ldr	r2, [pc, #40]	; (8000868 <ADC_PeriClockControl+0xac>)
 8000840:	4293      	cmp	r3, r2
 8000842:	d105      	bne.n	8000850 <ADC_PeriClockControl+0x94>
			ADC3_PCLK_DI();
 8000844:	4b06      	ldr	r3, [pc, #24]	; (8000860 <ADC_PeriClockControl+0xa4>)
 8000846:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000848:	4a05      	ldr	r2, [pc, #20]	; (8000860 <ADC_PeriClockControl+0xa4>)
 800084a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800084e:	6453      	str	r3, [r2, #68]	; 0x44
}
 8000850:	bf00      	nop
 8000852:	370c      	adds	r7, #12
 8000854:	46bd      	mov	sp, r7
 8000856:	bc80      	pop	{r7}
 8000858:	4770      	bx	lr
 800085a:	bf00      	nop
 800085c:	40012000 	.word	0x40012000
 8000860:	40023800 	.word	0x40023800
 8000864:	40012100 	.word	0x40012100
 8000868:	40012200 	.word	0x40012200

0800086c <ADC_Init>:
 *
 * Params: 		struct ADC_Handle_t* *pADCx - ADC handle address
 *
 */
void ADC_Init(ADC_Handle_t *pADCxHandle)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	b082      	sub	sp, #8
 8000870:	af00      	add	r7, sp, #0
 8000872:	6078      	str	r0, [r7, #4]
	// 1. Enable clock signal to the ADC
	ADC_PeriClockControl(pADCxHandle->pADCx, ENABLE);
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	2101      	movs	r1, #1
 800087a:	4618      	mov	r0, r3
 800087c:	f7ff ff9e 	bl	80007bc <ADC_PeriClockControl>

	// 2. Set the ADC clock prescaler
	ADC_COMM->CCR |= (uint32_t)(pADCxHandle->ADC_Config.ADC_PreSc << 16);
 8000880:	4b11      	ldr	r3, [pc, #68]	; (80008c8 <ADC_Init+0x5c>)
 8000882:	685b      	ldr	r3, [r3, #4]
 8000884:	687a      	ldr	r2, [r7, #4]
 8000886:	7952      	ldrb	r2, [r2, #5]
 8000888:	0412      	lsls	r2, r2, #16
 800088a:	4611      	mov	r1, r2
 800088c:	4a0e      	ldr	r2, [pc, #56]	; (80008c8 <ADC_Init+0x5c>)
 800088e:	430b      	orrs	r3, r1
 8000890:	6053      	str	r3, [r2, #4]

	// 3. Set ADC resolution
	pADCxHandle->pADCx->CR1 |= (uint32_t)(pADCxHandle->ADC_Config.ADC_Res << 24);
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	681b      	ldr	r3, [r3, #0]
 8000896:	685a      	ldr	r2, [r3, #4]
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	791b      	ldrb	r3, [r3, #4]
 800089c:	061b      	lsls	r3, r3, #24
 800089e:	4619      	mov	r1, r3
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	681b      	ldr	r3, [r3, #0]
 80008a4:	430a      	orrs	r2, r1
 80008a6:	605a      	str	r2, [r3, #4]

	// 4. Set external trigger
	pADCxHandle->pADCx->CR2 |= (uint32_t)(pADCxHandle->ADC_Config.ADC_Ext_Trig << 28);
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	689a      	ldr	r2, [r3, #8]
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	799b      	ldrb	r3, [r3, #6]
 80008b2:	071b      	lsls	r3, r3, #28
 80008b4:	4619      	mov	r1, r3
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	681b      	ldr	r3, [r3, #0]
 80008ba:	430a      	orrs	r2, r1
 80008bc:	609a      	str	r2, [r3, #8]
}
 80008be:	bf00      	nop
 80008c0:	3708      	adds	r7, #8
 80008c2:	46bd      	mov	sp, r7
 80008c4:	bd80      	pop	{r7, pc}
 80008c6:	bf00      	nop
 80008c8:	40012300 	.word	0x40012300

080008cc <ADC_Read_Channel>:
 * 				uint8_t sampleCycles - Number of cycle to take reading
 * 				uint8_t adcReadMode - Take single reading or continuous mode
 *
 */
void ADC_Read_Channel(ADC_Handle_t *pADCxHandle, uint8_t ADC_CHAN, uint8_t ADC_SMP_CYC, uint8_t ADC_DAQ_MODE)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b084      	sub	sp, #16
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	6078      	str	r0, [r7, #4]
 80008d4:	4608      	mov	r0, r1
 80008d6:	4611      	mov	r1, r2
 80008d8:	461a      	mov	r2, r3
 80008da:	4603      	mov	r3, r0
 80008dc:	70fb      	strb	r3, [r7, #3]
 80008de:	460b      	mov	r3, r1
 80008e0:	70bb      	strb	r3, [r7, #2]
 80008e2:	4613      	mov	r3, r2
 80008e4:	707b      	strb	r3, [r7, #1]
	// 1. Set the ADC On (Note: several steps b/w this and 'START' to allow stabilization time
	pADCxHandle->pADCx->CR2 |= (1 << 0);
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	681b      	ldr	r3, [r3, #0]
 80008ea:	689a      	ldr	r2, [r3, #8]
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	f042 0201 	orr.w	r2, r2, #1
 80008f4:	609a      	str	r2, [r3, #8]

	// 2. Reset ADC continuous mode for single reading
	if (ADC_DAQ_MODE == ADC_SINGLE_READ)
 80008f6:	787b      	ldrb	r3, [r7, #1]
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d108      	bne.n	800090e <ADC_Read_Channel+0x42>
	{
		pADCxHandle->pADCx->CR2 &= ~(1 << 1);
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	689a      	ldr	r2, [r3, #8]
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	681b      	ldr	r3, [r3, #0]
 8000906:	f022 0202 	bic.w	r2, r2, #2
 800090a:	609a      	str	r2, [r3, #8]
 800090c:	e00a      	b.n	8000924 <ADC_Read_Channel+0x58>
	}
	else if (ADC_DAQ_MODE == ADC_CONT_READ)
 800090e:	787b      	ldrb	r3, [r7, #1]
 8000910:	2b01      	cmp	r3, #1
 8000912:	d107      	bne.n	8000924 <ADC_Read_Channel+0x58>
	{
		pADCxHandle->pADCx->CR2 |= (1 << 1);
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	689a      	ldr	r2, [r3, #8]
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	681b      	ldr	r3, [r3, #0]
 800091e:	f042 0202 	orr.w	r2, r2, #2
 8000922:	609a      	str	r2, [r3, #8]
	}

	// 3. Set number of channels in sequence to 1
	pADCxHandle->pADCx->SQR[0] &= ~(0xF << 20);
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	681b      	ldr	r3, [r3, #0]
 800092e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8000932:	62da      	str	r2, [r3, #44]	; 0x2c

	// 4. Load the channel to be read
	pADCxHandle->pADCx->SQR[2] = (ADC_CHAN << 0);
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	78fa      	ldrb	r2, [r7, #3]
 800093a:	635a      	str	r2, [r3, #52]	; 0x34

	// 5. Number of sampling cycles
	uint8_t temp1 = 1 - ADC_CHAN / 10, temp2 = ADC_CHAN % 9;
 800093c:	78fb      	ldrb	r3, [r7, #3]
 800093e:	4a1a      	ldr	r2, [pc, #104]	; (80009a8 <ADC_Read_Channel+0xdc>)
 8000940:	fba2 2303 	umull	r2, r3, r2, r3
 8000944:	08db      	lsrs	r3, r3, #3
 8000946:	b2db      	uxtb	r3, r3
 8000948:	f1c3 0301 	rsb	r3, r3, #1
 800094c:	73fb      	strb	r3, [r7, #15]
 800094e:	78fa      	ldrb	r2, [r7, #3]
 8000950:	4b16      	ldr	r3, [pc, #88]	; (80009ac <ADC_Read_Channel+0xe0>)
 8000952:	fba3 1302 	umull	r1, r3, r3, r2
 8000956:	0859      	lsrs	r1, r3, #1
 8000958:	460b      	mov	r3, r1
 800095a:	00db      	lsls	r3, r3, #3
 800095c:	440b      	add	r3, r1
 800095e:	1ad3      	subs	r3, r2, r3
 8000960:	73bb      	strb	r3, [r7, #14]
	pADCxHandle->pADCx->SMPR[temp1] = (ADC_SMP_CYC << temp2);
 8000962:	78ba      	ldrb	r2, [r7, #2]
 8000964:	7bbb      	ldrb	r3, [r7, #14]
 8000966:	fa02 f103 	lsl.w	r1, r2, r3
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	681a      	ldr	r2, [r3, #0]
 800096e:	7bfb      	ldrb	r3, [r7, #15]
 8000970:	3302      	adds	r3, #2
 8000972:	009b      	lsls	r3, r3, #2
 8000974:	4413      	add	r3, r2
 8000976:	6059      	str	r1, [r3, #4]

	// 6. Enable end of conversion interrupt
	pADCxHandle->pADCx->CR1 |= (1 << 5);
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	685a      	ldr	r2, [r3, #4]
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	681b      	ldr	r3, [r3, #0]
 8000982:	f042 0220 	orr.w	r2, r2, #32
 8000986:	605a      	str	r2, [r3, #4]
	ADC_IRQConfig(IRQ_POS_ADC, ENABLE);
 8000988:	2101      	movs	r1, #1
 800098a:	2012      	movs	r0, #18
 800098c:	f000 f822 	bl	80009d4 <ADC_IRQConfig>

	// 7. Set start conversion of regular channels
	pADCxHandle->pADCx->CR2 |= (1 << 30);
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	689a      	ldr	r2, [r3, #8]
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	681b      	ldr	r3, [r3, #0]
 800099a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800099e:	609a      	str	r2, [r3, #8]
}
 80009a0:	bf00      	nop
 80009a2:	3710      	adds	r7, #16
 80009a4:	46bd      	mov	sp, r7
 80009a6:	bd80      	pop	{r7, pc}
 80009a8:	cccccccd 	.word	0xcccccccd
 80009ac:	38e38e39 	.word	0x38e38e39

080009b0 <ADC_GetFlagStatus>:
 * Params: 		struct ADC_RegDef_t *pADCx - ADC base address
 * 				uint8_t ADC_FLAG - flag being checked
 *
 */
uint8_t ADC_GetFlagStatus(ADC_RegDef_t *pADCx, uint8_t ADC_FLAG)
{
 80009b0:	b480      	push	{r7}
 80009b2:	b083      	sub	sp, #12
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	6078      	str	r0, [r7, #4]
 80009b8:	460b      	mov	r3, r1
 80009ba:	70fb      	strb	r3, [r7, #3]
	return (pADCx->SR & ADC_FLAG);
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	b2da      	uxtb	r2, r3
 80009c2:	78fb      	ldrb	r3, [r7, #3]
 80009c4:	4013      	ands	r3, r2
 80009c6:	b2db      	uxtb	r3, r3
}
 80009c8:	4618      	mov	r0, r3
 80009ca:	370c      	adds	r7, #12
 80009cc:	46bd      	mov	sp, r7
 80009ce:	bc80      	pop	{r7}
 80009d0:	4770      	bx	lr
	...

080009d4 <ADC_IRQConfig>:
 * Params: 		uint8_t IRQNumber - IRQ position being configured
 * 				uint8_t Value - Enabling or disabling interrupt (1 or 0)
 *
 */
void ADC_IRQConfig(uint8_t IRQNumber, uint8_t EnOrDi)
{
 80009d4:	b490      	push	{r4, r7}
 80009d6:	b082      	sub	sp, #8
 80009d8:	af00      	add	r7, sp, #0
 80009da:	4603      	mov	r3, r0
 80009dc:	460a      	mov	r2, r1
 80009de:	71fb      	strb	r3, [r7, #7]
 80009e0:	4613      	mov	r3, r2
 80009e2:	71bb      	strb	r3, [r7, #6]
	if (EnOrDi == ENABLE)
 80009e4:	79bb      	ldrb	r3, [r7, #6]
 80009e6:	2b01      	cmp	r3, #1
 80009e8:	d113      	bne.n	8000a12 <ADC_IRQConfig+0x3e>
	{
		NVIC_ISER->ISER[IRQNumber / 32] |= (1 << (IRQNumber % 32));
 80009ea:	4a17      	ldr	r2, [pc, #92]	; (8000a48 <ADC_IRQConfig+0x74>)
 80009ec:	79fb      	ldrb	r3, [r7, #7]
 80009ee:	095b      	lsrs	r3, r3, #5
 80009f0:	b2d8      	uxtb	r0, r3
 80009f2:	4603      	mov	r3, r0
 80009f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009f8:	79fa      	ldrb	r2, [r7, #7]
 80009fa:	f002 021f 	and.w	r2, r2, #31
 80009fe:	2101      	movs	r1, #1
 8000a00:	fa01 f202 	lsl.w	r2, r1, r2
 8000a04:	4614      	mov	r4, r2
 8000a06:	4a10      	ldr	r2, [pc, #64]	; (8000a48 <ADC_IRQConfig+0x74>)
 8000a08:	4601      	mov	r1, r0
 8000a0a:	4323      	orrs	r3, r4
 8000a0c:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	}
	else if (EnOrDi == DISABLE)
	{
		NVIC_ICER->ICER[IRQNumber / 32] |= (1 << (IRQNumber % 32));
	}
}
 8000a10:	e015      	b.n	8000a3e <ADC_IRQConfig+0x6a>
	else if (EnOrDi == DISABLE)
 8000a12:	79bb      	ldrb	r3, [r7, #6]
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d112      	bne.n	8000a3e <ADC_IRQConfig+0x6a>
		NVIC_ICER->ICER[IRQNumber / 32] |= (1 << (IRQNumber % 32));
 8000a18:	4a0c      	ldr	r2, [pc, #48]	; (8000a4c <ADC_IRQConfig+0x78>)
 8000a1a:	79fb      	ldrb	r3, [r7, #7]
 8000a1c:	095b      	lsrs	r3, r3, #5
 8000a1e:	b2d8      	uxtb	r0, r3
 8000a20:	4603      	mov	r3, r0
 8000a22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a26:	79fa      	ldrb	r2, [r7, #7]
 8000a28:	f002 021f 	and.w	r2, r2, #31
 8000a2c:	2101      	movs	r1, #1
 8000a2e:	fa01 f202 	lsl.w	r2, r1, r2
 8000a32:	4614      	mov	r4, r2
 8000a34:	4a05      	ldr	r2, [pc, #20]	; (8000a4c <ADC_IRQConfig+0x78>)
 8000a36:	4601      	mov	r1, r0
 8000a38:	4323      	orrs	r3, r4
 8000a3a:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
}
 8000a3e:	bf00      	nop
 8000a40:	3708      	adds	r7, #8
 8000a42:	46bd      	mov	sp, r7
 8000a44:	bc90      	pop	{r4, r7}
 8000a46:	4770      	bx	lr
 8000a48:	e000e100 	.word	0xe000e100
 8000a4c:	e000e180 	.word	0xe000e180

08000a50 <ADC_EV_IRQHandling>:
 * Params: 		uint8_t IRQNumber - IRQ position being configured
 * 				uint8_t IRQPriority - Priority value (0 - 255)
 *
 */
void ADC_EV_IRQHandling(ADC_Handle_t *pADCxHandle)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b082      	sub	sp, #8
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	6078      	str	r0, [r7, #4]
	// 1. Is analog watchdog interrupt?
	if (ADC_GetFlagStatus(pADCxHandle->pADCx, ADC_FLAG_AWD))
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	2101      	movs	r1, #1
 8000a5e:	4618      	mov	r0, r3
 8000a60:	f7ff ffa6 	bl	80009b0 <ADC_GetFlagStatus>
 8000a64:	4603      	mov	r3, r0
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d007      	beq.n	8000a7a <ADC_EV_IRQHandling+0x2a>
	{
		pADCxHandle->pADCx->SR &= ~(1 << 5);
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	681b      	ldr	r3, [r3, #0]
 8000a6e:	681a      	ldr	r2, [r3, #0]
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	f022 0220 	bic.w	r2, r2, #32
 8000a78:	601a      	str	r2, [r3, #0]
	}

	// 2. Is end of conversion interrupt?
	if (ADC_GetFlagStatus(pADCxHandle->pADCx, ADC_FLAG_EOC))
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	2102      	movs	r1, #2
 8000a80:	4618      	mov	r0, r3
 8000a82:	f7ff ff95 	bl	80009b0 <ADC_GetFlagStatus>
 8000a86:	4603      	mov	r3, r0
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d002      	beq.n	8000a92 <ADC_EV_IRQHandling+0x42>
	{
		ADC_Read_IT_Handle(pADCxHandle);
 8000a8c:	6878      	ldr	r0, [r7, #4]
 8000a8e:	f000 f848 	bl	8000b22 <ADC_Read_IT_Handle>
	}

	// 3. Is injected channel end of conversion interrupt?
	if (ADC_GetFlagStatus(pADCxHandle->pADCx, ADC_FLAG_JEOC))
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	2104      	movs	r1, #4
 8000a98:	4618      	mov	r0, r3
 8000a9a:	f7ff ff89 	bl	80009b0 <ADC_GetFlagStatus>
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d007      	beq.n	8000ab4 <ADC_EV_IRQHandling+0x64>
	{
		pADCxHandle->pADCx->SR &= ~(1 << 3);
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	681a      	ldr	r2, [r3, #0]
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	f022 0208 	bic.w	r2, r2, #8
 8000ab2:	601a      	str	r2, [r3, #0]
	}

	// 4. Is injected channel start interrupt?
	if (ADC_GetFlagStatus(pADCxHandle->pADCx, ADC_FLAG_JSTRT))
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	2108      	movs	r1, #8
 8000aba:	4618      	mov	r0, r3
 8000abc:	f7ff ff78 	bl	80009b0 <ADC_GetFlagStatus>
 8000ac0:	4603      	mov	r3, r0
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d007      	beq.n	8000ad6 <ADC_EV_IRQHandling+0x86>
	{
		pADCxHandle->pADCx->SR &= ~(1 << 2);
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	681b      	ldr	r3, [r3, #0]
 8000aca:	681a      	ldr	r2, [r3, #0]
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	f022 0204 	bic.w	r2, r2, #4
 8000ad4:	601a      	str	r2, [r3, #0]
	}

	// 5. Is regular channel start interrupt?
	if (ADC_GetFlagStatus(pADCxHandle->pADCx, ADC_FLAG_STRT))
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	2110      	movs	r1, #16
 8000adc:	4618      	mov	r0, r3
 8000ade:	f7ff ff67 	bl	80009b0 <ADC_GetFlagStatus>
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d007      	beq.n	8000af8 <ADC_EV_IRQHandling+0xa8>
	{
		pADCxHandle->pADCx->SR &= ~(1 << 1);
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	681a      	ldr	r2, [r3, #0]
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	f022 0202 	bic.w	r2, r2, #2
 8000af6:	601a      	str	r2, [r3, #0]
	}

	// 5. Is overrun interrupt?
	if (ADC_GetFlagStatus(pADCxHandle->pADCx, ADC_FLAG_OVR))
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	2120      	movs	r1, #32
 8000afe:	4618      	mov	r0, r3
 8000b00:	f7ff ff56 	bl	80009b0 <ADC_GetFlagStatus>
 8000b04:	4603      	mov	r3, r0
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d007      	beq.n	8000b1a <ADC_EV_IRQHandling+0xca>
	{
		pADCxHandle->pADCx->SR &= ~(1 << 0);
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	681a      	ldr	r2, [r3, #0]
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	f022 0201 	bic.w	r2, r2, #1
 8000b18:	601a      	str	r2, [r3, #0]
	}
}
 8000b1a:	bf00      	nop
 8000b1c:	3708      	adds	r7, #8
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	bd80      	pop	{r7, pc}

08000b22 <ADC_Read_IT_Handle>:

void ADC_Read_IT_Handle(ADC_Handle_t *pADCxHandle)
{
 8000b22:	b580      	push	{r7, lr}
 8000b24:	b082      	sub	sp, #8
 8000b26:	af00      	add	r7, sp, #0
 8000b28:	6078      	str	r0, [r7, #4]
	// 1. Read value from DR into buffer
	*(pADCxHandle->pDataBuffer) = pADCxHandle->pADCx->DR & 0xFFFF;
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	689b      	ldr	r3, [r3, #8]
 8000b34:	b292      	uxth	r2, r2
 8000b36:	801a      	strh	r2, [r3, #0]

	// 2. Send callback
	ADC_ApplicationCallbackEvent(pADCxHandle, ADC_READ_CMPLT);
 8000b38:	2100      	movs	r1, #0
 8000b3a:	6878      	ldr	r0, [r7, #4]
 8000b3c:	f000 feb4 	bl	80018a8 <ADC_ApplicationCallbackEvent>
}
 8000b40:	bf00      	nop
 8000b42:	3708      	adds	r7, #8
 8000b44:	46bd      	mov	sp, r7
 8000b46:	bd80      	pop	{r7, pc}

08000b48 <GPIO_PortCode>:
 *
 * Params: 		struct GPIO_RegDef_t* - GPIO register base address
 *
 */
uint8_t GPIO_PortCode(GPIO_RegDef_t *pGPIOx)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	b083      	sub	sp, #12
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]
	if (pGPIOx == GPIOA)
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	4a1a      	ldr	r2, [pc, #104]	; (8000bbc <GPIO_PortCode+0x74>)
 8000b54:	4293      	cmp	r3, r2
 8000b56:	d101      	bne.n	8000b5c <GPIO_PortCode+0x14>
	{
		return 0;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	e02a      	b.n	8000bb2 <GPIO_PortCode+0x6a>
	}
	else if (pGPIOx == GPIOB)
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	4a18      	ldr	r2, [pc, #96]	; (8000bc0 <GPIO_PortCode+0x78>)
 8000b60:	4293      	cmp	r3, r2
 8000b62:	d101      	bne.n	8000b68 <GPIO_PortCode+0x20>
	{
		return 1;
 8000b64:	2301      	movs	r3, #1
 8000b66:	e024      	b.n	8000bb2 <GPIO_PortCode+0x6a>
	}
	else if (pGPIOx == GPIOC)
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	4a16      	ldr	r2, [pc, #88]	; (8000bc4 <GPIO_PortCode+0x7c>)
 8000b6c:	4293      	cmp	r3, r2
 8000b6e:	d101      	bne.n	8000b74 <GPIO_PortCode+0x2c>
	{
		return 2;
 8000b70:	2302      	movs	r3, #2
 8000b72:	e01e      	b.n	8000bb2 <GPIO_PortCode+0x6a>
	}
	else if (pGPIOx == GPIOD)
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	4a14      	ldr	r2, [pc, #80]	; (8000bc8 <GPIO_PortCode+0x80>)
 8000b78:	4293      	cmp	r3, r2
 8000b7a:	d101      	bne.n	8000b80 <GPIO_PortCode+0x38>
	{
		return 3;
 8000b7c:	2303      	movs	r3, #3
 8000b7e:	e018      	b.n	8000bb2 <GPIO_PortCode+0x6a>
	}
	else if (pGPIOx == GPIOE)
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	4a12      	ldr	r2, [pc, #72]	; (8000bcc <GPIO_PortCode+0x84>)
 8000b84:	4293      	cmp	r3, r2
 8000b86:	d101      	bne.n	8000b8c <GPIO_PortCode+0x44>
	{
		return 4;
 8000b88:	2304      	movs	r3, #4
 8000b8a:	e012      	b.n	8000bb2 <GPIO_PortCode+0x6a>
	}
	else if (pGPIOx == GPIOF)
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	4a10      	ldr	r2, [pc, #64]	; (8000bd0 <GPIO_PortCode+0x88>)
 8000b90:	4293      	cmp	r3, r2
 8000b92:	d101      	bne.n	8000b98 <GPIO_PortCode+0x50>
	{
		return 5;
 8000b94:	2305      	movs	r3, #5
 8000b96:	e00c      	b.n	8000bb2 <GPIO_PortCode+0x6a>
	}
	else if (pGPIOx == GPIOG)
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	4a0e      	ldr	r2, [pc, #56]	; (8000bd4 <GPIO_PortCode+0x8c>)
 8000b9c:	4293      	cmp	r3, r2
 8000b9e:	d101      	bne.n	8000ba4 <GPIO_PortCode+0x5c>
	{
		return 6;
 8000ba0:	2306      	movs	r3, #6
 8000ba2:	e006      	b.n	8000bb2 <GPIO_PortCode+0x6a>
	}
	else if (pGPIOx == GPIOH)
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	4a0c      	ldr	r2, [pc, #48]	; (8000bd8 <GPIO_PortCode+0x90>)
 8000ba8:	4293      	cmp	r3, r2
 8000baa:	d101      	bne.n	8000bb0 <GPIO_PortCode+0x68>
	{
		return 7;
 8000bac:	2307      	movs	r3, #7
 8000bae:	e000      	b.n	8000bb2 <GPIO_PortCode+0x6a>
	}

	return 0;
 8000bb0:	2300      	movs	r3, #0
}
 8000bb2:	4618      	mov	r0, r3
 8000bb4:	370c      	adds	r7, #12
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	bc80      	pop	{r7}
 8000bba:	4770      	bx	lr
 8000bbc:	40020000 	.word	0x40020000
 8000bc0:	40020400 	.word	0x40020400
 8000bc4:	40020800 	.word	0x40020800
 8000bc8:	40020c00 	.word	0x40020c00
 8000bcc:	40021000 	.word	0x40021000
 8000bd0:	40021400 	.word	0x40021400
 8000bd4:	40021800 	.word	0x40021800
 8000bd8:	40021c00 	.word	0x40021c00

08000bdc <GPIO_PeriClockControl>:
 * Params: 		struct GPIO_RegDef_t* - GPIO register base address
 * 				uint8_t - Enable or disable value
 *
 */
void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnOrDi)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	b083      	sub	sp, #12
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	6078      	str	r0, [r7, #4]
 8000be4:	460b      	mov	r3, r1
 8000be6:	70fb      	strb	r3, [r7, #3]
	if (EnOrDi == ENABLE)
 8000be8:	78fb      	ldrb	r3, [r7, #3]
 8000bea:	2b01      	cmp	r3, #1
 8000bec:	d157      	bne.n	8000c9e <GPIO_PeriClockControl+0xc2>
	{
		if (pGPIOx == GPIOA)
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	4a59      	ldr	r2, [pc, #356]	; (8000d58 <GPIO_PeriClockControl+0x17c>)
 8000bf2:	4293      	cmp	r3, r2
 8000bf4:	d106      	bne.n	8000c04 <GPIO_PeriClockControl+0x28>
		{
			GPIOA_PCLK_EN();
 8000bf6:	4b59      	ldr	r3, [pc, #356]	; (8000d5c <GPIO_PeriClockControl+0x180>)
 8000bf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bfa:	4a58      	ldr	r2, [pc, #352]	; (8000d5c <GPIO_PeriClockControl+0x180>)
 8000bfc:	f043 0301 	orr.w	r3, r3, #1
 8000c00:	6313      	str	r3, [r2, #48]	; 0x30
		else if (pGPIOx == GPIOH)
		{
			GPIOH_PCLK_DI();
		}
	}
}
 8000c02:	e0a3      	b.n	8000d4c <GPIO_PeriClockControl+0x170>
		else if (pGPIOx == GPIOB)
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	4a56      	ldr	r2, [pc, #344]	; (8000d60 <GPIO_PeriClockControl+0x184>)
 8000c08:	4293      	cmp	r3, r2
 8000c0a:	d106      	bne.n	8000c1a <GPIO_PeriClockControl+0x3e>
			GPIOB_PCLK_EN();
 8000c0c:	4b53      	ldr	r3, [pc, #332]	; (8000d5c <GPIO_PeriClockControl+0x180>)
 8000c0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c10:	4a52      	ldr	r2, [pc, #328]	; (8000d5c <GPIO_PeriClockControl+0x180>)
 8000c12:	f043 0302 	orr.w	r3, r3, #2
 8000c16:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000c18:	e098      	b.n	8000d4c <GPIO_PeriClockControl+0x170>
		else if (pGPIOx == GPIOC)
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	4a51      	ldr	r2, [pc, #324]	; (8000d64 <GPIO_PeriClockControl+0x188>)
 8000c1e:	4293      	cmp	r3, r2
 8000c20:	d106      	bne.n	8000c30 <GPIO_PeriClockControl+0x54>
			GPIOC_PCLK_EN();
 8000c22:	4b4e      	ldr	r3, [pc, #312]	; (8000d5c <GPIO_PeriClockControl+0x180>)
 8000c24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c26:	4a4d      	ldr	r2, [pc, #308]	; (8000d5c <GPIO_PeriClockControl+0x180>)
 8000c28:	f043 0304 	orr.w	r3, r3, #4
 8000c2c:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000c2e:	e08d      	b.n	8000d4c <GPIO_PeriClockControl+0x170>
		else if (pGPIOx == GPIOD)
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	4a4d      	ldr	r2, [pc, #308]	; (8000d68 <GPIO_PeriClockControl+0x18c>)
 8000c34:	4293      	cmp	r3, r2
 8000c36:	d106      	bne.n	8000c46 <GPIO_PeriClockControl+0x6a>
			GPIOD_PCLK_EN();
 8000c38:	4b48      	ldr	r3, [pc, #288]	; (8000d5c <GPIO_PeriClockControl+0x180>)
 8000c3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c3c:	4a47      	ldr	r2, [pc, #284]	; (8000d5c <GPIO_PeriClockControl+0x180>)
 8000c3e:	f043 0308 	orr.w	r3, r3, #8
 8000c42:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000c44:	e082      	b.n	8000d4c <GPIO_PeriClockControl+0x170>
		else if (pGPIOx == GPIOE)
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	4a48      	ldr	r2, [pc, #288]	; (8000d6c <GPIO_PeriClockControl+0x190>)
 8000c4a:	4293      	cmp	r3, r2
 8000c4c:	d106      	bne.n	8000c5c <GPIO_PeriClockControl+0x80>
			GPIOE_PCLK_EN();
 8000c4e:	4b43      	ldr	r3, [pc, #268]	; (8000d5c <GPIO_PeriClockControl+0x180>)
 8000c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c52:	4a42      	ldr	r2, [pc, #264]	; (8000d5c <GPIO_PeriClockControl+0x180>)
 8000c54:	f043 0310 	orr.w	r3, r3, #16
 8000c58:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000c5a:	e077      	b.n	8000d4c <GPIO_PeriClockControl+0x170>
		else if (pGPIOx == GPIOF)
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	4a44      	ldr	r2, [pc, #272]	; (8000d70 <GPIO_PeriClockControl+0x194>)
 8000c60:	4293      	cmp	r3, r2
 8000c62:	d106      	bne.n	8000c72 <GPIO_PeriClockControl+0x96>
			GPIOF_PCLK_EN();
 8000c64:	4b3d      	ldr	r3, [pc, #244]	; (8000d5c <GPIO_PeriClockControl+0x180>)
 8000c66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c68:	4a3c      	ldr	r2, [pc, #240]	; (8000d5c <GPIO_PeriClockControl+0x180>)
 8000c6a:	f043 0320 	orr.w	r3, r3, #32
 8000c6e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000c70:	e06c      	b.n	8000d4c <GPIO_PeriClockControl+0x170>
		else if (pGPIOx == GPIOG)
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	4a3f      	ldr	r2, [pc, #252]	; (8000d74 <GPIO_PeriClockControl+0x198>)
 8000c76:	4293      	cmp	r3, r2
 8000c78:	d106      	bne.n	8000c88 <GPIO_PeriClockControl+0xac>
			GPIOG_PCLK_EN();
 8000c7a:	4b38      	ldr	r3, [pc, #224]	; (8000d5c <GPIO_PeriClockControl+0x180>)
 8000c7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c7e:	4a37      	ldr	r2, [pc, #220]	; (8000d5c <GPIO_PeriClockControl+0x180>)
 8000c80:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c84:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000c86:	e061      	b.n	8000d4c <GPIO_PeriClockControl+0x170>
		else if (pGPIOx == GPIOH)
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	4a3b      	ldr	r2, [pc, #236]	; (8000d78 <GPIO_PeriClockControl+0x19c>)
 8000c8c:	4293      	cmp	r3, r2
 8000c8e:	d15d      	bne.n	8000d4c <GPIO_PeriClockControl+0x170>
			GPIOH_PCLK_EN();
 8000c90:	4b32      	ldr	r3, [pc, #200]	; (8000d5c <GPIO_PeriClockControl+0x180>)
 8000c92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c94:	4a31      	ldr	r2, [pc, #196]	; (8000d5c <GPIO_PeriClockControl+0x180>)
 8000c96:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c9a:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000c9c:	e056      	b.n	8000d4c <GPIO_PeriClockControl+0x170>
		if (pGPIOx == GPIOA)
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	4a2d      	ldr	r2, [pc, #180]	; (8000d58 <GPIO_PeriClockControl+0x17c>)
 8000ca2:	4293      	cmp	r3, r2
 8000ca4:	d106      	bne.n	8000cb4 <GPIO_PeriClockControl+0xd8>
			GPIOA_PCLK_DI();
 8000ca6:	4b2d      	ldr	r3, [pc, #180]	; (8000d5c <GPIO_PeriClockControl+0x180>)
 8000ca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000caa:	4a2c      	ldr	r2, [pc, #176]	; (8000d5c <GPIO_PeriClockControl+0x180>)
 8000cac:	f023 0301 	bic.w	r3, r3, #1
 8000cb0:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000cb2:	e04b      	b.n	8000d4c <GPIO_PeriClockControl+0x170>
		else if (pGPIOx == GPIOB)
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	4a2a      	ldr	r2, [pc, #168]	; (8000d60 <GPIO_PeriClockControl+0x184>)
 8000cb8:	4293      	cmp	r3, r2
 8000cba:	d106      	bne.n	8000cca <GPIO_PeriClockControl+0xee>
			GPIOB_PCLK_DI();
 8000cbc:	4b27      	ldr	r3, [pc, #156]	; (8000d5c <GPIO_PeriClockControl+0x180>)
 8000cbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cc0:	4a26      	ldr	r2, [pc, #152]	; (8000d5c <GPIO_PeriClockControl+0x180>)
 8000cc2:	f023 0302 	bic.w	r3, r3, #2
 8000cc6:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000cc8:	e040      	b.n	8000d4c <GPIO_PeriClockControl+0x170>
		else if (pGPIOx == GPIOC)
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	4a25      	ldr	r2, [pc, #148]	; (8000d64 <GPIO_PeriClockControl+0x188>)
 8000cce:	4293      	cmp	r3, r2
 8000cd0:	d106      	bne.n	8000ce0 <GPIO_PeriClockControl+0x104>
			GPIOC_PCLK_DI();
 8000cd2:	4b22      	ldr	r3, [pc, #136]	; (8000d5c <GPIO_PeriClockControl+0x180>)
 8000cd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cd6:	4a21      	ldr	r2, [pc, #132]	; (8000d5c <GPIO_PeriClockControl+0x180>)
 8000cd8:	f023 0304 	bic.w	r3, r3, #4
 8000cdc:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000cde:	e035      	b.n	8000d4c <GPIO_PeriClockControl+0x170>
		else if (pGPIOx == GPIOD)
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	4a21      	ldr	r2, [pc, #132]	; (8000d68 <GPIO_PeriClockControl+0x18c>)
 8000ce4:	4293      	cmp	r3, r2
 8000ce6:	d106      	bne.n	8000cf6 <GPIO_PeriClockControl+0x11a>
			GPIOD_PCLK_DI();
 8000ce8:	4b1c      	ldr	r3, [pc, #112]	; (8000d5c <GPIO_PeriClockControl+0x180>)
 8000cea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cec:	4a1b      	ldr	r2, [pc, #108]	; (8000d5c <GPIO_PeriClockControl+0x180>)
 8000cee:	f023 0308 	bic.w	r3, r3, #8
 8000cf2:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000cf4:	e02a      	b.n	8000d4c <GPIO_PeriClockControl+0x170>
		else if (pGPIOx == GPIOE)
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	4a1c      	ldr	r2, [pc, #112]	; (8000d6c <GPIO_PeriClockControl+0x190>)
 8000cfa:	4293      	cmp	r3, r2
 8000cfc:	d106      	bne.n	8000d0c <GPIO_PeriClockControl+0x130>
			GPIOE_PCLK_DI();
 8000cfe:	4b17      	ldr	r3, [pc, #92]	; (8000d5c <GPIO_PeriClockControl+0x180>)
 8000d00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d02:	4a16      	ldr	r2, [pc, #88]	; (8000d5c <GPIO_PeriClockControl+0x180>)
 8000d04:	f023 0310 	bic.w	r3, r3, #16
 8000d08:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000d0a:	e01f      	b.n	8000d4c <GPIO_PeriClockControl+0x170>
		else if (pGPIOx == GPIOF)
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	4a18      	ldr	r2, [pc, #96]	; (8000d70 <GPIO_PeriClockControl+0x194>)
 8000d10:	4293      	cmp	r3, r2
 8000d12:	d106      	bne.n	8000d22 <GPIO_PeriClockControl+0x146>
			GPIOF_PCLK_DI();
 8000d14:	4b11      	ldr	r3, [pc, #68]	; (8000d5c <GPIO_PeriClockControl+0x180>)
 8000d16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d18:	4a10      	ldr	r2, [pc, #64]	; (8000d5c <GPIO_PeriClockControl+0x180>)
 8000d1a:	f023 0320 	bic.w	r3, r3, #32
 8000d1e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000d20:	e014      	b.n	8000d4c <GPIO_PeriClockControl+0x170>
		else if (pGPIOx == GPIOG)
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	4a13      	ldr	r2, [pc, #76]	; (8000d74 <GPIO_PeriClockControl+0x198>)
 8000d26:	4293      	cmp	r3, r2
 8000d28:	d106      	bne.n	8000d38 <GPIO_PeriClockControl+0x15c>
			GPIOG_PCLK_DI();
 8000d2a:	4b0c      	ldr	r3, [pc, #48]	; (8000d5c <GPIO_PeriClockControl+0x180>)
 8000d2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d2e:	4a0b      	ldr	r2, [pc, #44]	; (8000d5c <GPIO_PeriClockControl+0x180>)
 8000d30:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000d34:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000d36:	e009      	b.n	8000d4c <GPIO_PeriClockControl+0x170>
		else if (pGPIOx == GPIOH)
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	4a0f      	ldr	r2, [pc, #60]	; (8000d78 <GPIO_PeriClockControl+0x19c>)
 8000d3c:	4293      	cmp	r3, r2
 8000d3e:	d105      	bne.n	8000d4c <GPIO_PeriClockControl+0x170>
			GPIOH_PCLK_DI();
 8000d40:	4b06      	ldr	r3, [pc, #24]	; (8000d5c <GPIO_PeriClockControl+0x180>)
 8000d42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d44:	4a05      	ldr	r2, [pc, #20]	; (8000d5c <GPIO_PeriClockControl+0x180>)
 8000d46:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000d4a:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000d4c:	bf00      	nop
 8000d4e:	370c      	adds	r7, #12
 8000d50:	46bd      	mov	sp, r7
 8000d52:	bc80      	pop	{r7}
 8000d54:	4770      	bx	lr
 8000d56:	bf00      	nop
 8000d58:	40020000 	.word	0x40020000
 8000d5c:	40023800 	.word	0x40023800
 8000d60:	40020400 	.word	0x40020400
 8000d64:	40020800 	.word	0x40020800
 8000d68:	40020c00 	.word	0x40020c00
 8000d6c:	40021000 	.word	0x40021000
 8000d70:	40021400 	.word	0x40021400
 8000d74:	40021800 	.word	0x40021800
 8000d78:	40021c00 	.word	0x40021c00

08000d7c <GPIO_Init>:
 * Params:		struct GPIO_Handle_t*
 *
 *
 */
void GPIO_Init(GPIO_Handle_t *pGPIOxHandle)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b086      	sub	sp, #24
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
	// Enable clock to GPIO port
	GPIO_PeriClockControl(pGPIOxHandle->pGPIOx, ENABLE);
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	2101      	movs	r1, #1
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	f7ff ff26 	bl	8000bdc <GPIO_PeriClockControl>

	uint32_t temp = 0;
 8000d90:	2300      	movs	r3, #0
 8000d92:	617b      	str	r3, [r7, #20]

	// 1. Set GPIO pin mode
	if (pGPIOxHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG)
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	795b      	ldrb	r3, [r3, #5]
 8000d98:	2b03      	cmp	r3, #3
 8000d9a:	d822      	bhi.n	8000de2 <GPIO_Init+0x66>
	{
		temp = (pGPIOxHandle->GPIO_PinConfig.GPIO_PinMode << (2 * pGPIOxHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	795b      	ldrb	r3, [r3, #5]
 8000da0:	461a      	mov	r2, r3
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	791b      	ldrb	r3, [r3, #4]
 8000da6:	005b      	lsls	r3, r3, #1
 8000da8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dac:	617b      	str	r3, [r7, #20]
		pGPIOxHandle->pGPIOx->MODER &= ~((0x3) << (2 * pGPIOxHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	681a      	ldr	r2, [r3, #0]
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	791b      	ldrb	r3, [r3, #4]
 8000db8:	005b      	lsls	r3, r3, #1
 8000dba:	2103      	movs	r1, #3
 8000dbc:	fa01 f303 	lsl.w	r3, r1, r3
 8000dc0:	43db      	mvns	r3, r3
 8000dc2:	4619      	mov	r1, r3
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	400a      	ands	r2, r1
 8000dca:	601a      	str	r2, [r3, #0]
		pGPIOxHandle->pGPIOx->MODER |= temp;
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	6819      	ldr	r1, [r3, #0]
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	697a      	ldr	r2, [r7, #20]
 8000dd8:	430a      	orrs	r2, r1
 8000dda:	601a      	str	r2, [r3, #0]
		temp = 0;
 8000ddc:	2300      	movs	r3, #0
 8000dde:	617b      	str	r3, [r7, #20]
 8000de0:	e07c      	b.n	8000edc <GPIO_Init+0x160>
	}
	else {
		//For setting to interrupt mode...

		// Enable clock to SYSCFG (needed to set IRQ in EXTI)
		SYSCFG_PCLK_EN();
 8000de2:	4b8e      	ldr	r3, [pc, #568]	; (800101c <GPIO_Init+0x2a0>)
 8000de4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000de6:	4a8d      	ldr	r2, [pc, #564]	; (800101c <GPIO_Init+0x2a0>)
 8000de8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000dec:	6453      	str	r3, [r2, #68]	; 0x44

		// 1. Set rising/falling edge trigger(s)
		if (pGPIOxHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_IT_MODE_RT)
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	795b      	ldrb	r3, [r3, #5]
 8000df2:	2b04      	cmp	r3, #4
 8000df4:	d117      	bne.n	8000e26 <GPIO_Init+0xaa>
		{
			EXTI->RTSR |= (1 << pGPIOxHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000df6:	4b8a      	ldr	r3, [pc, #552]	; (8001020 <GPIO_Init+0x2a4>)
 8000df8:	689b      	ldr	r3, [r3, #8]
 8000dfa:	687a      	ldr	r2, [r7, #4]
 8000dfc:	7912      	ldrb	r2, [r2, #4]
 8000dfe:	4611      	mov	r1, r2
 8000e00:	2201      	movs	r2, #1
 8000e02:	408a      	lsls	r2, r1
 8000e04:	4611      	mov	r1, r2
 8000e06:	4a86      	ldr	r2, [pc, #536]	; (8001020 <GPIO_Init+0x2a4>)
 8000e08:	430b      	orrs	r3, r1
 8000e0a:	6093      	str	r3, [r2, #8]
			EXTI->FTSR &= ~(1 << pGPIOxHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000e0c:	4b84      	ldr	r3, [pc, #528]	; (8001020 <GPIO_Init+0x2a4>)
 8000e0e:	68db      	ldr	r3, [r3, #12]
 8000e10:	687a      	ldr	r2, [r7, #4]
 8000e12:	7912      	ldrb	r2, [r2, #4]
 8000e14:	4611      	mov	r1, r2
 8000e16:	2201      	movs	r2, #1
 8000e18:	408a      	lsls	r2, r1
 8000e1a:	43d2      	mvns	r2, r2
 8000e1c:	4611      	mov	r1, r2
 8000e1e:	4a80      	ldr	r2, [pc, #512]	; (8001020 <GPIO_Init+0x2a4>)
 8000e20:	400b      	ands	r3, r1
 8000e22:	60d3      	str	r3, [r2, #12]
 8000e24:	e035      	b.n	8000e92 <GPIO_Init+0x116>
		}
		else if (pGPIOxHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_IT_MODE_FT)
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	795b      	ldrb	r3, [r3, #5]
 8000e2a:	2b05      	cmp	r3, #5
 8000e2c:	d117      	bne.n	8000e5e <GPIO_Init+0xe2>
		{
			EXTI->FTSR |= (1 << pGPIOxHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000e2e:	4b7c      	ldr	r3, [pc, #496]	; (8001020 <GPIO_Init+0x2a4>)
 8000e30:	68db      	ldr	r3, [r3, #12]
 8000e32:	687a      	ldr	r2, [r7, #4]
 8000e34:	7912      	ldrb	r2, [r2, #4]
 8000e36:	4611      	mov	r1, r2
 8000e38:	2201      	movs	r2, #1
 8000e3a:	408a      	lsls	r2, r1
 8000e3c:	4611      	mov	r1, r2
 8000e3e:	4a78      	ldr	r2, [pc, #480]	; (8001020 <GPIO_Init+0x2a4>)
 8000e40:	430b      	orrs	r3, r1
 8000e42:	60d3      	str	r3, [r2, #12]
			EXTI->RTSR &= ~(1 << pGPIOxHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000e44:	4b76      	ldr	r3, [pc, #472]	; (8001020 <GPIO_Init+0x2a4>)
 8000e46:	689b      	ldr	r3, [r3, #8]
 8000e48:	687a      	ldr	r2, [r7, #4]
 8000e4a:	7912      	ldrb	r2, [r2, #4]
 8000e4c:	4611      	mov	r1, r2
 8000e4e:	2201      	movs	r2, #1
 8000e50:	408a      	lsls	r2, r1
 8000e52:	43d2      	mvns	r2, r2
 8000e54:	4611      	mov	r1, r2
 8000e56:	4a72      	ldr	r2, [pc, #456]	; (8001020 <GPIO_Init+0x2a4>)
 8000e58:	400b      	ands	r3, r1
 8000e5a:	6093      	str	r3, [r2, #8]
 8000e5c:	e019      	b.n	8000e92 <GPIO_Init+0x116>
		}
		else if (pGPIOxHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_IT_MODE_RFT)
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	795b      	ldrb	r3, [r3, #5]
 8000e62:	2b06      	cmp	r3, #6
 8000e64:	d115      	bne.n	8000e92 <GPIO_Init+0x116>
		{
			EXTI->RTSR |= (1 << pGPIOxHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000e66:	4b6e      	ldr	r3, [pc, #440]	; (8001020 <GPIO_Init+0x2a4>)
 8000e68:	689b      	ldr	r3, [r3, #8]
 8000e6a:	687a      	ldr	r2, [r7, #4]
 8000e6c:	7912      	ldrb	r2, [r2, #4]
 8000e6e:	4611      	mov	r1, r2
 8000e70:	2201      	movs	r2, #1
 8000e72:	408a      	lsls	r2, r1
 8000e74:	4611      	mov	r1, r2
 8000e76:	4a6a      	ldr	r2, [pc, #424]	; (8001020 <GPIO_Init+0x2a4>)
 8000e78:	430b      	orrs	r3, r1
 8000e7a:	6093      	str	r3, [r2, #8]
			EXTI->FTSR |= (1 << pGPIOxHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000e7c:	4b68      	ldr	r3, [pc, #416]	; (8001020 <GPIO_Init+0x2a4>)
 8000e7e:	68db      	ldr	r3, [r3, #12]
 8000e80:	687a      	ldr	r2, [r7, #4]
 8000e82:	7912      	ldrb	r2, [r2, #4]
 8000e84:	4611      	mov	r1, r2
 8000e86:	2201      	movs	r2, #1
 8000e88:	408a      	lsls	r2, r1
 8000e8a:	4611      	mov	r1, r2
 8000e8c:	4a64      	ldr	r2, [pc, #400]	; (8001020 <GPIO_Init+0x2a4>)
 8000e8e:	430b      	orrs	r3, r1
 8000e90:	60d3      	str	r3, [r2, #12]
		}

		// 2. Configure GPIO port selection in SYSCFG
		uint8_t temp1 = pGPIOxHandle->GPIO_PinConfig.GPIO_PinNumber / 4;
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	791b      	ldrb	r3, [r3, #4]
 8000e96:	089b      	lsrs	r3, r3, #2
 8000e98:	74fb      	strb	r3, [r7, #19]
		uint8_t temp2 = pGPIOxHandle->GPIO_PinConfig.GPIO_PinNumber % 4;
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	791b      	ldrb	r3, [r3, #4]
 8000e9e:	f003 0303 	and.w	r3, r3, #3
 8000ea2:	74bb      	strb	r3, [r7, #18]
		uint8_t portCode = GPIO_PortCode(pGPIOxHandle->pGPIOx);
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	f7ff fe4d 	bl	8000b48 <GPIO_PortCode>
 8000eae:	4603      	mov	r3, r0
 8000eb0:	747b      	strb	r3, [r7, #17]
		SYSCFG->EXTICR[temp1] = portCode << (temp2 * 4);
 8000eb2:	7c7a      	ldrb	r2, [r7, #17]
 8000eb4:	7cbb      	ldrb	r3, [r7, #18]
 8000eb6:	009b      	lsls	r3, r3, #2
 8000eb8:	fa02 f103 	lsl.w	r1, r2, r3
 8000ebc:	4a59      	ldr	r2, [pc, #356]	; (8001024 <GPIO_Init+0x2a8>)
 8000ebe:	7cfb      	ldrb	r3, [r7, #19]
 8000ec0:	3302      	adds	r3, #2
 8000ec2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

		// 3. Enable EXTI interrupt using interrupt register masking
		EXTI->IMR |= (1 << pGPIOxHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000ec6:	4b56      	ldr	r3, [pc, #344]	; (8001020 <GPIO_Init+0x2a4>)
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	687a      	ldr	r2, [r7, #4]
 8000ecc:	7912      	ldrb	r2, [r2, #4]
 8000ece:	4611      	mov	r1, r2
 8000ed0:	2201      	movs	r2, #1
 8000ed2:	408a      	lsls	r2, r1
 8000ed4:	4611      	mov	r1, r2
 8000ed6:	4a52      	ldr	r2, [pc, #328]	; (8001020 <GPIO_Init+0x2a4>)
 8000ed8:	430b      	orrs	r3, r1
 8000eda:	6013      	str	r3, [r2, #0]
	}

	// 2. Set pin speed
	temp = (pGPIOxHandle->GPIO_PinConfig.GPIO_PinSpeed << (2 * pGPIOxHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	799b      	ldrb	r3, [r3, #6]
 8000ee0:	461a      	mov	r2, r3
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	791b      	ldrb	r3, [r3, #4]
 8000ee6:	005b      	lsls	r3, r3, #1
 8000ee8:	fa02 f303 	lsl.w	r3, r2, r3
 8000eec:	617b      	str	r3, [r7, #20]
	pGPIOxHandle->pGPIOx->OSPEEDR &= ~((0x3) << (2 * pGPIOxHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	689a      	ldr	r2, [r3, #8]
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	791b      	ldrb	r3, [r3, #4]
 8000ef8:	005b      	lsls	r3, r3, #1
 8000efa:	2103      	movs	r1, #3
 8000efc:	fa01 f303 	lsl.w	r3, r1, r3
 8000f00:	43db      	mvns	r3, r3
 8000f02:	4619      	mov	r1, r3
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	400a      	ands	r2, r1
 8000f0a:	609a      	str	r2, [r3, #8]
	pGPIOxHandle->pGPIOx->OSPEEDR |= temp;
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	6899      	ldr	r1, [r3, #8]
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	697a      	ldr	r2, [r7, #20]
 8000f18:	430a      	orrs	r2, r1
 8000f1a:	609a      	str	r2, [r3, #8]
	temp = 0;
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	617b      	str	r3, [r7, #20]

	// 3. Set pin pull-up or pull-down mode
	temp = (pGPIOxHandle->GPIO_PinConfig.GPIO_PuPdCtrl << (2 * pGPIOxHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	79db      	ldrb	r3, [r3, #7]
 8000f24:	461a      	mov	r2, r3
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	791b      	ldrb	r3, [r3, #4]
 8000f2a:	005b      	lsls	r3, r3, #1
 8000f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f30:	617b      	str	r3, [r7, #20]
	pGPIOxHandle->pGPIOx->PUPDR &= ~((0x3) << (2 * pGPIOxHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	68da      	ldr	r2, [r3, #12]
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	791b      	ldrb	r3, [r3, #4]
 8000f3c:	005b      	lsls	r3, r3, #1
 8000f3e:	2103      	movs	r1, #3
 8000f40:	fa01 f303 	lsl.w	r3, r1, r3
 8000f44:	43db      	mvns	r3, r3
 8000f46:	4619      	mov	r1, r3
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	400a      	ands	r2, r1
 8000f4e:	60da      	str	r2, [r3, #12]
	pGPIOxHandle->pGPIOx->PUPDR |= temp;
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	68d9      	ldr	r1, [r3, #12]
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	697a      	ldr	r2, [r7, #20]
 8000f5c:	430a      	orrs	r2, r1
 8000f5e:	60da      	str	r2, [r3, #12]
	temp = 0;
 8000f60:	2300      	movs	r3, #0
 8000f62:	617b      	str	r3, [r7, #20]

	// 4. Configure pin output type (push-pull or open drain)
	temp = (pGPIOxHandle->GPIO_PinConfig.GPIO_OpType << pGPIOxHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	7a1b      	ldrb	r3, [r3, #8]
 8000f68:	461a      	mov	r2, r3
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	791b      	ldrb	r3, [r3, #4]
 8000f6e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f72:	617b      	str	r3, [r7, #20]
	pGPIOxHandle->pGPIOx->OTYPER &= ~((0x1) <<  pGPIOxHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	685a      	ldr	r2, [r3, #4]
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	791b      	ldrb	r3, [r3, #4]
 8000f7e:	4619      	mov	r1, r3
 8000f80:	2301      	movs	r3, #1
 8000f82:	408b      	lsls	r3, r1
 8000f84:	43db      	mvns	r3, r3
 8000f86:	4619      	mov	r1, r3
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	400a      	ands	r2, r1
 8000f8e:	605a      	str	r2, [r3, #4]
	pGPIOxHandle->pGPIOx->OTYPER |= temp;
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	6859      	ldr	r1, [r3, #4]
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	697a      	ldr	r2, [r7, #20]
 8000f9c:	430a      	orrs	r2, r1
 8000f9e:	605a      	str	r2, [r3, #4]
	temp = 0;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	617b      	str	r3, [r7, #20]

	// 5. Configure alternate mode function
	if (pGPIOxHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_AF)
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	795b      	ldrb	r3, [r3, #5]
 8000fa8:	2b02      	cmp	r3, #2
 8000faa:	d132      	bne.n	8001012 <GPIO_Init+0x296>
	{
		uint32_t temp1, temp2;
		temp1 = pGPIOxHandle->GPIO_PinConfig.GPIO_PinNumber / 8;
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	791b      	ldrb	r3, [r3, #4]
 8000fb0:	08db      	lsrs	r3, r3, #3
 8000fb2:	b2db      	uxtb	r3, r3
 8000fb4:	60fb      	str	r3, [r7, #12]
		temp2 = pGPIOxHandle->GPIO_PinConfig.GPIO_PinNumber % 8;
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	791b      	ldrb	r3, [r3, #4]
 8000fba:	f003 0307 	and.w	r3, r3, #7
 8000fbe:	60bb      	str	r3, [r7, #8]

		pGPIOxHandle->pGPIOx->AFR[temp1] &= ~((0xF) << (4 * temp2));
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	68fa      	ldr	r2, [r7, #12]
 8000fc6:	3208      	adds	r2, #8
 8000fc8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000fcc:	68bb      	ldr	r3, [r7, #8]
 8000fce:	009b      	lsls	r3, r3, #2
 8000fd0:	210f      	movs	r1, #15
 8000fd2:	fa01 f303 	lsl.w	r3, r1, r3
 8000fd6:	43db      	mvns	r3, r3
 8000fd8:	4619      	mov	r1, r3
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	4011      	ands	r1, r2
 8000fe0:	68fa      	ldr	r2, [r7, #12]
 8000fe2:	3208      	adds	r2, #8
 8000fe4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOxHandle->pGPIOx->AFR[temp1] |= (pGPIOxHandle->GPIO_PinConfig.GPIO_AfMode << (4 * temp2));
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	68fa      	ldr	r2, [r7, #12]
 8000fee:	3208      	adds	r2, #8
 8000ff0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	7a5b      	ldrb	r3, [r3, #9]
 8000ff8:	4619      	mov	r1, r3
 8000ffa:	68bb      	ldr	r3, [r7, #8]
 8000ffc:	009b      	lsls	r3, r3, #2
 8000ffe:	fa01 f303 	lsl.w	r3, r1, r3
 8001002:	4619      	mov	r1, r3
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	4311      	orrs	r1, r2
 800100a:	68fa      	ldr	r2, [r7, #12]
 800100c:	3208      	adds	r2, #8
 800100e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}
}
 8001012:	bf00      	nop
 8001014:	3718      	adds	r7, #24
 8001016:	46bd      	mov	sp, r7
 8001018:	bd80      	pop	{r7, pc}
 800101a:	bf00      	nop
 800101c:	40023800 	.word	0x40023800
 8001020:	40013c00 	.word	0x40013c00
 8001024:	40013800 	.word	0x40013800

08001028 <RCC_GetPPLCLK>:
 *
 * Return: 		uint32_t PPLClk - accelerated clock speed (Hz)
 *
 */
uint32_t RCC_GetPPLCLK(void)
{
 8001028:	b480      	push	{r7}
 800102a:	af00      	add	r7, sp, #0
	//TODO
	return 0;
 800102c:	2300      	movs	r3, #0
}
 800102e:	4618      	mov	r0, r3
 8001030:	46bd      	mov	sp, r7
 8001032:	bc80      	pop	{r7}
 8001034:	4770      	bx	lr
	...

08001038 <RCC_GetAPB1CLK>:
 *
 * Return: 		uint32_t Apb1Clk - clock speed to I2C peripherals (Hz)
 *
 */
uint32_t RCC_GetAPB1CLK(void)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b084      	sub	sp, #16
 800103c:	af00      	add	r7, sp, #0
	// 1. Get system clock source (internal, external, PLL)
	uint8_t clkSrc = ((RCC->CFGR >> 2) & 0x3);
 800103e:	4b25      	ldr	r3, [pc, #148]	; (80010d4 <RCC_GetAPB1CLK+0x9c>)
 8001040:	689b      	ldr	r3, [r3, #8]
 8001042:	089b      	lsrs	r3, r3, #2
 8001044:	b2db      	uxtb	r3, r3
 8001046:	f003 0303 	and.w	r3, r3, #3
 800104a:	727b      	strb	r3, [r7, #9]

	uint32_t sysClk, Apb1Clk;

	if (clkSrc == 0)
 800104c:	7a7b      	ldrb	r3, [r7, #9]
 800104e:	2b00      	cmp	r3, #0
 8001050:	d102      	bne.n	8001058 <RCC_GetAPB1CLK+0x20>
	{
		// Internal oscillator
		sysClk = 16000000;
 8001052:	4b21      	ldr	r3, [pc, #132]	; (80010d8 <RCC_GetAPB1CLK+0xa0>)
 8001054:	60fb      	str	r3, [r7, #12]
 8001056:	e00d      	b.n	8001074 <RCC_GetAPB1CLK+0x3c>
	}
	else if (clkSrc == 1)
 8001058:	7a7b      	ldrb	r3, [r7, #9]
 800105a:	2b01      	cmp	r3, #1
 800105c:	d102      	bne.n	8001064 <RCC_GetAPB1CLK+0x2c>
	{
		// External on-board oscillator
		sysClk = 8000000;
 800105e:	4b1f      	ldr	r3, [pc, #124]	; (80010dc <RCC_GetAPB1CLK+0xa4>)
 8001060:	60fb      	str	r3, [r7, #12]
 8001062:	e007      	b.n	8001074 <RCC_GetAPB1CLK+0x3c>
	}
	else if (clkSrc == 2)
 8001064:	7a7b      	ldrb	r3, [r7, #9]
 8001066:	2b02      	cmp	r3, #2
 8001068:	d104      	bne.n	8001074 <RCC_GetAPB1CLK+0x3c>
	{
		Apb1Clk = RCC_GetPPLCLK();
 800106a:	f7ff ffdd 	bl	8001028 <RCC_GetPPLCLK>
 800106e:	6078      	str	r0, [r7, #4]
		return Apb1Clk;
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	e02b      	b.n	80010cc <RCC_GetAPB1CLK+0x94>
	}

	// 2. Get the AHB prescaler value
	uint8_t temp = (RCC->CFGR >> 4) & 0xF;
 8001074:	4b17      	ldr	r3, [pc, #92]	; (80010d4 <RCC_GetAPB1CLK+0x9c>)
 8001076:	689b      	ldr	r3, [r3, #8]
 8001078:	091b      	lsrs	r3, r3, #4
 800107a:	b2db      	uxtb	r3, r3
 800107c:	f003 030f 	and.w	r3, r3, #15
 8001080:	70fb      	strb	r3, [r7, #3]
	uint8_t ahbPre = 1, ppre1Pre = 1;
 8001082:	2301      	movs	r3, #1
 8001084:	72fb      	strb	r3, [r7, #11]
 8001086:	2301      	movs	r3, #1
 8001088:	72bb      	strb	r3, [r7, #10]

	if (temp >= 8)
 800108a:	78fb      	ldrb	r3, [r7, #3]
 800108c:	2b07      	cmp	r3, #7
 800108e:	d905      	bls.n	800109c <RCC_GetAPB1CLK+0x64>
	{
		ahbPre = AHB_Prescaler[temp - 8];
 8001090:	78fb      	ldrb	r3, [r7, #3]
 8001092:	3b08      	subs	r3, #8
 8001094:	4a12      	ldr	r2, [pc, #72]	; (80010e0 <RCC_GetAPB1CLK+0xa8>)
 8001096:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800109a:	72fb      	strb	r3, [r7, #11]
	}

	// 3. Get the APB1 prescaler value
	temp = (RCC->CFGR >> 10) & 0x7;
 800109c:	4b0d      	ldr	r3, [pc, #52]	; (80010d4 <RCC_GetAPB1CLK+0x9c>)
 800109e:	689b      	ldr	r3, [r3, #8]
 80010a0:	0a9b      	lsrs	r3, r3, #10
 80010a2:	b2db      	uxtb	r3, r3
 80010a4:	f003 0307 	and.w	r3, r3, #7
 80010a8:	70fb      	strb	r3, [r7, #3]
	if (temp >= 4)
 80010aa:	78fb      	ldrb	r3, [r7, #3]
 80010ac:	2b03      	cmp	r3, #3
 80010ae:	d904      	bls.n	80010ba <RCC_GetAPB1CLK+0x82>
	{
		ppre1Pre = PPRE1_Prescaler[temp - 4];
 80010b0:	78fb      	ldrb	r3, [r7, #3]
 80010b2:	3b04      	subs	r3, #4
 80010b4:	4a0b      	ldr	r2, [pc, #44]	; (80010e4 <RCC_GetAPB1CLK+0xac>)
 80010b6:	5cd3      	ldrb	r3, [r2, r3]
 80010b8:	72bb      	strb	r3, [r7, #10]
	}

	// 4. Calculate the clock speed to I2C
	Apb1Clk = (sysClk / ahbPre) / ppre1Pre;
 80010ba:	7afb      	ldrb	r3, [r7, #11]
 80010bc:	68fa      	ldr	r2, [r7, #12]
 80010be:	fbb2 f2f3 	udiv	r2, r2, r3
 80010c2:	7abb      	ldrb	r3, [r7, #10]
 80010c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80010c8:	607b      	str	r3, [r7, #4]

	return Apb1Clk;
 80010ca:	687b      	ldr	r3, [r7, #4]
}
 80010cc:	4618      	mov	r0, r3
 80010ce:	3710      	adds	r7, #16
 80010d0:	46bd      	mov	sp, r7
 80010d2:	bd80      	pop	{r7, pc}
 80010d4:	40023800 	.word	0x40023800
 80010d8:	00f42400 	.word	0x00f42400
 80010dc:	007a1200 	.word	0x007a1200
 80010e0:	20000000 	.word	0x20000000
 80010e4:	20000010 	.word	0x20000010

080010e8 <RCC_GetAPB2CLK>:
 *
 * Return: 		uint32_t Apb2Clk - clock speed to APB2 (Hz)
 *
 */
uint32_t RCC_GetAPB2CLK(void)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b084      	sub	sp, #16
 80010ec:	af00      	add	r7, sp, #0
	// 1. Get system clock source (internal, external, PLL)
	uint8_t clkSrc = ((RCC->CFGR >> 2) & 0x3);
 80010ee:	4b25      	ldr	r3, [pc, #148]	; (8001184 <RCC_GetAPB2CLK+0x9c>)
 80010f0:	689b      	ldr	r3, [r3, #8]
 80010f2:	089b      	lsrs	r3, r3, #2
 80010f4:	b2db      	uxtb	r3, r3
 80010f6:	f003 0303 	and.w	r3, r3, #3
 80010fa:	727b      	strb	r3, [r7, #9]

	uint32_t sysClk, Apb2Clk;

	if (clkSrc == 0)
 80010fc:	7a7b      	ldrb	r3, [r7, #9]
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d102      	bne.n	8001108 <RCC_GetAPB2CLK+0x20>
	{
		// Internal oscillator
		sysClk = 16000000;
 8001102:	4b21      	ldr	r3, [pc, #132]	; (8001188 <RCC_GetAPB2CLK+0xa0>)
 8001104:	60fb      	str	r3, [r7, #12]
 8001106:	e00d      	b.n	8001124 <RCC_GetAPB2CLK+0x3c>
	}
	else if (clkSrc == 1)
 8001108:	7a7b      	ldrb	r3, [r7, #9]
 800110a:	2b01      	cmp	r3, #1
 800110c:	d102      	bne.n	8001114 <RCC_GetAPB2CLK+0x2c>
	{
		// External on-board oscillator
		sysClk = 8000000;
 800110e:	4b1f      	ldr	r3, [pc, #124]	; (800118c <RCC_GetAPB2CLK+0xa4>)
 8001110:	60fb      	str	r3, [r7, #12]
 8001112:	e007      	b.n	8001124 <RCC_GetAPB2CLK+0x3c>
	}
	else if (clkSrc == 2)
 8001114:	7a7b      	ldrb	r3, [r7, #9]
 8001116:	2b02      	cmp	r3, #2
 8001118:	d104      	bne.n	8001124 <RCC_GetAPB2CLK+0x3c>
	{
		Apb2Clk = RCC_GetPPLCLK();
 800111a:	f7ff ff85 	bl	8001028 <RCC_GetPPLCLK>
 800111e:	6078      	str	r0, [r7, #4]
		return Apb2Clk;
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	e02b      	b.n	800117c <RCC_GetAPB2CLK+0x94>
	}

	// 2. Get the AHB prescaler value
	uint8_t temp = (RCC->CFGR >> 4) & 0xF;
 8001124:	4b17      	ldr	r3, [pc, #92]	; (8001184 <RCC_GetAPB2CLK+0x9c>)
 8001126:	689b      	ldr	r3, [r3, #8]
 8001128:	091b      	lsrs	r3, r3, #4
 800112a:	b2db      	uxtb	r3, r3
 800112c:	f003 030f 	and.w	r3, r3, #15
 8001130:	70fb      	strb	r3, [r7, #3]
	uint8_t ahbPre = 1, ppre2Pre = 1;
 8001132:	2301      	movs	r3, #1
 8001134:	72fb      	strb	r3, [r7, #11]
 8001136:	2301      	movs	r3, #1
 8001138:	72bb      	strb	r3, [r7, #10]

	if (temp >= 8)
 800113a:	78fb      	ldrb	r3, [r7, #3]
 800113c:	2b07      	cmp	r3, #7
 800113e:	d905      	bls.n	800114c <RCC_GetAPB2CLK+0x64>
	{
		ahbPre = AHB_Prescaler[temp - 8];
 8001140:	78fb      	ldrb	r3, [r7, #3]
 8001142:	3b08      	subs	r3, #8
 8001144:	4a12      	ldr	r2, [pc, #72]	; (8001190 <RCC_GetAPB2CLK+0xa8>)
 8001146:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800114a:	72fb      	strb	r3, [r7, #11]
	}

	// 3. Get the APB2 prescaler value
	temp = (RCC->CFGR >> 13) & 0x7;
 800114c:	4b0d      	ldr	r3, [pc, #52]	; (8001184 <RCC_GetAPB2CLK+0x9c>)
 800114e:	689b      	ldr	r3, [r3, #8]
 8001150:	0b5b      	lsrs	r3, r3, #13
 8001152:	b2db      	uxtb	r3, r3
 8001154:	f003 0307 	and.w	r3, r3, #7
 8001158:	70fb      	strb	r3, [r7, #3]
	if (temp >= 4)
 800115a:	78fb      	ldrb	r3, [r7, #3]
 800115c:	2b03      	cmp	r3, #3
 800115e:	d904      	bls.n	800116a <RCC_GetAPB2CLK+0x82>
	{
		ppre2Pre = PPRE2_Prescaler[temp - 4];
 8001160:	78fb      	ldrb	r3, [r7, #3]
 8001162:	3b04      	subs	r3, #4
 8001164:	4a0b      	ldr	r2, [pc, #44]	; (8001194 <RCC_GetAPB2CLK+0xac>)
 8001166:	5cd3      	ldrb	r3, [r2, r3]
 8001168:	72bb      	strb	r3, [r7, #10]
	}

	// 4. Calculate the clock speed to I2C
	Apb2Clk = (sysClk / ahbPre) / ppre2Pre;
 800116a:	7afb      	ldrb	r3, [r7, #11]
 800116c:	68fa      	ldr	r2, [r7, #12]
 800116e:	fbb2 f2f3 	udiv	r2, r2, r3
 8001172:	7abb      	ldrb	r3, [r7, #10]
 8001174:	fbb2 f3f3 	udiv	r3, r2, r3
 8001178:	607b      	str	r3, [r7, #4]

	return Apb2Clk;
 800117a:	687b      	ldr	r3, [r7, #4]
}
 800117c:	4618      	mov	r0, r3
 800117e:	3710      	adds	r7, #16
 8001180:	46bd      	mov	sp, r7
 8001182:	bd80      	pop	{r7, pc}
 8001184:	40023800 	.word	0x40023800
 8001188:	00f42400 	.word	0x00f42400
 800118c:	007a1200 	.word	0x007a1200
 8001190:	20000000 	.word	0x20000000
 8001194:	20000014 	.word	0x20000014

08001198 <USART_PeriClockControl>:
 * Params: 		struct USART_RegDef_t* *pUSARTx - USART/UART base address
 * 				uint8_t - Enable or disable value
 *
 */
void USART_PeriClockControl(USART_RegDef_t *pUSARTx, uint8_t EnOrDi)
{
 8001198:	b480      	push	{r7}
 800119a:	b083      	sub	sp, #12
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
 80011a0:	460b      	mov	r3, r1
 80011a2:	70fb      	strb	r3, [r7, #3]
	if (EnOrDi == ENABLE)
 80011a4:	78fb      	ldrb	r3, [r7, #3]
 80011a6:	2b01      	cmp	r3, #1
 80011a8:	d141      	bne.n	800122e <USART_PeriClockControl+0x96>
	{
		if (pUSARTx == USART1)
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	4a43      	ldr	r2, [pc, #268]	; (80012bc <USART_PeriClockControl+0x124>)
 80011ae:	4293      	cmp	r3, r2
 80011b0:	d106      	bne.n	80011c0 <USART_PeriClockControl+0x28>
		{
			USART1_PCLK_EN();
 80011b2:	4b43      	ldr	r3, [pc, #268]	; (80012c0 <USART_PeriClockControl+0x128>)
 80011b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011b6:	4a42      	ldr	r2, [pc, #264]	; (80012c0 <USART_PeriClockControl+0x128>)
 80011b8:	f043 0310 	orr.w	r3, r3, #16
 80011bc:	6453      	str	r3, [r2, #68]	; 0x44
		else if (pUSARTx == USART6)
		{
			USART6_PCLK_DI();
		}
	}
}
 80011be:	e077      	b.n	80012b0 <USART_PeriClockControl+0x118>
		else if (pUSARTx == USART2)
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	4a40      	ldr	r2, [pc, #256]	; (80012c4 <USART_PeriClockControl+0x12c>)
 80011c4:	4293      	cmp	r3, r2
 80011c6:	d106      	bne.n	80011d6 <USART_PeriClockControl+0x3e>
			USART2_PCLK_EN();
 80011c8:	4b3d      	ldr	r3, [pc, #244]	; (80012c0 <USART_PeriClockControl+0x128>)
 80011ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011cc:	4a3c      	ldr	r2, [pc, #240]	; (80012c0 <USART_PeriClockControl+0x128>)
 80011ce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011d2:	6413      	str	r3, [r2, #64]	; 0x40
}
 80011d4:	e06c      	b.n	80012b0 <USART_PeriClockControl+0x118>
		else if (pUSARTx == USART3)
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	4a3b      	ldr	r2, [pc, #236]	; (80012c8 <USART_PeriClockControl+0x130>)
 80011da:	4293      	cmp	r3, r2
 80011dc:	d106      	bne.n	80011ec <USART_PeriClockControl+0x54>
			USART3_PCLK_EN();
 80011de:	4b38      	ldr	r3, [pc, #224]	; (80012c0 <USART_PeriClockControl+0x128>)
 80011e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011e2:	4a37      	ldr	r2, [pc, #220]	; (80012c0 <USART_PeriClockControl+0x128>)
 80011e4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80011e8:	6413      	str	r3, [r2, #64]	; 0x40
}
 80011ea:	e061      	b.n	80012b0 <USART_PeriClockControl+0x118>
		else if (pUSARTx == UART4)
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	4a37      	ldr	r2, [pc, #220]	; (80012cc <USART_PeriClockControl+0x134>)
 80011f0:	4293      	cmp	r3, r2
 80011f2:	d106      	bne.n	8001202 <USART_PeriClockControl+0x6a>
			UART4_PCLK_EN();
 80011f4:	4b32      	ldr	r3, [pc, #200]	; (80012c0 <USART_PeriClockControl+0x128>)
 80011f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011f8:	4a31      	ldr	r2, [pc, #196]	; (80012c0 <USART_PeriClockControl+0x128>)
 80011fa:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80011fe:	6413      	str	r3, [r2, #64]	; 0x40
}
 8001200:	e056      	b.n	80012b0 <USART_PeriClockControl+0x118>
		else if (pUSARTx == UART5)
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	4a32      	ldr	r2, [pc, #200]	; (80012d0 <USART_PeriClockControl+0x138>)
 8001206:	4293      	cmp	r3, r2
 8001208:	d106      	bne.n	8001218 <USART_PeriClockControl+0x80>
			UART5_PCLK_EN();
 800120a:	4b2d      	ldr	r3, [pc, #180]	; (80012c0 <USART_PeriClockControl+0x128>)
 800120c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800120e:	4a2c      	ldr	r2, [pc, #176]	; (80012c0 <USART_PeriClockControl+0x128>)
 8001210:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001214:	6413      	str	r3, [r2, #64]	; 0x40
}
 8001216:	e04b      	b.n	80012b0 <USART_PeriClockControl+0x118>
		else if (pUSARTx == USART6)
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	4a2e      	ldr	r2, [pc, #184]	; (80012d4 <USART_PeriClockControl+0x13c>)
 800121c:	4293      	cmp	r3, r2
 800121e:	d147      	bne.n	80012b0 <USART_PeriClockControl+0x118>
			USART6_PCLK_EN();
 8001220:	4b27      	ldr	r3, [pc, #156]	; (80012c0 <USART_PeriClockControl+0x128>)
 8001222:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001224:	4a26      	ldr	r2, [pc, #152]	; (80012c0 <USART_PeriClockControl+0x128>)
 8001226:	f043 0320 	orr.w	r3, r3, #32
 800122a:	6453      	str	r3, [r2, #68]	; 0x44
}
 800122c:	e040      	b.n	80012b0 <USART_PeriClockControl+0x118>
		if (pUSARTx == USART1)
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	4a22      	ldr	r2, [pc, #136]	; (80012bc <USART_PeriClockControl+0x124>)
 8001232:	4293      	cmp	r3, r2
 8001234:	d106      	bne.n	8001244 <USART_PeriClockControl+0xac>
			USART1_PCLK_DI();
 8001236:	4b22      	ldr	r3, [pc, #136]	; (80012c0 <USART_PeriClockControl+0x128>)
 8001238:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800123a:	4a21      	ldr	r2, [pc, #132]	; (80012c0 <USART_PeriClockControl+0x128>)
 800123c:	f023 0310 	bic.w	r3, r3, #16
 8001240:	6453      	str	r3, [r2, #68]	; 0x44
}
 8001242:	e035      	b.n	80012b0 <USART_PeriClockControl+0x118>
		else if (pUSARTx == USART2)
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	4a1f      	ldr	r2, [pc, #124]	; (80012c4 <USART_PeriClockControl+0x12c>)
 8001248:	4293      	cmp	r3, r2
 800124a:	d106      	bne.n	800125a <USART_PeriClockControl+0xc2>
			USART2_PCLK_DI();
 800124c:	4b1c      	ldr	r3, [pc, #112]	; (80012c0 <USART_PeriClockControl+0x128>)
 800124e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001250:	4a1b      	ldr	r2, [pc, #108]	; (80012c0 <USART_PeriClockControl+0x128>)
 8001252:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8001256:	6413      	str	r3, [r2, #64]	; 0x40
}
 8001258:	e02a      	b.n	80012b0 <USART_PeriClockControl+0x118>
		else if (pUSARTx == USART3)
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	4a1a      	ldr	r2, [pc, #104]	; (80012c8 <USART_PeriClockControl+0x130>)
 800125e:	4293      	cmp	r3, r2
 8001260:	d106      	bne.n	8001270 <USART_PeriClockControl+0xd8>
			USART3_PCLK_DI();
 8001262:	4b17      	ldr	r3, [pc, #92]	; (80012c0 <USART_PeriClockControl+0x128>)
 8001264:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001266:	4a16      	ldr	r2, [pc, #88]	; (80012c0 <USART_PeriClockControl+0x128>)
 8001268:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800126c:	6413      	str	r3, [r2, #64]	; 0x40
}
 800126e:	e01f      	b.n	80012b0 <USART_PeriClockControl+0x118>
		else if (pUSARTx == UART4)
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	4a16      	ldr	r2, [pc, #88]	; (80012cc <USART_PeriClockControl+0x134>)
 8001274:	4293      	cmp	r3, r2
 8001276:	d106      	bne.n	8001286 <USART_PeriClockControl+0xee>
			UART4_PCLK_DI();
 8001278:	4b11      	ldr	r3, [pc, #68]	; (80012c0 <USART_PeriClockControl+0x128>)
 800127a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800127c:	4a10      	ldr	r2, [pc, #64]	; (80012c0 <USART_PeriClockControl+0x128>)
 800127e:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8001282:	6413      	str	r3, [r2, #64]	; 0x40
}
 8001284:	e014      	b.n	80012b0 <USART_PeriClockControl+0x118>
		else if (pUSARTx == UART5)
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	4a11      	ldr	r2, [pc, #68]	; (80012d0 <USART_PeriClockControl+0x138>)
 800128a:	4293      	cmp	r3, r2
 800128c:	d106      	bne.n	800129c <USART_PeriClockControl+0x104>
			UART5_PCLK_DI();
 800128e:	4b0c      	ldr	r3, [pc, #48]	; (80012c0 <USART_PeriClockControl+0x128>)
 8001290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001292:	4a0b      	ldr	r2, [pc, #44]	; (80012c0 <USART_PeriClockControl+0x128>)
 8001294:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8001298:	6413      	str	r3, [r2, #64]	; 0x40
}
 800129a:	e009      	b.n	80012b0 <USART_PeriClockControl+0x118>
		else if (pUSARTx == USART6)
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	4a0d      	ldr	r2, [pc, #52]	; (80012d4 <USART_PeriClockControl+0x13c>)
 80012a0:	4293      	cmp	r3, r2
 80012a2:	d105      	bne.n	80012b0 <USART_PeriClockControl+0x118>
			USART6_PCLK_DI();
 80012a4:	4b06      	ldr	r3, [pc, #24]	; (80012c0 <USART_PeriClockControl+0x128>)
 80012a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012a8:	4a05      	ldr	r2, [pc, #20]	; (80012c0 <USART_PeriClockControl+0x128>)
 80012aa:	f023 0320 	bic.w	r3, r3, #32
 80012ae:	6453      	str	r3, [r2, #68]	; 0x44
}
 80012b0:	bf00      	nop
 80012b2:	370c      	adds	r7, #12
 80012b4:	46bd      	mov	sp, r7
 80012b6:	bc80      	pop	{r7}
 80012b8:	4770      	bx	lr
 80012ba:	bf00      	nop
 80012bc:	40011000 	.word	0x40011000
 80012c0:	40023800 	.word	0x40023800
 80012c4:	40004400 	.word	0x40004400
 80012c8:	40004800 	.word	0x40004800
 80012cc:	40004c00 	.word	0x40004c00
 80012d0:	40005000 	.word	0x40005000
 80012d4:	40011400 	.word	0x40011400

080012d8 <USART_PeripheralControl>:
 * Params: 		struct USART_RegDef_t *pUSARTx - USART/UART base address
 * 				uint8_t EnOrDi - Enable or disable communication (0 or 1)
 *
 */
void USART_PeripheralControl(USART_RegDef_t *pUSARTx, uint8_t EnOrDi)
{
 80012d8:	b480      	push	{r7}
 80012da:	b083      	sub	sp, #12
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
 80012e0:	460b      	mov	r3, r1
 80012e2:	70fb      	strb	r3, [r7, #3]
	if (EnOrDi == ENABLE)
 80012e4:	78fb      	ldrb	r3, [r7, #3]
 80012e6:	2b01      	cmp	r3, #1
 80012e8:	d106      	bne.n	80012f8 <USART_PeripheralControl+0x20>
	{
		pUSARTx->CR1 |= (1 << 13);
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	68db      	ldr	r3, [r3, #12]
 80012ee:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	60da      	str	r2, [r3, #12]
	}
	else
	{
		pUSARTx->CR1 |= ~(1 << 13);
	}
}
 80012f6:	e005      	b.n	8001304 <USART_PeripheralControl+0x2c>
		pUSARTx->CR1 |= ~(1 << 13);
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	68db      	ldr	r3, [r3, #12]
 80012fc:	f463 5200 	orn	r2, r3, #8192	; 0x2000
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	60da      	str	r2, [r3, #12]
}
 8001304:	bf00      	nop
 8001306:	370c      	adds	r7, #12
 8001308:	46bd      	mov	sp, r7
 800130a:	bc80      	pop	{r7}
 800130c:	4770      	bx	lr

0800130e <USART_GetFlagStatus>:
 * Params: 		struct USART_RegDef_t *pUSARTx - USART base address
 * 				uint8_t USART_FLAG - flag being checked
 *
 */
uint8_t USART_GetFlagStatus(USART_RegDef_t *pUSARTx, uint8_t USART_FLAG)
{
 800130e:	b480      	push	{r7}
 8001310:	b083      	sub	sp, #12
 8001312:	af00      	add	r7, sp, #0
 8001314:	6078      	str	r0, [r7, #4]
 8001316:	460b      	mov	r3, r1
 8001318:	70fb      	strb	r3, [r7, #3]
	return (pUSARTx->SR & USART_FLAG);
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	b2da      	uxtb	r2, r3
 8001320:	78fb      	ldrb	r3, [r7, #3]
 8001322:	4013      	ands	r3, r2
 8001324:	b2db      	uxtb	r3, r3
}
 8001326:	4618      	mov	r0, r3
 8001328:	370c      	adds	r7, #12
 800132a:	46bd      	mov	sp, r7
 800132c:	bc80      	pop	{r7}
 800132e:	4770      	bx	lr

08001330 <USART_ClearFlag>:
 * Params: 		struct USART_RegDef_t *pUSARTx - USART base address
 * 				uint8_t USART_FLAG - flag being cleared
 *
 */
void USART_ClearFlag(USART_RegDef_t *pUSARTx, uint8_t USART_FLAG)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b084      	sub	sp, #16
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
 8001338:	460b      	mov	r3, r1
 800133a:	70fb      	strb	r3, [r7, #3]
	int dummyRead, dummyWrite = 0xFF;
 800133c:	23ff      	movs	r3, #255	; 0xff
 800133e:	60fb      	str	r3, [r7, #12]

	if (USART_FLAG == USART_FLAG_PE)
 8001340:	78fb      	ldrb	r3, [r7, #3]
 8001342:	2b01      	cmp	r3, #1
 8001344:	d111      	bne.n	800136a <USART_ClearFlag+0x3a>
	{
		// Clear PE by waiting for RXNE, reading from SR, writing to DR
		while (!USART_GetFlagStatus(pUSARTx, USART_FLAG_RXNE));
 8001346:	bf00      	nop
 8001348:	2120      	movs	r1, #32
 800134a:	6878      	ldr	r0, [r7, #4]
 800134c:	f7ff ffdf 	bl	800130e <USART_GetFlagStatus>
 8001350:	4603      	mov	r3, r0
 8001352:	2b00      	cmp	r3, #0
 8001354:	d0f8      	beq.n	8001348 <USART_ClearFlag+0x18>
		dummyRead = pUSARTx->SR;
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	60bb      	str	r3, [r7, #8]
		pUSARTx->DR |= dummyWrite;
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	685a      	ldr	r2, [r3, #4]
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	431a      	orrs	r2, r3
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	605a      	str	r2, [r3, #4]
		// Clear CTS by writing to 0
		pUSARTx->SR &= ~(1 << 9);
	}

	(void)dummyRead;
}
 8001368:	e044      	b.n	80013f4 <USART_ClearFlag+0xc4>
	else if (USART_FLAG == USART_FLAG_FE)
 800136a:	78fb      	ldrb	r3, [r7, #3]
 800136c:	2b02      	cmp	r3, #2
 800136e:	d106      	bne.n	800137e <USART_ClearFlag+0x4e>
		dummyRead = pUSARTx->SR;
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	60bb      	str	r3, [r7, #8]
		dummyRead = pUSARTx->DR;
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	685b      	ldr	r3, [r3, #4]
 800137a:	60bb      	str	r3, [r7, #8]
}
 800137c:	e03a      	b.n	80013f4 <USART_ClearFlag+0xc4>
	else if (USART_FLAG == USART_FLAG_NF)
 800137e:	78fb      	ldrb	r3, [r7, #3]
 8001380:	2b04      	cmp	r3, #4
 8001382:	d106      	bne.n	8001392 <USART_ClearFlag+0x62>
		dummyRead = pUSARTx->SR;
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	60bb      	str	r3, [r7, #8]
		dummyRead = pUSARTx->DR;
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	685b      	ldr	r3, [r3, #4]
 800138e:	60bb      	str	r3, [r7, #8]
}
 8001390:	e030      	b.n	80013f4 <USART_ClearFlag+0xc4>
	else if (USART_FLAG == USART_FLAG_ORE)
 8001392:	78fb      	ldrb	r3, [r7, #3]
 8001394:	2b08      	cmp	r3, #8
 8001396:	d106      	bne.n	80013a6 <USART_ClearFlag+0x76>
		dummyRead = pUSARTx->SR;
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	60bb      	str	r3, [r7, #8]
		dummyRead = pUSARTx->DR;
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	685b      	ldr	r3, [r3, #4]
 80013a2:	60bb      	str	r3, [r7, #8]
}
 80013a4:	e026      	b.n	80013f4 <USART_ClearFlag+0xc4>
	else if (USART_FLAG == USART_FLAG_IDLE)
 80013a6:	78fb      	ldrb	r3, [r7, #3]
 80013a8:	2b10      	cmp	r3, #16
 80013aa:	d106      	bne.n	80013ba <USART_ClearFlag+0x8a>
		dummyRead = pUSARTx->SR;
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	60bb      	str	r3, [r7, #8]
		dummyRead = pUSARTx->DR;
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	685b      	ldr	r3, [r3, #4]
 80013b6:	60bb      	str	r3, [r7, #8]
}
 80013b8:	e01c      	b.n	80013f4 <USART_ClearFlag+0xc4>
	else if (USART_FLAG == USART_FLAG_RXNE)
 80013ba:	78fb      	ldrb	r3, [r7, #3]
 80013bc:	2b20      	cmp	r3, #32
 80013be:	d103      	bne.n	80013c8 <USART_ClearFlag+0x98>
		dummyRead = pUSARTx->DR;
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	685b      	ldr	r3, [r3, #4]
 80013c4:	60bb      	str	r3, [r7, #8]
}
 80013c6:	e015      	b.n	80013f4 <USART_ClearFlag+0xc4>
	else if (USART_FLAG == USART_FLAG_TC)
 80013c8:	78fb      	ldrb	r3, [r7, #3]
 80013ca:	2b40      	cmp	r3, #64	; 0x40
 80013cc:	d109      	bne.n	80013e2 <USART_ClearFlag+0xb2>
		dummyRead = pUSARTx->SR;
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	60bb      	str	r3, [r7, #8]
		pUSARTx->DR |= dummyWrite;
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	685a      	ldr	r2, [r3, #4]
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	431a      	orrs	r2, r3
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	605a      	str	r2, [r3, #4]
}
 80013e0:	e008      	b.n	80013f4 <USART_ClearFlag+0xc4>
	else if (USART_FLAG == USART_FLAG_TXE)
 80013e2:	78fb      	ldrb	r3, [r7, #3]
 80013e4:	2b80      	cmp	r3, #128	; 0x80
 80013e6:	d105      	bne.n	80013f4 <USART_ClearFlag+0xc4>
		pUSARTx->DR |= dummyWrite;
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	685a      	ldr	r2, [r3, #4]
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	431a      	orrs	r2, r3
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	605a      	str	r2, [r3, #4]
}
 80013f4:	bf00      	nop
 80013f6:	3710      	adds	r7, #16
 80013f8:	46bd      	mov	sp, r7
 80013fa:	bd80      	pop	{r7, pc}

080013fc <USART_SetBaudRate>:
 * Params: 		struct USART_RegDef_t *pUSARTx - USART base address
 * 				uint16_t USART_BaudRate - Baud rate to be set (bps)
 *
 */
void USART_SetBaudRate(USART_RegDef_t *pUSARTx, uint32_t USART_BaudRate)
{
 80013fc:	b590      	push	{r4, r7, lr}
 80013fe:	b087      	sub	sp, #28
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
 8001404:	6039      	str	r1, [r7, #0]
	uint32_t ApbClk;

	// 1. Get the peripheral clock to USART/UART
	if (pUSARTx == USART1 || pUSARTx == USART6)
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	4a49      	ldr	r2, [pc, #292]	; (8001530 <USART_SetBaudRate+0x134>)
 800140a:	4293      	cmp	r3, r2
 800140c:	d003      	beq.n	8001416 <USART_SetBaudRate+0x1a>
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	4a48      	ldr	r2, [pc, #288]	; (8001534 <USART_SetBaudRate+0x138>)
 8001412:	4293      	cmp	r3, r2
 8001414:	d103      	bne.n	800141e <USART_SetBaudRate+0x22>
	{
		ApbClk = RCC_GetAPB2CLK();
 8001416:	f7ff fe67 	bl	80010e8 <RCC_GetAPB2CLK>
 800141a:	6178      	str	r0, [r7, #20]
 800141c:	e002      	b.n	8001424 <USART_SetBaudRate+0x28>
	}
	else
	{
		ApbClk = RCC_GetAPB1CLK();
 800141e:	f7ff fe0b 	bl	8001038 <RCC_GetAPB1CLK>
 8001422:	6178      	str	r0, [r7, #20]
	}

	// 2. Calculate USARTDIV
	uint8_t over8 = (pUSARTx->CR1 & (1 << 15)) ? 1 : 0;
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	68db      	ldr	r3, [r3, #12]
 8001428:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800142c:	2b00      	cmp	r3, #0
 800142e:	bf14      	ite	ne
 8001430:	2301      	movne	r3, #1
 8001432:	2300      	moveq	r3, #0
 8001434:	b2db      	uxtb	r3, r3
 8001436:	73fb      	strb	r3, [r7, #15]
	float usartDiv = (ApbClk  * 100) / ((8 * (2 - over8)) * USART_BaudRate);   // Multiply hundred to get 2 decimal places
 8001438:	697b      	ldr	r3, [r7, #20]
 800143a:	2264      	movs	r2, #100	; 0x64
 800143c:	fb02 f203 	mul.w	r2, r2, r3
 8001440:	7bfb      	ldrb	r3, [r7, #15]
 8001442:	f1c3 0302 	rsb	r3, r3, #2
 8001446:	4619      	mov	r1, r3
 8001448:	683b      	ldr	r3, [r7, #0]
 800144a:	fb03 f301 	mul.w	r3, r3, r1
 800144e:	00db      	lsls	r3, r3, #3
 8001450:	fbb2 f3f3 	udiv	r3, r2, r3
 8001454:	4618      	mov	r0, r3
 8001456:	f7fe ffe9 	bl	800042c <__aeabi_ui2f>
 800145a:	4603      	mov	r3, r0
 800145c:	60bb      	str	r3, [r7, #8]

	// 3. Calculate mantissa and fraction (See USART 25.4.4 in datasheet for formulas)
	uint16_t mantissa = usartDiv / 100;
 800145e:	4936      	ldr	r1, [pc, #216]	; (8001538 <USART_SetBaudRate+0x13c>)
 8001460:	68b8      	ldr	r0, [r7, #8]
 8001462:	f7ff f8ef 	bl	8000644 <__aeabi_fdiv>
 8001466:	4603      	mov	r3, r0
 8001468:	4618      	mov	r0, r3
 800146a:	f7ff f987 	bl	800077c <__aeabi_f2uiz>
 800146e:	4603      	mov	r3, r0
 8001470:	827b      	strh	r3, [r7, #18]
	uint16_t fraction = (usartDiv - mantissa * 100) * (8 * (2 - over8));
 8001472:	8a7b      	ldrh	r3, [r7, #18]
 8001474:	2264      	movs	r2, #100	; 0x64
 8001476:	fb02 f303 	mul.w	r3, r2, r3
 800147a:	4618      	mov	r0, r3
 800147c:	f7fe ffda 	bl	8000434 <__aeabi_i2f>
 8001480:	4603      	mov	r3, r0
 8001482:	4619      	mov	r1, r3
 8001484:	68b8      	ldr	r0, [r7, #8]
 8001486:	f7fe ff1f 	bl	80002c8 <__aeabi_fsub>
 800148a:	4603      	mov	r3, r0
 800148c:	461c      	mov	r4, r3
 800148e:	7bfb      	ldrb	r3, [r7, #15]
 8001490:	f1c3 0302 	rsb	r3, r3, #2
 8001494:	00db      	lsls	r3, r3, #3
 8001496:	4618      	mov	r0, r3
 8001498:	f7fe ffcc 	bl	8000434 <__aeabi_i2f>
 800149c:	4603      	mov	r3, r0
 800149e:	4619      	mov	r1, r3
 80014a0:	4620      	mov	r0, r4
 80014a2:	f7ff f81b 	bl	80004dc <__aeabi_fmul>
 80014a6:	4603      	mov	r3, r0
 80014a8:	4618      	mov	r0, r3
 80014aa:	f7ff f967 	bl	800077c <__aeabi_f2uiz>
 80014ae:	4603      	mov	r3, r0
 80014b0:	823b      	strh	r3, [r7, #16]

	// Round fraction
	fraction = (fraction + 50) / 100;
 80014b2:	8a3b      	ldrh	r3, [r7, #16]
 80014b4:	3332      	adds	r3, #50	; 0x32
 80014b6:	4a21      	ldr	r2, [pc, #132]	; (800153c <USART_SetBaudRate+0x140>)
 80014b8:	fb82 1203 	smull	r1, r2, r2, r3
 80014bc:	1152      	asrs	r2, r2, #5
 80014be:	17db      	asrs	r3, r3, #31
 80014c0:	1ad3      	subs	r3, r2, r3
 80014c2:	823b      	strh	r3, [r7, #16]

	// 4. Carry over
	if (over8)
 80014c4:	7bfb      	ldrb	r3, [r7, #15]
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d017      	beq.n	80014fa <USART_SetBaudRate+0xfe>
	{
		// Fraction register is 3 bits
		if (fraction > 7)
 80014ca:	8a3b      	ldrh	r3, [r7, #16]
 80014cc:	2b07      	cmp	r3, #7
 80014ce:	d904      	bls.n	80014da <USART_SetBaudRate+0xde>
		{
			mantissa++;
 80014d0:	8a7b      	ldrh	r3, [r7, #18]
 80014d2:	3301      	adds	r3, #1
 80014d4:	827b      	strh	r3, [r7, #18]
			fraction = 0;
 80014d6:	2300      	movs	r3, #0
 80014d8:	823b      	strh	r3, [r7, #16]
		}

		pUSARTx->BRR |= (mantissa << 4);
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	689b      	ldr	r3, [r3, #8]
 80014de:	8a7a      	ldrh	r2, [r7, #18]
 80014e0:	0112      	lsls	r2, r2, #4
 80014e2:	431a      	orrs	r2, r3
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	609a      	str	r2, [r3, #8]
		pUSARTx->BRR |= ((fraction & 0x07) << 0);
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	689a      	ldr	r2, [r3, #8]
 80014ec:	8a3b      	ldrh	r3, [r7, #16]
 80014ee:	f003 0307 	and.w	r3, r3, #7
 80014f2:	431a      	orrs	r2, r3
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	609a      	str	r2, [r3, #8]
		}

		pUSARTx->BRR |= (mantissa << 4);
		pUSARTx->BRR |= ((fraction & 0x0F) << 0);
	}
}
 80014f8:	e016      	b.n	8001528 <USART_SetBaudRate+0x12c>
		if (fraction > 15)
 80014fa:	8a3b      	ldrh	r3, [r7, #16]
 80014fc:	2b0f      	cmp	r3, #15
 80014fe:	d904      	bls.n	800150a <USART_SetBaudRate+0x10e>
			mantissa++;
 8001500:	8a7b      	ldrh	r3, [r7, #18]
 8001502:	3301      	adds	r3, #1
 8001504:	827b      	strh	r3, [r7, #18]
			fraction = 0;
 8001506:	2300      	movs	r3, #0
 8001508:	823b      	strh	r3, [r7, #16]
		pUSARTx->BRR |= (mantissa << 4);
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	689b      	ldr	r3, [r3, #8]
 800150e:	8a7a      	ldrh	r2, [r7, #18]
 8001510:	0112      	lsls	r2, r2, #4
 8001512:	431a      	orrs	r2, r3
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	609a      	str	r2, [r3, #8]
		pUSARTx->BRR |= ((fraction & 0x0F) << 0);
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	689a      	ldr	r2, [r3, #8]
 800151c:	8a3b      	ldrh	r3, [r7, #16]
 800151e:	f003 030f 	and.w	r3, r3, #15
 8001522:	431a      	orrs	r2, r3
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	609a      	str	r2, [r3, #8]
}
 8001528:	bf00      	nop
 800152a:	371c      	adds	r7, #28
 800152c:	46bd      	mov	sp, r7
 800152e:	bd90      	pop	{r4, r7, pc}
 8001530:	40011000 	.word	0x40011000
 8001534:	40011400 	.word	0x40011400
 8001538:	42c80000 	.word	0x42c80000
 800153c:	51eb851f 	.word	0x51eb851f

08001540 <USART_Init>:
 *
 * Params: 		struct USART_Handle_t *pUSARTxHandle - USART peripheral handle
 *
 */
void USART_Init(USART_Handle_t *pUSARTxHandle)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b082      	sub	sp, #8
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
	// 1. Give clock signal to USART/UART bus
	USART_PeriClockControl(pUSARTxHandle->pUSARTx, ENABLE);
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	2101      	movs	r1, #1
 800154e:	4618      	mov	r0, r3
 8001550:	f7ff fe22 	bl	8001198 <USART_PeriClockControl>

	// 2. Enable USART/UART peripheral
	USART_PeripheralControl(pUSARTxHandle->pUSARTx, ENABLE);
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	2101      	movs	r1, #1
 800155a:	4618      	mov	r0, r3
 800155c:	f7ff febc 	bl	80012d8 <USART_PeripheralControl>

	// 3. Set the data length
	if (pUSARTxHandle->USART_Config.USART_WordLen == USART_9BIT_DATA)
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	7b5b      	ldrb	r3, [r3, #13]
 8001564:	2b01      	cmp	r3, #1
 8001566:	d107      	bne.n	8001578 <USART_Init+0x38>
	{
		pUSARTxHandle->pUSARTx->CR1 |= (1 << 12);
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	68da      	ldr	r2, [r3, #12]
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001576:	60da      	str	r2, [r3, #12]
	}

	// 4. Parity setup
	if (pUSARTxHandle->USART_Config.USART_ParitySet != USART_PARITY_DISABLE)
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	7b9b      	ldrb	r3, [r3, #14]
 800157c:	2b00      	cmp	r3, #0
 800157e:	d020      	beq.n	80015c2 <USART_Init+0x82>
	{
		pUSARTxHandle->pUSARTx->CR1 |= (1 << 10);
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	68da      	ldr	r2, [r3, #12]
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800158e:	60da      	str	r2, [r3, #12]

		if (pUSARTxHandle->USART_Config.USART_ParitySet == USART_EVEN_PARITY)
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	7b9b      	ldrb	r3, [r3, #14]
 8001594:	2b01      	cmp	r3, #1
 8001596:	d108      	bne.n	80015aa <USART_Init+0x6a>
		{
			pUSARTxHandle->pUSARTx->CR1 &= ~(1 << 9);
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	68da      	ldr	r2, [r3, #12]
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80015a6:	60da      	str	r2, [r3, #12]
 80015a8:	e00b      	b.n	80015c2 <USART_Init+0x82>
		}
		else if (pUSARTxHandle->USART_Config.USART_ParitySet == USART_ODD_PARITY)
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	7b9b      	ldrb	r3, [r3, #14]
 80015ae:	2b02      	cmp	r3, #2
 80015b0:	d107      	bne.n	80015c2 <USART_Init+0x82>
		{
			pUSARTxHandle->pUSARTx->CR1 |= (1 << 9);
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	68da      	ldr	r2, [r3, #12]
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80015c0:	60da      	str	r2, [r3, #12]
		}
	}

	// 5. Set number of stop bits
	pUSARTxHandle->pUSARTx->CR2 &= ~(0x3 << 12);
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	691a      	ldr	r2, [r3, #16]
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 80015d0:	611a      	str	r2, [r3, #16]

	if (pUSARTxHandle->USART_Config.USART_StopBits == USART_HALF_STOP)
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	7b1b      	ldrb	r3, [r3, #12]
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d108      	bne.n	80015ec <USART_Init+0xac>
	{
		pUSARTxHandle->pUSARTx->CR2 |= (1 << 12);
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	691a      	ldr	r2, [r3, #16]
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80015e8:	611a      	str	r2, [r3, #16]
 80015ea:	e018      	b.n	800161e <USART_Init+0xde>
	}
	else if (pUSARTxHandle->USART_Config.USART_StopBits == USART_2_STOP)
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	7b1b      	ldrb	r3, [r3, #12]
 80015f0:	2b03      	cmp	r3, #3
 80015f2:	d108      	bne.n	8001606 <USART_Init+0xc6>
	{
		pUSARTxHandle->pUSARTx->CR2 |= (0x2 << 12);
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	691a      	ldr	r2, [r3, #16]
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001602:	611a      	str	r2, [r3, #16]
 8001604:	e00b      	b.n	800161e <USART_Init+0xde>
	}
	else if (pUSARTxHandle->USART_Config.USART_StopBits == USART_1ANDHALF_STOP)
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	7b1b      	ldrb	r3, [r3, #12]
 800160a:	2b02      	cmp	r3, #2
 800160c:	d107      	bne.n	800161e <USART_Init+0xde>
	{
		pUSARTxHandle->pUSARTx->CR2 |= (0x3 << 12);
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	691a      	ldr	r2, [r3, #16]
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	f442 5240 	orr.w	r2, r2, #12288	; 0x3000
 800161c:	611a      	str	r2, [r3, #16]
	}

	// 6. Set over sampling mode
	if (pUSARTxHandle->USART_Config.USART_Oversampling == USART_OVERSMPL_8)
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	7c1b      	ldrb	r3, [r3, #16]
 8001622:	2b01      	cmp	r3, #1
 8001624:	d108      	bne.n	8001638 <USART_Init+0xf8>
	{
		pUSARTxHandle->pUSARTx->CR1 |= (1 << 15);
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	68da      	ldr	r2, [r3, #12]
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001634:	60da      	str	r2, [r3, #12]
 8001636:	e007      	b.n	8001648 <USART_Init+0x108>
	}
	else
	{
		pUSARTxHandle->pUSARTx->CR1 &= ~(1 << 15);
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	68da      	ldr	r2, [r3, #12]
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001646:	60da      	str	r2, [r3, #12]
	}

	// 7. Set baud rate
	USART_SetBaudRate(pUSARTxHandle->pUSARTx, pUSARTxHandle->USART_Config.USART_BaudRate);
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681a      	ldr	r2, [r3, #0]
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	689b      	ldr	r3, [r3, #8]
 8001650:	4619      	mov	r1, r3
 8001652:	4610      	mov	r0, r2
 8001654:	f7ff fed2 	bl	80013fc <USART_SetBaudRate>

	// 8. Set Tx/Rx mode
	if (pUSARTxHandle->USART_Config.USART_Mode == USART_RX_ONLY)
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	791b      	ldrb	r3, [r3, #4]
 800165c:	2b00      	cmp	r3, #0
 800165e:	d108      	bne.n	8001672 <USART_Init+0x132>
	{
		pUSARTxHandle->pUSARTx->CR1 |= (1 << 2);
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	68da      	ldr	r2, [r3, #12]
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	f042 0204 	orr.w	r2, r2, #4
 800166e:	60da      	str	r2, [r3, #12]
 8001670:	e018      	b.n	80016a4 <USART_Init+0x164>
	}
	else if (pUSARTxHandle->USART_Config.USART_Mode == USART_TX_ONLY)
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	791b      	ldrb	r3, [r3, #4]
 8001676:	2b01      	cmp	r3, #1
 8001678:	d108      	bne.n	800168c <USART_Init+0x14c>
	{
		pUSARTxHandle->pUSARTx->CR1 |= (1 << 3);
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	68da      	ldr	r2, [r3, #12]
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	f042 0208 	orr.w	r2, r2, #8
 8001688:	60da      	str	r2, [r3, #12]
 800168a:	e00b      	b.n	80016a4 <USART_Init+0x164>
	}
	else if (pUSARTxHandle->USART_Config.USART_Mode == USART_RX_TX)
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	791b      	ldrb	r3, [r3, #4]
 8001690:	2b02      	cmp	r3, #2
 8001692:	d107      	bne.n	80016a4 <USART_Init+0x164>
	{
		pUSARTxHandle->pUSARTx->CR1 |= (1 << 3) | (1 << 2);
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	68da      	ldr	r2, [r3, #12]
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	f042 020c 	orr.w	r2, r2, #12
 80016a2:	60da      	str	r2, [r3, #12]
	}

	// 9. Hardware flow control setup
	pUSARTxHandle->pUSARTx->CR2 &= ~(0x3 << 8);
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	691a      	ldr	r2, [r3, #16]
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80016b2:	611a      	str	r2, [r3, #16]

	if (pUSARTxHandle->USART_Config.USART_HWFlowCtrl == USART_RTS_ON)
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	7bdb      	ldrb	r3, [r3, #15]
 80016b8:	2b01      	cmp	r3, #1
 80016ba:	d108      	bne.n	80016ce <USART_Init+0x18e>
	{
		pUSARTxHandle->pUSARTx->CR3 |= (1 << 8);
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	695a      	ldr	r2, [r3, #20]
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80016ca:	615a      	str	r2, [r3, #20]
	}
	else if (pUSARTxHandle->USART_Config.USART_HWFlowCtrl == USART_RTS_CTS_ON)
	{
		pUSARTxHandle->pUSARTx->CR3 |= (0x3 << 8);
	}
}
 80016cc:	e018      	b.n	8001700 <USART_Init+0x1c0>
	else if (pUSARTxHandle->USART_Config.USART_HWFlowCtrl == USART_CTS_ON)
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	7bdb      	ldrb	r3, [r3, #15]
 80016d2:	2b02      	cmp	r3, #2
 80016d4:	d108      	bne.n	80016e8 <USART_Init+0x1a8>
		pUSARTxHandle->pUSARTx->CR3 |= (1 << 9);
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	695a      	ldr	r2, [r3, #20]
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80016e4:	615a      	str	r2, [r3, #20]
}
 80016e6:	e00b      	b.n	8001700 <USART_Init+0x1c0>
	else if (pUSARTxHandle->USART_Config.USART_HWFlowCtrl == USART_RTS_CTS_ON)
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	7bdb      	ldrb	r3, [r3, #15]
 80016ec:	2b03      	cmp	r3, #3
 80016ee:	d107      	bne.n	8001700 <USART_Init+0x1c0>
		pUSARTxHandle->pUSARTx->CR3 |= (0x3 << 8);
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	695a      	ldr	r2, [r3, #20]
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 80016fe:	615a      	str	r2, [r3, #20]
}
 8001700:	bf00      	nop
 8001702:	3708      	adds	r7, #8
 8001704:	46bd      	mov	sp, r7
 8001706:	bd80      	pop	{r7, pc}

08001708 <USART_Write>:
 * 				uint8_t* pTxBuffer - pointer to location of data to send
 * 				uint32_t len - number of 8-bit data packets to be sent
 *
 */
void USART_Write(USART_Handle_t *pUSARTxHandle, uint8_t *pTxBuffer, uint8_t len)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b084      	sub	sp, #16
 800170c:	af00      	add	r7, sp, #0
 800170e:	60f8      	str	r0, [r7, #12]
 8001710:	60b9      	str	r1, [r7, #8]
 8001712:	4613      	mov	r3, r2
 8001714:	71fb      	strb	r3, [r7, #7]
	while (len > 0)
 8001716:	e030      	b.n	800177a <USART_Write+0x72>
	{
		// 1. Send start with TE
		pUSARTxHandle->pUSARTx->CR1 |= (1 << 3);
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	68da      	ldr	r2, [r3, #12]
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f042 0208 	orr.w	r2, r2, #8
 8001726:	60da      	str	r2, [r3, #12]

		// 2. Wait for TXE flag
		while(!USART_GetFlagStatus(pUSARTxHandle->pUSARTx, USART_FLAG_TXE));
 8001728:	bf00      	nop
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	2180      	movs	r1, #128	; 0x80
 8001730:	4618      	mov	r0, r3
 8001732:	f7ff fdec 	bl	800130e <USART_GetFlagStatus>
 8001736:	4603      	mov	r3, r0
 8001738:	2b00      	cmp	r3, #0
 800173a:	d0f6      	beq.n	800172a <USART_Write+0x22>

		// 3. Write data (how many bits depends on word length and parity)
		if (pUSARTxHandle->USART_Config.USART_WordLen == USART_9BIT_DATA)
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	7b5b      	ldrb	r3, [r3, #13]
 8001740:	2b01      	cmp	r3, #1
 8001742:	d10f      	bne.n	8001764 <USART_Write+0x5c>
		{
			// Send 9 bits of data
			pUSARTxHandle->pUSARTx->DR = (uint16_t)(*pTxBuffer) & (0x01FF);
 8001744:	68bb      	ldr	r3, [r7, #8]
 8001746:	781a      	ldrb	r2, [r3, #0]
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	605a      	str	r2, [r3, #4]

			// If parity disabled, 9 bits of useful data sent - increment data buffer accordingly
			if (pUSARTxHandle->USART_Config.USART_ParitySet == USART_PARITY_DISABLE)
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	7b9b      	ldrb	r3, [r3, #14]
 8001752:	2b00      	cmp	r3, #0
 8001754:	d10b      	bne.n	800176e <USART_Write+0x66>
			{
				pTxBuffer++;
 8001756:	68bb      	ldr	r3, [r7, #8]
 8001758:	3301      	adds	r3, #1
 800175a:	60bb      	str	r3, [r7, #8]
				len--;
 800175c:	79fb      	ldrb	r3, [r7, #7]
 800175e:	3b01      	subs	r3, #1
 8001760:	71fb      	strb	r3, [r7, #7]
 8001762:	e004      	b.n	800176e <USART_Write+0x66>
			}
		}
		else
		{
			pUSARTxHandle->pUSARTx->DR = *pTxBuffer;
 8001764:	68bb      	ldr	r3, [r7, #8]
 8001766:	781a      	ldrb	r2, [r3, #0]
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	605a      	str	r2, [r3, #4]
		}

		pTxBuffer++;
 800176e:	68bb      	ldr	r3, [r7, #8]
 8001770:	3301      	adds	r3, #1
 8001772:	60bb      	str	r3, [r7, #8]
		len--;
 8001774:	79fb      	ldrb	r3, [r7, #7]
 8001776:	3b01      	subs	r3, #1
 8001778:	71fb      	strb	r3, [r7, #7]
	while (len > 0)
 800177a:	79fb      	ldrb	r3, [r7, #7]
 800177c:	2b00      	cmp	r3, #0
 800177e:	d1cb      	bne.n	8001718 <USART_Write+0x10>
	}

	// 4. Wait for TC flag to indicate transmission complete
	while(!USART_GetFlagStatus(pUSARTxHandle->pUSARTx, USART_FLAG_TC));
 8001780:	bf00      	nop
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	2140      	movs	r1, #64	; 0x40
 8001788:	4618      	mov	r0, r3
 800178a:	f7ff fdc0 	bl	800130e <USART_GetFlagStatus>
 800178e:	4603      	mov	r3, r0
 8001790:	2b00      	cmp	r3, #0
 8001792:	d0f6      	beq.n	8001782 <USART_Write+0x7a>

	// 5. Clear the TC bit
	USART_ClearFlag(pUSARTxHandle->pUSARTx, USART_FLAG_TC);
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	2140      	movs	r1, #64	; 0x40
 800179a:	4618      	mov	r0, r3
 800179c:	f7ff fdc8 	bl	8001330 <USART_ClearFlag>

	// 6. End transmission by clearing TE
	pUSARTxHandle->pUSARTx->CR1 &= ~(1 << 3);
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	68da      	ldr	r2, [r3, #12]
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	f022 0208 	bic.w	r2, r2, #8
 80017ae:	60da      	str	r2, [r3, #12]
}
 80017b0:	bf00      	nop
 80017b2:	3710      	adds	r7, #16
 80017b4:	46bd      	mov	sp, r7
 80017b6:	bd80      	pop	{r7, pc}

080017b8 <GPIO_AI_Init>:
/* Handle for USART2 */
USART_Handle_t Usart_Handle;


/* Initialize the GPIO Pin for ADC input */
void GPIO_AI_Init() {
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b084      	sub	sp, #16
 80017bc:	af00      	add	r7, sp, #0
	// Initialization of LED driving GPIO
	GPIO_Handle_t GpioAI;

	GpioAI.pGPIOx = GPIOA;
 80017be:	4b0a      	ldr	r3, [pc, #40]	; (80017e8 <GPIO_AI_Init+0x30>)
 80017c0:	607b      	str	r3, [r7, #4]

	GpioAI.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NUM_0;
 80017c2:	2300      	movs	r3, #0
 80017c4:	723b      	strb	r3, [r7, #8]
	GpioAI.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ANALOG;
 80017c6:	2303      	movs	r3, #3
 80017c8:	727b      	strb	r3, [r7, #9]
	GpioAI.GPIO_PinConfig.GPIO_OpType = GPIO_OTYPE_PUPL;
 80017ca:	2300      	movs	r3, #0
 80017cc:	733b      	strb	r3, [r7, #12]
	GpioAI.GPIO_PinConfig.GPIO_PinSpeed = GPIO_HIGH_SPEED;
 80017ce:	2303      	movs	r3, #3
 80017d0:	72bb      	strb	r3, [r7, #10]
	GpioAI.GPIO_PinConfig.GPIO_PuPdCtrl = GPIO_PUPD_NONE;
 80017d2:	2300      	movs	r3, #0
 80017d4:	72fb      	strb	r3, [r7, #11]

	GPIO_Init(&GpioAI);
 80017d6:	1d3b      	adds	r3, r7, #4
 80017d8:	4618      	mov	r0, r3
 80017da:	f7ff facf 	bl	8000d7c <GPIO_Init>
}
 80017de:	bf00      	nop
 80017e0:	3710      	adds	r7, #16
 80017e2:	46bd      	mov	sp, r7
 80017e4:	bd80      	pop	{r7, pc}
 80017e6:	bf00      	nop
 80017e8:	40020000 	.word	0x40020000

080017ec <USART2_Config>:

/*
 * Configure USART2 in Tx
 */
void USART2_Config()
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	af00      	add	r7, sp, #0
	// Handle globally defined
	Usart_Handle.USART_Config.USART_Mode = USART_RX_TX;
 80017f0:	4b0e      	ldr	r3, [pc, #56]	; (800182c <USART2_Config+0x40>)
 80017f2:	2202      	movs	r2, #2
 80017f4:	711a      	strb	r2, [r3, #4]
	Usart_Handle.USART_Config.USART_BaudRate = USART_BAUD_9600;
 80017f6:	4b0d      	ldr	r3, [pc, #52]	; (800182c <USART2_Config+0x40>)
 80017f8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80017fc:	609a      	str	r2, [r3, #8]
	Usart_Handle.USART_Config.USART_ParitySet = USART_PARITY_DISABLE;
 80017fe:	4b0b      	ldr	r3, [pc, #44]	; (800182c <USART2_Config+0x40>)
 8001800:	2200      	movs	r2, #0
 8001802:	739a      	strb	r2, [r3, #14]
	Usart_Handle.USART_Config.USART_StopBits = USART_1_STOP;
 8001804:	4b09      	ldr	r3, [pc, #36]	; (800182c <USART2_Config+0x40>)
 8001806:	2201      	movs	r2, #1
 8001808:	731a      	strb	r2, [r3, #12]
	Usart_Handle.USART_Config.USART_WordLen = USART_8BIT_DATA;
 800180a:	4b08      	ldr	r3, [pc, #32]	; (800182c <USART2_Config+0x40>)
 800180c:	2200      	movs	r2, #0
 800180e:	735a      	strb	r2, [r3, #13]
	Usart_Handle.USART_Config.USART_Oversampling = USART_OVERSMPL_8;
 8001810:	4b06      	ldr	r3, [pc, #24]	; (800182c <USART2_Config+0x40>)
 8001812:	2201      	movs	r2, #1
 8001814:	741a      	strb	r2, [r3, #16]
	Usart_Handle.USART_Config.USART_HWFlowCtrl = USART_HWCTRL_NONE;
 8001816:	4b05      	ldr	r3, [pc, #20]	; (800182c <USART2_Config+0x40>)
 8001818:	2200      	movs	r2, #0
 800181a:	73da      	strb	r2, [r3, #15]
	Usart_Handle.pUSARTx = USART2;
 800181c:	4b03      	ldr	r3, [pc, #12]	; (800182c <USART2_Config+0x40>)
 800181e:	4a04      	ldr	r2, [pc, #16]	; (8001830 <USART2_Config+0x44>)
 8001820:	601a      	str	r2, [r3, #0]

	USART_Init(&Usart_Handle);
 8001822:	4802      	ldr	r0, [pc, #8]	; (800182c <USART2_Config+0x40>)
 8001824:	f7ff fe8c 	bl	8001540 <USART_Init>
}
 8001828:	bf00      	nop
 800182a:	bd80      	pop	{r7, pc}
 800182c:	20000164 	.word	0x20000164
 8001830:	40004400 	.word	0x40004400

08001834 <ADC1_In_Init>:


/* Initialize ADC1 for 12-bit readings */
void ADC1_In_Init() {
 8001834:	b580      	push	{r7, lr}
 8001836:	af00      	add	r7, sp, #0
	Adc_Input.pADCx = ADC1;
 8001838:	4b08      	ldr	r3, [pc, #32]	; (800185c <ADC1_In_Init+0x28>)
 800183a:	4a09      	ldr	r2, [pc, #36]	; (8001860 <ADC1_In_Init+0x2c>)
 800183c:	601a      	str	r2, [r3, #0]

	Adc_Input.ADC_Config.ADC_Res = ADC_RES_12BIT;
 800183e:	4b07      	ldr	r3, [pc, #28]	; (800185c <ADC1_In_Init+0x28>)
 8001840:	2200      	movs	r2, #0
 8001842:	711a      	strb	r2, [r3, #4]
	Adc_Input.ADC_Config.ADC_PreSc = ADC_PCLK_DIV2;
 8001844:	4b05      	ldr	r3, [pc, #20]	; (800185c <ADC1_In_Init+0x28>)
 8001846:	2200      	movs	r2, #0
 8001848:	715a      	strb	r2, [r3, #5]
	Adc_Input.ADC_Config.ADC_Ext_Trig = ADC_EXTEN_DI;
 800184a:	4b04      	ldr	r3, [pc, #16]	; (800185c <ADC1_In_Init+0x28>)
 800184c:	2200      	movs	r2, #0
 800184e:	719a      	strb	r2, [r3, #6]

	ADC_Init(&Adc_Input);
 8001850:	4802      	ldr	r0, [pc, #8]	; (800185c <ADC1_In_Init+0x28>)
 8001852:	f7ff f80b 	bl	800086c <ADC_Init>
}
 8001856:	bf00      	nop
 8001858:	bd80      	pop	{r7, pc}
 800185a:	bf00      	nop
 800185c:	20000158 	.word	0x20000158
 8001860:	40012000 	.word	0x40012000

08001864 <ADC_IRQHandler>:

/* Call implemented ADC IRQ handler */
void ADC_IRQHandler() {
 8001864:	b580      	push	{r7, lr}
 8001866:	af00      	add	r7, sp, #0
	ADC_EV_IRQHandling(&Adc_Input);
 8001868:	4802      	ldr	r0, [pc, #8]	; (8001874 <ADC_IRQHandler+0x10>)
 800186a:	f7ff f8f1 	bl	8000a50 <ADC_EV_IRQHandling>
}
 800186e:	bf00      	nop
 8001870:	bd80      	pop	{r7, pc}
 8001872:	bf00      	nop
 8001874:	20000158 	.word	0x20000158

08001878 <main>:

int main(void) {
 8001878:	b580      	push	{r7, lr}
 800187a:	af00      	add	r7, sp, #0
	// Enable semi-hosting
	initialise_monitor_handles();
 800187c:	f000 fab6 	bl	8001dec <initialise_monitor_handles>

	/* initialize GPIO PA0 as AI */
	GPIO_AI_Init();
 8001880:	f7ff ff9a 	bl	80017b8 <GPIO_AI_Init>

	/* initialize UART2 for sending data via ST-Link */
	USART2_Config();
 8001884:	f7ff ffb2 	bl	80017ec <USART2_Config>

	/* initialize ADC1 */
	ADC1_In_Init();
 8001888:	f7ff ffd4 	bl	8001834 <ADC1_In_Init>

	/* set data buffer */
	Adc_Input.pDataBuffer = &value;
 800188c:	4b04      	ldr	r3, [pc, #16]	; (80018a0 <main+0x28>)
 800188e:	4a05      	ldr	r2, [pc, #20]	; (80018a4 <main+0x2c>)
 8001890:	609a      	str	r2, [r3, #8]

	/* begin continuous read from ADC */
	ADC_Read_Channel(&Adc_Input, ADC_IN0, ADC_SMP_3CYC, ADC_CONT_READ);
 8001892:	2301      	movs	r3, #1
 8001894:	2200      	movs	r2, #0
 8001896:	2100      	movs	r1, #0
 8001898:	4801      	ldr	r0, [pc, #4]	; (80018a0 <main+0x28>)
 800189a:	f7ff f817 	bl	80008cc <ADC_Read_Channel>


	while(1) {
 800189e:	e7fe      	b.n	800189e <main+0x26>
 80018a0:	20000158 	.word	0x20000158
 80018a4:	2000018c 	.word	0x2000018c

080018a8 <ADC_ApplicationCallbackEvent>:

	return 0;
}

void ADC_ApplicationCallbackEvent(ADC_Handle_t *pADCxHandle, uint8_t event)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b082      	sub	sp, #8
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
 80018b0:	460b      	mov	r3, r1
 80018b2:	70fb      	strb	r3, [r7, #3]
	if (event == ADC_READ_CMPLT)
 80018b4:	78fb      	ldrb	r3, [r7, #3]
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d10a      	bne.n	80018d0 <ADC_ApplicationCallbackEvent+0x28>
	{
		USART_Write(&Usart_Handle, (uint8_t*)&value, (uint8_t)2);
 80018ba:	2202      	movs	r2, #2
 80018bc:	4906      	ldr	r1, [pc, #24]	; (80018d8 <ADC_ApplicationCallbackEvent+0x30>)
 80018be:	4807      	ldr	r0, [pc, #28]	; (80018dc <ADC_ApplicationCallbackEvent+0x34>)
 80018c0:	f7ff ff22 	bl	8001708 <USART_Write>
		printf("ADC value is: [%i]\n", value);
 80018c4:	4b04      	ldr	r3, [pc, #16]	; (80018d8 <ADC_ApplicationCallbackEvent+0x30>)
 80018c6:	881b      	ldrh	r3, [r3, #0]
 80018c8:	4619      	mov	r1, r3
 80018ca:	4805      	ldr	r0, [pc, #20]	; (80018e0 <ADC_ApplicationCallbackEvent+0x38>)
 80018cc:	f000 fc5e 	bl	800218c <iprintf>
	}
}
 80018d0:	bf00      	nop
 80018d2:	3708      	adds	r7, #8
 80018d4:	46bd      	mov	sp, r7
 80018d6:	bd80      	pop	{r7, pc}
 80018d8:	2000018c 	.word	0x2000018c
 80018dc:	20000164 	.word	0x20000164
 80018e0:	08002d20 	.word	0x08002d20

080018e4 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b084      	sub	sp, #16
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80018ec:	4b11      	ldr	r3, [pc, #68]	; (8001934 <_sbrk+0x50>)
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d102      	bne.n	80018fa <_sbrk+0x16>
		heap_end = &end;
 80018f4:	4b0f      	ldr	r3, [pc, #60]	; (8001934 <_sbrk+0x50>)
 80018f6:	4a10      	ldr	r2, [pc, #64]	; (8001938 <_sbrk+0x54>)
 80018f8:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80018fa:	4b0e      	ldr	r3, [pc, #56]	; (8001934 <_sbrk+0x50>)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001900:	4b0c      	ldr	r3, [pc, #48]	; (8001934 <_sbrk+0x50>)
 8001902:	681a      	ldr	r2, [r3, #0]
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	4413      	add	r3, r2
 8001908:	466a      	mov	r2, sp
 800190a:	4293      	cmp	r3, r2
 800190c:	d907      	bls.n	800191e <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800190e:	f000 fae7 	bl	8001ee0 <__errno>
 8001912:	4602      	mov	r2, r0
 8001914:	230c      	movs	r3, #12
 8001916:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8001918:	f04f 33ff 	mov.w	r3, #4294967295
 800191c:	e006      	b.n	800192c <_sbrk+0x48>
	}

	heap_end += incr;
 800191e:	4b05      	ldr	r3, [pc, #20]	; (8001934 <_sbrk+0x50>)
 8001920:	681a      	ldr	r2, [r3, #0]
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	4413      	add	r3, r2
 8001926:	4a03      	ldr	r2, [pc, #12]	; (8001934 <_sbrk+0x50>)
 8001928:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800192a:	68fb      	ldr	r3, [r7, #12]
}
 800192c:	4618      	mov	r0, r3
 800192e:	3710      	adds	r7, #16
 8001930:	46bd      	mov	sp, r7
 8001932:	bd80      	pop	{r7, pc}
 8001934:	200000a0 	.word	0x200000a0
 8001938:	20000198 	.word	0x20000198

0800193c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800193c:	480d      	ldr	r0, [pc, #52]	; (8001974 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800193e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001940:	480d      	ldr	r0, [pc, #52]	; (8001978 <LoopForever+0x6>)
  ldr r1, =_edata
 8001942:	490e      	ldr	r1, [pc, #56]	; (800197c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001944:	4a0e      	ldr	r2, [pc, #56]	; (8001980 <LoopForever+0xe>)
  movs r3, #0
 8001946:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001948:	e002      	b.n	8001950 <LoopCopyDataInit>

0800194a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800194a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800194c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800194e:	3304      	adds	r3, #4

08001950 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001950:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001952:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001954:	d3f9      	bcc.n	800194a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001956:	4a0b      	ldr	r2, [pc, #44]	; (8001984 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001958:	4c0b      	ldr	r4, [pc, #44]	; (8001988 <LoopForever+0x16>)
  movs r3, #0
 800195a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800195c:	e001      	b.n	8001962 <LoopFillZerobss>

0800195e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800195e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001960:	3204      	adds	r2, #4

08001962 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001962:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001964:	d3fb      	bcc.n	800195e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001966:	f3af 8000 	nop.w
/* Call static constructors */
  bl __libc_init_array
 800196a:	f000 fb89 	bl	8002080 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800196e:	f7ff ff83 	bl	8001878 <main>

08001972 <LoopForever>:

LoopForever:
    b LoopForever
 8001972:	e7fe      	b.n	8001972 <LoopForever>
  ldr   r0, =_estack
 8001974:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001978:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800197c:	20000084 	.word	0x20000084
  ldr r2, =_sidata
 8001980:	08002df0 	.word	0x08002df0
  ldr r2, =_sbss
 8001984:	20000084 	.word	0x20000084
  ldr r4, =_ebss
 8001988:	20000194 	.word	0x20000194

0800198c <BusFault_Handler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800198c:	e7fe      	b.n	800198c <BusFault_Handler>
	...

08001990 <findslot>:
 8001990:	4b0a      	ldr	r3, [pc, #40]	; (80019bc <findslot+0x2c>)
 8001992:	b510      	push	{r4, lr}
 8001994:	4604      	mov	r4, r0
 8001996:	6818      	ldr	r0, [r3, #0]
 8001998:	b118      	cbz	r0, 80019a2 <findslot+0x12>
 800199a:	6983      	ldr	r3, [r0, #24]
 800199c:	b90b      	cbnz	r3, 80019a2 <findslot+0x12>
 800199e:	f000 fae5 	bl	8001f6c <__sinit>
 80019a2:	2c13      	cmp	r4, #19
 80019a4:	d807      	bhi.n	80019b6 <findslot+0x26>
 80019a6:	4806      	ldr	r0, [pc, #24]	; (80019c0 <findslot+0x30>)
 80019a8:	f850 3034 	ldr.w	r3, [r0, r4, lsl #3]
 80019ac:	3301      	adds	r3, #1
 80019ae:	d002      	beq.n	80019b6 <findslot+0x26>
 80019b0:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 80019b4:	bd10      	pop	{r4, pc}
 80019b6:	2000      	movs	r0, #0
 80019b8:	e7fc      	b.n	80019b4 <findslot+0x24>
 80019ba:	bf00      	nop
 80019bc:	20000020 	.word	0x20000020
 80019c0:	200000b0 	.word	0x200000b0

080019c4 <checkerror>:
 80019c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80019c6:	1c43      	adds	r3, r0, #1
 80019c8:	4605      	mov	r5, r0
 80019ca:	d109      	bne.n	80019e0 <checkerror+0x1c>
 80019cc:	f000 fa88 	bl	8001ee0 <__errno>
 80019d0:	2413      	movs	r4, #19
 80019d2:	4606      	mov	r6, r0
 80019d4:	2700      	movs	r7, #0
 80019d6:	4620      	mov	r0, r4
 80019d8:	4639      	mov	r1, r7
 80019da:	beab      	bkpt	0x00ab
 80019dc:	4604      	mov	r4, r0
 80019de:	6034      	str	r4, [r6, #0]
 80019e0:	4628      	mov	r0, r5
 80019e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080019e4 <error>:
 80019e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80019e6:	4605      	mov	r5, r0
 80019e8:	f000 fa7a 	bl	8001ee0 <__errno>
 80019ec:	2413      	movs	r4, #19
 80019ee:	4606      	mov	r6, r0
 80019f0:	2700      	movs	r7, #0
 80019f2:	4620      	mov	r0, r4
 80019f4:	4639      	mov	r1, r7
 80019f6:	beab      	bkpt	0x00ab
 80019f8:	4604      	mov	r4, r0
 80019fa:	6034      	str	r4, [r6, #0]
 80019fc:	4628      	mov	r0, r5
 80019fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08001a00 <_swiread>:
 8001a00:	b530      	push	{r4, r5, lr}
 8001a02:	b085      	sub	sp, #20
 8001a04:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8001a08:	9203      	str	r2, [sp, #12]
 8001a0a:	2406      	movs	r4, #6
 8001a0c:	ad01      	add	r5, sp, #4
 8001a0e:	4620      	mov	r0, r4
 8001a10:	4629      	mov	r1, r5
 8001a12:	beab      	bkpt	0x00ab
 8001a14:	4604      	mov	r4, r0
 8001a16:	4620      	mov	r0, r4
 8001a18:	f7ff ffd4 	bl	80019c4 <checkerror>
 8001a1c:	b005      	add	sp, #20
 8001a1e:	bd30      	pop	{r4, r5, pc}

08001a20 <_read>:
 8001a20:	b570      	push	{r4, r5, r6, lr}
 8001a22:	460e      	mov	r6, r1
 8001a24:	4615      	mov	r5, r2
 8001a26:	f7ff ffb3 	bl	8001990 <findslot>
 8001a2a:	4604      	mov	r4, r0
 8001a2c:	b930      	cbnz	r0, 8001a3c <_read+0x1c>
 8001a2e:	f000 fa57 	bl	8001ee0 <__errno>
 8001a32:	2309      	movs	r3, #9
 8001a34:	6003      	str	r3, [r0, #0]
 8001a36:	f04f 30ff 	mov.w	r0, #4294967295
 8001a3a:	bd70      	pop	{r4, r5, r6, pc}
 8001a3c:	462a      	mov	r2, r5
 8001a3e:	4631      	mov	r1, r6
 8001a40:	6800      	ldr	r0, [r0, #0]
 8001a42:	f7ff ffdd 	bl	8001a00 <_swiread>
 8001a46:	1c43      	adds	r3, r0, #1
 8001a48:	bf1f      	itttt	ne
 8001a4a:	6863      	ldrne	r3, [r4, #4]
 8001a4c:	1a28      	subne	r0, r5, r0
 8001a4e:	181b      	addne	r3, r3, r0
 8001a50:	6063      	strne	r3, [r4, #4]
 8001a52:	e7f2      	b.n	8001a3a <_read+0x1a>

08001a54 <_swilseek>:
 8001a54:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001a56:	460c      	mov	r4, r1
 8001a58:	4616      	mov	r6, r2
 8001a5a:	f7ff ff99 	bl	8001990 <findslot>
 8001a5e:	4605      	mov	r5, r0
 8001a60:	b940      	cbnz	r0, 8001a74 <_swilseek+0x20>
 8001a62:	f000 fa3d 	bl	8001ee0 <__errno>
 8001a66:	2309      	movs	r3, #9
 8001a68:	6003      	str	r3, [r0, #0]
 8001a6a:	f04f 34ff 	mov.w	r4, #4294967295
 8001a6e:	4620      	mov	r0, r4
 8001a70:	b003      	add	sp, #12
 8001a72:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001a74:	2e02      	cmp	r6, #2
 8001a76:	d903      	bls.n	8001a80 <_swilseek+0x2c>
 8001a78:	f000 fa32 	bl	8001ee0 <__errno>
 8001a7c:	2316      	movs	r3, #22
 8001a7e:	e7f3      	b.n	8001a68 <_swilseek+0x14>
 8001a80:	2e01      	cmp	r6, #1
 8001a82:	d112      	bne.n	8001aaa <_swilseek+0x56>
 8001a84:	6843      	ldr	r3, [r0, #4]
 8001a86:	18e4      	adds	r4, r4, r3
 8001a88:	d4f6      	bmi.n	8001a78 <_swilseek+0x24>
 8001a8a:	682b      	ldr	r3, [r5, #0]
 8001a8c:	260a      	movs	r6, #10
 8001a8e:	e9cd 3400 	strd	r3, r4, [sp]
 8001a92:	466f      	mov	r7, sp
 8001a94:	4630      	mov	r0, r6
 8001a96:	4639      	mov	r1, r7
 8001a98:	beab      	bkpt	0x00ab
 8001a9a:	4606      	mov	r6, r0
 8001a9c:	4630      	mov	r0, r6
 8001a9e:	f7ff ff91 	bl	80019c4 <checkerror>
 8001aa2:	2800      	cmp	r0, #0
 8001aa4:	dbe1      	blt.n	8001a6a <_swilseek+0x16>
 8001aa6:	606c      	str	r4, [r5, #4]
 8001aa8:	e7e1      	b.n	8001a6e <_swilseek+0x1a>
 8001aaa:	2e02      	cmp	r6, #2
 8001aac:	d1ed      	bne.n	8001a8a <_swilseek+0x36>
 8001aae:	af02      	add	r7, sp, #8
 8001ab0:	6803      	ldr	r3, [r0, #0]
 8001ab2:	f847 3d08 	str.w	r3, [r7, #-8]!
 8001ab6:	260c      	movs	r6, #12
 8001ab8:	4630      	mov	r0, r6
 8001aba:	4639      	mov	r1, r7
 8001abc:	beab      	bkpt	0x00ab
 8001abe:	4606      	mov	r6, r0
 8001ac0:	4630      	mov	r0, r6
 8001ac2:	f7ff ff7f 	bl	80019c4 <checkerror>
 8001ac6:	1c43      	adds	r3, r0, #1
 8001ac8:	d0cf      	beq.n	8001a6a <_swilseek+0x16>
 8001aca:	4404      	add	r4, r0
 8001acc:	e7dd      	b.n	8001a8a <_swilseek+0x36>

08001ace <_lseek>:
 8001ace:	f7ff bfc1 	b.w	8001a54 <_swilseek>

08001ad2 <_swiwrite>:
 8001ad2:	b530      	push	{r4, r5, lr}
 8001ad4:	b085      	sub	sp, #20
 8001ad6:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8001ada:	9203      	str	r2, [sp, #12]
 8001adc:	2405      	movs	r4, #5
 8001ade:	ad01      	add	r5, sp, #4
 8001ae0:	4620      	mov	r0, r4
 8001ae2:	4629      	mov	r1, r5
 8001ae4:	beab      	bkpt	0x00ab
 8001ae6:	4604      	mov	r4, r0
 8001ae8:	4620      	mov	r0, r4
 8001aea:	f7ff ff6b 	bl	80019c4 <checkerror>
 8001aee:	b005      	add	sp, #20
 8001af0:	bd30      	pop	{r4, r5, pc}

08001af2 <_write>:
 8001af2:	b570      	push	{r4, r5, r6, lr}
 8001af4:	460e      	mov	r6, r1
 8001af6:	4615      	mov	r5, r2
 8001af8:	f7ff ff4a 	bl	8001990 <findslot>
 8001afc:	4604      	mov	r4, r0
 8001afe:	b930      	cbnz	r0, 8001b0e <_write+0x1c>
 8001b00:	f000 f9ee 	bl	8001ee0 <__errno>
 8001b04:	2309      	movs	r3, #9
 8001b06:	6003      	str	r3, [r0, #0]
 8001b08:	f04f 30ff 	mov.w	r0, #4294967295
 8001b0c:	bd70      	pop	{r4, r5, r6, pc}
 8001b0e:	462a      	mov	r2, r5
 8001b10:	4631      	mov	r1, r6
 8001b12:	6800      	ldr	r0, [r0, #0]
 8001b14:	f7ff ffdd 	bl	8001ad2 <_swiwrite>
 8001b18:	1e02      	subs	r2, r0, #0
 8001b1a:	dbf5      	blt.n	8001b08 <_write+0x16>
 8001b1c:	6863      	ldr	r3, [r4, #4]
 8001b1e:	1aa8      	subs	r0, r5, r2
 8001b20:	4403      	add	r3, r0
 8001b22:	42aa      	cmp	r2, r5
 8001b24:	6063      	str	r3, [r4, #4]
 8001b26:	d1f1      	bne.n	8001b0c <_write+0x1a>
 8001b28:	2000      	movs	r0, #0
 8001b2a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8001b2e:	f7ff bf59 	b.w	80019e4 <error>

08001b32 <_swiclose>:
 8001b32:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8001b34:	ad02      	add	r5, sp, #8
 8001b36:	2402      	movs	r4, #2
 8001b38:	f845 0d04 	str.w	r0, [r5, #-4]!
 8001b3c:	4620      	mov	r0, r4
 8001b3e:	4629      	mov	r1, r5
 8001b40:	beab      	bkpt	0x00ab
 8001b42:	4604      	mov	r4, r0
 8001b44:	4620      	mov	r0, r4
 8001b46:	f7ff ff3d 	bl	80019c4 <checkerror>
 8001b4a:	b003      	add	sp, #12
 8001b4c:	bd30      	pop	{r4, r5, pc}
	...

08001b50 <_close>:
 8001b50:	b538      	push	{r3, r4, r5, lr}
 8001b52:	4605      	mov	r5, r0
 8001b54:	f7ff ff1c 	bl	8001990 <findslot>
 8001b58:	4604      	mov	r4, r0
 8001b5a:	b930      	cbnz	r0, 8001b6a <_close+0x1a>
 8001b5c:	f000 f9c0 	bl	8001ee0 <__errno>
 8001b60:	2309      	movs	r3, #9
 8001b62:	6003      	str	r3, [r0, #0]
 8001b64:	f04f 30ff 	mov.w	r0, #4294967295
 8001b68:	bd38      	pop	{r3, r4, r5, pc}
 8001b6a:	3d01      	subs	r5, #1
 8001b6c:	2d01      	cmp	r5, #1
 8001b6e:	d809      	bhi.n	8001b84 <_close+0x34>
 8001b70:	4b09      	ldr	r3, [pc, #36]	; (8001b98 <_close+0x48>)
 8001b72:	689a      	ldr	r2, [r3, #8]
 8001b74:	691b      	ldr	r3, [r3, #16]
 8001b76:	429a      	cmp	r2, r3
 8001b78:	d104      	bne.n	8001b84 <_close+0x34>
 8001b7a:	f04f 33ff 	mov.w	r3, #4294967295
 8001b7e:	6003      	str	r3, [r0, #0]
 8001b80:	2000      	movs	r0, #0
 8001b82:	e7f1      	b.n	8001b68 <_close+0x18>
 8001b84:	6820      	ldr	r0, [r4, #0]
 8001b86:	f7ff ffd4 	bl	8001b32 <_swiclose>
 8001b8a:	2800      	cmp	r0, #0
 8001b8c:	d1ec      	bne.n	8001b68 <_close+0x18>
 8001b8e:	f04f 33ff 	mov.w	r3, #4294967295
 8001b92:	6023      	str	r3, [r4, #0]
 8001b94:	e7e8      	b.n	8001b68 <_close+0x18>
 8001b96:	bf00      	nop
 8001b98:	200000b0 	.word	0x200000b0

08001b9c <_swistat>:
 8001b9c:	b570      	push	{r4, r5, r6, lr}
 8001b9e:	460c      	mov	r4, r1
 8001ba0:	f7ff fef6 	bl	8001990 <findslot>
 8001ba4:	4606      	mov	r6, r0
 8001ba6:	b930      	cbnz	r0, 8001bb6 <_swistat+0x1a>
 8001ba8:	f000 f99a 	bl	8001ee0 <__errno>
 8001bac:	2309      	movs	r3, #9
 8001bae:	6003      	str	r3, [r0, #0]
 8001bb0:	f04f 30ff 	mov.w	r0, #4294967295
 8001bb4:	bd70      	pop	{r4, r5, r6, pc}
 8001bb6:	6863      	ldr	r3, [r4, #4]
 8001bb8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001bbc:	6063      	str	r3, [r4, #4]
 8001bbe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001bc2:	6463      	str	r3, [r4, #68]	; 0x44
 8001bc4:	250c      	movs	r5, #12
 8001bc6:	4628      	mov	r0, r5
 8001bc8:	4631      	mov	r1, r6
 8001bca:	beab      	bkpt	0x00ab
 8001bcc:	4605      	mov	r5, r0
 8001bce:	4628      	mov	r0, r5
 8001bd0:	f7ff fef8 	bl	80019c4 <checkerror>
 8001bd4:	1c43      	adds	r3, r0, #1
 8001bd6:	bf1c      	itt	ne
 8001bd8:	6120      	strne	r0, [r4, #16]
 8001bda:	2000      	movne	r0, #0
 8001bdc:	e7ea      	b.n	8001bb4 <_swistat+0x18>

08001bde <_fstat>:
 8001bde:	460b      	mov	r3, r1
 8001be0:	b510      	push	{r4, lr}
 8001be2:	2100      	movs	r1, #0
 8001be4:	4604      	mov	r4, r0
 8001be6:	2258      	movs	r2, #88	; 0x58
 8001be8:	4618      	mov	r0, r3
 8001bea:	f000 fa6d 	bl	80020c8 <memset>
 8001bee:	4601      	mov	r1, r0
 8001bf0:	4620      	mov	r0, r4
 8001bf2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001bf6:	f7ff bfd1 	b.w	8001b9c <_swistat>

08001bfa <_stat>:
 8001bfa:	b538      	push	{r3, r4, r5, lr}
 8001bfc:	460d      	mov	r5, r1
 8001bfe:	4604      	mov	r4, r0
 8001c00:	2258      	movs	r2, #88	; 0x58
 8001c02:	2100      	movs	r1, #0
 8001c04:	4628      	mov	r0, r5
 8001c06:	f000 fa5f 	bl	80020c8 <memset>
 8001c0a:	4620      	mov	r0, r4
 8001c0c:	2100      	movs	r1, #0
 8001c0e:	f000 f811 	bl	8001c34 <_swiopen>
 8001c12:	1c43      	adds	r3, r0, #1
 8001c14:	4604      	mov	r4, r0
 8001c16:	d00b      	beq.n	8001c30 <_stat+0x36>
 8001c18:	686b      	ldr	r3, [r5, #4]
 8001c1a:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8001c1e:	606b      	str	r3, [r5, #4]
 8001c20:	4629      	mov	r1, r5
 8001c22:	f7ff ffbb 	bl	8001b9c <_swistat>
 8001c26:	4605      	mov	r5, r0
 8001c28:	4620      	mov	r0, r4
 8001c2a:	f7ff ff91 	bl	8001b50 <_close>
 8001c2e:	462c      	mov	r4, r5
 8001c30:	4620      	mov	r0, r4
 8001c32:	bd38      	pop	{r3, r4, r5, pc}

08001c34 <_swiopen>:
 8001c34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001c38:	4b2b      	ldr	r3, [pc, #172]	; (8001ce8 <_swiopen+0xb4>)
 8001c3a:	b096      	sub	sp, #88	; 0x58
 8001c3c:	4682      	mov	sl, r0
 8001c3e:	460e      	mov	r6, r1
 8001c40:	2500      	movs	r5, #0
 8001c42:	4698      	mov	r8, r3
 8001c44:	f853 4035 	ldr.w	r4, [r3, r5, lsl #3]
 8001c48:	1c61      	adds	r1, r4, #1
 8001c4a:	ea4f 07c5 	mov.w	r7, r5, lsl #3
 8001c4e:	d036      	beq.n	8001cbe <_swiopen+0x8a>
 8001c50:	3501      	adds	r5, #1
 8001c52:	2d14      	cmp	r5, #20
 8001c54:	d1f6      	bne.n	8001c44 <_swiopen+0x10>
 8001c56:	f000 f943 	bl	8001ee0 <__errno>
 8001c5a:	2318      	movs	r3, #24
 8001c5c:	6003      	str	r3, [r0, #0]
 8001c5e:	f04f 34ff 	mov.w	r4, #4294967295
 8001c62:	e03c      	b.n	8001cde <_swiopen+0xaa>
 8001c64:	f3c6 4400 	ubfx	r4, r6, #16, #1
 8001c68:	f240 6301 	movw	r3, #1537	; 0x601
 8001c6c:	07b2      	lsls	r2, r6, #30
 8001c6e:	bf48      	it	mi
 8001c70:	f044 0402 	orrmi.w	r4, r4, #2
 8001c74:	421e      	tst	r6, r3
 8001c76:	bf18      	it	ne
 8001c78:	f044 0404 	orrne.w	r4, r4, #4
 8001c7c:	0733      	lsls	r3, r6, #28
 8001c7e:	bf48      	it	mi
 8001c80:	f024 0404 	bicmi.w	r4, r4, #4
 8001c84:	4650      	mov	r0, sl
 8001c86:	bf48      	it	mi
 8001c88:	f044 0408 	orrmi.w	r4, r4, #8
 8001c8c:	f8cd a000 	str.w	sl, [sp]
 8001c90:	f7fe fabe 	bl	8000210 <strlen>
 8001c94:	e9cd 4001 	strd	r4, r0, [sp, #4]
 8001c98:	2401      	movs	r4, #1
 8001c9a:	4620      	mov	r0, r4
 8001c9c:	4649      	mov	r1, r9
 8001c9e:	beab      	bkpt	0x00ab
 8001ca0:	4604      	mov	r4, r0
 8001ca2:	2c00      	cmp	r4, #0
 8001ca4:	db06      	blt.n	8001cb4 <_swiopen+0x80>
 8001ca6:	4447      	add	r7, r8
 8001ca8:	2300      	movs	r3, #0
 8001caa:	f848 4035 	str.w	r4, [r8, r5, lsl #3]
 8001cae:	607b      	str	r3, [r7, #4]
 8001cb0:	462c      	mov	r4, r5
 8001cb2:	e014      	b.n	8001cde <_swiopen+0xaa>
 8001cb4:	4620      	mov	r0, r4
 8001cb6:	f7ff fe95 	bl	80019e4 <error>
 8001cba:	4604      	mov	r4, r0
 8001cbc:	e00f      	b.n	8001cde <_swiopen+0xaa>
 8001cbe:	f406 6320 	and.w	r3, r6, #2560	; 0xa00
 8001cc2:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8001cc6:	46e9      	mov	r9, sp
 8001cc8:	d1cc      	bne.n	8001c64 <_swiopen+0x30>
 8001cca:	4649      	mov	r1, r9
 8001ccc:	4650      	mov	r0, sl
 8001cce:	f7ff ff94 	bl	8001bfa <_stat>
 8001cd2:	3001      	adds	r0, #1
 8001cd4:	d0c6      	beq.n	8001c64 <_swiopen+0x30>
 8001cd6:	f000 f903 	bl	8001ee0 <__errno>
 8001cda:	2311      	movs	r3, #17
 8001cdc:	6003      	str	r3, [r0, #0]
 8001cde:	4620      	mov	r0, r4
 8001ce0:	b016      	add	sp, #88	; 0x58
 8001ce2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001ce6:	bf00      	nop
 8001ce8:	200000b0 	.word	0x200000b0

08001cec <_get_semihosting_exts>:
 8001cec:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8001cf0:	4607      	mov	r7, r0
 8001cf2:	4688      	mov	r8, r1
 8001cf4:	4829      	ldr	r0, [pc, #164]	; (8001d9c <_get_semihosting_exts+0xb0>)
 8001cf6:	2100      	movs	r1, #0
 8001cf8:	4615      	mov	r5, r2
 8001cfa:	f7ff ff9b 	bl	8001c34 <_swiopen>
 8001cfe:	462a      	mov	r2, r5
 8001d00:	4604      	mov	r4, r0
 8001d02:	2100      	movs	r1, #0
 8001d04:	4638      	mov	r0, r7
 8001d06:	f000 f9df 	bl	80020c8 <memset>
 8001d0a:	1c63      	adds	r3, r4, #1
 8001d0c:	d015      	beq.n	8001d3a <_get_semihosting_exts+0x4e>
 8001d0e:	4620      	mov	r0, r4
 8001d10:	f7ff fe3e 	bl	8001990 <findslot>
 8001d14:	260c      	movs	r6, #12
 8001d16:	4681      	mov	r9, r0
 8001d18:	4630      	mov	r0, r6
 8001d1a:	4649      	mov	r1, r9
 8001d1c:	beab      	bkpt	0x00ab
 8001d1e:	4606      	mov	r6, r0
 8001d20:	4630      	mov	r0, r6
 8001d22:	f7ff fe4f 	bl	80019c4 <checkerror>
 8001d26:	2803      	cmp	r0, #3
 8001d28:	dd02      	ble.n	8001d30 <_get_semihosting_exts+0x44>
 8001d2a:	3803      	subs	r0, #3
 8001d2c:	42a8      	cmp	r0, r5
 8001d2e:	dc08      	bgt.n	8001d42 <_get_semihosting_exts+0x56>
 8001d30:	4620      	mov	r0, r4
 8001d32:	f7ff ff0d 	bl	8001b50 <_close>
 8001d36:	f04f 34ff 	mov.w	r4, #4294967295
 8001d3a:	4620      	mov	r0, r4
 8001d3c:	b003      	add	sp, #12
 8001d3e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001d42:	2204      	movs	r2, #4
 8001d44:	eb0d 0102 	add.w	r1, sp, r2
 8001d48:	4620      	mov	r0, r4
 8001d4a:	f7ff fe69 	bl	8001a20 <_read>
 8001d4e:	2803      	cmp	r0, #3
 8001d50:	ddee      	ble.n	8001d30 <_get_semihosting_exts+0x44>
 8001d52:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8001d56:	2b53      	cmp	r3, #83	; 0x53
 8001d58:	d1ea      	bne.n	8001d30 <_get_semihosting_exts+0x44>
 8001d5a:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8001d5e:	2b48      	cmp	r3, #72	; 0x48
 8001d60:	d1e6      	bne.n	8001d30 <_get_semihosting_exts+0x44>
 8001d62:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8001d66:	2b46      	cmp	r3, #70	; 0x46
 8001d68:	d1e2      	bne.n	8001d30 <_get_semihosting_exts+0x44>
 8001d6a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8001d6e:	2b42      	cmp	r3, #66	; 0x42
 8001d70:	d1de      	bne.n	8001d30 <_get_semihosting_exts+0x44>
 8001d72:	2201      	movs	r2, #1
 8001d74:	4641      	mov	r1, r8
 8001d76:	4620      	mov	r0, r4
 8001d78:	f7ff fe6c 	bl	8001a54 <_swilseek>
 8001d7c:	2800      	cmp	r0, #0
 8001d7e:	dbd7      	blt.n	8001d30 <_get_semihosting_exts+0x44>
 8001d80:	462a      	mov	r2, r5
 8001d82:	4639      	mov	r1, r7
 8001d84:	4620      	mov	r0, r4
 8001d86:	f7ff fe4b 	bl	8001a20 <_read>
 8001d8a:	4605      	mov	r5, r0
 8001d8c:	4620      	mov	r0, r4
 8001d8e:	f7ff fedf 	bl	8001b50 <_close>
 8001d92:	4628      	mov	r0, r5
 8001d94:	f7ff fe16 	bl	80019c4 <checkerror>
 8001d98:	4604      	mov	r4, r0
 8001d9a:	e7ce      	b.n	8001d3a <_get_semihosting_exts+0x4e>
 8001d9c:	08002d34 	.word	0x08002d34

08001da0 <initialise_semihosting_exts>:
 8001da0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8001da2:	4d0a      	ldr	r5, [pc, #40]	; (8001dcc <initialise_semihosting_exts+0x2c>)
 8001da4:	4c0a      	ldr	r4, [pc, #40]	; (8001dd0 <initialise_semihosting_exts+0x30>)
 8001da6:	2100      	movs	r1, #0
 8001da8:	2201      	movs	r2, #1
 8001daa:	a801      	add	r0, sp, #4
 8001dac:	6029      	str	r1, [r5, #0]
 8001dae:	6022      	str	r2, [r4, #0]
 8001db0:	f7ff ff9c 	bl	8001cec <_get_semihosting_exts>
 8001db4:	2800      	cmp	r0, #0
 8001db6:	dd07      	ble.n	8001dc8 <initialise_semihosting_exts+0x28>
 8001db8:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8001dbc:	f003 0201 	and.w	r2, r3, #1
 8001dc0:	f003 0302 	and.w	r3, r3, #2
 8001dc4:	602a      	str	r2, [r5, #0]
 8001dc6:	6023      	str	r3, [r4, #0]
 8001dc8:	b003      	add	sp, #12
 8001dca:	bd30      	pop	{r4, r5, pc}
 8001dcc:	20000018 	.word	0x20000018
 8001dd0:	2000001c 	.word	0x2000001c

08001dd4 <_has_ext_stdout_stderr>:
 8001dd4:	b510      	push	{r4, lr}
 8001dd6:	4c04      	ldr	r4, [pc, #16]	; (8001de8 <_has_ext_stdout_stderr+0x14>)
 8001dd8:	6822      	ldr	r2, [r4, #0]
 8001dda:	2a00      	cmp	r2, #0
 8001ddc:	da01      	bge.n	8001de2 <_has_ext_stdout_stderr+0xe>
 8001dde:	f7ff ffdf 	bl	8001da0 <initialise_semihosting_exts>
 8001de2:	6820      	ldr	r0, [r4, #0]
 8001de4:	bd10      	pop	{r4, pc}
 8001de6:	bf00      	nop
 8001de8:	2000001c 	.word	0x2000001c

08001dec <initialise_monitor_handles>:
 8001dec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001df0:	b085      	sub	sp, #20
 8001df2:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 8001ea4 <initialise_monitor_handles+0xb8>
 8001df6:	f8cd 9004 	str.w	r9, [sp, #4]
 8001dfa:	2303      	movs	r3, #3
 8001dfc:	2400      	movs	r4, #0
 8001dfe:	9303      	str	r3, [sp, #12]
 8001e00:	f10d 0804 	add.w	r8, sp, #4
 8001e04:	9402      	str	r4, [sp, #8]
 8001e06:	2501      	movs	r5, #1
 8001e08:	4628      	mov	r0, r5
 8001e0a:	4641      	mov	r1, r8
 8001e0c:	beab      	bkpt	0x00ab
 8001e0e:	4605      	mov	r5, r0
 8001e10:	4e20      	ldr	r6, [pc, #128]	; (8001e94 <initialise_monitor_handles+0xa8>)
 8001e12:	4a21      	ldr	r2, [pc, #132]	; (8001e98 <initialise_monitor_handles+0xac>)
 8001e14:	6035      	str	r5, [r6, #0]
 8001e16:	4623      	mov	r3, r4
 8001e18:	f04f 31ff 	mov.w	r1, #4294967295
 8001e1c:	4614      	mov	r4, r2
 8001e1e:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
 8001e22:	3301      	adds	r3, #1
 8001e24:	2b14      	cmp	r3, #20
 8001e26:	d1fa      	bne.n	8001e1e <initialise_monitor_handles+0x32>
 8001e28:	f7ff ffd4 	bl	8001dd4 <_has_ext_stdout_stderr>
 8001e2c:	4d1b      	ldr	r5, [pc, #108]	; (8001e9c <initialise_monitor_handles+0xb0>)
 8001e2e:	b1d0      	cbz	r0, 8001e66 <initialise_monitor_handles+0x7a>
 8001e30:	f04f 0a03 	mov.w	sl, #3
 8001e34:	2304      	movs	r3, #4
 8001e36:	f8cd 9004 	str.w	r9, [sp, #4]
 8001e3a:	2701      	movs	r7, #1
 8001e3c:	f8cd a00c 	str.w	sl, [sp, #12]
 8001e40:	9302      	str	r3, [sp, #8]
 8001e42:	4638      	mov	r0, r7
 8001e44:	4641      	mov	r1, r8
 8001e46:	beab      	bkpt	0x00ab
 8001e48:	4683      	mov	fp, r0
 8001e4a:	4b15      	ldr	r3, [pc, #84]	; (8001ea0 <initialise_monitor_handles+0xb4>)
 8001e4c:	f8cd 9004 	str.w	r9, [sp, #4]
 8001e50:	f8c3 b000 	str.w	fp, [r3]
 8001e54:	2308      	movs	r3, #8
 8001e56:	f8cd a00c 	str.w	sl, [sp, #12]
 8001e5a:	9302      	str	r3, [sp, #8]
 8001e5c:	4638      	mov	r0, r7
 8001e5e:	4641      	mov	r1, r8
 8001e60:	beab      	bkpt	0x00ab
 8001e62:	4607      	mov	r7, r0
 8001e64:	602f      	str	r7, [r5, #0]
 8001e66:	682b      	ldr	r3, [r5, #0]
 8001e68:	3301      	adds	r3, #1
 8001e6a:	bf02      	ittt	eq
 8001e6c:	4b0c      	ldreq	r3, [pc, #48]	; (8001ea0 <initialise_monitor_handles+0xb4>)
 8001e6e:	681b      	ldreq	r3, [r3, #0]
 8001e70:	602b      	streq	r3, [r5, #0]
 8001e72:	6833      	ldr	r3, [r6, #0]
 8001e74:	6023      	str	r3, [r4, #0]
 8001e76:	2600      	movs	r6, #0
 8001e78:	6066      	str	r6, [r4, #4]
 8001e7a:	f7ff ffab 	bl	8001dd4 <_has_ext_stdout_stderr>
 8001e7e:	b130      	cbz	r0, 8001e8e <initialise_monitor_handles+0xa2>
 8001e80:	4b07      	ldr	r3, [pc, #28]	; (8001ea0 <initialise_monitor_handles+0xb4>)
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	e9c4 3602 	strd	r3, r6, [r4, #8]
 8001e88:	682b      	ldr	r3, [r5, #0]
 8001e8a:	e9c4 3604 	strd	r3, r6, [r4, #16]
 8001e8e:	b005      	add	sp, #20
 8001e90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001e94:	200000a8 	.word	0x200000a8
 8001e98:	200000b0 	.word	0x200000b0
 8001e9c:	200000a4 	.word	0x200000a4
 8001ea0:	200000ac 	.word	0x200000ac
 8001ea4:	08002d4a 	.word	0x08002d4a

08001ea8 <_isatty>:
 8001ea8:	b570      	push	{r4, r5, r6, lr}
 8001eaa:	f7ff fd71 	bl	8001990 <findslot>
 8001eae:	2509      	movs	r5, #9
 8001eb0:	4604      	mov	r4, r0
 8001eb2:	b920      	cbnz	r0, 8001ebe <_isatty+0x16>
 8001eb4:	f000 f814 	bl	8001ee0 <__errno>
 8001eb8:	6005      	str	r5, [r0, #0]
 8001eba:	4620      	mov	r0, r4
 8001ebc:	bd70      	pop	{r4, r5, r6, pc}
 8001ebe:	4628      	mov	r0, r5
 8001ec0:	4621      	mov	r1, r4
 8001ec2:	beab      	bkpt	0x00ab
 8001ec4:	4604      	mov	r4, r0
 8001ec6:	2c01      	cmp	r4, #1
 8001ec8:	d0f7      	beq.n	8001eba <_isatty+0x12>
 8001eca:	f000 f809 	bl	8001ee0 <__errno>
 8001ece:	2400      	movs	r4, #0
 8001ed0:	4606      	mov	r6, r0
 8001ed2:	2513      	movs	r5, #19
 8001ed4:	4628      	mov	r0, r5
 8001ed6:	4621      	mov	r1, r4
 8001ed8:	beab      	bkpt	0x00ab
 8001eda:	4605      	mov	r5, r0
 8001edc:	6035      	str	r5, [r6, #0]
 8001ede:	e7ec      	b.n	8001eba <_isatty+0x12>

08001ee0 <__errno>:
 8001ee0:	4b01      	ldr	r3, [pc, #4]	; (8001ee8 <__errno+0x8>)
 8001ee2:	6818      	ldr	r0, [r3, #0]
 8001ee4:	4770      	bx	lr
 8001ee6:	bf00      	nop
 8001ee8:	20000020 	.word	0x20000020

08001eec <std>:
 8001eec:	2300      	movs	r3, #0
 8001eee:	b510      	push	{r4, lr}
 8001ef0:	4604      	mov	r4, r0
 8001ef2:	e9c0 3300 	strd	r3, r3, [r0]
 8001ef6:	6083      	str	r3, [r0, #8]
 8001ef8:	8181      	strh	r1, [r0, #12]
 8001efa:	6643      	str	r3, [r0, #100]	; 0x64
 8001efc:	81c2      	strh	r2, [r0, #14]
 8001efe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8001f02:	6183      	str	r3, [r0, #24]
 8001f04:	4619      	mov	r1, r3
 8001f06:	2208      	movs	r2, #8
 8001f08:	305c      	adds	r0, #92	; 0x5c
 8001f0a:	f000 f8dd 	bl	80020c8 <memset>
 8001f0e:	4b05      	ldr	r3, [pc, #20]	; (8001f24 <std+0x38>)
 8001f10:	6263      	str	r3, [r4, #36]	; 0x24
 8001f12:	4b05      	ldr	r3, [pc, #20]	; (8001f28 <std+0x3c>)
 8001f14:	62a3      	str	r3, [r4, #40]	; 0x28
 8001f16:	4b05      	ldr	r3, [pc, #20]	; (8001f2c <std+0x40>)
 8001f18:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001f1a:	4b05      	ldr	r3, [pc, #20]	; (8001f30 <std+0x44>)
 8001f1c:	6224      	str	r4, [r4, #32]
 8001f1e:	6323      	str	r3, [r4, #48]	; 0x30
 8001f20:	bd10      	pop	{r4, pc}
 8001f22:	bf00      	nop
 8001f24:	080021dd 	.word	0x080021dd
 8001f28:	080021ff 	.word	0x080021ff
 8001f2c:	08002237 	.word	0x08002237
 8001f30:	0800225b 	.word	0x0800225b

08001f34 <_cleanup_r>:
 8001f34:	4901      	ldr	r1, [pc, #4]	; (8001f3c <_cleanup_r+0x8>)
 8001f36:	f000 b885 	b.w	8002044 <_fwalk_reent>
 8001f3a:	bf00      	nop
 8001f3c:	080023b5 	.word	0x080023b5

08001f40 <__sfmoreglue>:
 8001f40:	b570      	push	{r4, r5, r6, lr}
 8001f42:	1e4a      	subs	r2, r1, #1
 8001f44:	2568      	movs	r5, #104	; 0x68
 8001f46:	4355      	muls	r5, r2
 8001f48:	460e      	mov	r6, r1
 8001f4a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8001f4e:	f000 f8c3 	bl	80020d8 <_malloc_r>
 8001f52:	4604      	mov	r4, r0
 8001f54:	b140      	cbz	r0, 8001f68 <__sfmoreglue+0x28>
 8001f56:	2100      	movs	r1, #0
 8001f58:	e9c0 1600 	strd	r1, r6, [r0]
 8001f5c:	300c      	adds	r0, #12
 8001f5e:	60a0      	str	r0, [r4, #8]
 8001f60:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8001f64:	f000 f8b0 	bl	80020c8 <memset>
 8001f68:	4620      	mov	r0, r4
 8001f6a:	bd70      	pop	{r4, r5, r6, pc}

08001f6c <__sinit>:
 8001f6c:	6983      	ldr	r3, [r0, #24]
 8001f6e:	b510      	push	{r4, lr}
 8001f70:	4604      	mov	r4, r0
 8001f72:	bb33      	cbnz	r3, 8001fc2 <__sinit+0x56>
 8001f74:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8001f78:	6503      	str	r3, [r0, #80]	; 0x50
 8001f7a:	4b12      	ldr	r3, [pc, #72]	; (8001fc4 <__sinit+0x58>)
 8001f7c:	4a12      	ldr	r2, [pc, #72]	; (8001fc8 <__sinit+0x5c>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	6282      	str	r2, [r0, #40]	; 0x28
 8001f82:	4298      	cmp	r0, r3
 8001f84:	bf04      	itt	eq
 8001f86:	2301      	moveq	r3, #1
 8001f88:	6183      	streq	r3, [r0, #24]
 8001f8a:	f000 f81f 	bl	8001fcc <__sfp>
 8001f8e:	6060      	str	r0, [r4, #4]
 8001f90:	4620      	mov	r0, r4
 8001f92:	f000 f81b 	bl	8001fcc <__sfp>
 8001f96:	60a0      	str	r0, [r4, #8]
 8001f98:	4620      	mov	r0, r4
 8001f9a:	f000 f817 	bl	8001fcc <__sfp>
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	60e0      	str	r0, [r4, #12]
 8001fa2:	2104      	movs	r1, #4
 8001fa4:	6860      	ldr	r0, [r4, #4]
 8001fa6:	f7ff ffa1 	bl	8001eec <std>
 8001faa:	2201      	movs	r2, #1
 8001fac:	2109      	movs	r1, #9
 8001fae:	68a0      	ldr	r0, [r4, #8]
 8001fb0:	f7ff ff9c 	bl	8001eec <std>
 8001fb4:	2202      	movs	r2, #2
 8001fb6:	2112      	movs	r1, #18
 8001fb8:	68e0      	ldr	r0, [r4, #12]
 8001fba:	f7ff ff97 	bl	8001eec <std>
 8001fbe:	2301      	movs	r3, #1
 8001fc0:	61a3      	str	r3, [r4, #24]
 8001fc2:	bd10      	pop	{r4, pc}
 8001fc4:	08002db0 	.word	0x08002db0
 8001fc8:	08001f35 	.word	0x08001f35

08001fcc <__sfp>:
 8001fcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001fce:	4b1b      	ldr	r3, [pc, #108]	; (800203c <__sfp+0x70>)
 8001fd0:	681e      	ldr	r6, [r3, #0]
 8001fd2:	69b3      	ldr	r3, [r6, #24]
 8001fd4:	4607      	mov	r7, r0
 8001fd6:	b913      	cbnz	r3, 8001fde <__sfp+0x12>
 8001fd8:	4630      	mov	r0, r6
 8001fda:	f7ff ffc7 	bl	8001f6c <__sinit>
 8001fde:	3648      	adds	r6, #72	; 0x48
 8001fe0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8001fe4:	3b01      	subs	r3, #1
 8001fe6:	d503      	bpl.n	8001ff0 <__sfp+0x24>
 8001fe8:	6833      	ldr	r3, [r6, #0]
 8001fea:	b133      	cbz	r3, 8001ffa <__sfp+0x2e>
 8001fec:	6836      	ldr	r6, [r6, #0]
 8001fee:	e7f7      	b.n	8001fe0 <__sfp+0x14>
 8001ff0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8001ff4:	b16d      	cbz	r5, 8002012 <__sfp+0x46>
 8001ff6:	3468      	adds	r4, #104	; 0x68
 8001ff8:	e7f4      	b.n	8001fe4 <__sfp+0x18>
 8001ffa:	2104      	movs	r1, #4
 8001ffc:	4638      	mov	r0, r7
 8001ffe:	f7ff ff9f 	bl	8001f40 <__sfmoreglue>
 8002002:	6030      	str	r0, [r6, #0]
 8002004:	2800      	cmp	r0, #0
 8002006:	d1f1      	bne.n	8001fec <__sfp+0x20>
 8002008:	230c      	movs	r3, #12
 800200a:	603b      	str	r3, [r7, #0]
 800200c:	4604      	mov	r4, r0
 800200e:	4620      	mov	r0, r4
 8002010:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002012:	4b0b      	ldr	r3, [pc, #44]	; (8002040 <__sfp+0x74>)
 8002014:	6665      	str	r5, [r4, #100]	; 0x64
 8002016:	e9c4 5500 	strd	r5, r5, [r4]
 800201a:	60a5      	str	r5, [r4, #8]
 800201c:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8002020:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8002024:	2208      	movs	r2, #8
 8002026:	4629      	mov	r1, r5
 8002028:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800202c:	f000 f84c 	bl	80020c8 <memset>
 8002030:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8002034:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8002038:	e7e9      	b.n	800200e <__sfp+0x42>
 800203a:	bf00      	nop
 800203c:	08002db0 	.word	0x08002db0
 8002040:	ffff0001 	.word	0xffff0001

08002044 <_fwalk_reent>:
 8002044:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002048:	4680      	mov	r8, r0
 800204a:	4689      	mov	r9, r1
 800204c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8002050:	2600      	movs	r6, #0
 8002052:	b914      	cbnz	r4, 800205a <_fwalk_reent+0x16>
 8002054:	4630      	mov	r0, r6
 8002056:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800205a:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800205e:	3f01      	subs	r7, #1
 8002060:	d501      	bpl.n	8002066 <_fwalk_reent+0x22>
 8002062:	6824      	ldr	r4, [r4, #0]
 8002064:	e7f5      	b.n	8002052 <_fwalk_reent+0xe>
 8002066:	89ab      	ldrh	r3, [r5, #12]
 8002068:	2b01      	cmp	r3, #1
 800206a:	d907      	bls.n	800207c <_fwalk_reent+0x38>
 800206c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002070:	3301      	adds	r3, #1
 8002072:	d003      	beq.n	800207c <_fwalk_reent+0x38>
 8002074:	4629      	mov	r1, r5
 8002076:	4640      	mov	r0, r8
 8002078:	47c8      	blx	r9
 800207a:	4306      	orrs	r6, r0
 800207c:	3568      	adds	r5, #104	; 0x68
 800207e:	e7ee      	b.n	800205e <_fwalk_reent+0x1a>

08002080 <__libc_init_array>:
 8002080:	b570      	push	{r4, r5, r6, lr}
 8002082:	4e0d      	ldr	r6, [pc, #52]	; (80020b8 <__libc_init_array+0x38>)
 8002084:	4c0d      	ldr	r4, [pc, #52]	; (80020bc <__libc_init_array+0x3c>)
 8002086:	1ba4      	subs	r4, r4, r6
 8002088:	10a4      	asrs	r4, r4, #2
 800208a:	2500      	movs	r5, #0
 800208c:	42a5      	cmp	r5, r4
 800208e:	d109      	bne.n	80020a4 <__libc_init_array+0x24>
 8002090:	4e0b      	ldr	r6, [pc, #44]	; (80020c0 <__libc_init_array+0x40>)
 8002092:	4c0c      	ldr	r4, [pc, #48]	; (80020c4 <__libc_init_array+0x44>)
 8002094:	f000 fe38 	bl	8002d08 <_init>
 8002098:	1ba4      	subs	r4, r4, r6
 800209a:	10a4      	asrs	r4, r4, #2
 800209c:	2500      	movs	r5, #0
 800209e:	42a5      	cmp	r5, r4
 80020a0:	d105      	bne.n	80020ae <__libc_init_array+0x2e>
 80020a2:	bd70      	pop	{r4, r5, r6, pc}
 80020a4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80020a8:	4798      	blx	r3
 80020aa:	3501      	adds	r5, #1
 80020ac:	e7ee      	b.n	800208c <__libc_init_array+0xc>
 80020ae:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80020b2:	4798      	blx	r3
 80020b4:	3501      	adds	r5, #1
 80020b6:	e7f2      	b.n	800209e <__libc_init_array+0x1e>
 80020b8:	08002de8 	.word	0x08002de8
 80020bc:	08002de8 	.word	0x08002de8
 80020c0:	08002de8 	.word	0x08002de8
 80020c4:	08002dec 	.word	0x08002dec

080020c8 <memset>:
 80020c8:	4402      	add	r2, r0
 80020ca:	4603      	mov	r3, r0
 80020cc:	4293      	cmp	r3, r2
 80020ce:	d100      	bne.n	80020d2 <memset+0xa>
 80020d0:	4770      	bx	lr
 80020d2:	f803 1b01 	strb.w	r1, [r3], #1
 80020d6:	e7f9      	b.n	80020cc <memset+0x4>

080020d8 <_malloc_r>:
 80020d8:	b570      	push	{r4, r5, r6, lr}
 80020da:	1ccd      	adds	r5, r1, #3
 80020dc:	f025 0503 	bic.w	r5, r5, #3
 80020e0:	3508      	adds	r5, #8
 80020e2:	2d0c      	cmp	r5, #12
 80020e4:	bf38      	it	cc
 80020e6:	250c      	movcc	r5, #12
 80020e8:	2d00      	cmp	r5, #0
 80020ea:	4606      	mov	r6, r0
 80020ec:	db01      	blt.n	80020f2 <_malloc_r+0x1a>
 80020ee:	42a9      	cmp	r1, r5
 80020f0:	d903      	bls.n	80020fa <_malloc_r+0x22>
 80020f2:	230c      	movs	r3, #12
 80020f4:	6033      	str	r3, [r6, #0]
 80020f6:	2000      	movs	r0, #0
 80020f8:	bd70      	pop	{r4, r5, r6, pc}
 80020fa:	f000 f997 	bl	800242c <__malloc_lock>
 80020fe:	4a21      	ldr	r2, [pc, #132]	; (8002184 <_malloc_r+0xac>)
 8002100:	6814      	ldr	r4, [r2, #0]
 8002102:	4621      	mov	r1, r4
 8002104:	b991      	cbnz	r1, 800212c <_malloc_r+0x54>
 8002106:	4c20      	ldr	r4, [pc, #128]	; (8002188 <_malloc_r+0xb0>)
 8002108:	6823      	ldr	r3, [r4, #0]
 800210a:	b91b      	cbnz	r3, 8002114 <_malloc_r+0x3c>
 800210c:	4630      	mov	r0, r6
 800210e:	f000 f855 	bl	80021bc <_sbrk_r>
 8002112:	6020      	str	r0, [r4, #0]
 8002114:	4629      	mov	r1, r5
 8002116:	4630      	mov	r0, r6
 8002118:	f000 f850 	bl	80021bc <_sbrk_r>
 800211c:	1c43      	adds	r3, r0, #1
 800211e:	d124      	bne.n	800216a <_malloc_r+0x92>
 8002120:	230c      	movs	r3, #12
 8002122:	6033      	str	r3, [r6, #0]
 8002124:	4630      	mov	r0, r6
 8002126:	f000 f982 	bl	800242e <__malloc_unlock>
 800212a:	e7e4      	b.n	80020f6 <_malloc_r+0x1e>
 800212c:	680b      	ldr	r3, [r1, #0]
 800212e:	1b5b      	subs	r3, r3, r5
 8002130:	d418      	bmi.n	8002164 <_malloc_r+0x8c>
 8002132:	2b0b      	cmp	r3, #11
 8002134:	d90f      	bls.n	8002156 <_malloc_r+0x7e>
 8002136:	600b      	str	r3, [r1, #0]
 8002138:	50cd      	str	r5, [r1, r3]
 800213a:	18cc      	adds	r4, r1, r3
 800213c:	4630      	mov	r0, r6
 800213e:	f000 f976 	bl	800242e <__malloc_unlock>
 8002142:	f104 000b 	add.w	r0, r4, #11
 8002146:	1d23      	adds	r3, r4, #4
 8002148:	f020 0007 	bic.w	r0, r0, #7
 800214c:	1ac3      	subs	r3, r0, r3
 800214e:	d0d3      	beq.n	80020f8 <_malloc_r+0x20>
 8002150:	425a      	negs	r2, r3
 8002152:	50e2      	str	r2, [r4, r3]
 8002154:	e7d0      	b.n	80020f8 <_malloc_r+0x20>
 8002156:	428c      	cmp	r4, r1
 8002158:	684b      	ldr	r3, [r1, #4]
 800215a:	bf16      	itet	ne
 800215c:	6063      	strne	r3, [r4, #4]
 800215e:	6013      	streq	r3, [r2, #0]
 8002160:	460c      	movne	r4, r1
 8002162:	e7eb      	b.n	800213c <_malloc_r+0x64>
 8002164:	460c      	mov	r4, r1
 8002166:	6849      	ldr	r1, [r1, #4]
 8002168:	e7cc      	b.n	8002104 <_malloc_r+0x2c>
 800216a:	1cc4      	adds	r4, r0, #3
 800216c:	f024 0403 	bic.w	r4, r4, #3
 8002170:	42a0      	cmp	r0, r4
 8002172:	d005      	beq.n	8002180 <_malloc_r+0xa8>
 8002174:	1a21      	subs	r1, r4, r0
 8002176:	4630      	mov	r0, r6
 8002178:	f000 f820 	bl	80021bc <_sbrk_r>
 800217c:	3001      	adds	r0, #1
 800217e:	d0cf      	beq.n	8002120 <_malloc_r+0x48>
 8002180:	6025      	str	r5, [r4, #0]
 8002182:	e7db      	b.n	800213c <_malloc_r+0x64>
 8002184:	20000150 	.word	0x20000150
 8002188:	20000154 	.word	0x20000154

0800218c <iprintf>:
 800218c:	b40f      	push	{r0, r1, r2, r3}
 800218e:	4b0a      	ldr	r3, [pc, #40]	; (80021b8 <iprintf+0x2c>)
 8002190:	b513      	push	{r0, r1, r4, lr}
 8002192:	681c      	ldr	r4, [r3, #0]
 8002194:	b124      	cbz	r4, 80021a0 <iprintf+0x14>
 8002196:	69a3      	ldr	r3, [r4, #24]
 8002198:	b913      	cbnz	r3, 80021a0 <iprintf+0x14>
 800219a:	4620      	mov	r0, r4
 800219c:	f7ff fee6 	bl	8001f6c <__sinit>
 80021a0:	ab05      	add	r3, sp, #20
 80021a2:	9a04      	ldr	r2, [sp, #16]
 80021a4:	68a1      	ldr	r1, [r4, #8]
 80021a6:	9301      	str	r3, [sp, #4]
 80021a8:	4620      	mov	r0, r4
 80021aa:	f000 f9b7 	bl	800251c <_vfiprintf_r>
 80021ae:	b002      	add	sp, #8
 80021b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80021b4:	b004      	add	sp, #16
 80021b6:	4770      	bx	lr
 80021b8:	20000020 	.word	0x20000020

080021bc <_sbrk_r>:
 80021bc:	b538      	push	{r3, r4, r5, lr}
 80021be:	4c06      	ldr	r4, [pc, #24]	; (80021d8 <_sbrk_r+0x1c>)
 80021c0:	2300      	movs	r3, #0
 80021c2:	4605      	mov	r5, r0
 80021c4:	4608      	mov	r0, r1
 80021c6:	6023      	str	r3, [r4, #0]
 80021c8:	f7ff fb8c 	bl	80018e4 <_sbrk>
 80021cc:	1c43      	adds	r3, r0, #1
 80021ce:	d102      	bne.n	80021d6 <_sbrk_r+0x1a>
 80021d0:	6823      	ldr	r3, [r4, #0]
 80021d2:	b103      	cbz	r3, 80021d6 <_sbrk_r+0x1a>
 80021d4:	602b      	str	r3, [r5, #0]
 80021d6:	bd38      	pop	{r3, r4, r5, pc}
 80021d8:	20000190 	.word	0x20000190

080021dc <__sread>:
 80021dc:	b510      	push	{r4, lr}
 80021de:	460c      	mov	r4, r1
 80021e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80021e4:	f000 fc38 	bl	8002a58 <_read_r>
 80021e8:	2800      	cmp	r0, #0
 80021ea:	bfab      	itete	ge
 80021ec:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80021ee:	89a3      	ldrhlt	r3, [r4, #12]
 80021f0:	181b      	addge	r3, r3, r0
 80021f2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80021f6:	bfac      	ite	ge
 80021f8:	6563      	strge	r3, [r4, #84]	; 0x54
 80021fa:	81a3      	strhlt	r3, [r4, #12]
 80021fc:	bd10      	pop	{r4, pc}

080021fe <__swrite>:
 80021fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002202:	461f      	mov	r7, r3
 8002204:	898b      	ldrh	r3, [r1, #12]
 8002206:	05db      	lsls	r3, r3, #23
 8002208:	4605      	mov	r5, r0
 800220a:	460c      	mov	r4, r1
 800220c:	4616      	mov	r6, r2
 800220e:	d505      	bpl.n	800221c <__swrite+0x1e>
 8002210:	2302      	movs	r3, #2
 8002212:	2200      	movs	r2, #0
 8002214:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002218:	f000 f8f6 	bl	8002408 <_lseek_r>
 800221c:	89a3      	ldrh	r3, [r4, #12]
 800221e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002222:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002226:	81a3      	strh	r3, [r4, #12]
 8002228:	4632      	mov	r2, r6
 800222a:	463b      	mov	r3, r7
 800222c:	4628      	mov	r0, r5
 800222e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002232:	f000 b817 	b.w	8002264 <_write_r>

08002236 <__sseek>:
 8002236:	b510      	push	{r4, lr}
 8002238:	460c      	mov	r4, r1
 800223a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800223e:	f000 f8e3 	bl	8002408 <_lseek_r>
 8002242:	1c43      	adds	r3, r0, #1
 8002244:	89a3      	ldrh	r3, [r4, #12]
 8002246:	bf15      	itete	ne
 8002248:	6560      	strne	r0, [r4, #84]	; 0x54
 800224a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800224e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8002252:	81a3      	strheq	r3, [r4, #12]
 8002254:	bf18      	it	ne
 8002256:	81a3      	strhne	r3, [r4, #12]
 8002258:	bd10      	pop	{r4, pc}

0800225a <__sclose>:
 800225a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800225e:	f000 b813 	b.w	8002288 <_close_r>
	...

08002264 <_write_r>:
 8002264:	b538      	push	{r3, r4, r5, lr}
 8002266:	4c07      	ldr	r4, [pc, #28]	; (8002284 <_write_r+0x20>)
 8002268:	4605      	mov	r5, r0
 800226a:	4608      	mov	r0, r1
 800226c:	4611      	mov	r1, r2
 800226e:	2200      	movs	r2, #0
 8002270:	6022      	str	r2, [r4, #0]
 8002272:	461a      	mov	r2, r3
 8002274:	f7ff fc3d 	bl	8001af2 <_write>
 8002278:	1c43      	adds	r3, r0, #1
 800227a:	d102      	bne.n	8002282 <_write_r+0x1e>
 800227c:	6823      	ldr	r3, [r4, #0]
 800227e:	b103      	cbz	r3, 8002282 <_write_r+0x1e>
 8002280:	602b      	str	r3, [r5, #0]
 8002282:	bd38      	pop	{r3, r4, r5, pc}
 8002284:	20000190 	.word	0x20000190

08002288 <_close_r>:
 8002288:	b538      	push	{r3, r4, r5, lr}
 800228a:	4c06      	ldr	r4, [pc, #24]	; (80022a4 <_close_r+0x1c>)
 800228c:	2300      	movs	r3, #0
 800228e:	4605      	mov	r5, r0
 8002290:	4608      	mov	r0, r1
 8002292:	6023      	str	r3, [r4, #0]
 8002294:	f7ff fc5c 	bl	8001b50 <_close>
 8002298:	1c43      	adds	r3, r0, #1
 800229a:	d102      	bne.n	80022a2 <_close_r+0x1a>
 800229c:	6823      	ldr	r3, [r4, #0]
 800229e:	b103      	cbz	r3, 80022a2 <_close_r+0x1a>
 80022a0:	602b      	str	r3, [r5, #0]
 80022a2:	bd38      	pop	{r3, r4, r5, pc}
 80022a4:	20000190 	.word	0x20000190

080022a8 <__sflush_r>:
 80022a8:	898a      	ldrh	r2, [r1, #12]
 80022aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80022ae:	4605      	mov	r5, r0
 80022b0:	0710      	lsls	r0, r2, #28
 80022b2:	460c      	mov	r4, r1
 80022b4:	d458      	bmi.n	8002368 <__sflush_r+0xc0>
 80022b6:	684b      	ldr	r3, [r1, #4]
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	dc05      	bgt.n	80022c8 <__sflush_r+0x20>
 80022bc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80022be:	2b00      	cmp	r3, #0
 80022c0:	dc02      	bgt.n	80022c8 <__sflush_r+0x20>
 80022c2:	2000      	movs	r0, #0
 80022c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80022c8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80022ca:	2e00      	cmp	r6, #0
 80022cc:	d0f9      	beq.n	80022c2 <__sflush_r+0x1a>
 80022ce:	2300      	movs	r3, #0
 80022d0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80022d4:	682f      	ldr	r7, [r5, #0]
 80022d6:	6a21      	ldr	r1, [r4, #32]
 80022d8:	602b      	str	r3, [r5, #0]
 80022da:	d032      	beq.n	8002342 <__sflush_r+0x9a>
 80022dc:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80022de:	89a3      	ldrh	r3, [r4, #12]
 80022e0:	075a      	lsls	r2, r3, #29
 80022e2:	d505      	bpl.n	80022f0 <__sflush_r+0x48>
 80022e4:	6863      	ldr	r3, [r4, #4]
 80022e6:	1ac0      	subs	r0, r0, r3
 80022e8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80022ea:	b10b      	cbz	r3, 80022f0 <__sflush_r+0x48>
 80022ec:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80022ee:	1ac0      	subs	r0, r0, r3
 80022f0:	2300      	movs	r3, #0
 80022f2:	4602      	mov	r2, r0
 80022f4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80022f6:	6a21      	ldr	r1, [r4, #32]
 80022f8:	4628      	mov	r0, r5
 80022fa:	47b0      	blx	r6
 80022fc:	1c43      	adds	r3, r0, #1
 80022fe:	89a3      	ldrh	r3, [r4, #12]
 8002300:	d106      	bne.n	8002310 <__sflush_r+0x68>
 8002302:	6829      	ldr	r1, [r5, #0]
 8002304:	291d      	cmp	r1, #29
 8002306:	d848      	bhi.n	800239a <__sflush_r+0xf2>
 8002308:	4a29      	ldr	r2, [pc, #164]	; (80023b0 <__sflush_r+0x108>)
 800230a:	40ca      	lsrs	r2, r1
 800230c:	07d6      	lsls	r6, r2, #31
 800230e:	d544      	bpl.n	800239a <__sflush_r+0xf2>
 8002310:	2200      	movs	r2, #0
 8002312:	6062      	str	r2, [r4, #4]
 8002314:	04d9      	lsls	r1, r3, #19
 8002316:	6922      	ldr	r2, [r4, #16]
 8002318:	6022      	str	r2, [r4, #0]
 800231a:	d504      	bpl.n	8002326 <__sflush_r+0x7e>
 800231c:	1c42      	adds	r2, r0, #1
 800231e:	d101      	bne.n	8002324 <__sflush_r+0x7c>
 8002320:	682b      	ldr	r3, [r5, #0]
 8002322:	b903      	cbnz	r3, 8002326 <__sflush_r+0x7e>
 8002324:	6560      	str	r0, [r4, #84]	; 0x54
 8002326:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002328:	602f      	str	r7, [r5, #0]
 800232a:	2900      	cmp	r1, #0
 800232c:	d0c9      	beq.n	80022c2 <__sflush_r+0x1a>
 800232e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002332:	4299      	cmp	r1, r3
 8002334:	d002      	beq.n	800233c <__sflush_r+0x94>
 8002336:	4628      	mov	r0, r5
 8002338:	f000 f87a 	bl	8002430 <_free_r>
 800233c:	2000      	movs	r0, #0
 800233e:	6360      	str	r0, [r4, #52]	; 0x34
 8002340:	e7c0      	b.n	80022c4 <__sflush_r+0x1c>
 8002342:	2301      	movs	r3, #1
 8002344:	4628      	mov	r0, r5
 8002346:	47b0      	blx	r6
 8002348:	1c41      	adds	r1, r0, #1
 800234a:	d1c8      	bne.n	80022de <__sflush_r+0x36>
 800234c:	682b      	ldr	r3, [r5, #0]
 800234e:	2b00      	cmp	r3, #0
 8002350:	d0c5      	beq.n	80022de <__sflush_r+0x36>
 8002352:	2b1d      	cmp	r3, #29
 8002354:	d001      	beq.n	800235a <__sflush_r+0xb2>
 8002356:	2b16      	cmp	r3, #22
 8002358:	d101      	bne.n	800235e <__sflush_r+0xb6>
 800235a:	602f      	str	r7, [r5, #0]
 800235c:	e7b1      	b.n	80022c2 <__sflush_r+0x1a>
 800235e:	89a3      	ldrh	r3, [r4, #12]
 8002360:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002364:	81a3      	strh	r3, [r4, #12]
 8002366:	e7ad      	b.n	80022c4 <__sflush_r+0x1c>
 8002368:	690f      	ldr	r7, [r1, #16]
 800236a:	2f00      	cmp	r7, #0
 800236c:	d0a9      	beq.n	80022c2 <__sflush_r+0x1a>
 800236e:	0793      	lsls	r3, r2, #30
 8002370:	680e      	ldr	r6, [r1, #0]
 8002372:	bf08      	it	eq
 8002374:	694b      	ldreq	r3, [r1, #20]
 8002376:	600f      	str	r7, [r1, #0]
 8002378:	bf18      	it	ne
 800237a:	2300      	movne	r3, #0
 800237c:	eba6 0807 	sub.w	r8, r6, r7
 8002380:	608b      	str	r3, [r1, #8]
 8002382:	f1b8 0f00 	cmp.w	r8, #0
 8002386:	dd9c      	ble.n	80022c2 <__sflush_r+0x1a>
 8002388:	4643      	mov	r3, r8
 800238a:	463a      	mov	r2, r7
 800238c:	6a21      	ldr	r1, [r4, #32]
 800238e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8002390:	4628      	mov	r0, r5
 8002392:	47b0      	blx	r6
 8002394:	2800      	cmp	r0, #0
 8002396:	dc06      	bgt.n	80023a6 <__sflush_r+0xfe>
 8002398:	89a3      	ldrh	r3, [r4, #12]
 800239a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800239e:	81a3      	strh	r3, [r4, #12]
 80023a0:	f04f 30ff 	mov.w	r0, #4294967295
 80023a4:	e78e      	b.n	80022c4 <__sflush_r+0x1c>
 80023a6:	4407      	add	r7, r0
 80023a8:	eba8 0800 	sub.w	r8, r8, r0
 80023ac:	e7e9      	b.n	8002382 <__sflush_r+0xda>
 80023ae:	bf00      	nop
 80023b0:	20400001 	.word	0x20400001

080023b4 <_fflush_r>:
 80023b4:	b538      	push	{r3, r4, r5, lr}
 80023b6:	690b      	ldr	r3, [r1, #16]
 80023b8:	4605      	mov	r5, r0
 80023ba:	460c      	mov	r4, r1
 80023bc:	b1db      	cbz	r3, 80023f6 <_fflush_r+0x42>
 80023be:	b118      	cbz	r0, 80023c8 <_fflush_r+0x14>
 80023c0:	6983      	ldr	r3, [r0, #24]
 80023c2:	b90b      	cbnz	r3, 80023c8 <_fflush_r+0x14>
 80023c4:	f7ff fdd2 	bl	8001f6c <__sinit>
 80023c8:	4b0c      	ldr	r3, [pc, #48]	; (80023fc <_fflush_r+0x48>)
 80023ca:	429c      	cmp	r4, r3
 80023cc:	d109      	bne.n	80023e2 <_fflush_r+0x2e>
 80023ce:	686c      	ldr	r4, [r5, #4]
 80023d0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80023d4:	b17b      	cbz	r3, 80023f6 <_fflush_r+0x42>
 80023d6:	4621      	mov	r1, r4
 80023d8:	4628      	mov	r0, r5
 80023da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80023de:	f7ff bf63 	b.w	80022a8 <__sflush_r>
 80023e2:	4b07      	ldr	r3, [pc, #28]	; (8002400 <_fflush_r+0x4c>)
 80023e4:	429c      	cmp	r4, r3
 80023e6:	d101      	bne.n	80023ec <_fflush_r+0x38>
 80023e8:	68ac      	ldr	r4, [r5, #8]
 80023ea:	e7f1      	b.n	80023d0 <_fflush_r+0x1c>
 80023ec:	4b05      	ldr	r3, [pc, #20]	; (8002404 <_fflush_r+0x50>)
 80023ee:	429c      	cmp	r4, r3
 80023f0:	bf08      	it	eq
 80023f2:	68ec      	ldreq	r4, [r5, #12]
 80023f4:	e7ec      	b.n	80023d0 <_fflush_r+0x1c>
 80023f6:	2000      	movs	r0, #0
 80023f8:	bd38      	pop	{r3, r4, r5, pc}
 80023fa:	bf00      	nop
 80023fc:	08002d70 	.word	0x08002d70
 8002400:	08002d90 	.word	0x08002d90
 8002404:	08002d50 	.word	0x08002d50

08002408 <_lseek_r>:
 8002408:	b538      	push	{r3, r4, r5, lr}
 800240a:	4c07      	ldr	r4, [pc, #28]	; (8002428 <_lseek_r+0x20>)
 800240c:	4605      	mov	r5, r0
 800240e:	4608      	mov	r0, r1
 8002410:	4611      	mov	r1, r2
 8002412:	2200      	movs	r2, #0
 8002414:	6022      	str	r2, [r4, #0]
 8002416:	461a      	mov	r2, r3
 8002418:	f7ff fb59 	bl	8001ace <_lseek>
 800241c:	1c43      	adds	r3, r0, #1
 800241e:	d102      	bne.n	8002426 <_lseek_r+0x1e>
 8002420:	6823      	ldr	r3, [r4, #0]
 8002422:	b103      	cbz	r3, 8002426 <_lseek_r+0x1e>
 8002424:	602b      	str	r3, [r5, #0]
 8002426:	bd38      	pop	{r3, r4, r5, pc}
 8002428:	20000190 	.word	0x20000190

0800242c <__malloc_lock>:
 800242c:	4770      	bx	lr

0800242e <__malloc_unlock>:
 800242e:	4770      	bx	lr

08002430 <_free_r>:
 8002430:	b538      	push	{r3, r4, r5, lr}
 8002432:	4605      	mov	r5, r0
 8002434:	2900      	cmp	r1, #0
 8002436:	d045      	beq.n	80024c4 <_free_r+0x94>
 8002438:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800243c:	1f0c      	subs	r4, r1, #4
 800243e:	2b00      	cmp	r3, #0
 8002440:	bfb8      	it	lt
 8002442:	18e4      	addlt	r4, r4, r3
 8002444:	f7ff fff2 	bl	800242c <__malloc_lock>
 8002448:	4a1f      	ldr	r2, [pc, #124]	; (80024c8 <_free_r+0x98>)
 800244a:	6813      	ldr	r3, [r2, #0]
 800244c:	4610      	mov	r0, r2
 800244e:	b933      	cbnz	r3, 800245e <_free_r+0x2e>
 8002450:	6063      	str	r3, [r4, #4]
 8002452:	6014      	str	r4, [r2, #0]
 8002454:	4628      	mov	r0, r5
 8002456:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800245a:	f7ff bfe8 	b.w	800242e <__malloc_unlock>
 800245e:	42a3      	cmp	r3, r4
 8002460:	d90c      	bls.n	800247c <_free_r+0x4c>
 8002462:	6821      	ldr	r1, [r4, #0]
 8002464:	1862      	adds	r2, r4, r1
 8002466:	4293      	cmp	r3, r2
 8002468:	bf04      	itt	eq
 800246a:	681a      	ldreq	r2, [r3, #0]
 800246c:	685b      	ldreq	r3, [r3, #4]
 800246e:	6063      	str	r3, [r4, #4]
 8002470:	bf04      	itt	eq
 8002472:	1852      	addeq	r2, r2, r1
 8002474:	6022      	streq	r2, [r4, #0]
 8002476:	6004      	str	r4, [r0, #0]
 8002478:	e7ec      	b.n	8002454 <_free_r+0x24>
 800247a:	4613      	mov	r3, r2
 800247c:	685a      	ldr	r2, [r3, #4]
 800247e:	b10a      	cbz	r2, 8002484 <_free_r+0x54>
 8002480:	42a2      	cmp	r2, r4
 8002482:	d9fa      	bls.n	800247a <_free_r+0x4a>
 8002484:	6819      	ldr	r1, [r3, #0]
 8002486:	1858      	adds	r0, r3, r1
 8002488:	42a0      	cmp	r0, r4
 800248a:	d10b      	bne.n	80024a4 <_free_r+0x74>
 800248c:	6820      	ldr	r0, [r4, #0]
 800248e:	4401      	add	r1, r0
 8002490:	1858      	adds	r0, r3, r1
 8002492:	4282      	cmp	r2, r0
 8002494:	6019      	str	r1, [r3, #0]
 8002496:	d1dd      	bne.n	8002454 <_free_r+0x24>
 8002498:	6810      	ldr	r0, [r2, #0]
 800249a:	6852      	ldr	r2, [r2, #4]
 800249c:	605a      	str	r2, [r3, #4]
 800249e:	4401      	add	r1, r0
 80024a0:	6019      	str	r1, [r3, #0]
 80024a2:	e7d7      	b.n	8002454 <_free_r+0x24>
 80024a4:	d902      	bls.n	80024ac <_free_r+0x7c>
 80024a6:	230c      	movs	r3, #12
 80024a8:	602b      	str	r3, [r5, #0]
 80024aa:	e7d3      	b.n	8002454 <_free_r+0x24>
 80024ac:	6820      	ldr	r0, [r4, #0]
 80024ae:	1821      	adds	r1, r4, r0
 80024b0:	428a      	cmp	r2, r1
 80024b2:	bf04      	itt	eq
 80024b4:	6811      	ldreq	r1, [r2, #0]
 80024b6:	6852      	ldreq	r2, [r2, #4]
 80024b8:	6062      	str	r2, [r4, #4]
 80024ba:	bf04      	itt	eq
 80024bc:	1809      	addeq	r1, r1, r0
 80024be:	6021      	streq	r1, [r4, #0]
 80024c0:	605c      	str	r4, [r3, #4]
 80024c2:	e7c7      	b.n	8002454 <_free_r+0x24>
 80024c4:	bd38      	pop	{r3, r4, r5, pc}
 80024c6:	bf00      	nop
 80024c8:	20000150 	.word	0x20000150

080024cc <__sfputc_r>:
 80024cc:	6893      	ldr	r3, [r2, #8]
 80024ce:	3b01      	subs	r3, #1
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	b410      	push	{r4}
 80024d4:	6093      	str	r3, [r2, #8]
 80024d6:	da07      	bge.n	80024e8 <__sfputc_r+0x1c>
 80024d8:	6994      	ldr	r4, [r2, #24]
 80024da:	42a3      	cmp	r3, r4
 80024dc:	db01      	blt.n	80024e2 <__sfputc_r+0x16>
 80024de:	290a      	cmp	r1, #10
 80024e0:	d102      	bne.n	80024e8 <__sfputc_r+0x1c>
 80024e2:	bc10      	pop	{r4}
 80024e4:	f000 baca 	b.w	8002a7c <__swbuf_r>
 80024e8:	6813      	ldr	r3, [r2, #0]
 80024ea:	1c58      	adds	r0, r3, #1
 80024ec:	6010      	str	r0, [r2, #0]
 80024ee:	7019      	strb	r1, [r3, #0]
 80024f0:	4608      	mov	r0, r1
 80024f2:	bc10      	pop	{r4}
 80024f4:	4770      	bx	lr

080024f6 <__sfputs_r>:
 80024f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80024f8:	4606      	mov	r6, r0
 80024fa:	460f      	mov	r7, r1
 80024fc:	4614      	mov	r4, r2
 80024fe:	18d5      	adds	r5, r2, r3
 8002500:	42ac      	cmp	r4, r5
 8002502:	d101      	bne.n	8002508 <__sfputs_r+0x12>
 8002504:	2000      	movs	r0, #0
 8002506:	e007      	b.n	8002518 <__sfputs_r+0x22>
 8002508:	463a      	mov	r2, r7
 800250a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800250e:	4630      	mov	r0, r6
 8002510:	f7ff ffdc 	bl	80024cc <__sfputc_r>
 8002514:	1c43      	adds	r3, r0, #1
 8002516:	d1f3      	bne.n	8002500 <__sfputs_r+0xa>
 8002518:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800251c <_vfiprintf_r>:
 800251c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002520:	460c      	mov	r4, r1
 8002522:	b09d      	sub	sp, #116	; 0x74
 8002524:	4617      	mov	r7, r2
 8002526:	461d      	mov	r5, r3
 8002528:	4606      	mov	r6, r0
 800252a:	b118      	cbz	r0, 8002534 <_vfiprintf_r+0x18>
 800252c:	6983      	ldr	r3, [r0, #24]
 800252e:	b90b      	cbnz	r3, 8002534 <_vfiprintf_r+0x18>
 8002530:	f7ff fd1c 	bl	8001f6c <__sinit>
 8002534:	4b7c      	ldr	r3, [pc, #496]	; (8002728 <_vfiprintf_r+0x20c>)
 8002536:	429c      	cmp	r4, r3
 8002538:	d158      	bne.n	80025ec <_vfiprintf_r+0xd0>
 800253a:	6874      	ldr	r4, [r6, #4]
 800253c:	89a3      	ldrh	r3, [r4, #12]
 800253e:	0718      	lsls	r0, r3, #28
 8002540:	d55e      	bpl.n	8002600 <_vfiprintf_r+0xe4>
 8002542:	6923      	ldr	r3, [r4, #16]
 8002544:	2b00      	cmp	r3, #0
 8002546:	d05b      	beq.n	8002600 <_vfiprintf_r+0xe4>
 8002548:	2300      	movs	r3, #0
 800254a:	9309      	str	r3, [sp, #36]	; 0x24
 800254c:	2320      	movs	r3, #32
 800254e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002552:	2330      	movs	r3, #48	; 0x30
 8002554:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002558:	9503      	str	r5, [sp, #12]
 800255a:	f04f 0b01 	mov.w	fp, #1
 800255e:	46b8      	mov	r8, r7
 8002560:	4645      	mov	r5, r8
 8002562:	f815 3b01 	ldrb.w	r3, [r5], #1
 8002566:	b10b      	cbz	r3, 800256c <_vfiprintf_r+0x50>
 8002568:	2b25      	cmp	r3, #37	; 0x25
 800256a:	d154      	bne.n	8002616 <_vfiprintf_r+0xfa>
 800256c:	ebb8 0a07 	subs.w	sl, r8, r7
 8002570:	d00b      	beq.n	800258a <_vfiprintf_r+0x6e>
 8002572:	4653      	mov	r3, sl
 8002574:	463a      	mov	r2, r7
 8002576:	4621      	mov	r1, r4
 8002578:	4630      	mov	r0, r6
 800257a:	f7ff ffbc 	bl	80024f6 <__sfputs_r>
 800257e:	3001      	adds	r0, #1
 8002580:	f000 80c2 	beq.w	8002708 <_vfiprintf_r+0x1ec>
 8002584:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002586:	4453      	add	r3, sl
 8002588:	9309      	str	r3, [sp, #36]	; 0x24
 800258a:	f898 3000 	ldrb.w	r3, [r8]
 800258e:	2b00      	cmp	r3, #0
 8002590:	f000 80ba 	beq.w	8002708 <_vfiprintf_r+0x1ec>
 8002594:	2300      	movs	r3, #0
 8002596:	f04f 32ff 	mov.w	r2, #4294967295
 800259a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800259e:	9304      	str	r3, [sp, #16]
 80025a0:	9307      	str	r3, [sp, #28]
 80025a2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80025a6:	931a      	str	r3, [sp, #104]	; 0x68
 80025a8:	46a8      	mov	r8, r5
 80025aa:	2205      	movs	r2, #5
 80025ac:	f818 1b01 	ldrb.w	r1, [r8], #1
 80025b0:	485e      	ldr	r0, [pc, #376]	; (800272c <_vfiprintf_r+0x210>)
 80025b2:	f7fd fe35 	bl	8000220 <memchr>
 80025b6:	9b04      	ldr	r3, [sp, #16]
 80025b8:	bb78      	cbnz	r0, 800261a <_vfiprintf_r+0xfe>
 80025ba:	06d9      	lsls	r1, r3, #27
 80025bc:	bf44      	itt	mi
 80025be:	2220      	movmi	r2, #32
 80025c0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80025c4:	071a      	lsls	r2, r3, #28
 80025c6:	bf44      	itt	mi
 80025c8:	222b      	movmi	r2, #43	; 0x2b
 80025ca:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80025ce:	782a      	ldrb	r2, [r5, #0]
 80025d0:	2a2a      	cmp	r2, #42	; 0x2a
 80025d2:	d02a      	beq.n	800262a <_vfiprintf_r+0x10e>
 80025d4:	9a07      	ldr	r2, [sp, #28]
 80025d6:	46a8      	mov	r8, r5
 80025d8:	2000      	movs	r0, #0
 80025da:	250a      	movs	r5, #10
 80025dc:	4641      	mov	r1, r8
 80025de:	f811 3b01 	ldrb.w	r3, [r1], #1
 80025e2:	3b30      	subs	r3, #48	; 0x30
 80025e4:	2b09      	cmp	r3, #9
 80025e6:	d969      	bls.n	80026bc <_vfiprintf_r+0x1a0>
 80025e8:	b360      	cbz	r0, 8002644 <_vfiprintf_r+0x128>
 80025ea:	e024      	b.n	8002636 <_vfiprintf_r+0x11a>
 80025ec:	4b50      	ldr	r3, [pc, #320]	; (8002730 <_vfiprintf_r+0x214>)
 80025ee:	429c      	cmp	r4, r3
 80025f0:	d101      	bne.n	80025f6 <_vfiprintf_r+0xda>
 80025f2:	68b4      	ldr	r4, [r6, #8]
 80025f4:	e7a2      	b.n	800253c <_vfiprintf_r+0x20>
 80025f6:	4b4f      	ldr	r3, [pc, #316]	; (8002734 <_vfiprintf_r+0x218>)
 80025f8:	429c      	cmp	r4, r3
 80025fa:	bf08      	it	eq
 80025fc:	68f4      	ldreq	r4, [r6, #12]
 80025fe:	e79d      	b.n	800253c <_vfiprintf_r+0x20>
 8002600:	4621      	mov	r1, r4
 8002602:	4630      	mov	r0, r6
 8002604:	f000 fa8c 	bl	8002b20 <__swsetup_r>
 8002608:	2800      	cmp	r0, #0
 800260a:	d09d      	beq.n	8002548 <_vfiprintf_r+0x2c>
 800260c:	f04f 30ff 	mov.w	r0, #4294967295
 8002610:	b01d      	add	sp, #116	; 0x74
 8002612:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002616:	46a8      	mov	r8, r5
 8002618:	e7a2      	b.n	8002560 <_vfiprintf_r+0x44>
 800261a:	4a44      	ldr	r2, [pc, #272]	; (800272c <_vfiprintf_r+0x210>)
 800261c:	1a80      	subs	r0, r0, r2
 800261e:	fa0b f000 	lsl.w	r0, fp, r0
 8002622:	4318      	orrs	r0, r3
 8002624:	9004      	str	r0, [sp, #16]
 8002626:	4645      	mov	r5, r8
 8002628:	e7be      	b.n	80025a8 <_vfiprintf_r+0x8c>
 800262a:	9a03      	ldr	r2, [sp, #12]
 800262c:	1d11      	adds	r1, r2, #4
 800262e:	6812      	ldr	r2, [r2, #0]
 8002630:	9103      	str	r1, [sp, #12]
 8002632:	2a00      	cmp	r2, #0
 8002634:	db01      	blt.n	800263a <_vfiprintf_r+0x11e>
 8002636:	9207      	str	r2, [sp, #28]
 8002638:	e004      	b.n	8002644 <_vfiprintf_r+0x128>
 800263a:	4252      	negs	r2, r2
 800263c:	f043 0302 	orr.w	r3, r3, #2
 8002640:	9207      	str	r2, [sp, #28]
 8002642:	9304      	str	r3, [sp, #16]
 8002644:	f898 3000 	ldrb.w	r3, [r8]
 8002648:	2b2e      	cmp	r3, #46	; 0x2e
 800264a:	d10e      	bne.n	800266a <_vfiprintf_r+0x14e>
 800264c:	f898 3001 	ldrb.w	r3, [r8, #1]
 8002650:	2b2a      	cmp	r3, #42	; 0x2a
 8002652:	d138      	bne.n	80026c6 <_vfiprintf_r+0x1aa>
 8002654:	9b03      	ldr	r3, [sp, #12]
 8002656:	1d1a      	adds	r2, r3, #4
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	9203      	str	r2, [sp, #12]
 800265c:	2b00      	cmp	r3, #0
 800265e:	bfb8      	it	lt
 8002660:	f04f 33ff 	movlt.w	r3, #4294967295
 8002664:	f108 0802 	add.w	r8, r8, #2
 8002668:	9305      	str	r3, [sp, #20]
 800266a:	4d33      	ldr	r5, [pc, #204]	; (8002738 <_vfiprintf_r+0x21c>)
 800266c:	f898 1000 	ldrb.w	r1, [r8]
 8002670:	2203      	movs	r2, #3
 8002672:	4628      	mov	r0, r5
 8002674:	f7fd fdd4 	bl	8000220 <memchr>
 8002678:	b140      	cbz	r0, 800268c <_vfiprintf_r+0x170>
 800267a:	2340      	movs	r3, #64	; 0x40
 800267c:	1b40      	subs	r0, r0, r5
 800267e:	fa03 f000 	lsl.w	r0, r3, r0
 8002682:	9b04      	ldr	r3, [sp, #16]
 8002684:	4303      	orrs	r3, r0
 8002686:	f108 0801 	add.w	r8, r8, #1
 800268a:	9304      	str	r3, [sp, #16]
 800268c:	f898 1000 	ldrb.w	r1, [r8]
 8002690:	482a      	ldr	r0, [pc, #168]	; (800273c <_vfiprintf_r+0x220>)
 8002692:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002696:	2206      	movs	r2, #6
 8002698:	f108 0701 	add.w	r7, r8, #1
 800269c:	f7fd fdc0 	bl	8000220 <memchr>
 80026a0:	2800      	cmp	r0, #0
 80026a2:	d037      	beq.n	8002714 <_vfiprintf_r+0x1f8>
 80026a4:	4b26      	ldr	r3, [pc, #152]	; (8002740 <_vfiprintf_r+0x224>)
 80026a6:	bb1b      	cbnz	r3, 80026f0 <_vfiprintf_r+0x1d4>
 80026a8:	9b03      	ldr	r3, [sp, #12]
 80026aa:	3307      	adds	r3, #7
 80026ac:	f023 0307 	bic.w	r3, r3, #7
 80026b0:	3308      	adds	r3, #8
 80026b2:	9303      	str	r3, [sp, #12]
 80026b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80026b6:	444b      	add	r3, r9
 80026b8:	9309      	str	r3, [sp, #36]	; 0x24
 80026ba:	e750      	b.n	800255e <_vfiprintf_r+0x42>
 80026bc:	fb05 3202 	mla	r2, r5, r2, r3
 80026c0:	2001      	movs	r0, #1
 80026c2:	4688      	mov	r8, r1
 80026c4:	e78a      	b.n	80025dc <_vfiprintf_r+0xc0>
 80026c6:	2300      	movs	r3, #0
 80026c8:	f108 0801 	add.w	r8, r8, #1
 80026cc:	9305      	str	r3, [sp, #20]
 80026ce:	4619      	mov	r1, r3
 80026d0:	250a      	movs	r5, #10
 80026d2:	4640      	mov	r0, r8
 80026d4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80026d8:	3a30      	subs	r2, #48	; 0x30
 80026da:	2a09      	cmp	r2, #9
 80026dc:	d903      	bls.n	80026e6 <_vfiprintf_r+0x1ca>
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d0c3      	beq.n	800266a <_vfiprintf_r+0x14e>
 80026e2:	9105      	str	r1, [sp, #20]
 80026e4:	e7c1      	b.n	800266a <_vfiprintf_r+0x14e>
 80026e6:	fb05 2101 	mla	r1, r5, r1, r2
 80026ea:	2301      	movs	r3, #1
 80026ec:	4680      	mov	r8, r0
 80026ee:	e7f0      	b.n	80026d2 <_vfiprintf_r+0x1b6>
 80026f0:	ab03      	add	r3, sp, #12
 80026f2:	9300      	str	r3, [sp, #0]
 80026f4:	4622      	mov	r2, r4
 80026f6:	4b13      	ldr	r3, [pc, #76]	; (8002744 <_vfiprintf_r+0x228>)
 80026f8:	a904      	add	r1, sp, #16
 80026fa:	4630      	mov	r0, r6
 80026fc:	f3af 8000 	nop.w
 8002700:	f1b0 3fff 	cmp.w	r0, #4294967295
 8002704:	4681      	mov	r9, r0
 8002706:	d1d5      	bne.n	80026b4 <_vfiprintf_r+0x198>
 8002708:	89a3      	ldrh	r3, [r4, #12]
 800270a:	065b      	lsls	r3, r3, #25
 800270c:	f53f af7e 	bmi.w	800260c <_vfiprintf_r+0xf0>
 8002710:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002712:	e77d      	b.n	8002610 <_vfiprintf_r+0xf4>
 8002714:	ab03      	add	r3, sp, #12
 8002716:	9300      	str	r3, [sp, #0]
 8002718:	4622      	mov	r2, r4
 800271a:	4b0a      	ldr	r3, [pc, #40]	; (8002744 <_vfiprintf_r+0x228>)
 800271c:	a904      	add	r1, sp, #16
 800271e:	4630      	mov	r0, r6
 8002720:	f000 f888 	bl	8002834 <_printf_i>
 8002724:	e7ec      	b.n	8002700 <_vfiprintf_r+0x1e4>
 8002726:	bf00      	nop
 8002728:	08002d70 	.word	0x08002d70
 800272c:	08002db4 	.word	0x08002db4
 8002730:	08002d90 	.word	0x08002d90
 8002734:	08002d50 	.word	0x08002d50
 8002738:	08002dba 	.word	0x08002dba
 800273c:	08002dbe 	.word	0x08002dbe
 8002740:	00000000 	.word	0x00000000
 8002744:	080024f7 	.word	0x080024f7

08002748 <_printf_common>:
 8002748:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800274c:	4691      	mov	r9, r2
 800274e:	461f      	mov	r7, r3
 8002750:	688a      	ldr	r2, [r1, #8]
 8002752:	690b      	ldr	r3, [r1, #16]
 8002754:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002758:	4293      	cmp	r3, r2
 800275a:	bfb8      	it	lt
 800275c:	4613      	movlt	r3, r2
 800275e:	f8c9 3000 	str.w	r3, [r9]
 8002762:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002766:	4606      	mov	r6, r0
 8002768:	460c      	mov	r4, r1
 800276a:	b112      	cbz	r2, 8002772 <_printf_common+0x2a>
 800276c:	3301      	adds	r3, #1
 800276e:	f8c9 3000 	str.w	r3, [r9]
 8002772:	6823      	ldr	r3, [r4, #0]
 8002774:	0699      	lsls	r1, r3, #26
 8002776:	bf42      	ittt	mi
 8002778:	f8d9 3000 	ldrmi.w	r3, [r9]
 800277c:	3302      	addmi	r3, #2
 800277e:	f8c9 3000 	strmi.w	r3, [r9]
 8002782:	6825      	ldr	r5, [r4, #0]
 8002784:	f015 0506 	ands.w	r5, r5, #6
 8002788:	d107      	bne.n	800279a <_printf_common+0x52>
 800278a:	f104 0a19 	add.w	sl, r4, #25
 800278e:	68e3      	ldr	r3, [r4, #12]
 8002790:	f8d9 2000 	ldr.w	r2, [r9]
 8002794:	1a9b      	subs	r3, r3, r2
 8002796:	42ab      	cmp	r3, r5
 8002798:	dc28      	bgt.n	80027ec <_printf_common+0xa4>
 800279a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800279e:	6822      	ldr	r2, [r4, #0]
 80027a0:	3300      	adds	r3, #0
 80027a2:	bf18      	it	ne
 80027a4:	2301      	movne	r3, #1
 80027a6:	0692      	lsls	r2, r2, #26
 80027a8:	d42d      	bmi.n	8002806 <_printf_common+0xbe>
 80027aa:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80027ae:	4639      	mov	r1, r7
 80027b0:	4630      	mov	r0, r6
 80027b2:	47c0      	blx	r8
 80027b4:	3001      	adds	r0, #1
 80027b6:	d020      	beq.n	80027fa <_printf_common+0xb2>
 80027b8:	6823      	ldr	r3, [r4, #0]
 80027ba:	68e5      	ldr	r5, [r4, #12]
 80027bc:	f8d9 2000 	ldr.w	r2, [r9]
 80027c0:	f003 0306 	and.w	r3, r3, #6
 80027c4:	2b04      	cmp	r3, #4
 80027c6:	bf08      	it	eq
 80027c8:	1aad      	subeq	r5, r5, r2
 80027ca:	68a3      	ldr	r3, [r4, #8]
 80027cc:	6922      	ldr	r2, [r4, #16]
 80027ce:	bf0c      	ite	eq
 80027d0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80027d4:	2500      	movne	r5, #0
 80027d6:	4293      	cmp	r3, r2
 80027d8:	bfc4      	itt	gt
 80027da:	1a9b      	subgt	r3, r3, r2
 80027dc:	18ed      	addgt	r5, r5, r3
 80027de:	f04f 0900 	mov.w	r9, #0
 80027e2:	341a      	adds	r4, #26
 80027e4:	454d      	cmp	r5, r9
 80027e6:	d11a      	bne.n	800281e <_printf_common+0xd6>
 80027e8:	2000      	movs	r0, #0
 80027ea:	e008      	b.n	80027fe <_printf_common+0xb6>
 80027ec:	2301      	movs	r3, #1
 80027ee:	4652      	mov	r2, sl
 80027f0:	4639      	mov	r1, r7
 80027f2:	4630      	mov	r0, r6
 80027f4:	47c0      	blx	r8
 80027f6:	3001      	adds	r0, #1
 80027f8:	d103      	bne.n	8002802 <_printf_common+0xba>
 80027fa:	f04f 30ff 	mov.w	r0, #4294967295
 80027fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002802:	3501      	adds	r5, #1
 8002804:	e7c3      	b.n	800278e <_printf_common+0x46>
 8002806:	18e1      	adds	r1, r4, r3
 8002808:	1c5a      	adds	r2, r3, #1
 800280a:	2030      	movs	r0, #48	; 0x30
 800280c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002810:	4422      	add	r2, r4
 8002812:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002816:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800281a:	3302      	adds	r3, #2
 800281c:	e7c5      	b.n	80027aa <_printf_common+0x62>
 800281e:	2301      	movs	r3, #1
 8002820:	4622      	mov	r2, r4
 8002822:	4639      	mov	r1, r7
 8002824:	4630      	mov	r0, r6
 8002826:	47c0      	blx	r8
 8002828:	3001      	adds	r0, #1
 800282a:	d0e6      	beq.n	80027fa <_printf_common+0xb2>
 800282c:	f109 0901 	add.w	r9, r9, #1
 8002830:	e7d8      	b.n	80027e4 <_printf_common+0x9c>
	...

08002834 <_printf_i>:
 8002834:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002838:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800283c:	460c      	mov	r4, r1
 800283e:	7e09      	ldrb	r1, [r1, #24]
 8002840:	b085      	sub	sp, #20
 8002842:	296e      	cmp	r1, #110	; 0x6e
 8002844:	4617      	mov	r7, r2
 8002846:	4606      	mov	r6, r0
 8002848:	4698      	mov	r8, r3
 800284a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800284c:	f000 80b3 	beq.w	80029b6 <_printf_i+0x182>
 8002850:	d822      	bhi.n	8002898 <_printf_i+0x64>
 8002852:	2963      	cmp	r1, #99	; 0x63
 8002854:	d036      	beq.n	80028c4 <_printf_i+0x90>
 8002856:	d80a      	bhi.n	800286e <_printf_i+0x3a>
 8002858:	2900      	cmp	r1, #0
 800285a:	f000 80b9 	beq.w	80029d0 <_printf_i+0x19c>
 800285e:	2958      	cmp	r1, #88	; 0x58
 8002860:	f000 8083 	beq.w	800296a <_printf_i+0x136>
 8002864:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002868:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800286c:	e032      	b.n	80028d4 <_printf_i+0xa0>
 800286e:	2964      	cmp	r1, #100	; 0x64
 8002870:	d001      	beq.n	8002876 <_printf_i+0x42>
 8002872:	2969      	cmp	r1, #105	; 0x69
 8002874:	d1f6      	bne.n	8002864 <_printf_i+0x30>
 8002876:	6820      	ldr	r0, [r4, #0]
 8002878:	6813      	ldr	r3, [r2, #0]
 800287a:	0605      	lsls	r5, r0, #24
 800287c:	f103 0104 	add.w	r1, r3, #4
 8002880:	d52a      	bpl.n	80028d8 <_printf_i+0xa4>
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	6011      	str	r1, [r2, #0]
 8002886:	2b00      	cmp	r3, #0
 8002888:	da03      	bge.n	8002892 <_printf_i+0x5e>
 800288a:	222d      	movs	r2, #45	; 0x2d
 800288c:	425b      	negs	r3, r3
 800288e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8002892:	486f      	ldr	r0, [pc, #444]	; (8002a50 <_printf_i+0x21c>)
 8002894:	220a      	movs	r2, #10
 8002896:	e039      	b.n	800290c <_printf_i+0xd8>
 8002898:	2973      	cmp	r1, #115	; 0x73
 800289a:	f000 809d 	beq.w	80029d8 <_printf_i+0x1a4>
 800289e:	d808      	bhi.n	80028b2 <_printf_i+0x7e>
 80028a0:	296f      	cmp	r1, #111	; 0x6f
 80028a2:	d020      	beq.n	80028e6 <_printf_i+0xb2>
 80028a4:	2970      	cmp	r1, #112	; 0x70
 80028a6:	d1dd      	bne.n	8002864 <_printf_i+0x30>
 80028a8:	6823      	ldr	r3, [r4, #0]
 80028aa:	f043 0320 	orr.w	r3, r3, #32
 80028ae:	6023      	str	r3, [r4, #0]
 80028b0:	e003      	b.n	80028ba <_printf_i+0x86>
 80028b2:	2975      	cmp	r1, #117	; 0x75
 80028b4:	d017      	beq.n	80028e6 <_printf_i+0xb2>
 80028b6:	2978      	cmp	r1, #120	; 0x78
 80028b8:	d1d4      	bne.n	8002864 <_printf_i+0x30>
 80028ba:	2378      	movs	r3, #120	; 0x78
 80028bc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80028c0:	4864      	ldr	r0, [pc, #400]	; (8002a54 <_printf_i+0x220>)
 80028c2:	e055      	b.n	8002970 <_printf_i+0x13c>
 80028c4:	6813      	ldr	r3, [r2, #0]
 80028c6:	1d19      	adds	r1, r3, #4
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	6011      	str	r1, [r2, #0]
 80028cc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80028d0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80028d4:	2301      	movs	r3, #1
 80028d6:	e08c      	b.n	80029f2 <_printf_i+0x1be>
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	6011      	str	r1, [r2, #0]
 80028dc:	f010 0f40 	tst.w	r0, #64	; 0x40
 80028e0:	bf18      	it	ne
 80028e2:	b21b      	sxthne	r3, r3
 80028e4:	e7cf      	b.n	8002886 <_printf_i+0x52>
 80028e6:	6813      	ldr	r3, [r2, #0]
 80028e8:	6825      	ldr	r5, [r4, #0]
 80028ea:	1d18      	adds	r0, r3, #4
 80028ec:	6010      	str	r0, [r2, #0]
 80028ee:	0628      	lsls	r0, r5, #24
 80028f0:	d501      	bpl.n	80028f6 <_printf_i+0xc2>
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	e002      	b.n	80028fc <_printf_i+0xc8>
 80028f6:	0668      	lsls	r0, r5, #25
 80028f8:	d5fb      	bpl.n	80028f2 <_printf_i+0xbe>
 80028fa:	881b      	ldrh	r3, [r3, #0]
 80028fc:	4854      	ldr	r0, [pc, #336]	; (8002a50 <_printf_i+0x21c>)
 80028fe:	296f      	cmp	r1, #111	; 0x6f
 8002900:	bf14      	ite	ne
 8002902:	220a      	movne	r2, #10
 8002904:	2208      	moveq	r2, #8
 8002906:	2100      	movs	r1, #0
 8002908:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800290c:	6865      	ldr	r5, [r4, #4]
 800290e:	60a5      	str	r5, [r4, #8]
 8002910:	2d00      	cmp	r5, #0
 8002912:	f2c0 8095 	blt.w	8002a40 <_printf_i+0x20c>
 8002916:	6821      	ldr	r1, [r4, #0]
 8002918:	f021 0104 	bic.w	r1, r1, #4
 800291c:	6021      	str	r1, [r4, #0]
 800291e:	2b00      	cmp	r3, #0
 8002920:	d13d      	bne.n	800299e <_printf_i+0x16a>
 8002922:	2d00      	cmp	r5, #0
 8002924:	f040 808e 	bne.w	8002a44 <_printf_i+0x210>
 8002928:	4665      	mov	r5, ip
 800292a:	2a08      	cmp	r2, #8
 800292c:	d10b      	bne.n	8002946 <_printf_i+0x112>
 800292e:	6823      	ldr	r3, [r4, #0]
 8002930:	07db      	lsls	r3, r3, #31
 8002932:	d508      	bpl.n	8002946 <_printf_i+0x112>
 8002934:	6923      	ldr	r3, [r4, #16]
 8002936:	6862      	ldr	r2, [r4, #4]
 8002938:	429a      	cmp	r2, r3
 800293a:	bfde      	ittt	le
 800293c:	2330      	movle	r3, #48	; 0x30
 800293e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002942:	f105 35ff 	addle.w	r5, r5, #4294967295
 8002946:	ebac 0305 	sub.w	r3, ip, r5
 800294a:	6123      	str	r3, [r4, #16]
 800294c:	f8cd 8000 	str.w	r8, [sp]
 8002950:	463b      	mov	r3, r7
 8002952:	aa03      	add	r2, sp, #12
 8002954:	4621      	mov	r1, r4
 8002956:	4630      	mov	r0, r6
 8002958:	f7ff fef6 	bl	8002748 <_printf_common>
 800295c:	3001      	adds	r0, #1
 800295e:	d14d      	bne.n	80029fc <_printf_i+0x1c8>
 8002960:	f04f 30ff 	mov.w	r0, #4294967295
 8002964:	b005      	add	sp, #20
 8002966:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800296a:	4839      	ldr	r0, [pc, #228]	; (8002a50 <_printf_i+0x21c>)
 800296c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8002970:	6813      	ldr	r3, [r2, #0]
 8002972:	6821      	ldr	r1, [r4, #0]
 8002974:	1d1d      	adds	r5, r3, #4
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	6015      	str	r5, [r2, #0]
 800297a:	060a      	lsls	r2, r1, #24
 800297c:	d50b      	bpl.n	8002996 <_printf_i+0x162>
 800297e:	07ca      	lsls	r2, r1, #31
 8002980:	bf44      	itt	mi
 8002982:	f041 0120 	orrmi.w	r1, r1, #32
 8002986:	6021      	strmi	r1, [r4, #0]
 8002988:	b91b      	cbnz	r3, 8002992 <_printf_i+0x15e>
 800298a:	6822      	ldr	r2, [r4, #0]
 800298c:	f022 0220 	bic.w	r2, r2, #32
 8002990:	6022      	str	r2, [r4, #0]
 8002992:	2210      	movs	r2, #16
 8002994:	e7b7      	b.n	8002906 <_printf_i+0xd2>
 8002996:	064d      	lsls	r5, r1, #25
 8002998:	bf48      	it	mi
 800299a:	b29b      	uxthmi	r3, r3
 800299c:	e7ef      	b.n	800297e <_printf_i+0x14a>
 800299e:	4665      	mov	r5, ip
 80029a0:	fbb3 f1f2 	udiv	r1, r3, r2
 80029a4:	fb02 3311 	mls	r3, r2, r1, r3
 80029a8:	5cc3      	ldrb	r3, [r0, r3]
 80029aa:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80029ae:	460b      	mov	r3, r1
 80029b0:	2900      	cmp	r1, #0
 80029b2:	d1f5      	bne.n	80029a0 <_printf_i+0x16c>
 80029b4:	e7b9      	b.n	800292a <_printf_i+0xf6>
 80029b6:	6813      	ldr	r3, [r2, #0]
 80029b8:	6825      	ldr	r5, [r4, #0]
 80029ba:	6961      	ldr	r1, [r4, #20]
 80029bc:	1d18      	adds	r0, r3, #4
 80029be:	6010      	str	r0, [r2, #0]
 80029c0:	0628      	lsls	r0, r5, #24
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	d501      	bpl.n	80029ca <_printf_i+0x196>
 80029c6:	6019      	str	r1, [r3, #0]
 80029c8:	e002      	b.n	80029d0 <_printf_i+0x19c>
 80029ca:	066a      	lsls	r2, r5, #25
 80029cc:	d5fb      	bpl.n	80029c6 <_printf_i+0x192>
 80029ce:	8019      	strh	r1, [r3, #0]
 80029d0:	2300      	movs	r3, #0
 80029d2:	6123      	str	r3, [r4, #16]
 80029d4:	4665      	mov	r5, ip
 80029d6:	e7b9      	b.n	800294c <_printf_i+0x118>
 80029d8:	6813      	ldr	r3, [r2, #0]
 80029da:	1d19      	adds	r1, r3, #4
 80029dc:	6011      	str	r1, [r2, #0]
 80029de:	681d      	ldr	r5, [r3, #0]
 80029e0:	6862      	ldr	r2, [r4, #4]
 80029e2:	2100      	movs	r1, #0
 80029e4:	4628      	mov	r0, r5
 80029e6:	f7fd fc1b 	bl	8000220 <memchr>
 80029ea:	b108      	cbz	r0, 80029f0 <_printf_i+0x1bc>
 80029ec:	1b40      	subs	r0, r0, r5
 80029ee:	6060      	str	r0, [r4, #4]
 80029f0:	6863      	ldr	r3, [r4, #4]
 80029f2:	6123      	str	r3, [r4, #16]
 80029f4:	2300      	movs	r3, #0
 80029f6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80029fa:	e7a7      	b.n	800294c <_printf_i+0x118>
 80029fc:	6923      	ldr	r3, [r4, #16]
 80029fe:	462a      	mov	r2, r5
 8002a00:	4639      	mov	r1, r7
 8002a02:	4630      	mov	r0, r6
 8002a04:	47c0      	blx	r8
 8002a06:	3001      	adds	r0, #1
 8002a08:	d0aa      	beq.n	8002960 <_printf_i+0x12c>
 8002a0a:	6823      	ldr	r3, [r4, #0]
 8002a0c:	079b      	lsls	r3, r3, #30
 8002a0e:	d413      	bmi.n	8002a38 <_printf_i+0x204>
 8002a10:	68e0      	ldr	r0, [r4, #12]
 8002a12:	9b03      	ldr	r3, [sp, #12]
 8002a14:	4298      	cmp	r0, r3
 8002a16:	bfb8      	it	lt
 8002a18:	4618      	movlt	r0, r3
 8002a1a:	e7a3      	b.n	8002964 <_printf_i+0x130>
 8002a1c:	2301      	movs	r3, #1
 8002a1e:	464a      	mov	r2, r9
 8002a20:	4639      	mov	r1, r7
 8002a22:	4630      	mov	r0, r6
 8002a24:	47c0      	blx	r8
 8002a26:	3001      	adds	r0, #1
 8002a28:	d09a      	beq.n	8002960 <_printf_i+0x12c>
 8002a2a:	3501      	adds	r5, #1
 8002a2c:	68e3      	ldr	r3, [r4, #12]
 8002a2e:	9a03      	ldr	r2, [sp, #12]
 8002a30:	1a9b      	subs	r3, r3, r2
 8002a32:	42ab      	cmp	r3, r5
 8002a34:	dcf2      	bgt.n	8002a1c <_printf_i+0x1e8>
 8002a36:	e7eb      	b.n	8002a10 <_printf_i+0x1dc>
 8002a38:	2500      	movs	r5, #0
 8002a3a:	f104 0919 	add.w	r9, r4, #25
 8002a3e:	e7f5      	b.n	8002a2c <_printf_i+0x1f8>
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d1ac      	bne.n	800299e <_printf_i+0x16a>
 8002a44:	7803      	ldrb	r3, [r0, #0]
 8002a46:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002a4a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002a4e:	e76c      	b.n	800292a <_printf_i+0xf6>
 8002a50:	08002dc5 	.word	0x08002dc5
 8002a54:	08002dd6 	.word	0x08002dd6

08002a58 <_read_r>:
 8002a58:	b538      	push	{r3, r4, r5, lr}
 8002a5a:	4c07      	ldr	r4, [pc, #28]	; (8002a78 <_read_r+0x20>)
 8002a5c:	4605      	mov	r5, r0
 8002a5e:	4608      	mov	r0, r1
 8002a60:	4611      	mov	r1, r2
 8002a62:	2200      	movs	r2, #0
 8002a64:	6022      	str	r2, [r4, #0]
 8002a66:	461a      	mov	r2, r3
 8002a68:	f7fe ffda 	bl	8001a20 <_read>
 8002a6c:	1c43      	adds	r3, r0, #1
 8002a6e:	d102      	bne.n	8002a76 <_read_r+0x1e>
 8002a70:	6823      	ldr	r3, [r4, #0]
 8002a72:	b103      	cbz	r3, 8002a76 <_read_r+0x1e>
 8002a74:	602b      	str	r3, [r5, #0]
 8002a76:	bd38      	pop	{r3, r4, r5, pc}
 8002a78:	20000190 	.word	0x20000190

08002a7c <__swbuf_r>:
 8002a7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a7e:	460e      	mov	r6, r1
 8002a80:	4614      	mov	r4, r2
 8002a82:	4605      	mov	r5, r0
 8002a84:	b118      	cbz	r0, 8002a8e <__swbuf_r+0x12>
 8002a86:	6983      	ldr	r3, [r0, #24]
 8002a88:	b90b      	cbnz	r3, 8002a8e <__swbuf_r+0x12>
 8002a8a:	f7ff fa6f 	bl	8001f6c <__sinit>
 8002a8e:	4b21      	ldr	r3, [pc, #132]	; (8002b14 <__swbuf_r+0x98>)
 8002a90:	429c      	cmp	r4, r3
 8002a92:	d12a      	bne.n	8002aea <__swbuf_r+0x6e>
 8002a94:	686c      	ldr	r4, [r5, #4]
 8002a96:	69a3      	ldr	r3, [r4, #24]
 8002a98:	60a3      	str	r3, [r4, #8]
 8002a9a:	89a3      	ldrh	r3, [r4, #12]
 8002a9c:	071a      	lsls	r2, r3, #28
 8002a9e:	d52e      	bpl.n	8002afe <__swbuf_r+0x82>
 8002aa0:	6923      	ldr	r3, [r4, #16]
 8002aa2:	b363      	cbz	r3, 8002afe <__swbuf_r+0x82>
 8002aa4:	6923      	ldr	r3, [r4, #16]
 8002aa6:	6820      	ldr	r0, [r4, #0]
 8002aa8:	1ac0      	subs	r0, r0, r3
 8002aaa:	6963      	ldr	r3, [r4, #20]
 8002aac:	b2f6      	uxtb	r6, r6
 8002aae:	4283      	cmp	r3, r0
 8002ab0:	4637      	mov	r7, r6
 8002ab2:	dc04      	bgt.n	8002abe <__swbuf_r+0x42>
 8002ab4:	4621      	mov	r1, r4
 8002ab6:	4628      	mov	r0, r5
 8002ab8:	f7ff fc7c 	bl	80023b4 <_fflush_r>
 8002abc:	bb28      	cbnz	r0, 8002b0a <__swbuf_r+0x8e>
 8002abe:	68a3      	ldr	r3, [r4, #8]
 8002ac0:	3b01      	subs	r3, #1
 8002ac2:	60a3      	str	r3, [r4, #8]
 8002ac4:	6823      	ldr	r3, [r4, #0]
 8002ac6:	1c5a      	adds	r2, r3, #1
 8002ac8:	6022      	str	r2, [r4, #0]
 8002aca:	701e      	strb	r6, [r3, #0]
 8002acc:	6963      	ldr	r3, [r4, #20]
 8002ace:	3001      	adds	r0, #1
 8002ad0:	4283      	cmp	r3, r0
 8002ad2:	d004      	beq.n	8002ade <__swbuf_r+0x62>
 8002ad4:	89a3      	ldrh	r3, [r4, #12]
 8002ad6:	07db      	lsls	r3, r3, #31
 8002ad8:	d519      	bpl.n	8002b0e <__swbuf_r+0x92>
 8002ada:	2e0a      	cmp	r6, #10
 8002adc:	d117      	bne.n	8002b0e <__swbuf_r+0x92>
 8002ade:	4621      	mov	r1, r4
 8002ae0:	4628      	mov	r0, r5
 8002ae2:	f7ff fc67 	bl	80023b4 <_fflush_r>
 8002ae6:	b190      	cbz	r0, 8002b0e <__swbuf_r+0x92>
 8002ae8:	e00f      	b.n	8002b0a <__swbuf_r+0x8e>
 8002aea:	4b0b      	ldr	r3, [pc, #44]	; (8002b18 <__swbuf_r+0x9c>)
 8002aec:	429c      	cmp	r4, r3
 8002aee:	d101      	bne.n	8002af4 <__swbuf_r+0x78>
 8002af0:	68ac      	ldr	r4, [r5, #8]
 8002af2:	e7d0      	b.n	8002a96 <__swbuf_r+0x1a>
 8002af4:	4b09      	ldr	r3, [pc, #36]	; (8002b1c <__swbuf_r+0xa0>)
 8002af6:	429c      	cmp	r4, r3
 8002af8:	bf08      	it	eq
 8002afa:	68ec      	ldreq	r4, [r5, #12]
 8002afc:	e7cb      	b.n	8002a96 <__swbuf_r+0x1a>
 8002afe:	4621      	mov	r1, r4
 8002b00:	4628      	mov	r0, r5
 8002b02:	f000 f80d 	bl	8002b20 <__swsetup_r>
 8002b06:	2800      	cmp	r0, #0
 8002b08:	d0cc      	beq.n	8002aa4 <__swbuf_r+0x28>
 8002b0a:	f04f 37ff 	mov.w	r7, #4294967295
 8002b0e:	4638      	mov	r0, r7
 8002b10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002b12:	bf00      	nop
 8002b14:	08002d70 	.word	0x08002d70
 8002b18:	08002d90 	.word	0x08002d90
 8002b1c:	08002d50 	.word	0x08002d50

08002b20 <__swsetup_r>:
 8002b20:	4b32      	ldr	r3, [pc, #200]	; (8002bec <__swsetup_r+0xcc>)
 8002b22:	b570      	push	{r4, r5, r6, lr}
 8002b24:	681d      	ldr	r5, [r3, #0]
 8002b26:	4606      	mov	r6, r0
 8002b28:	460c      	mov	r4, r1
 8002b2a:	b125      	cbz	r5, 8002b36 <__swsetup_r+0x16>
 8002b2c:	69ab      	ldr	r3, [r5, #24]
 8002b2e:	b913      	cbnz	r3, 8002b36 <__swsetup_r+0x16>
 8002b30:	4628      	mov	r0, r5
 8002b32:	f7ff fa1b 	bl	8001f6c <__sinit>
 8002b36:	4b2e      	ldr	r3, [pc, #184]	; (8002bf0 <__swsetup_r+0xd0>)
 8002b38:	429c      	cmp	r4, r3
 8002b3a:	d10f      	bne.n	8002b5c <__swsetup_r+0x3c>
 8002b3c:	686c      	ldr	r4, [r5, #4]
 8002b3e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002b42:	b29a      	uxth	r2, r3
 8002b44:	0715      	lsls	r5, r2, #28
 8002b46:	d42c      	bmi.n	8002ba2 <__swsetup_r+0x82>
 8002b48:	06d0      	lsls	r0, r2, #27
 8002b4a:	d411      	bmi.n	8002b70 <__swsetup_r+0x50>
 8002b4c:	2209      	movs	r2, #9
 8002b4e:	6032      	str	r2, [r6, #0]
 8002b50:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002b54:	81a3      	strh	r3, [r4, #12]
 8002b56:	f04f 30ff 	mov.w	r0, #4294967295
 8002b5a:	e03e      	b.n	8002bda <__swsetup_r+0xba>
 8002b5c:	4b25      	ldr	r3, [pc, #148]	; (8002bf4 <__swsetup_r+0xd4>)
 8002b5e:	429c      	cmp	r4, r3
 8002b60:	d101      	bne.n	8002b66 <__swsetup_r+0x46>
 8002b62:	68ac      	ldr	r4, [r5, #8]
 8002b64:	e7eb      	b.n	8002b3e <__swsetup_r+0x1e>
 8002b66:	4b24      	ldr	r3, [pc, #144]	; (8002bf8 <__swsetup_r+0xd8>)
 8002b68:	429c      	cmp	r4, r3
 8002b6a:	bf08      	it	eq
 8002b6c:	68ec      	ldreq	r4, [r5, #12]
 8002b6e:	e7e6      	b.n	8002b3e <__swsetup_r+0x1e>
 8002b70:	0751      	lsls	r1, r2, #29
 8002b72:	d512      	bpl.n	8002b9a <__swsetup_r+0x7a>
 8002b74:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002b76:	b141      	cbz	r1, 8002b8a <__swsetup_r+0x6a>
 8002b78:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002b7c:	4299      	cmp	r1, r3
 8002b7e:	d002      	beq.n	8002b86 <__swsetup_r+0x66>
 8002b80:	4630      	mov	r0, r6
 8002b82:	f7ff fc55 	bl	8002430 <_free_r>
 8002b86:	2300      	movs	r3, #0
 8002b88:	6363      	str	r3, [r4, #52]	; 0x34
 8002b8a:	89a3      	ldrh	r3, [r4, #12]
 8002b8c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8002b90:	81a3      	strh	r3, [r4, #12]
 8002b92:	2300      	movs	r3, #0
 8002b94:	6063      	str	r3, [r4, #4]
 8002b96:	6923      	ldr	r3, [r4, #16]
 8002b98:	6023      	str	r3, [r4, #0]
 8002b9a:	89a3      	ldrh	r3, [r4, #12]
 8002b9c:	f043 0308 	orr.w	r3, r3, #8
 8002ba0:	81a3      	strh	r3, [r4, #12]
 8002ba2:	6923      	ldr	r3, [r4, #16]
 8002ba4:	b94b      	cbnz	r3, 8002bba <__swsetup_r+0x9a>
 8002ba6:	89a3      	ldrh	r3, [r4, #12]
 8002ba8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8002bac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002bb0:	d003      	beq.n	8002bba <__swsetup_r+0x9a>
 8002bb2:	4621      	mov	r1, r4
 8002bb4:	4630      	mov	r0, r6
 8002bb6:	f000 f845 	bl	8002c44 <__smakebuf_r>
 8002bba:	89a2      	ldrh	r2, [r4, #12]
 8002bbc:	f012 0301 	ands.w	r3, r2, #1
 8002bc0:	d00c      	beq.n	8002bdc <__swsetup_r+0xbc>
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	60a3      	str	r3, [r4, #8]
 8002bc6:	6963      	ldr	r3, [r4, #20]
 8002bc8:	425b      	negs	r3, r3
 8002bca:	61a3      	str	r3, [r4, #24]
 8002bcc:	6923      	ldr	r3, [r4, #16]
 8002bce:	b953      	cbnz	r3, 8002be6 <__swsetup_r+0xc6>
 8002bd0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002bd4:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8002bd8:	d1ba      	bne.n	8002b50 <__swsetup_r+0x30>
 8002bda:	bd70      	pop	{r4, r5, r6, pc}
 8002bdc:	0792      	lsls	r2, r2, #30
 8002bde:	bf58      	it	pl
 8002be0:	6963      	ldrpl	r3, [r4, #20]
 8002be2:	60a3      	str	r3, [r4, #8]
 8002be4:	e7f2      	b.n	8002bcc <__swsetup_r+0xac>
 8002be6:	2000      	movs	r0, #0
 8002be8:	e7f7      	b.n	8002bda <__swsetup_r+0xba>
 8002bea:	bf00      	nop
 8002bec:	20000020 	.word	0x20000020
 8002bf0:	08002d70 	.word	0x08002d70
 8002bf4:	08002d90 	.word	0x08002d90
 8002bf8:	08002d50 	.word	0x08002d50

08002bfc <__swhatbuf_r>:
 8002bfc:	b570      	push	{r4, r5, r6, lr}
 8002bfe:	460e      	mov	r6, r1
 8002c00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002c04:	2900      	cmp	r1, #0
 8002c06:	b096      	sub	sp, #88	; 0x58
 8002c08:	4614      	mov	r4, r2
 8002c0a:	461d      	mov	r5, r3
 8002c0c:	da07      	bge.n	8002c1e <__swhatbuf_r+0x22>
 8002c0e:	2300      	movs	r3, #0
 8002c10:	602b      	str	r3, [r5, #0]
 8002c12:	89b3      	ldrh	r3, [r6, #12]
 8002c14:	061a      	lsls	r2, r3, #24
 8002c16:	d410      	bmi.n	8002c3a <__swhatbuf_r+0x3e>
 8002c18:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002c1c:	e00e      	b.n	8002c3c <__swhatbuf_r+0x40>
 8002c1e:	466a      	mov	r2, sp
 8002c20:	f000 f850 	bl	8002cc4 <_fstat_r>
 8002c24:	2800      	cmp	r0, #0
 8002c26:	dbf2      	blt.n	8002c0e <__swhatbuf_r+0x12>
 8002c28:	9a01      	ldr	r2, [sp, #4]
 8002c2a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8002c2e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8002c32:	425a      	negs	r2, r3
 8002c34:	415a      	adcs	r2, r3
 8002c36:	602a      	str	r2, [r5, #0]
 8002c38:	e7ee      	b.n	8002c18 <__swhatbuf_r+0x1c>
 8002c3a:	2340      	movs	r3, #64	; 0x40
 8002c3c:	2000      	movs	r0, #0
 8002c3e:	6023      	str	r3, [r4, #0]
 8002c40:	b016      	add	sp, #88	; 0x58
 8002c42:	bd70      	pop	{r4, r5, r6, pc}

08002c44 <__smakebuf_r>:
 8002c44:	898b      	ldrh	r3, [r1, #12]
 8002c46:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002c48:	079d      	lsls	r5, r3, #30
 8002c4a:	4606      	mov	r6, r0
 8002c4c:	460c      	mov	r4, r1
 8002c4e:	d507      	bpl.n	8002c60 <__smakebuf_r+0x1c>
 8002c50:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8002c54:	6023      	str	r3, [r4, #0]
 8002c56:	6123      	str	r3, [r4, #16]
 8002c58:	2301      	movs	r3, #1
 8002c5a:	6163      	str	r3, [r4, #20]
 8002c5c:	b002      	add	sp, #8
 8002c5e:	bd70      	pop	{r4, r5, r6, pc}
 8002c60:	ab01      	add	r3, sp, #4
 8002c62:	466a      	mov	r2, sp
 8002c64:	f7ff ffca 	bl	8002bfc <__swhatbuf_r>
 8002c68:	9900      	ldr	r1, [sp, #0]
 8002c6a:	4605      	mov	r5, r0
 8002c6c:	4630      	mov	r0, r6
 8002c6e:	f7ff fa33 	bl	80020d8 <_malloc_r>
 8002c72:	b948      	cbnz	r0, 8002c88 <__smakebuf_r+0x44>
 8002c74:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002c78:	059a      	lsls	r2, r3, #22
 8002c7a:	d4ef      	bmi.n	8002c5c <__smakebuf_r+0x18>
 8002c7c:	f023 0303 	bic.w	r3, r3, #3
 8002c80:	f043 0302 	orr.w	r3, r3, #2
 8002c84:	81a3      	strh	r3, [r4, #12]
 8002c86:	e7e3      	b.n	8002c50 <__smakebuf_r+0xc>
 8002c88:	4b0d      	ldr	r3, [pc, #52]	; (8002cc0 <__smakebuf_r+0x7c>)
 8002c8a:	62b3      	str	r3, [r6, #40]	; 0x28
 8002c8c:	89a3      	ldrh	r3, [r4, #12]
 8002c8e:	6020      	str	r0, [r4, #0]
 8002c90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c94:	81a3      	strh	r3, [r4, #12]
 8002c96:	9b00      	ldr	r3, [sp, #0]
 8002c98:	6163      	str	r3, [r4, #20]
 8002c9a:	9b01      	ldr	r3, [sp, #4]
 8002c9c:	6120      	str	r0, [r4, #16]
 8002c9e:	b15b      	cbz	r3, 8002cb8 <__smakebuf_r+0x74>
 8002ca0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002ca4:	4630      	mov	r0, r6
 8002ca6:	f000 f81f 	bl	8002ce8 <_isatty_r>
 8002caa:	b128      	cbz	r0, 8002cb8 <__smakebuf_r+0x74>
 8002cac:	89a3      	ldrh	r3, [r4, #12]
 8002cae:	f023 0303 	bic.w	r3, r3, #3
 8002cb2:	f043 0301 	orr.w	r3, r3, #1
 8002cb6:	81a3      	strh	r3, [r4, #12]
 8002cb8:	89a3      	ldrh	r3, [r4, #12]
 8002cba:	431d      	orrs	r5, r3
 8002cbc:	81a5      	strh	r5, [r4, #12]
 8002cbe:	e7cd      	b.n	8002c5c <__smakebuf_r+0x18>
 8002cc0:	08001f35 	.word	0x08001f35

08002cc4 <_fstat_r>:
 8002cc4:	b538      	push	{r3, r4, r5, lr}
 8002cc6:	4c07      	ldr	r4, [pc, #28]	; (8002ce4 <_fstat_r+0x20>)
 8002cc8:	2300      	movs	r3, #0
 8002cca:	4605      	mov	r5, r0
 8002ccc:	4608      	mov	r0, r1
 8002cce:	4611      	mov	r1, r2
 8002cd0:	6023      	str	r3, [r4, #0]
 8002cd2:	f7fe ff84 	bl	8001bde <_fstat>
 8002cd6:	1c43      	adds	r3, r0, #1
 8002cd8:	d102      	bne.n	8002ce0 <_fstat_r+0x1c>
 8002cda:	6823      	ldr	r3, [r4, #0]
 8002cdc:	b103      	cbz	r3, 8002ce0 <_fstat_r+0x1c>
 8002cde:	602b      	str	r3, [r5, #0]
 8002ce0:	bd38      	pop	{r3, r4, r5, pc}
 8002ce2:	bf00      	nop
 8002ce4:	20000190 	.word	0x20000190

08002ce8 <_isatty_r>:
 8002ce8:	b538      	push	{r3, r4, r5, lr}
 8002cea:	4c06      	ldr	r4, [pc, #24]	; (8002d04 <_isatty_r+0x1c>)
 8002cec:	2300      	movs	r3, #0
 8002cee:	4605      	mov	r5, r0
 8002cf0:	4608      	mov	r0, r1
 8002cf2:	6023      	str	r3, [r4, #0]
 8002cf4:	f7ff f8d8 	bl	8001ea8 <_isatty>
 8002cf8:	1c43      	adds	r3, r0, #1
 8002cfa:	d102      	bne.n	8002d02 <_isatty_r+0x1a>
 8002cfc:	6823      	ldr	r3, [r4, #0]
 8002cfe:	b103      	cbz	r3, 8002d02 <_isatty_r+0x1a>
 8002d00:	602b      	str	r3, [r5, #0]
 8002d02:	bd38      	pop	{r3, r4, r5, pc}
 8002d04:	20000190 	.word	0x20000190

08002d08 <_init>:
 8002d08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d0a:	bf00      	nop
 8002d0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d0e:	bc08      	pop	{r3}
 8002d10:	469e      	mov	lr, r3
 8002d12:	4770      	bx	lr

08002d14 <_fini>:
 8002d14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d16:	bf00      	nop
 8002d18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d1a:	bc08      	pop	{r3}
 8002d1c:	469e      	mov	lr, r3
 8002d1e:	4770      	bx	lr
