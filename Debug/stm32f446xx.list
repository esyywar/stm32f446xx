
stm32f446xx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002c44  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001f4  08002e14  08002e14  00012e14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003008  08003008  00020084  2**0
                  CONTENTS
  4 .ARM          00000000  08003008  08003008  00020084  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003008  08003008  00020084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003008  08003008  00013008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800300c  0800300c  0001300c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  08003010  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000104  20000084  08003094  00020084  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000188  08003094  00020188  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 12 .debug_info   00004519  00000000  00000000  000200ae  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000ae3  00000000  00000000  000245c7  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000001e8  00000000  00000000  000250b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000190  00000000  00000000  00025298  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0000374c  00000000  00000000  00025428  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000261a  00000000  00000000  00028b74  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0000bf23  00000000  00000000  0002b18e  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000370b1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001214  00000000  00000000  0003712c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000084 	.word	0x20000084
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08002dfc 	.word	0x08002dfc

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000088 	.word	0x20000088
 800020c:	08002dfc 	.word	0x08002dfc

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_frsub>:
 80002c0:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__addsf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_fsub>:
 80002c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080002cc <__addsf3>:
 80002cc:	0042      	lsls	r2, r0, #1
 80002ce:	bf1f      	itttt	ne
 80002d0:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80002d4:	ea92 0f03 	teqne	r2, r3
 80002d8:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80002dc:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80002e0:	d06a      	beq.n	80003b8 <__addsf3+0xec>
 80002e2:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80002e6:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80002ea:	bfc1      	itttt	gt
 80002ec:	18d2      	addgt	r2, r2, r3
 80002ee:	4041      	eorgt	r1, r0
 80002f0:	4048      	eorgt	r0, r1
 80002f2:	4041      	eorgt	r1, r0
 80002f4:	bfb8      	it	lt
 80002f6:	425b      	neglt	r3, r3
 80002f8:	2b19      	cmp	r3, #25
 80002fa:	bf88      	it	hi
 80002fc:	4770      	bxhi	lr
 80002fe:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000302:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000306:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 800030a:	bf18      	it	ne
 800030c:	4240      	negne	r0, r0
 800030e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000312:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000316:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 800031a:	bf18      	it	ne
 800031c:	4249      	negne	r1, r1
 800031e:	ea92 0f03 	teq	r2, r3
 8000322:	d03f      	beq.n	80003a4 <__addsf3+0xd8>
 8000324:	f1a2 0201 	sub.w	r2, r2, #1
 8000328:	fa41 fc03 	asr.w	ip, r1, r3
 800032c:	eb10 000c 	adds.w	r0, r0, ip
 8000330:	f1c3 0320 	rsb	r3, r3, #32
 8000334:	fa01 f103 	lsl.w	r1, r1, r3
 8000338:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800033c:	d502      	bpl.n	8000344 <__addsf3+0x78>
 800033e:	4249      	negs	r1, r1
 8000340:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000344:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000348:	d313      	bcc.n	8000372 <__addsf3+0xa6>
 800034a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800034e:	d306      	bcc.n	800035e <__addsf3+0x92>
 8000350:	0840      	lsrs	r0, r0, #1
 8000352:	ea4f 0131 	mov.w	r1, r1, rrx
 8000356:	f102 0201 	add.w	r2, r2, #1
 800035a:	2afe      	cmp	r2, #254	; 0xfe
 800035c:	d251      	bcs.n	8000402 <__addsf3+0x136>
 800035e:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000362:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000366:	bf08      	it	eq
 8000368:	f020 0001 	biceq.w	r0, r0, #1
 800036c:	ea40 0003 	orr.w	r0, r0, r3
 8000370:	4770      	bx	lr
 8000372:	0049      	lsls	r1, r1, #1
 8000374:	eb40 0000 	adc.w	r0, r0, r0
 8000378:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 800037c:	f1a2 0201 	sub.w	r2, r2, #1
 8000380:	d1ed      	bne.n	800035e <__addsf3+0x92>
 8000382:	fab0 fc80 	clz	ip, r0
 8000386:	f1ac 0c08 	sub.w	ip, ip, #8
 800038a:	ebb2 020c 	subs.w	r2, r2, ip
 800038e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000392:	bfaa      	itet	ge
 8000394:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000398:	4252      	neglt	r2, r2
 800039a:	4318      	orrge	r0, r3
 800039c:	bfbc      	itt	lt
 800039e:	40d0      	lsrlt	r0, r2
 80003a0:	4318      	orrlt	r0, r3
 80003a2:	4770      	bx	lr
 80003a4:	f092 0f00 	teq	r2, #0
 80003a8:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 80003ac:	bf06      	itte	eq
 80003ae:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 80003b2:	3201      	addeq	r2, #1
 80003b4:	3b01      	subne	r3, #1
 80003b6:	e7b5      	b.n	8000324 <__addsf3+0x58>
 80003b8:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80003bc:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80003c0:	bf18      	it	ne
 80003c2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80003c6:	d021      	beq.n	800040c <__addsf3+0x140>
 80003c8:	ea92 0f03 	teq	r2, r3
 80003cc:	d004      	beq.n	80003d8 <__addsf3+0x10c>
 80003ce:	f092 0f00 	teq	r2, #0
 80003d2:	bf08      	it	eq
 80003d4:	4608      	moveq	r0, r1
 80003d6:	4770      	bx	lr
 80003d8:	ea90 0f01 	teq	r0, r1
 80003dc:	bf1c      	itt	ne
 80003de:	2000      	movne	r0, #0
 80003e0:	4770      	bxne	lr
 80003e2:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 80003e6:	d104      	bne.n	80003f2 <__addsf3+0x126>
 80003e8:	0040      	lsls	r0, r0, #1
 80003ea:	bf28      	it	cs
 80003ec:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 80003f0:	4770      	bx	lr
 80003f2:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 80003f6:	bf3c      	itt	cc
 80003f8:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 80003fc:	4770      	bxcc	lr
 80003fe:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000402:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000406:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800040a:	4770      	bx	lr
 800040c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000410:	bf16      	itet	ne
 8000412:	4608      	movne	r0, r1
 8000414:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000418:	4601      	movne	r1, r0
 800041a:	0242      	lsls	r2, r0, #9
 800041c:	bf06      	itte	eq
 800041e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000422:	ea90 0f01 	teqeq	r0, r1
 8000426:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 800042a:	4770      	bx	lr

0800042c <__aeabi_ui2f>:
 800042c:	f04f 0300 	mov.w	r3, #0
 8000430:	e004      	b.n	800043c <__aeabi_i2f+0x8>
 8000432:	bf00      	nop

08000434 <__aeabi_i2f>:
 8000434:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000438:	bf48      	it	mi
 800043a:	4240      	negmi	r0, r0
 800043c:	ea5f 0c00 	movs.w	ip, r0
 8000440:	bf08      	it	eq
 8000442:	4770      	bxeq	lr
 8000444:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000448:	4601      	mov	r1, r0
 800044a:	f04f 0000 	mov.w	r0, #0
 800044e:	e01c      	b.n	800048a <__aeabi_l2f+0x2a>

08000450 <__aeabi_ul2f>:
 8000450:	ea50 0201 	orrs.w	r2, r0, r1
 8000454:	bf08      	it	eq
 8000456:	4770      	bxeq	lr
 8000458:	f04f 0300 	mov.w	r3, #0
 800045c:	e00a      	b.n	8000474 <__aeabi_l2f+0x14>
 800045e:	bf00      	nop

08000460 <__aeabi_l2f>:
 8000460:	ea50 0201 	orrs.w	r2, r0, r1
 8000464:	bf08      	it	eq
 8000466:	4770      	bxeq	lr
 8000468:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 800046c:	d502      	bpl.n	8000474 <__aeabi_l2f+0x14>
 800046e:	4240      	negs	r0, r0
 8000470:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000474:	ea5f 0c01 	movs.w	ip, r1
 8000478:	bf02      	ittt	eq
 800047a:	4684      	moveq	ip, r0
 800047c:	4601      	moveq	r1, r0
 800047e:	2000      	moveq	r0, #0
 8000480:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000484:	bf08      	it	eq
 8000486:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 800048a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800048e:	fabc f28c 	clz	r2, ip
 8000492:	3a08      	subs	r2, #8
 8000494:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000498:	db10      	blt.n	80004bc <__aeabi_l2f+0x5c>
 800049a:	fa01 fc02 	lsl.w	ip, r1, r2
 800049e:	4463      	add	r3, ip
 80004a0:	fa00 fc02 	lsl.w	ip, r0, r2
 80004a4:	f1c2 0220 	rsb	r2, r2, #32
 80004a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004ac:	fa20 f202 	lsr.w	r2, r0, r2
 80004b0:	eb43 0002 	adc.w	r0, r3, r2
 80004b4:	bf08      	it	eq
 80004b6:	f020 0001 	biceq.w	r0, r0, #1
 80004ba:	4770      	bx	lr
 80004bc:	f102 0220 	add.w	r2, r2, #32
 80004c0:	fa01 fc02 	lsl.w	ip, r1, r2
 80004c4:	f1c2 0220 	rsb	r2, r2, #32
 80004c8:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 80004cc:	fa21 f202 	lsr.w	r2, r1, r2
 80004d0:	eb43 0002 	adc.w	r0, r3, r2
 80004d4:	bf08      	it	eq
 80004d6:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80004da:	4770      	bx	lr

080004dc <__aeabi_fmul>:
 80004dc:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004e0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80004e4:	bf1e      	ittt	ne
 80004e6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80004ea:	ea92 0f0c 	teqne	r2, ip
 80004ee:	ea93 0f0c 	teqne	r3, ip
 80004f2:	d06f      	beq.n	80005d4 <__aeabi_fmul+0xf8>
 80004f4:	441a      	add	r2, r3
 80004f6:	ea80 0c01 	eor.w	ip, r0, r1
 80004fa:	0240      	lsls	r0, r0, #9
 80004fc:	bf18      	it	ne
 80004fe:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000502:	d01e      	beq.n	8000542 <__aeabi_fmul+0x66>
 8000504:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000508:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 800050c:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000510:	fba0 3101 	umull	r3, r1, r0, r1
 8000514:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000518:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 800051c:	bf3e      	ittt	cc
 800051e:	0049      	lslcc	r1, r1, #1
 8000520:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000524:	005b      	lslcc	r3, r3, #1
 8000526:	ea40 0001 	orr.w	r0, r0, r1
 800052a:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 800052e:	2afd      	cmp	r2, #253	; 0xfd
 8000530:	d81d      	bhi.n	800056e <__aeabi_fmul+0x92>
 8000532:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000536:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800053a:	bf08      	it	eq
 800053c:	f020 0001 	biceq.w	r0, r0, #1
 8000540:	4770      	bx	lr
 8000542:	f090 0f00 	teq	r0, #0
 8000546:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 800054a:	bf08      	it	eq
 800054c:	0249      	lsleq	r1, r1, #9
 800054e:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000552:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000556:	3a7f      	subs	r2, #127	; 0x7f
 8000558:	bfc2      	ittt	gt
 800055a:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 800055e:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000562:	4770      	bxgt	lr
 8000564:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000568:	f04f 0300 	mov.w	r3, #0
 800056c:	3a01      	subs	r2, #1
 800056e:	dc5d      	bgt.n	800062c <__aeabi_fmul+0x150>
 8000570:	f112 0f19 	cmn.w	r2, #25
 8000574:	bfdc      	itt	le
 8000576:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 800057a:	4770      	bxle	lr
 800057c:	f1c2 0200 	rsb	r2, r2, #0
 8000580:	0041      	lsls	r1, r0, #1
 8000582:	fa21 f102 	lsr.w	r1, r1, r2
 8000586:	f1c2 0220 	rsb	r2, r2, #32
 800058a:	fa00 fc02 	lsl.w	ip, r0, r2
 800058e:	ea5f 0031 	movs.w	r0, r1, rrx
 8000592:	f140 0000 	adc.w	r0, r0, #0
 8000596:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800059a:	bf08      	it	eq
 800059c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80005a0:	4770      	bx	lr
 80005a2:	f092 0f00 	teq	r2, #0
 80005a6:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80005aa:	bf02      	ittt	eq
 80005ac:	0040      	lsleq	r0, r0, #1
 80005ae:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80005b2:	3a01      	subeq	r2, #1
 80005b4:	d0f9      	beq.n	80005aa <__aeabi_fmul+0xce>
 80005b6:	ea40 000c 	orr.w	r0, r0, ip
 80005ba:	f093 0f00 	teq	r3, #0
 80005be:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80005c2:	bf02      	ittt	eq
 80005c4:	0049      	lsleq	r1, r1, #1
 80005c6:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80005ca:	3b01      	subeq	r3, #1
 80005cc:	d0f9      	beq.n	80005c2 <__aeabi_fmul+0xe6>
 80005ce:	ea41 010c 	orr.w	r1, r1, ip
 80005d2:	e78f      	b.n	80004f4 <__aeabi_fmul+0x18>
 80005d4:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005d8:	ea92 0f0c 	teq	r2, ip
 80005dc:	bf18      	it	ne
 80005de:	ea93 0f0c 	teqne	r3, ip
 80005e2:	d00a      	beq.n	80005fa <__aeabi_fmul+0x11e>
 80005e4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80005e8:	bf18      	it	ne
 80005ea:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80005ee:	d1d8      	bne.n	80005a2 <__aeabi_fmul+0xc6>
 80005f0:	ea80 0001 	eor.w	r0, r0, r1
 80005f4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80005f8:	4770      	bx	lr
 80005fa:	f090 0f00 	teq	r0, #0
 80005fe:	bf17      	itett	ne
 8000600:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000604:	4608      	moveq	r0, r1
 8000606:	f091 0f00 	teqne	r1, #0
 800060a:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 800060e:	d014      	beq.n	800063a <__aeabi_fmul+0x15e>
 8000610:	ea92 0f0c 	teq	r2, ip
 8000614:	d101      	bne.n	800061a <__aeabi_fmul+0x13e>
 8000616:	0242      	lsls	r2, r0, #9
 8000618:	d10f      	bne.n	800063a <__aeabi_fmul+0x15e>
 800061a:	ea93 0f0c 	teq	r3, ip
 800061e:	d103      	bne.n	8000628 <__aeabi_fmul+0x14c>
 8000620:	024b      	lsls	r3, r1, #9
 8000622:	bf18      	it	ne
 8000624:	4608      	movne	r0, r1
 8000626:	d108      	bne.n	800063a <__aeabi_fmul+0x15e>
 8000628:	ea80 0001 	eor.w	r0, r0, r1
 800062c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000630:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000634:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000638:	4770      	bx	lr
 800063a:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 800063e:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000642:	4770      	bx	lr

08000644 <__aeabi_fdiv>:
 8000644:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000648:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 800064c:	bf1e      	ittt	ne
 800064e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000652:	ea92 0f0c 	teqne	r2, ip
 8000656:	ea93 0f0c 	teqne	r3, ip
 800065a:	d069      	beq.n	8000730 <__aeabi_fdiv+0xec>
 800065c:	eba2 0203 	sub.w	r2, r2, r3
 8000660:	ea80 0c01 	eor.w	ip, r0, r1
 8000664:	0249      	lsls	r1, r1, #9
 8000666:	ea4f 2040 	mov.w	r0, r0, lsl #9
 800066a:	d037      	beq.n	80006dc <__aeabi_fdiv+0x98>
 800066c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000670:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000674:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000678:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 800067c:	428b      	cmp	r3, r1
 800067e:	bf38      	it	cc
 8000680:	005b      	lslcc	r3, r3, #1
 8000682:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000686:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 800068a:	428b      	cmp	r3, r1
 800068c:	bf24      	itt	cs
 800068e:	1a5b      	subcs	r3, r3, r1
 8000690:	ea40 000c 	orrcs.w	r0, r0, ip
 8000694:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000698:	bf24      	itt	cs
 800069a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800069e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80006a2:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 80006a6:	bf24      	itt	cs
 80006a8:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 80006ac:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80006b0:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 80006b4:	bf24      	itt	cs
 80006b6:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 80006ba:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80006be:	011b      	lsls	r3, r3, #4
 80006c0:	bf18      	it	ne
 80006c2:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 80006c6:	d1e0      	bne.n	800068a <__aeabi_fdiv+0x46>
 80006c8:	2afd      	cmp	r2, #253	; 0xfd
 80006ca:	f63f af50 	bhi.w	800056e <__aeabi_fmul+0x92>
 80006ce:	428b      	cmp	r3, r1
 80006d0:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80006d4:	bf08      	it	eq
 80006d6:	f020 0001 	biceq.w	r0, r0, #1
 80006da:	4770      	bx	lr
 80006dc:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80006e0:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80006e4:	327f      	adds	r2, #127	; 0x7f
 80006e6:	bfc2      	ittt	gt
 80006e8:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80006ec:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80006f0:	4770      	bxgt	lr
 80006f2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80006f6:	f04f 0300 	mov.w	r3, #0
 80006fa:	3a01      	subs	r2, #1
 80006fc:	e737      	b.n	800056e <__aeabi_fmul+0x92>
 80006fe:	f092 0f00 	teq	r2, #0
 8000702:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000706:	bf02      	ittt	eq
 8000708:	0040      	lsleq	r0, r0, #1
 800070a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800070e:	3a01      	subeq	r2, #1
 8000710:	d0f9      	beq.n	8000706 <__aeabi_fdiv+0xc2>
 8000712:	ea40 000c 	orr.w	r0, r0, ip
 8000716:	f093 0f00 	teq	r3, #0
 800071a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800071e:	bf02      	ittt	eq
 8000720:	0049      	lsleq	r1, r1, #1
 8000722:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000726:	3b01      	subeq	r3, #1
 8000728:	d0f9      	beq.n	800071e <__aeabi_fdiv+0xda>
 800072a:	ea41 010c 	orr.w	r1, r1, ip
 800072e:	e795      	b.n	800065c <__aeabi_fdiv+0x18>
 8000730:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000734:	ea92 0f0c 	teq	r2, ip
 8000738:	d108      	bne.n	800074c <__aeabi_fdiv+0x108>
 800073a:	0242      	lsls	r2, r0, #9
 800073c:	f47f af7d 	bne.w	800063a <__aeabi_fmul+0x15e>
 8000740:	ea93 0f0c 	teq	r3, ip
 8000744:	f47f af70 	bne.w	8000628 <__aeabi_fmul+0x14c>
 8000748:	4608      	mov	r0, r1
 800074a:	e776      	b.n	800063a <__aeabi_fmul+0x15e>
 800074c:	ea93 0f0c 	teq	r3, ip
 8000750:	d104      	bne.n	800075c <__aeabi_fdiv+0x118>
 8000752:	024b      	lsls	r3, r1, #9
 8000754:	f43f af4c 	beq.w	80005f0 <__aeabi_fmul+0x114>
 8000758:	4608      	mov	r0, r1
 800075a:	e76e      	b.n	800063a <__aeabi_fmul+0x15e>
 800075c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000760:	bf18      	it	ne
 8000762:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000766:	d1ca      	bne.n	80006fe <__aeabi_fdiv+0xba>
 8000768:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 800076c:	f47f af5c 	bne.w	8000628 <__aeabi_fmul+0x14c>
 8000770:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000774:	f47f af3c 	bne.w	80005f0 <__aeabi_fmul+0x114>
 8000778:	e75f      	b.n	800063a <__aeabi_fmul+0x15e>
 800077a:	bf00      	nop

0800077c <__aeabi_f2uiz>:
 800077c:	0042      	lsls	r2, r0, #1
 800077e:	d20e      	bcs.n	800079e <__aeabi_f2uiz+0x22>
 8000780:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000784:	d30b      	bcc.n	800079e <__aeabi_f2uiz+0x22>
 8000786:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800078a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800078e:	d409      	bmi.n	80007a4 <__aeabi_f2uiz+0x28>
 8000790:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000794:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000798:	fa23 f002 	lsr.w	r0, r3, r2
 800079c:	4770      	bx	lr
 800079e:	f04f 0000 	mov.w	r0, #0
 80007a2:	4770      	bx	lr
 80007a4:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80007a8:	d101      	bne.n	80007ae <__aeabi_f2uiz+0x32>
 80007aa:	0242      	lsls	r2, r0, #9
 80007ac:	d102      	bne.n	80007b4 <__aeabi_f2uiz+0x38>
 80007ae:	f04f 30ff 	mov.w	r0, #4294967295
 80007b2:	4770      	bx	lr
 80007b4:	f04f 0000 	mov.w	r0, #0
 80007b8:	4770      	bx	lr
 80007ba:	bf00      	nop

080007bc <GPIO_PortCode>:
 *
 * Params: 		struct GPIO_RegDef_t* - GPIO register base address
 *
 */
uint8_t GPIO_PortCode(GPIO_RegDef_t *pGPIOx)
{
 80007bc:	b480      	push	{r7}
 80007be:	b083      	sub	sp, #12
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	6078      	str	r0, [r7, #4]
	if (pGPIOx == GPIOA)
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	4a1a      	ldr	r2, [pc, #104]	; (8000830 <GPIO_PortCode+0x74>)
 80007c8:	4293      	cmp	r3, r2
 80007ca:	d101      	bne.n	80007d0 <GPIO_PortCode+0x14>
	{
		return 0;
 80007cc:	2300      	movs	r3, #0
 80007ce:	e02a      	b.n	8000826 <GPIO_PortCode+0x6a>
	}
	else if (pGPIOx == GPIOB)
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	4a18      	ldr	r2, [pc, #96]	; (8000834 <GPIO_PortCode+0x78>)
 80007d4:	4293      	cmp	r3, r2
 80007d6:	d101      	bne.n	80007dc <GPIO_PortCode+0x20>
	{
		return 1;
 80007d8:	2301      	movs	r3, #1
 80007da:	e024      	b.n	8000826 <GPIO_PortCode+0x6a>
	}
	else if (pGPIOx == GPIOC)
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	4a16      	ldr	r2, [pc, #88]	; (8000838 <GPIO_PortCode+0x7c>)
 80007e0:	4293      	cmp	r3, r2
 80007e2:	d101      	bne.n	80007e8 <GPIO_PortCode+0x2c>
	{
		return 2;
 80007e4:	2302      	movs	r3, #2
 80007e6:	e01e      	b.n	8000826 <GPIO_PortCode+0x6a>
	}
	else if (pGPIOx == GPIOD)
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	4a14      	ldr	r2, [pc, #80]	; (800083c <GPIO_PortCode+0x80>)
 80007ec:	4293      	cmp	r3, r2
 80007ee:	d101      	bne.n	80007f4 <GPIO_PortCode+0x38>
	{
		return 3;
 80007f0:	2303      	movs	r3, #3
 80007f2:	e018      	b.n	8000826 <GPIO_PortCode+0x6a>
	}
	else if (pGPIOx == GPIOE)
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	4a12      	ldr	r2, [pc, #72]	; (8000840 <GPIO_PortCode+0x84>)
 80007f8:	4293      	cmp	r3, r2
 80007fa:	d101      	bne.n	8000800 <GPIO_PortCode+0x44>
	{
		return 4;
 80007fc:	2304      	movs	r3, #4
 80007fe:	e012      	b.n	8000826 <GPIO_PortCode+0x6a>
	}
	else if (pGPIOx == GPIOF)
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	4a10      	ldr	r2, [pc, #64]	; (8000844 <GPIO_PortCode+0x88>)
 8000804:	4293      	cmp	r3, r2
 8000806:	d101      	bne.n	800080c <GPIO_PortCode+0x50>
	{
		return 5;
 8000808:	2305      	movs	r3, #5
 800080a:	e00c      	b.n	8000826 <GPIO_PortCode+0x6a>
	}
	else if (pGPIOx == GPIOG)
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	4a0e      	ldr	r2, [pc, #56]	; (8000848 <GPIO_PortCode+0x8c>)
 8000810:	4293      	cmp	r3, r2
 8000812:	d101      	bne.n	8000818 <GPIO_PortCode+0x5c>
	{
		return 6;
 8000814:	2306      	movs	r3, #6
 8000816:	e006      	b.n	8000826 <GPIO_PortCode+0x6a>
	}
	else if (pGPIOx == GPIOH)
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	4a0c      	ldr	r2, [pc, #48]	; (800084c <GPIO_PortCode+0x90>)
 800081c:	4293      	cmp	r3, r2
 800081e:	d101      	bne.n	8000824 <GPIO_PortCode+0x68>
	{
		return 7;
 8000820:	2307      	movs	r3, #7
 8000822:	e000      	b.n	8000826 <GPIO_PortCode+0x6a>
	}

	return 0;
 8000824:	2300      	movs	r3, #0
}
 8000826:	4618      	mov	r0, r3
 8000828:	370c      	adds	r7, #12
 800082a:	46bd      	mov	sp, r7
 800082c:	bc80      	pop	{r7}
 800082e:	4770      	bx	lr
 8000830:	40020000 	.word	0x40020000
 8000834:	40020400 	.word	0x40020400
 8000838:	40020800 	.word	0x40020800
 800083c:	40020c00 	.word	0x40020c00
 8000840:	40021000 	.word	0x40021000
 8000844:	40021400 	.word	0x40021400
 8000848:	40021800 	.word	0x40021800
 800084c:	40021c00 	.word	0x40021c00

08000850 <GPIO_PeriClockControl>:
 * Params: 		struct GPIO_RegDef_t* - GPIO register base address
 * 				uint8_t - Enable or disable value
 *
 */
void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnOrDi)
{
 8000850:	b480      	push	{r7}
 8000852:	b083      	sub	sp, #12
 8000854:	af00      	add	r7, sp, #0
 8000856:	6078      	str	r0, [r7, #4]
 8000858:	460b      	mov	r3, r1
 800085a:	70fb      	strb	r3, [r7, #3]
	if (EnOrDi == ENABLE)
 800085c:	78fb      	ldrb	r3, [r7, #3]
 800085e:	2b01      	cmp	r3, #1
 8000860:	d157      	bne.n	8000912 <GPIO_PeriClockControl+0xc2>
	{
		if (pGPIOx == GPIOA)
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	4a59      	ldr	r2, [pc, #356]	; (80009cc <GPIO_PeriClockControl+0x17c>)
 8000866:	4293      	cmp	r3, r2
 8000868:	d106      	bne.n	8000878 <GPIO_PeriClockControl+0x28>
		{
			GPIOA_PCLK_EN();
 800086a:	4b59      	ldr	r3, [pc, #356]	; (80009d0 <GPIO_PeriClockControl+0x180>)
 800086c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800086e:	4a58      	ldr	r2, [pc, #352]	; (80009d0 <GPIO_PeriClockControl+0x180>)
 8000870:	f043 0301 	orr.w	r3, r3, #1
 8000874:	6313      	str	r3, [r2, #48]	; 0x30
		else if (pGPIOx == GPIOH)
		{
			GPIOH_PCLK_DI();
		}
	}
}
 8000876:	e0a3      	b.n	80009c0 <GPIO_PeriClockControl+0x170>
		else if (pGPIOx == GPIOB)
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	4a56      	ldr	r2, [pc, #344]	; (80009d4 <GPIO_PeriClockControl+0x184>)
 800087c:	4293      	cmp	r3, r2
 800087e:	d106      	bne.n	800088e <GPIO_PeriClockControl+0x3e>
			GPIOB_PCLK_EN();
 8000880:	4b53      	ldr	r3, [pc, #332]	; (80009d0 <GPIO_PeriClockControl+0x180>)
 8000882:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000884:	4a52      	ldr	r2, [pc, #328]	; (80009d0 <GPIO_PeriClockControl+0x180>)
 8000886:	f043 0302 	orr.w	r3, r3, #2
 800088a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800088c:	e098      	b.n	80009c0 <GPIO_PeriClockControl+0x170>
		else if (pGPIOx == GPIOC)
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	4a51      	ldr	r2, [pc, #324]	; (80009d8 <GPIO_PeriClockControl+0x188>)
 8000892:	4293      	cmp	r3, r2
 8000894:	d106      	bne.n	80008a4 <GPIO_PeriClockControl+0x54>
			GPIOC_PCLK_EN();
 8000896:	4b4e      	ldr	r3, [pc, #312]	; (80009d0 <GPIO_PeriClockControl+0x180>)
 8000898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800089a:	4a4d      	ldr	r2, [pc, #308]	; (80009d0 <GPIO_PeriClockControl+0x180>)
 800089c:	f043 0304 	orr.w	r3, r3, #4
 80008a0:	6313      	str	r3, [r2, #48]	; 0x30
}
 80008a2:	e08d      	b.n	80009c0 <GPIO_PeriClockControl+0x170>
		else if (pGPIOx == GPIOD)
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	4a4d      	ldr	r2, [pc, #308]	; (80009dc <GPIO_PeriClockControl+0x18c>)
 80008a8:	4293      	cmp	r3, r2
 80008aa:	d106      	bne.n	80008ba <GPIO_PeriClockControl+0x6a>
			GPIOD_PCLK_EN();
 80008ac:	4b48      	ldr	r3, [pc, #288]	; (80009d0 <GPIO_PeriClockControl+0x180>)
 80008ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008b0:	4a47      	ldr	r2, [pc, #284]	; (80009d0 <GPIO_PeriClockControl+0x180>)
 80008b2:	f043 0308 	orr.w	r3, r3, #8
 80008b6:	6313      	str	r3, [r2, #48]	; 0x30
}
 80008b8:	e082      	b.n	80009c0 <GPIO_PeriClockControl+0x170>
		else if (pGPIOx == GPIOE)
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	4a48      	ldr	r2, [pc, #288]	; (80009e0 <GPIO_PeriClockControl+0x190>)
 80008be:	4293      	cmp	r3, r2
 80008c0:	d106      	bne.n	80008d0 <GPIO_PeriClockControl+0x80>
			GPIOE_PCLK_EN();
 80008c2:	4b43      	ldr	r3, [pc, #268]	; (80009d0 <GPIO_PeriClockControl+0x180>)
 80008c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008c6:	4a42      	ldr	r2, [pc, #264]	; (80009d0 <GPIO_PeriClockControl+0x180>)
 80008c8:	f043 0310 	orr.w	r3, r3, #16
 80008cc:	6313      	str	r3, [r2, #48]	; 0x30
}
 80008ce:	e077      	b.n	80009c0 <GPIO_PeriClockControl+0x170>
		else if (pGPIOx == GPIOF)
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	4a44      	ldr	r2, [pc, #272]	; (80009e4 <GPIO_PeriClockControl+0x194>)
 80008d4:	4293      	cmp	r3, r2
 80008d6:	d106      	bne.n	80008e6 <GPIO_PeriClockControl+0x96>
			GPIOF_PCLK_EN();
 80008d8:	4b3d      	ldr	r3, [pc, #244]	; (80009d0 <GPIO_PeriClockControl+0x180>)
 80008da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008dc:	4a3c      	ldr	r2, [pc, #240]	; (80009d0 <GPIO_PeriClockControl+0x180>)
 80008de:	f043 0320 	orr.w	r3, r3, #32
 80008e2:	6313      	str	r3, [r2, #48]	; 0x30
}
 80008e4:	e06c      	b.n	80009c0 <GPIO_PeriClockControl+0x170>
		else if (pGPIOx == GPIOG)
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	4a3f      	ldr	r2, [pc, #252]	; (80009e8 <GPIO_PeriClockControl+0x198>)
 80008ea:	4293      	cmp	r3, r2
 80008ec:	d106      	bne.n	80008fc <GPIO_PeriClockControl+0xac>
			GPIOG_PCLK_EN();
 80008ee:	4b38      	ldr	r3, [pc, #224]	; (80009d0 <GPIO_PeriClockControl+0x180>)
 80008f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008f2:	4a37      	ldr	r2, [pc, #220]	; (80009d0 <GPIO_PeriClockControl+0x180>)
 80008f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80008f8:	6313      	str	r3, [r2, #48]	; 0x30
}
 80008fa:	e061      	b.n	80009c0 <GPIO_PeriClockControl+0x170>
		else if (pGPIOx == GPIOH)
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	4a3b      	ldr	r2, [pc, #236]	; (80009ec <GPIO_PeriClockControl+0x19c>)
 8000900:	4293      	cmp	r3, r2
 8000902:	d15d      	bne.n	80009c0 <GPIO_PeriClockControl+0x170>
			GPIOH_PCLK_EN();
 8000904:	4b32      	ldr	r3, [pc, #200]	; (80009d0 <GPIO_PeriClockControl+0x180>)
 8000906:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000908:	4a31      	ldr	r2, [pc, #196]	; (80009d0 <GPIO_PeriClockControl+0x180>)
 800090a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800090e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000910:	e056      	b.n	80009c0 <GPIO_PeriClockControl+0x170>
		if (pGPIOx == GPIOA)
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	4a2d      	ldr	r2, [pc, #180]	; (80009cc <GPIO_PeriClockControl+0x17c>)
 8000916:	4293      	cmp	r3, r2
 8000918:	d106      	bne.n	8000928 <GPIO_PeriClockControl+0xd8>
			GPIOA_PCLK_DI();
 800091a:	4b2d      	ldr	r3, [pc, #180]	; (80009d0 <GPIO_PeriClockControl+0x180>)
 800091c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800091e:	4a2c      	ldr	r2, [pc, #176]	; (80009d0 <GPIO_PeriClockControl+0x180>)
 8000920:	f023 0301 	bic.w	r3, r3, #1
 8000924:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000926:	e04b      	b.n	80009c0 <GPIO_PeriClockControl+0x170>
		else if (pGPIOx == GPIOB)
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	4a2a      	ldr	r2, [pc, #168]	; (80009d4 <GPIO_PeriClockControl+0x184>)
 800092c:	4293      	cmp	r3, r2
 800092e:	d106      	bne.n	800093e <GPIO_PeriClockControl+0xee>
			GPIOB_PCLK_DI();
 8000930:	4b27      	ldr	r3, [pc, #156]	; (80009d0 <GPIO_PeriClockControl+0x180>)
 8000932:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000934:	4a26      	ldr	r2, [pc, #152]	; (80009d0 <GPIO_PeriClockControl+0x180>)
 8000936:	f023 0302 	bic.w	r3, r3, #2
 800093a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800093c:	e040      	b.n	80009c0 <GPIO_PeriClockControl+0x170>
		else if (pGPIOx == GPIOC)
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	4a25      	ldr	r2, [pc, #148]	; (80009d8 <GPIO_PeriClockControl+0x188>)
 8000942:	4293      	cmp	r3, r2
 8000944:	d106      	bne.n	8000954 <GPIO_PeriClockControl+0x104>
			GPIOC_PCLK_DI();
 8000946:	4b22      	ldr	r3, [pc, #136]	; (80009d0 <GPIO_PeriClockControl+0x180>)
 8000948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800094a:	4a21      	ldr	r2, [pc, #132]	; (80009d0 <GPIO_PeriClockControl+0x180>)
 800094c:	f023 0304 	bic.w	r3, r3, #4
 8000950:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000952:	e035      	b.n	80009c0 <GPIO_PeriClockControl+0x170>
		else if (pGPIOx == GPIOD)
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	4a21      	ldr	r2, [pc, #132]	; (80009dc <GPIO_PeriClockControl+0x18c>)
 8000958:	4293      	cmp	r3, r2
 800095a:	d106      	bne.n	800096a <GPIO_PeriClockControl+0x11a>
			GPIOD_PCLK_DI();
 800095c:	4b1c      	ldr	r3, [pc, #112]	; (80009d0 <GPIO_PeriClockControl+0x180>)
 800095e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000960:	4a1b      	ldr	r2, [pc, #108]	; (80009d0 <GPIO_PeriClockControl+0x180>)
 8000962:	f023 0308 	bic.w	r3, r3, #8
 8000966:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000968:	e02a      	b.n	80009c0 <GPIO_PeriClockControl+0x170>
		else if (pGPIOx == GPIOE)
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	4a1c      	ldr	r2, [pc, #112]	; (80009e0 <GPIO_PeriClockControl+0x190>)
 800096e:	4293      	cmp	r3, r2
 8000970:	d106      	bne.n	8000980 <GPIO_PeriClockControl+0x130>
			GPIOE_PCLK_DI();
 8000972:	4b17      	ldr	r3, [pc, #92]	; (80009d0 <GPIO_PeriClockControl+0x180>)
 8000974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000976:	4a16      	ldr	r2, [pc, #88]	; (80009d0 <GPIO_PeriClockControl+0x180>)
 8000978:	f023 0310 	bic.w	r3, r3, #16
 800097c:	6313      	str	r3, [r2, #48]	; 0x30
}
 800097e:	e01f      	b.n	80009c0 <GPIO_PeriClockControl+0x170>
		else if (pGPIOx == GPIOF)
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	4a18      	ldr	r2, [pc, #96]	; (80009e4 <GPIO_PeriClockControl+0x194>)
 8000984:	4293      	cmp	r3, r2
 8000986:	d106      	bne.n	8000996 <GPIO_PeriClockControl+0x146>
			GPIOF_PCLK_DI();
 8000988:	4b11      	ldr	r3, [pc, #68]	; (80009d0 <GPIO_PeriClockControl+0x180>)
 800098a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800098c:	4a10      	ldr	r2, [pc, #64]	; (80009d0 <GPIO_PeriClockControl+0x180>)
 800098e:	f023 0320 	bic.w	r3, r3, #32
 8000992:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000994:	e014      	b.n	80009c0 <GPIO_PeriClockControl+0x170>
		else if (pGPIOx == GPIOG)
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	4a13      	ldr	r2, [pc, #76]	; (80009e8 <GPIO_PeriClockControl+0x198>)
 800099a:	4293      	cmp	r3, r2
 800099c:	d106      	bne.n	80009ac <GPIO_PeriClockControl+0x15c>
			GPIOG_PCLK_DI();
 800099e:	4b0c      	ldr	r3, [pc, #48]	; (80009d0 <GPIO_PeriClockControl+0x180>)
 80009a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009a2:	4a0b      	ldr	r2, [pc, #44]	; (80009d0 <GPIO_PeriClockControl+0x180>)
 80009a4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80009a8:	6313      	str	r3, [r2, #48]	; 0x30
}
 80009aa:	e009      	b.n	80009c0 <GPIO_PeriClockControl+0x170>
		else if (pGPIOx == GPIOH)
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	4a0f      	ldr	r2, [pc, #60]	; (80009ec <GPIO_PeriClockControl+0x19c>)
 80009b0:	4293      	cmp	r3, r2
 80009b2:	d105      	bne.n	80009c0 <GPIO_PeriClockControl+0x170>
			GPIOH_PCLK_DI();
 80009b4:	4b06      	ldr	r3, [pc, #24]	; (80009d0 <GPIO_PeriClockControl+0x180>)
 80009b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009b8:	4a05      	ldr	r2, [pc, #20]	; (80009d0 <GPIO_PeriClockControl+0x180>)
 80009ba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80009be:	6313      	str	r3, [r2, #48]	; 0x30
}
 80009c0:	bf00      	nop
 80009c2:	370c      	adds	r7, #12
 80009c4:	46bd      	mov	sp, r7
 80009c6:	bc80      	pop	{r7}
 80009c8:	4770      	bx	lr
 80009ca:	bf00      	nop
 80009cc:	40020000 	.word	0x40020000
 80009d0:	40023800 	.word	0x40023800
 80009d4:	40020400 	.word	0x40020400
 80009d8:	40020800 	.word	0x40020800
 80009dc:	40020c00 	.word	0x40020c00
 80009e0:	40021000 	.word	0x40021000
 80009e4:	40021400 	.word	0x40021400
 80009e8:	40021800 	.word	0x40021800
 80009ec:	40021c00 	.word	0x40021c00

080009f0 <GPIO_Init>:
 * Params:		struct GPIO_Handle_t*
 *
 *
 */
void GPIO_Init(GPIO_Handle_t *pGPIOxHandle)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b086      	sub	sp, #24
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	6078      	str	r0, [r7, #4]
	// Enable clock to GPIO port
	GPIO_PeriClockControl(pGPIOxHandle->pGPIOx, ENABLE);
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	2101      	movs	r1, #1
 80009fe:	4618      	mov	r0, r3
 8000a00:	f7ff ff26 	bl	8000850 <GPIO_PeriClockControl>

	uint32_t temp = 0;
 8000a04:	2300      	movs	r3, #0
 8000a06:	617b      	str	r3, [r7, #20]

	// 1. Set GPIO pin mode
	if (pGPIOxHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG)
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	795b      	ldrb	r3, [r3, #5]
 8000a0c:	2b03      	cmp	r3, #3
 8000a0e:	d822      	bhi.n	8000a56 <GPIO_Init+0x66>
	{
		temp = (pGPIOxHandle->GPIO_PinConfig.GPIO_PinMode << (2 * pGPIOxHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	795b      	ldrb	r3, [r3, #5]
 8000a14:	461a      	mov	r2, r3
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	791b      	ldrb	r3, [r3, #4]
 8000a1a:	005b      	lsls	r3, r3, #1
 8000a1c:	fa02 f303 	lsl.w	r3, r2, r3
 8000a20:	617b      	str	r3, [r7, #20]
		pGPIOxHandle->pGPIOx->MODER &= ~((0x3) << (2 * pGPIOxHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	681b      	ldr	r3, [r3, #0]
 8000a26:	681a      	ldr	r2, [r3, #0]
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	791b      	ldrb	r3, [r3, #4]
 8000a2c:	005b      	lsls	r3, r3, #1
 8000a2e:	2103      	movs	r1, #3
 8000a30:	fa01 f303 	lsl.w	r3, r1, r3
 8000a34:	43db      	mvns	r3, r3
 8000a36:	4619      	mov	r1, r3
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	400a      	ands	r2, r1
 8000a3e:	601a      	str	r2, [r3, #0]
		pGPIOxHandle->pGPIOx->MODER |= temp;
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	6819      	ldr	r1, [r3, #0]
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	681b      	ldr	r3, [r3, #0]
 8000a4a:	697a      	ldr	r2, [r7, #20]
 8000a4c:	430a      	orrs	r2, r1
 8000a4e:	601a      	str	r2, [r3, #0]
		temp = 0;
 8000a50:	2300      	movs	r3, #0
 8000a52:	617b      	str	r3, [r7, #20]
 8000a54:	e07c      	b.n	8000b50 <GPIO_Init+0x160>
	}
	else {
		//For setting to interrupt mode...

		// Enable clock to SYSCFG (needed to set IRQ in EXTI)
		SYSCFG_PCLK_EN();
 8000a56:	4b8e      	ldr	r3, [pc, #568]	; (8000c90 <GPIO_Init+0x2a0>)
 8000a58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a5a:	4a8d      	ldr	r2, [pc, #564]	; (8000c90 <GPIO_Init+0x2a0>)
 8000a5c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a60:	6453      	str	r3, [r2, #68]	; 0x44

		// 1. Set rising/falling edge trigger(s)
		if (pGPIOxHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_IT_MODE_RT)
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	795b      	ldrb	r3, [r3, #5]
 8000a66:	2b04      	cmp	r3, #4
 8000a68:	d117      	bne.n	8000a9a <GPIO_Init+0xaa>
		{
			EXTI->RTSR |= (1 << pGPIOxHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000a6a:	4b8a      	ldr	r3, [pc, #552]	; (8000c94 <GPIO_Init+0x2a4>)
 8000a6c:	689b      	ldr	r3, [r3, #8]
 8000a6e:	687a      	ldr	r2, [r7, #4]
 8000a70:	7912      	ldrb	r2, [r2, #4]
 8000a72:	4611      	mov	r1, r2
 8000a74:	2201      	movs	r2, #1
 8000a76:	408a      	lsls	r2, r1
 8000a78:	4611      	mov	r1, r2
 8000a7a:	4a86      	ldr	r2, [pc, #536]	; (8000c94 <GPIO_Init+0x2a4>)
 8000a7c:	430b      	orrs	r3, r1
 8000a7e:	6093      	str	r3, [r2, #8]
			EXTI->FTSR &= ~(1 << pGPIOxHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000a80:	4b84      	ldr	r3, [pc, #528]	; (8000c94 <GPIO_Init+0x2a4>)
 8000a82:	68db      	ldr	r3, [r3, #12]
 8000a84:	687a      	ldr	r2, [r7, #4]
 8000a86:	7912      	ldrb	r2, [r2, #4]
 8000a88:	4611      	mov	r1, r2
 8000a8a:	2201      	movs	r2, #1
 8000a8c:	408a      	lsls	r2, r1
 8000a8e:	43d2      	mvns	r2, r2
 8000a90:	4611      	mov	r1, r2
 8000a92:	4a80      	ldr	r2, [pc, #512]	; (8000c94 <GPIO_Init+0x2a4>)
 8000a94:	400b      	ands	r3, r1
 8000a96:	60d3      	str	r3, [r2, #12]
 8000a98:	e035      	b.n	8000b06 <GPIO_Init+0x116>
		}
		else if (pGPIOxHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_IT_MODE_FT)
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	795b      	ldrb	r3, [r3, #5]
 8000a9e:	2b05      	cmp	r3, #5
 8000aa0:	d117      	bne.n	8000ad2 <GPIO_Init+0xe2>
		{
			EXTI->FTSR |= (1 << pGPIOxHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000aa2:	4b7c      	ldr	r3, [pc, #496]	; (8000c94 <GPIO_Init+0x2a4>)
 8000aa4:	68db      	ldr	r3, [r3, #12]
 8000aa6:	687a      	ldr	r2, [r7, #4]
 8000aa8:	7912      	ldrb	r2, [r2, #4]
 8000aaa:	4611      	mov	r1, r2
 8000aac:	2201      	movs	r2, #1
 8000aae:	408a      	lsls	r2, r1
 8000ab0:	4611      	mov	r1, r2
 8000ab2:	4a78      	ldr	r2, [pc, #480]	; (8000c94 <GPIO_Init+0x2a4>)
 8000ab4:	430b      	orrs	r3, r1
 8000ab6:	60d3      	str	r3, [r2, #12]
			EXTI->RTSR &= ~(1 << pGPIOxHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000ab8:	4b76      	ldr	r3, [pc, #472]	; (8000c94 <GPIO_Init+0x2a4>)
 8000aba:	689b      	ldr	r3, [r3, #8]
 8000abc:	687a      	ldr	r2, [r7, #4]
 8000abe:	7912      	ldrb	r2, [r2, #4]
 8000ac0:	4611      	mov	r1, r2
 8000ac2:	2201      	movs	r2, #1
 8000ac4:	408a      	lsls	r2, r1
 8000ac6:	43d2      	mvns	r2, r2
 8000ac8:	4611      	mov	r1, r2
 8000aca:	4a72      	ldr	r2, [pc, #456]	; (8000c94 <GPIO_Init+0x2a4>)
 8000acc:	400b      	ands	r3, r1
 8000ace:	6093      	str	r3, [r2, #8]
 8000ad0:	e019      	b.n	8000b06 <GPIO_Init+0x116>
		}
		else if (pGPIOxHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_IT_MODE_RFT)
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	795b      	ldrb	r3, [r3, #5]
 8000ad6:	2b06      	cmp	r3, #6
 8000ad8:	d115      	bne.n	8000b06 <GPIO_Init+0x116>
		{
			EXTI->RTSR |= (1 << pGPIOxHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000ada:	4b6e      	ldr	r3, [pc, #440]	; (8000c94 <GPIO_Init+0x2a4>)
 8000adc:	689b      	ldr	r3, [r3, #8]
 8000ade:	687a      	ldr	r2, [r7, #4]
 8000ae0:	7912      	ldrb	r2, [r2, #4]
 8000ae2:	4611      	mov	r1, r2
 8000ae4:	2201      	movs	r2, #1
 8000ae6:	408a      	lsls	r2, r1
 8000ae8:	4611      	mov	r1, r2
 8000aea:	4a6a      	ldr	r2, [pc, #424]	; (8000c94 <GPIO_Init+0x2a4>)
 8000aec:	430b      	orrs	r3, r1
 8000aee:	6093      	str	r3, [r2, #8]
			EXTI->FTSR |= (1 << pGPIOxHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000af0:	4b68      	ldr	r3, [pc, #416]	; (8000c94 <GPIO_Init+0x2a4>)
 8000af2:	68db      	ldr	r3, [r3, #12]
 8000af4:	687a      	ldr	r2, [r7, #4]
 8000af6:	7912      	ldrb	r2, [r2, #4]
 8000af8:	4611      	mov	r1, r2
 8000afa:	2201      	movs	r2, #1
 8000afc:	408a      	lsls	r2, r1
 8000afe:	4611      	mov	r1, r2
 8000b00:	4a64      	ldr	r2, [pc, #400]	; (8000c94 <GPIO_Init+0x2a4>)
 8000b02:	430b      	orrs	r3, r1
 8000b04:	60d3      	str	r3, [r2, #12]
		}

		// 2. Configure GPIO port selection in SYSCFG
		uint8_t temp1 = pGPIOxHandle->GPIO_PinConfig.GPIO_PinNumber / 4;
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	791b      	ldrb	r3, [r3, #4]
 8000b0a:	089b      	lsrs	r3, r3, #2
 8000b0c:	74fb      	strb	r3, [r7, #19]
		uint8_t temp2 = pGPIOxHandle->GPIO_PinConfig.GPIO_PinNumber % 4;
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	791b      	ldrb	r3, [r3, #4]
 8000b12:	f003 0303 	and.w	r3, r3, #3
 8000b16:	74bb      	strb	r3, [r7, #18]
		uint8_t portCode = GPIO_PortCode(pGPIOxHandle->pGPIOx);
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	4618      	mov	r0, r3
 8000b1e:	f7ff fe4d 	bl	80007bc <GPIO_PortCode>
 8000b22:	4603      	mov	r3, r0
 8000b24:	747b      	strb	r3, [r7, #17]
		SYSCFG->EXTICR[temp1] = portCode << (temp2 * 4);
 8000b26:	7c7a      	ldrb	r2, [r7, #17]
 8000b28:	7cbb      	ldrb	r3, [r7, #18]
 8000b2a:	009b      	lsls	r3, r3, #2
 8000b2c:	fa02 f103 	lsl.w	r1, r2, r3
 8000b30:	4a59      	ldr	r2, [pc, #356]	; (8000c98 <GPIO_Init+0x2a8>)
 8000b32:	7cfb      	ldrb	r3, [r7, #19]
 8000b34:	3302      	adds	r3, #2
 8000b36:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

		// 3. Enable EXTI interrupt using interrupt register masking
		EXTI->IMR |= (1 << pGPIOxHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000b3a:	4b56      	ldr	r3, [pc, #344]	; (8000c94 <GPIO_Init+0x2a4>)
 8000b3c:	681b      	ldr	r3, [r3, #0]
 8000b3e:	687a      	ldr	r2, [r7, #4]
 8000b40:	7912      	ldrb	r2, [r2, #4]
 8000b42:	4611      	mov	r1, r2
 8000b44:	2201      	movs	r2, #1
 8000b46:	408a      	lsls	r2, r1
 8000b48:	4611      	mov	r1, r2
 8000b4a:	4a52      	ldr	r2, [pc, #328]	; (8000c94 <GPIO_Init+0x2a4>)
 8000b4c:	430b      	orrs	r3, r1
 8000b4e:	6013      	str	r3, [r2, #0]
	}

	// 2. Set pin speed
	temp = (pGPIOxHandle->GPIO_PinConfig.GPIO_PinSpeed << (2 * pGPIOxHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	799b      	ldrb	r3, [r3, #6]
 8000b54:	461a      	mov	r2, r3
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	791b      	ldrb	r3, [r3, #4]
 8000b5a:	005b      	lsls	r3, r3, #1
 8000b5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000b60:	617b      	str	r3, [r7, #20]
	pGPIOxHandle->pGPIOx->OSPEEDR &= ~((0x3) << (2 * pGPIOxHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	689a      	ldr	r2, [r3, #8]
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	791b      	ldrb	r3, [r3, #4]
 8000b6c:	005b      	lsls	r3, r3, #1
 8000b6e:	2103      	movs	r1, #3
 8000b70:	fa01 f303 	lsl.w	r3, r1, r3
 8000b74:	43db      	mvns	r3, r3
 8000b76:	4619      	mov	r1, r3
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	400a      	ands	r2, r1
 8000b7e:	609a      	str	r2, [r3, #8]
	pGPIOxHandle->pGPIOx->OSPEEDR |= temp;
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	6899      	ldr	r1, [r3, #8]
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	697a      	ldr	r2, [r7, #20]
 8000b8c:	430a      	orrs	r2, r1
 8000b8e:	609a      	str	r2, [r3, #8]
	temp = 0;
 8000b90:	2300      	movs	r3, #0
 8000b92:	617b      	str	r3, [r7, #20]

	// 3. Set pin pull-up or pull-down mode
	temp = (pGPIOxHandle->GPIO_PinConfig.GPIO_PuPdCtrl << (2 * pGPIOxHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	79db      	ldrb	r3, [r3, #7]
 8000b98:	461a      	mov	r2, r3
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	791b      	ldrb	r3, [r3, #4]
 8000b9e:	005b      	lsls	r3, r3, #1
 8000ba0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ba4:	617b      	str	r3, [r7, #20]
	pGPIOxHandle->pGPIOx->PUPDR &= ~((0x3) << (2 * pGPIOxHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	681b      	ldr	r3, [r3, #0]
 8000baa:	68da      	ldr	r2, [r3, #12]
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	791b      	ldrb	r3, [r3, #4]
 8000bb0:	005b      	lsls	r3, r3, #1
 8000bb2:	2103      	movs	r1, #3
 8000bb4:	fa01 f303 	lsl.w	r3, r1, r3
 8000bb8:	43db      	mvns	r3, r3
 8000bba:	4619      	mov	r1, r3
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	400a      	ands	r2, r1
 8000bc2:	60da      	str	r2, [r3, #12]
	pGPIOxHandle->pGPIOx->PUPDR |= temp;
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	68d9      	ldr	r1, [r3, #12]
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	697a      	ldr	r2, [r7, #20]
 8000bd0:	430a      	orrs	r2, r1
 8000bd2:	60da      	str	r2, [r3, #12]
	temp = 0;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	617b      	str	r3, [r7, #20]

	// 4. Configure pin output type (push-pull or open drain)
	temp = (pGPIOxHandle->GPIO_PinConfig.GPIO_OpType << pGPIOxHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	7a1b      	ldrb	r3, [r3, #8]
 8000bdc:	461a      	mov	r2, r3
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	791b      	ldrb	r3, [r3, #4]
 8000be2:	fa02 f303 	lsl.w	r3, r2, r3
 8000be6:	617b      	str	r3, [r7, #20]
	pGPIOxHandle->pGPIOx->OTYPER &= ~((0x1) <<  pGPIOxHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	685a      	ldr	r2, [r3, #4]
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	791b      	ldrb	r3, [r3, #4]
 8000bf2:	4619      	mov	r1, r3
 8000bf4:	2301      	movs	r3, #1
 8000bf6:	408b      	lsls	r3, r1
 8000bf8:	43db      	mvns	r3, r3
 8000bfa:	4619      	mov	r1, r3
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	400a      	ands	r2, r1
 8000c02:	605a      	str	r2, [r3, #4]
	pGPIOxHandle->pGPIOx->OTYPER |= temp;
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	6859      	ldr	r1, [r3, #4]
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	697a      	ldr	r2, [r7, #20]
 8000c10:	430a      	orrs	r2, r1
 8000c12:	605a      	str	r2, [r3, #4]
	temp = 0;
 8000c14:	2300      	movs	r3, #0
 8000c16:	617b      	str	r3, [r7, #20]

	// 5. Configure alternate mode function
	if (pGPIOxHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_AF)
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	795b      	ldrb	r3, [r3, #5]
 8000c1c:	2b02      	cmp	r3, #2
 8000c1e:	d132      	bne.n	8000c86 <GPIO_Init+0x296>
	{
		uint32_t temp1, temp2;
		temp1 = pGPIOxHandle->GPIO_PinConfig.GPIO_PinNumber / 8;
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	791b      	ldrb	r3, [r3, #4]
 8000c24:	08db      	lsrs	r3, r3, #3
 8000c26:	b2db      	uxtb	r3, r3
 8000c28:	60fb      	str	r3, [r7, #12]
		temp2 = pGPIOxHandle->GPIO_PinConfig.GPIO_PinNumber % 8;
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	791b      	ldrb	r3, [r3, #4]
 8000c2e:	f003 0307 	and.w	r3, r3, #7
 8000c32:	60bb      	str	r3, [r7, #8]

		pGPIOxHandle->pGPIOx->AFR[temp1] &= ~((0xF) << (4 * temp2));
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	68fa      	ldr	r2, [r7, #12]
 8000c3a:	3208      	adds	r2, #8
 8000c3c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000c40:	68bb      	ldr	r3, [r7, #8]
 8000c42:	009b      	lsls	r3, r3, #2
 8000c44:	210f      	movs	r1, #15
 8000c46:	fa01 f303 	lsl.w	r3, r1, r3
 8000c4a:	43db      	mvns	r3, r3
 8000c4c:	4619      	mov	r1, r3
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	4011      	ands	r1, r2
 8000c54:	68fa      	ldr	r2, [r7, #12]
 8000c56:	3208      	adds	r2, #8
 8000c58:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOxHandle->pGPIOx->AFR[temp1] |= (pGPIOxHandle->GPIO_PinConfig.GPIO_AfMode << (4 * temp2));
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	68fa      	ldr	r2, [r7, #12]
 8000c62:	3208      	adds	r2, #8
 8000c64:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	7a5b      	ldrb	r3, [r3, #9]
 8000c6c:	4619      	mov	r1, r3
 8000c6e:	68bb      	ldr	r3, [r7, #8]
 8000c70:	009b      	lsls	r3, r3, #2
 8000c72:	fa01 f303 	lsl.w	r3, r1, r3
 8000c76:	4619      	mov	r1, r3
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	4311      	orrs	r1, r2
 8000c7e:	68fa      	ldr	r2, [r7, #12]
 8000c80:	3208      	adds	r2, #8
 8000c82:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}
}
 8000c86:	bf00      	nop
 8000c88:	3718      	adds	r7, #24
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	bd80      	pop	{r7, pc}
 8000c8e:	bf00      	nop
 8000c90:	40023800 	.word	0x40023800
 8000c94:	40013c00 	.word	0x40013c00
 8000c98:	40013800 	.word	0x40013800

08000c9c <GPIO_ReadFromInputPin>:
 *
 * Return:		uint8_t - Input pin value (0 or 1)
 *
 */
uint8_t GPIO_ReadFromInputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	b085      	sub	sp, #20
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]
 8000ca4:	460b      	mov	r3, r1
 8000ca6:	70fb      	strb	r3, [r7, #3]
	uint8_t value = (uint8_t)((pGPIOx->IDR >> PinNumber) & 0x00000001);
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	691a      	ldr	r2, [r3, #16]
 8000cac:	78fb      	ldrb	r3, [r7, #3]
 8000cae:	fa22 f303 	lsr.w	r3, r2, r3
 8000cb2:	b2db      	uxtb	r3, r3
 8000cb4:	f003 0301 	and.w	r3, r3, #1
 8000cb8:	73fb      	strb	r3, [r7, #15]
	return value;
 8000cba:	7bfb      	ldrb	r3, [r7, #15]
}
 8000cbc:	4618      	mov	r0, r3
 8000cbe:	3714      	adds	r7, #20
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	bc80      	pop	{r7}
 8000cc4:	4770      	bx	lr

08000cc6 <GPIO_ToggleOutputPin>:
 * Params: 		struct GPIO_RegDef_t* - GPIO register base address
 * 				uint8_t Value - Pin number
 *
 */
void GPIO_ToggleOutputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber)
{
 8000cc6:	b480      	push	{r7}
 8000cc8:	b083      	sub	sp, #12
 8000cca:	af00      	add	r7, sp, #0
 8000ccc:	6078      	str	r0, [r7, #4]
 8000cce:	460b      	mov	r3, r1
 8000cd0:	70fb      	strb	r3, [r7, #3]
	pGPIOx->ODR ^= (1 << PinNumber);
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	695b      	ldr	r3, [r3, #20]
 8000cd6:	78fa      	ldrb	r2, [r7, #3]
 8000cd8:	2101      	movs	r1, #1
 8000cda:	fa01 f202 	lsl.w	r2, r1, r2
 8000cde:	405a      	eors	r2, r3
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	615a      	str	r2, [r3, #20]
}
 8000ce4:	bf00      	nop
 8000ce6:	370c      	adds	r7, #12
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	bc80      	pop	{r7}
 8000cec:	4770      	bx	lr

08000cee <RCC_GetPPLCLK>:
 *
 * Return: 		uint32_t PPLClk - accelerated clock speed (Hz)
 *
 */
uint32_t RCC_GetPPLCLK(void)
{
 8000cee:	b480      	push	{r7}
 8000cf0:	af00      	add	r7, sp, #0
	//TODO
	return 0;
 8000cf2:	2300      	movs	r3, #0
}
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	bc80      	pop	{r7}
 8000cfa:	4770      	bx	lr

08000cfc <RCC_GetAPB1CLK>:
 *
 * Return: 		uint32_t Apb1Clk - clock speed to I2C peripherals (Hz)
 *
 */
uint32_t RCC_GetAPB1CLK(void)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b084      	sub	sp, #16
 8000d00:	af00      	add	r7, sp, #0
	// 1. Get system clock source (internal, external, PLL)
	uint8_t clkSrc = ((RCC->CFGR >> 2) & 0x3);
 8000d02:	4b25      	ldr	r3, [pc, #148]	; (8000d98 <RCC_GetAPB1CLK+0x9c>)
 8000d04:	689b      	ldr	r3, [r3, #8]
 8000d06:	089b      	lsrs	r3, r3, #2
 8000d08:	b2db      	uxtb	r3, r3
 8000d0a:	f003 0303 	and.w	r3, r3, #3
 8000d0e:	727b      	strb	r3, [r7, #9]

	uint32_t sysClk, Apb1Clk;

	if (clkSrc == 0)
 8000d10:	7a7b      	ldrb	r3, [r7, #9]
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d102      	bne.n	8000d1c <RCC_GetAPB1CLK+0x20>
	{
		// Internal oscillator
		sysClk = 16000000;
 8000d16:	4b21      	ldr	r3, [pc, #132]	; (8000d9c <RCC_GetAPB1CLK+0xa0>)
 8000d18:	60fb      	str	r3, [r7, #12]
 8000d1a:	e00d      	b.n	8000d38 <RCC_GetAPB1CLK+0x3c>
	}
	else if (clkSrc == 1)
 8000d1c:	7a7b      	ldrb	r3, [r7, #9]
 8000d1e:	2b01      	cmp	r3, #1
 8000d20:	d102      	bne.n	8000d28 <RCC_GetAPB1CLK+0x2c>
	{
		// External on-board oscillator
		sysClk = 8000000;
 8000d22:	4b1f      	ldr	r3, [pc, #124]	; (8000da0 <RCC_GetAPB1CLK+0xa4>)
 8000d24:	60fb      	str	r3, [r7, #12]
 8000d26:	e007      	b.n	8000d38 <RCC_GetAPB1CLK+0x3c>
	}
	else if (clkSrc == 2)
 8000d28:	7a7b      	ldrb	r3, [r7, #9]
 8000d2a:	2b02      	cmp	r3, #2
 8000d2c:	d104      	bne.n	8000d38 <RCC_GetAPB1CLK+0x3c>
	{
		Apb1Clk = RCC_GetPPLCLK();
 8000d2e:	f7ff ffde 	bl	8000cee <RCC_GetPPLCLK>
 8000d32:	6078      	str	r0, [r7, #4]
		return Apb1Clk;
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	e02b      	b.n	8000d90 <RCC_GetAPB1CLK+0x94>
	}

	// 2. Get the AHB prescaler value
	uint8_t temp = (RCC->CFGR >> 4) & 0xF;
 8000d38:	4b17      	ldr	r3, [pc, #92]	; (8000d98 <RCC_GetAPB1CLK+0x9c>)
 8000d3a:	689b      	ldr	r3, [r3, #8]
 8000d3c:	091b      	lsrs	r3, r3, #4
 8000d3e:	b2db      	uxtb	r3, r3
 8000d40:	f003 030f 	and.w	r3, r3, #15
 8000d44:	70fb      	strb	r3, [r7, #3]
	uint8_t ahbPre = 1, ppre1Pre = 1;
 8000d46:	2301      	movs	r3, #1
 8000d48:	72fb      	strb	r3, [r7, #11]
 8000d4a:	2301      	movs	r3, #1
 8000d4c:	72bb      	strb	r3, [r7, #10]

	if (temp >= 8)
 8000d4e:	78fb      	ldrb	r3, [r7, #3]
 8000d50:	2b07      	cmp	r3, #7
 8000d52:	d905      	bls.n	8000d60 <RCC_GetAPB1CLK+0x64>
	{
		ahbPre = AHB_Prescaler[temp - 8];
 8000d54:	78fb      	ldrb	r3, [r7, #3]
 8000d56:	3b08      	subs	r3, #8
 8000d58:	4a12      	ldr	r2, [pc, #72]	; (8000da4 <RCC_GetAPB1CLK+0xa8>)
 8000d5a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000d5e:	72fb      	strb	r3, [r7, #11]
	}

	// 3. Get the APB1 prescaler value
	temp = (RCC->CFGR >> 10) & 0x7;
 8000d60:	4b0d      	ldr	r3, [pc, #52]	; (8000d98 <RCC_GetAPB1CLK+0x9c>)
 8000d62:	689b      	ldr	r3, [r3, #8]
 8000d64:	0a9b      	lsrs	r3, r3, #10
 8000d66:	b2db      	uxtb	r3, r3
 8000d68:	f003 0307 	and.w	r3, r3, #7
 8000d6c:	70fb      	strb	r3, [r7, #3]
	if (temp >= 4)
 8000d6e:	78fb      	ldrb	r3, [r7, #3]
 8000d70:	2b03      	cmp	r3, #3
 8000d72:	d904      	bls.n	8000d7e <RCC_GetAPB1CLK+0x82>
	{
		ppre1Pre = PPRE1_Prescaler[temp - 4];
 8000d74:	78fb      	ldrb	r3, [r7, #3]
 8000d76:	3b04      	subs	r3, #4
 8000d78:	4a0b      	ldr	r2, [pc, #44]	; (8000da8 <RCC_GetAPB1CLK+0xac>)
 8000d7a:	5cd3      	ldrb	r3, [r2, r3]
 8000d7c:	72bb      	strb	r3, [r7, #10]
	}

	// 4. Calculate the clock speed to I2C
	Apb1Clk = (sysClk / ahbPre) / ppre1Pre;
 8000d7e:	7afb      	ldrb	r3, [r7, #11]
 8000d80:	68fa      	ldr	r2, [r7, #12]
 8000d82:	fbb2 f2f3 	udiv	r2, r2, r3
 8000d86:	7abb      	ldrb	r3, [r7, #10]
 8000d88:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d8c:	607b      	str	r3, [r7, #4]

	return Apb1Clk;
 8000d8e:	687b      	ldr	r3, [r7, #4]
}
 8000d90:	4618      	mov	r0, r3
 8000d92:	3710      	adds	r7, #16
 8000d94:	46bd      	mov	sp, r7
 8000d96:	bd80      	pop	{r7, pc}
 8000d98:	40023800 	.word	0x40023800
 8000d9c:	00f42400 	.word	0x00f42400
 8000da0:	007a1200 	.word	0x007a1200
 8000da4:	20000000 	.word	0x20000000
 8000da8:	20000010 	.word	0x20000010

08000dac <RCC_GetAPB2CLK>:
 *
 * Return: 		uint32_t Apb2Clk - clock speed to APB2 (Hz)
 *
 */
uint32_t RCC_GetAPB2CLK(void)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b084      	sub	sp, #16
 8000db0:	af00      	add	r7, sp, #0
	// 1. Get system clock source (internal, external, PLL)
	uint8_t clkSrc = ((RCC->CFGR >> 2) & 0x3);
 8000db2:	4b25      	ldr	r3, [pc, #148]	; (8000e48 <RCC_GetAPB2CLK+0x9c>)
 8000db4:	689b      	ldr	r3, [r3, #8]
 8000db6:	089b      	lsrs	r3, r3, #2
 8000db8:	b2db      	uxtb	r3, r3
 8000dba:	f003 0303 	and.w	r3, r3, #3
 8000dbe:	727b      	strb	r3, [r7, #9]

	uint32_t sysClk, Apb2Clk;

	if (clkSrc == 0)
 8000dc0:	7a7b      	ldrb	r3, [r7, #9]
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d102      	bne.n	8000dcc <RCC_GetAPB2CLK+0x20>
	{
		// Internal oscillator
		sysClk = 16000000;
 8000dc6:	4b21      	ldr	r3, [pc, #132]	; (8000e4c <RCC_GetAPB2CLK+0xa0>)
 8000dc8:	60fb      	str	r3, [r7, #12]
 8000dca:	e00d      	b.n	8000de8 <RCC_GetAPB2CLK+0x3c>
	}
	else if (clkSrc == 1)
 8000dcc:	7a7b      	ldrb	r3, [r7, #9]
 8000dce:	2b01      	cmp	r3, #1
 8000dd0:	d102      	bne.n	8000dd8 <RCC_GetAPB2CLK+0x2c>
	{
		// External on-board oscillator
		sysClk = 8000000;
 8000dd2:	4b1f      	ldr	r3, [pc, #124]	; (8000e50 <RCC_GetAPB2CLK+0xa4>)
 8000dd4:	60fb      	str	r3, [r7, #12]
 8000dd6:	e007      	b.n	8000de8 <RCC_GetAPB2CLK+0x3c>
	}
	else if (clkSrc == 2)
 8000dd8:	7a7b      	ldrb	r3, [r7, #9]
 8000dda:	2b02      	cmp	r3, #2
 8000ddc:	d104      	bne.n	8000de8 <RCC_GetAPB2CLK+0x3c>
	{
		Apb2Clk = RCC_GetPPLCLK();
 8000dde:	f7ff ff86 	bl	8000cee <RCC_GetPPLCLK>
 8000de2:	6078      	str	r0, [r7, #4]
		return Apb2Clk;
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	e02b      	b.n	8000e40 <RCC_GetAPB2CLK+0x94>
	}

	// 2. Get the AHB prescaler value
	uint8_t temp = (RCC->CFGR >> 4) & 0xF;
 8000de8:	4b17      	ldr	r3, [pc, #92]	; (8000e48 <RCC_GetAPB2CLK+0x9c>)
 8000dea:	689b      	ldr	r3, [r3, #8]
 8000dec:	091b      	lsrs	r3, r3, #4
 8000dee:	b2db      	uxtb	r3, r3
 8000df0:	f003 030f 	and.w	r3, r3, #15
 8000df4:	70fb      	strb	r3, [r7, #3]
	uint8_t ahbPre = 1, ppre2Pre = 1;
 8000df6:	2301      	movs	r3, #1
 8000df8:	72fb      	strb	r3, [r7, #11]
 8000dfa:	2301      	movs	r3, #1
 8000dfc:	72bb      	strb	r3, [r7, #10]

	if (temp >= 8)
 8000dfe:	78fb      	ldrb	r3, [r7, #3]
 8000e00:	2b07      	cmp	r3, #7
 8000e02:	d905      	bls.n	8000e10 <RCC_GetAPB2CLK+0x64>
	{
		ahbPre = AHB_Prescaler[temp - 8];
 8000e04:	78fb      	ldrb	r3, [r7, #3]
 8000e06:	3b08      	subs	r3, #8
 8000e08:	4a12      	ldr	r2, [pc, #72]	; (8000e54 <RCC_GetAPB2CLK+0xa8>)
 8000e0a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000e0e:	72fb      	strb	r3, [r7, #11]
	}

	// 3. Get the APB2 prescaler value
	temp = (RCC->CFGR >> 13) & 0x7;
 8000e10:	4b0d      	ldr	r3, [pc, #52]	; (8000e48 <RCC_GetAPB2CLK+0x9c>)
 8000e12:	689b      	ldr	r3, [r3, #8]
 8000e14:	0b5b      	lsrs	r3, r3, #13
 8000e16:	b2db      	uxtb	r3, r3
 8000e18:	f003 0307 	and.w	r3, r3, #7
 8000e1c:	70fb      	strb	r3, [r7, #3]
	if (temp >= 4)
 8000e1e:	78fb      	ldrb	r3, [r7, #3]
 8000e20:	2b03      	cmp	r3, #3
 8000e22:	d904      	bls.n	8000e2e <RCC_GetAPB2CLK+0x82>
	{
		ppre2Pre = PPRE2_Prescaler[temp - 4];
 8000e24:	78fb      	ldrb	r3, [r7, #3]
 8000e26:	3b04      	subs	r3, #4
 8000e28:	4a0b      	ldr	r2, [pc, #44]	; (8000e58 <RCC_GetAPB2CLK+0xac>)
 8000e2a:	5cd3      	ldrb	r3, [r2, r3]
 8000e2c:	72bb      	strb	r3, [r7, #10]
	}

	// 4. Calculate the clock speed to I2C
	Apb2Clk = (sysClk / ahbPre) / ppre2Pre;
 8000e2e:	7afb      	ldrb	r3, [r7, #11]
 8000e30:	68fa      	ldr	r2, [r7, #12]
 8000e32:	fbb2 f2f3 	udiv	r2, r2, r3
 8000e36:	7abb      	ldrb	r3, [r7, #10]
 8000e38:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e3c:	607b      	str	r3, [r7, #4]

	return Apb2Clk;
 8000e3e:	687b      	ldr	r3, [r7, #4]
}
 8000e40:	4618      	mov	r0, r3
 8000e42:	3710      	adds	r7, #16
 8000e44:	46bd      	mov	sp, r7
 8000e46:	bd80      	pop	{r7, pc}
 8000e48:	40023800 	.word	0x40023800
 8000e4c:	00f42400 	.word	0x00f42400
 8000e50:	007a1200 	.word	0x007a1200
 8000e54:	20000000 	.word	0x20000000
 8000e58:	20000014 	.word	0x20000014

08000e5c <USART_PeriClockControl>:
 * Params: 		struct USART_RegDef_t* *pUSARTx - USART/UART base address
 * 				uint8_t - Enable or disable value
 *
 */
void USART_PeriClockControl(USART_RegDef_t *pUSARTx, uint8_t EnOrDi)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	b083      	sub	sp, #12
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]
 8000e64:	460b      	mov	r3, r1
 8000e66:	70fb      	strb	r3, [r7, #3]
	if (EnOrDi == ENABLE)
 8000e68:	78fb      	ldrb	r3, [r7, #3]
 8000e6a:	2b01      	cmp	r3, #1
 8000e6c:	d141      	bne.n	8000ef2 <USART_PeriClockControl+0x96>
	{
		if (pUSARTx == USART1)
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	4a43      	ldr	r2, [pc, #268]	; (8000f80 <USART_PeriClockControl+0x124>)
 8000e72:	4293      	cmp	r3, r2
 8000e74:	d106      	bne.n	8000e84 <USART_PeriClockControl+0x28>
		{
			USART1_PCLK_EN();
 8000e76:	4b43      	ldr	r3, [pc, #268]	; (8000f84 <USART_PeriClockControl+0x128>)
 8000e78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e7a:	4a42      	ldr	r2, [pc, #264]	; (8000f84 <USART_PeriClockControl+0x128>)
 8000e7c:	f043 0310 	orr.w	r3, r3, #16
 8000e80:	6453      	str	r3, [r2, #68]	; 0x44
		else if (pUSARTx == USART6)
		{
			USART6_PCLK_DI();
		}
	}
}
 8000e82:	e077      	b.n	8000f74 <USART_PeriClockControl+0x118>
		else if (pUSARTx == USART2)
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	4a40      	ldr	r2, [pc, #256]	; (8000f88 <USART_PeriClockControl+0x12c>)
 8000e88:	4293      	cmp	r3, r2
 8000e8a:	d106      	bne.n	8000e9a <USART_PeriClockControl+0x3e>
			USART2_PCLK_EN();
 8000e8c:	4b3d      	ldr	r3, [pc, #244]	; (8000f84 <USART_PeriClockControl+0x128>)
 8000e8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e90:	4a3c      	ldr	r2, [pc, #240]	; (8000f84 <USART_PeriClockControl+0x128>)
 8000e92:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e96:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000e98:	e06c      	b.n	8000f74 <USART_PeriClockControl+0x118>
		else if (pUSARTx == USART3)
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	4a3b      	ldr	r2, [pc, #236]	; (8000f8c <USART_PeriClockControl+0x130>)
 8000e9e:	4293      	cmp	r3, r2
 8000ea0:	d106      	bne.n	8000eb0 <USART_PeriClockControl+0x54>
			USART3_PCLK_EN();
 8000ea2:	4b38      	ldr	r3, [pc, #224]	; (8000f84 <USART_PeriClockControl+0x128>)
 8000ea4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ea6:	4a37      	ldr	r2, [pc, #220]	; (8000f84 <USART_PeriClockControl+0x128>)
 8000ea8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000eac:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000eae:	e061      	b.n	8000f74 <USART_PeriClockControl+0x118>
		else if (pUSARTx == UART4)
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	4a37      	ldr	r2, [pc, #220]	; (8000f90 <USART_PeriClockControl+0x134>)
 8000eb4:	4293      	cmp	r3, r2
 8000eb6:	d106      	bne.n	8000ec6 <USART_PeriClockControl+0x6a>
			UART4_PCLK_EN();
 8000eb8:	4b32      	ldr	r3, [pc, #200]	; (8000f84 <USART_PeriClockControl+0x128>)
 8000eba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ebc:	4a31      	ldr	r2, [pc, #196]	; (8000f84 <USART_PeriClockControl+0x128>)
 8000ebe:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000ec2:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000ec4:	e056      	b.n	8000f74 <USART_PeriClockControl+0x118>
		else if (pUSARTx == UART5)
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	4a32      	ldr	r2, [pc, #200]	; (8000f94 <USART_PeriClockControl+0x138>)
 8000eca:	4293      	cmp	r3, r2
 8000ecc:	d106      	bne.n	8000edc <USART_PeriClockControl+0x80>
			UART5_PCLK_EN();
 8000ece:	4b2d      	ldr	r3, [pc, #180]	; (8000f84 <USART_PeriClockControl+0x128>)
 8000ed0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ed2:	4a2c      	ldr	r2, [pc, #176]	; (8000f84 <USART_PeriClockControl+0x128>)
 8000ed4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000ed8:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000eda:	e04b      	b.n	8000f74 <USART_PeriClockControl+0x118>
		else if (pUSARTx == USART6)
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	4a2e      	ldr	r2, [pc, #184]	; (8000f98 <USART_PeriClockControl+0x13c>)
 8000ee0:	4293      	cmp	r3, r2
 8000ee2:	d147      	bne.n	8000f74 <USART_PeriClockControl+0x118>
			USART6_PCLK_EN();
 8000ee4:	4b27      	ldr	r3, [pc, #156]	; (8000f84 <USART_PeriClockControl+0x128>)
 8000ee6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ee8:	4a26      	ldr	r2, [pc, #152]	; (8000f84 <USART_PeriClockControl+0x128>)
 8000eea:	f043 0320 	orr.w	r3, r3, #32
 8000eee:	6453      	str	r3, [r2, #68]	; 0x44
}
 8000ef0:	e040      	b.n	8000f74 <USART_PeriClockControl+0x118>
		if (pUSARTx == USART1)
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	4a22      	ldr	r2, [pc, #136]	; (8000f80 <USART_PeriClockControl+0x124>)
 8000ef6:	4293      	cmp	r3, r2
 8000ef8:	d106      	bne.n	8000f08 <USART_PeriClockControl+0xac>
			USART1_PCLK_DI();
 8000efa:	4b22      	ldr	r3, [pc, #136]	; (8000f84 <USART_PeriClockControl+0x128>)
 8000efc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000efe:	4a21      	ldr	r2, [pc, #132]	; (8000f84 <USART_PeriClockControl+0x128>)
 8000f00:	f023 0310 	bic.w	r3, r3, #16
 8000f04:	6453      	str	r3, [r2, #68]	; 0x44
}
 8000f06:	e035      	b.n	8000f74 <USART_PeriClockControl+0x118>
		else if (pUSARTx == USART2)
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	4a1f      	ldr	r2, [pc, #124]	; (8000f88 <USART_PeriClockControl+0x12c>)
 8000f0c:	4293      	cmp	r3, r2
 8000f0e:	d106      	bne.n	8000f1e <USART_PeriClockControl+0xc2>
			USART2_PCLK_DI();
 8000f10:	4b1c      	ldr	r3, [pc, #112]	; (8000f84 <USART_PeriClockControl+0x128>)
 8000f12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f14:	4a1b      	ldr	r2, [pc, #108]	; (8000f84 <USART_PeriClockControl+0x128>)
 8000f16:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8000f1a:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000f1c:	e02a      	b.n	8000f74 <USART_PeriClockControl+0x118>
		else if (pUSARTx == USART3)
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	4a1a      	ldr	r2, [pc, #104]	; (8000f8c <USART_PeriClockControl+0x130>)
 8000f22:	4293      	cmp	r3, r2
 8000f24:	d106      	bne.n	8000f34 <USART_PeriClockControl+0xd8>
			USART3_PCLK_DI();
 8000f26:	4b17      	ldr	r3, [pc, #92]	; (8000f84 <USART_PeriClockControl+0x128>)
 8000f28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f2a:	4a16      	ldr	r2, [pc, #88]	; (8000f84 <USART_PeriClockControl+0x128>)
 8000f2c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f30:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000f32:	e01f      	b.n	8000f74 <USART_PeriClockControl+0x118>
		else if (pUSARTx == UART4)
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	4a16      	ldr	r2, [pc, #88]	; (8000f90 <USART_PeriClockControl+0x134>)
 8000f38:	4293      	cmp	r3, r2
 8000f3a:	d106      	bne.n	8000f4a <USART_PeriClockControl+0xee>
			UART4_PCLK_DI();
 8000f3c:	4b11      	ldr	r3, [pc, #68]	; (8000f84 <USART_PeriClockControl+0x128>)
 8000f3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f40:	4a10      	ldr	r2, [pc, #64]	; (8000f84 <USART_PeriClockControl+0x128>)
 8000f42:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8000f46:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000f48:	e014      	b.n	8000f74 <USART_PeriClockControl+0x118>
		else if (pUSARTx == UART5)
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	4a11      	ldr	r2, [pc, #68]	; (8000f94 <USART_PeriClockControl+0x138>)
 8000f4e:	4293      	cmp	r3, r2
 8000f50:	d106      	bne.n	8000f60 <USART_PeriClockControl+0x104>
			UART5_PCLK_DI();
 8000f52:	4b0c      	ldr	r3, [pc, #48]	; (8000f84 <USART_PeriClockControl+0x128>)
 8000f54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f56:	4a0b      	ldr	r2, [pc, #44]	; (8000f84 <USART_PeriClockControl+0x128>)
 8000f58:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8000f5c:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000f5e:	e009      	b.n	8000f74 <USART_PeriClockControl+0x118>
		else if (pUSARTx == USART6)
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	4a0d      	ldr	r2, [pc, #52]	; (8000f98 <USART_PeriClockControl+0x13c>)
 8000f64:	4293      	cmp	r3, r2
 8000f66:	d105      	bne.n	8000f74 <USART_PeriClockControl+0x118>
			USART6_PCLK_DI();
 8000f68:	4b06      	ldr	r3, [pc, #24]	; (8000f84 <USART_PeriClockControl+0x128>)
 8000f6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f6c:	4a05      	ldr	r2, [pc, #20]	; (8000f84 <USART_PeriClockControl+0x128>)
 8000f6e:	f023 0320 	bic.w	r3, r3, #32
 8000f72:	6453      	str	r3, [r2, #68]	; 0x44
}
 8000f74:	bf00      	nop
 8000f76:	370c      	adds	r7, #12
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	bc80      	pop	{r7}
 8000f7c:	4770      	bx	lr
 8000f7e:	bf00      	nop
 8000f80:	40011000 	.word	0x40011000
 8000f84:	40023800 	.word	0x40023800
 8000f88:	40004400 	.word	0x40004400
 8000f8c:	40004800 	.word	0x40004800
 8000f90:	40004c00 	.word	0x40004c00
 8000f94:	40005000 	.word	0x40005000
 8000f98:	40011400 	.word	0x40011400

08000f9c <USART_PeripheralControl>:
 * Params: 		struct USART_RegDef_t *pUSARTx - USART/UART base address
 * 				uint8_t EnOrDi - Enable or disable communication (0 or 1)
 *
 */
void USART_PeripheralControl(USART_RegDef_t *pUSARTx, uint8_t EnOrDi)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	b083      	sub	sp, #12
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
 8000fa4:	460b      	mov	r3, r1
 8000fa6:	70fb      	strb	r3, [r7, #3]
	if (EnOrDi == ENABLE)
 8000fa8:	78fb      	ldrb	r3, [r7, #3]
 8000faa:	2b01      	cmp	r3, #1
 8000fac:	d106      	bne.n	8000fbc <USART_PeripheralControl+0x20>
	{
		pUSARTx->CR1 |= (1 << 13);
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	68db      	ldr	r3, [r3, #12]
 8000fb2:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	60da      	str	r2, [r3, #12]
	}
	else
	{
		pUSARTx->CR1 |= ~(1 << 13);
	}
}
 8000fba:	e005      	b.n	8000fc8 <USART_PeripheralControl+0x2c>
		pUSARTx->CR1 |= ~(1 << 13);
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	68db      	ldr	r3, [r3, #12]
 8000fc0:	f463 5200 	orn	r2, r3, #8192	; 0x2000
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	60da      	str	r2, [r3, #12]
}
 8000fc8:	bf00      	nop
 8000fca:	370c      	adds	r7, #12
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	bc80      	pop	{r7}
 8000fd0:	4770      	bx	lr
	...

08000fd4 <USART_SetBaudRate>:
 * Params: 		struct USART_RegDef_t *pUSARTx - USART base address
 * 				uint16_t USART_BaudRate - Baud rate to be set (bps)
 *
 */
void USART_SetBaudRate(USART_RegDef_t *pUSARTx, uint32_t USART_BaudRate)
{
 8000fd4:	b590      	push	{r4, r7, lr}
 8000fd6:	b087      	sub	sp, #28
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
 8000fdc:	6039      	str	r1, [r7, #0]
	uint32_t ApbClk;

	// 1. Get the peripheral clock to USART/UART
	if (pUSARTx == USART1 || pUSARTx == USART6)
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	4a49      	ldr	r2, [pc, #292]	; (8001108 <USART_SetBaudRate+0x134>)
 8000fe2:	4293      	cmp	r3, r2
 8000fe4:	d003      	beq.n	8000fee <USART_SetBaudRate+0x1a>
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	4a48      	ldr	r2, [pc, #288]	; (800110c <USART_SetBaudRate+0x138>)
 8000fea:	4293      	cmp	r3, r2
 8000fec:	d103      	bne.n	8000ff6 <USART_SetBaudRate+0x22>
	{
		ApbClk = RCC_GetAPB2CLK();
 8000fee:	f7ff fedd 	bl	8000dac <RCC_GetAPB2CLK>
 8000ff2:	6178      	str	r0, [r7, #20]
 8000ff4:	e002      	b.n	8000ffc <USART_SetBaudRate+0x28>
	}
	else
	{
		ApbClk = RCC_GetAPB1CLK();
 8000ff6:	f7ff fe81 	bl	8000cfc <RCC_GetAPB1CLK>
 8000ffa:	6178      	str	r0, [r7, #20]
	}

	// 2. Calculate USARTDIV
	uint8_t over8 = (pUSARTx->CR1 & (1 << 15)) ? 1 : 0;
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	68db      	ldr	r3, [r3, #12]
 8001000:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001004:	2b00      	cmp	r3, #0
 8001006:	bf14      	ite	ne
 8001008:	2301      	movne	r3, #1
 800100a:	2300      	moveq	r3, #0
 800100c:	b2db      	uxtb	r3, r3
 800100e:	73fb      	strb	r3, [r7, #15]
	float usartDiv = (ApbClk  * 100) / ((8 * (2 - over8)) * USART_BaudRate);   // Multiply hundred to get 2 decimal places
 8001010:	697b      	ldr	r3, [r7, #20]
 8001012:	2264      	movs	r2, #100	; 0x64
 8001014:	fb02 f203 	mul.w	r2, r2, r3
 8001018:	7bfb      	ldrb	r3, [r7, #15]
 800101a:	f1c3 0302 	rsb	r3, r3, #2
 800101e:	4619      	mov	r1, r3
 8001020:	683b      	ldr	r3, [r7, #0]
 8001022:	fb03 f301 	mul.w	r3, r3, r1
 8001026:	00db      	lsls	r3, r3, #3
 8001028:	fbb2 f3f3 	udiv	r3, r2, r3
 800102c:	4618      	mov	r0, r3
 800102e:	f7ff f9fd 	bl	800042c <__aeabi_ui2f>
 8001032:	4603      	mov	r3, r0
 8001034:	60bb      	str	r3, [r7, #8]

	// 3. Calculate mantissa and fraction (See USART 25.4.4 in datasheet for formulas)
	uint16_t mantissa = usartDiv / 100;
 8001036:	4936      	ldr	r1, [pc, #216]	; (8001110 <USART_SetBaudRate+0x13c>)
 8001038:	68b8      	ldr	r0, [r7, #8]
 800103a:	f7ff fb03 	bl	8000644 <__aeabi_fdiv>
 800103e:	4603      	mov	r3, r0
 8001040:	4618      	mov	r0, r3
 8001042:	f7ff fb9b 	bl	800077c <__aeabi_f2uiz>
 8001046:	4603      	mov	r3, r0
 8001048:	827b      	strh	r3, [r7, #18]
	uint16_t fraction = (usartDiv - mantissa * 100) * (8 * (2 - over8));
 800104a:	8a7b      	ldrh	r3, [r7, #18]
 800104c:	2264      	movs	r2, #100	; 0x64
 800104e:	fb02 f303 	mul.w	r3, r2, r3
 8001052:	4618      	mov	r0, r3
 8001054:	f7ff f9ee 	bl	8000434 <__aeabi_i2f>
 8001058:	4603      	mov	r3, r0
 800105a:	4619      	mov	r1, r3
 800105c:	68b8      	ldr	r0, [r7, #8]
 800105e:	f7ff f933 	bl	80002c8 <__aeabi_fsub>
 8001062:	4603      	mov	r3, r0
 8001064:	461c      	mov	r4, r3
 8001066:	7bfb      	ldrb	r3, [r7, #15]
 8001068:	f1c3 0302 	rsb	r3, r3, #2
 800106c:	00db      	lsls	r3, r3, #3
 800106e:	4618      	mov	r0, r3
 8001070:	f7ff f9e0 	bl	8000434 <__aeabi_i2f>
 8001074:	4603      	mov	r3, r0
 8001076:	4619      	mov	r1, r3
 8001078:	4620      	mov	r0, r4
 800107a:	f7ff fa2f 	bl	80004dc <__aeabi_fmul>
 800107e:	4603      	mov	r3, r0
 8001080:	4618      	mov	r0, r3
 8001082:	f7ff fb7b 	bl	800077c <__aeabi_f2uiz>
 8001086:	4603      	mov	r3, r0
 8001088:	823b      	strh	r3, [r7, #16]

	// Round fraction
	fraction = (fraction + 50) / 100;
 800108a:	8a3b      	ldrh	r3, [r7, #16]
 800108c:	3332      	adds	r3, #50	; 0x32
 800108e:	4a21      	ldr	r2, [pc, #132]	; (8001114 <USART_SetBaudRate+0x140>)
 8001090:	fb82 1203 	smull	r1, r2, r2, r3
 8001094:	1152      	asrs	r2, r2, #5
 8001096:	17db      	asrs	r3, r3, #31
 8001098:	1ad3      	subs	r3, r2, r3
 800109a:	823b      	strh	r3, [r7, #16]

	// 4. Carry over
	if (over8)
 800109c:	7bfb      	ldrb	r3, [r7, #15]
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d017      	beq.n	80010d2 <USART_SetBaudRate+0xfe>
	{
		// Fraction register is 3 bits
		if (fraction > 7)
 80010a2:	8a3b      	ldrh	r3, [r7, #16]
 80010a4:	2b07      	cmp	r3, #7
 80010a6:	d904      	bls.n	80010b2 <USART_SetBaudRate+0xde>
		{
			mantissa++;
 80010a8:	8a7b      	ldrh	r3, [r7, #18]
 80010aa:	3301      	adds	r3, #1
 80010ac:	827b      	strh	r3, [r7, #18]
			fraction = 0;
 80010ae:	2300      	movs	r3, #0
 80010b0:	823b      	strh	r3, [r7, #16]
		}

		pUSARTx->BRR |= (mantissa << 4);
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	689b      	ldr	r3, [r3, #8]
 80010b6:	8a7a      	ldrh	r2, [r7, #18]
 80010b8:	0112      	lsls	r2, r2, #4
 80010ba:	431a      	orrs	r2, r3
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	609a      	str	r2, [r3, #8]
		pUSARTx->BRR |= ((fraction & 0x07) << 0);
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	689a      	ldr	r2, [r3, #8]
 80010c4:	8a3b      	ldrh	r3, [r7, #16]
 80010c6:	f003 0307 	and.w	r3, r3, #7
 80010ca:	431a      	orrs	r2, r3
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	609a      	str	r2, [r3, #8]
		}

		pUSARTx->BRR |= (mantissa << 4);
		pUSARTx->BRR |= ((fraction & 0x0F) << 0);
	}
}
 80010d0:	e016      	b.n	8001100 <USART_SetBaudRate+0x12c>
		if (fraction > 15)
 80010d2:	8a3b      	ldrh	r3, [r7, #16]
 80010d4:	2b0f      	cmp	r3, #15
 80010d6:	d904      	bls.n	80010e2 <USART_SetBaudRate+0x10e>
			mantissa++;
 80010d8:	8a7b      	ldrh	r3, [r7, #18]
 80010da:	3301      	adds	r3, #1
 80010dc:	827b      	strh	r3, [r7, #18]
			fraction = 0;
 80010de:	2300      	movs	r3, #0
 80010e0:	823b      	strh	r3, [r7, #16]
		pUSARTx->BRR |= (mantissa << 4);
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	689b      	ldr	r3, [r3, #8]
 80010e6:	8a7a      	ldrh	r2, [r7, #18]
 80010e8:	0112      	lsls	r2, r2, #4
 80010ea:	431a      	orrs	r2, r3
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	609a      	str	r2, [r3, #8]
		pUSARTx->BRR |= ((fraction & 0x0F) << 0);
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	689a      	ldr	r2, [r3, #8]
 80010f4:	8a3b      	ldrh	r3, [r7, #16]
 80010f6:	f003 030f 	and.w	r3, r3, #15
 80010fa:	431a      	orrs	r2, r3
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	609a      	str	r2, [r3, #8]
}
 8001100:	bf00      	nop
 8001102:	371c      	adds	r7, #28
 8001104:	46bd      	mov	sp, r7
 8001106:	bd90      	pop	{r4, r7, pc}
 8001108:	40011000 	.word	0x40011000
 800110c:	40011400 	.word	0x40011400
 8001110:	42c80000 	.word	0x42c80000
 8001114:	51eb851f 	.word	0x51eb851f

08001118 <USART_Init>:
 *
 * Params: 		struct USART_Handle_t *pUSARTxHandle - USART peripheral handle
 *
 */
void USART_Init(USART_Handle_t *pUSARTxHandle)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b082      	sub	sp, #8
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
	// 1. Give clock signal to USART/UART bus
	USART_PeriClockControl(pUSARTxHandle->pUSARTx, ENABLE);
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	2101      	movs	r1, #1
 8001126:	4618      	mov	r0, r3
 8001128:	f7ff fe98 	bl	8000e5c <USART_PeriClockControl>

	// 2. Enable USART/UART peripheral
	USART_PeripheralControl(pUSARTxHandle->pUSARTx, ENABLE);
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	2101      	movs	r1, #1
 8001132:	4618      	mov	r0, r3
 8001134:	f7ff ff32 	bl	8000f9c <USART_PeripheralControl>

	// 3. Set the data length
	if (pUSARTxHandle->USART_Config.USART_WordLen == USART_9BIT_DATA)
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	7b5b      	ldrb	r3, [r3, #13]
 800113c:	2b01      	cmp	r3, #1
 800113e:	d107      	bne.n	8001150 <USART_Init+0x38>
	{
		pUSARTxHandle->pUSARTx->CR1 |= (1 << 12);
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	68da      	ldr	r2, [r3, #12]
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800114e:	60da      	str	r2, [r3, #12]
	}

	// 4. Parity setup
	if (pUSARTxHandle->USART_Config.USART_ParitySet != USART_PARITY_DISABLE)
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	7b9b      	ldrb	r3, [r3, #14]
 8001154:	2b00      	cmp	r3, #0
 8001156:	d020      	beq.n	800119a <USART_Init+0x82>
	{
		pUSARTxHandle->pUSARTx->CR1 |= (1 << 10);
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	68da      	ldr	r2, [r3, #12]
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001166:	60da      	str	r2, [r3, #12]

		if (pUSARTxHandle->USART_Config.USART_ParitySet == USART_EVEN_PARITY)
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	7b9b      	ldrb	r3, [r3, #14]
 800116c:	2b01      	cmp	r3, #1
 800116e:	d108      	bne.n	8001182 <USART_Init+0x6a>
		{
			pUSARTxHandle->pUSARTx->CR1 &= ~(1 << 9);
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	68da      	ldr	r2, [r3, #12]
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800117e:	60da      	str	r2, [r3, #12]
 8001180:	e00b      	b.n	800119a <USART_Init+0x82>
		}
		else if (pUSARTxHandle->USART_Config.USART_ParitySet == USART_ODD_PARITY)
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	7b9b      	ldrb	r3, [r3, #14]
 8001186:	2b02      	cmp	r3, #2
 8001188:	d107      	bne.n	800119a <USART_Init+0x82>
		{
			pUSARTxHandle->pUSARTx->CR1 |= (1 << 9);
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	68da      	ldr	r2, [r3, #12]
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001198:	60da      	str	r2, [r3, #12]
		}
	}

	// 5. Set number of stop bits
	pUSARTxHandle->pUSARTx->CR2 &= ~(0x3 << 12);
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	691a      	ldr	r2, [r3, #16]
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 80011a8:	611a      	str	r2, [r3, #16]

	if (pUSARTxHandle->USART_Config.USART_StopBits == USART_HALF_STOP)
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	7b1b      	ldrb	r3, [r3, #12]
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d108      	bne.n	80011c4 <USART_Init+0xac>
	{
		pUSARTxHandle->pUSARTx->CR2 |= (1 << 12);
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	691a      	ldr	r2, [r3, #16]
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80011c0:	611a      	str	r2, [r3, #16]
 80011c2:	e018      	b.n	80011f6 <USART_Init+0xde>
	}
	else if (pUSARTxHandle->USART_Config.USART_StopBits == USART_2_STOP)
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	7b1b      	ldrb	r3, [r3, #12]
 80011c8:	2b03      	cmp	r3, #3
 80011ca:	d108      	bne.n	80011de <USART_Init+0xc6>
	{
		pUSARTxHandle->pUSARTx->CR2 |= (0x2 << 12);
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	691a      	ldr	r2, [r3, #16]
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80011da:	611a      	str	r2, [r3, #16]
 80011dc:	e00b      	b.n	80011f6 <USART_Init+0xde>
	}
	else if (pUSARTxHandle->USART_Config.USART_StopBits == USART_1ANDHALF_STOP)
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	7b1b      	ldrb	r3, [r3, #12]
 80011e2:	2b02      	cmp	r3, #2
 80011e4:	d107      	bne.n	80011f6 <USART_Init+0xde>
	{
		pUSARTxHandle->pUSARTx->CR2 |= (0x3 << 12);
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	691a      	ldr	r2, [r3, #16]
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	f442 5240 	orr.w	r2, r2, #12288	; 0x3000
 80011f4:	611a      	str	r2, [r3, #16]
	}

	// 6. Set over sampling mode
	if (pUSARTxHandle->USART_Config.USART_Oversampling == USART_OVERSMPL_8)
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	7c1b      	ldrb	r3, [r3, #16]
 80011fa:	2b01      	cmp	r3, #1
 80011fc:	d108      	bne.n	8001210 <USART_Init+0xf8>
	{
		pUSARTxHandle->pUSARTx->CR1 |= (1 << 15);
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	68da      	ldr	r2, [r3, #12]
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800120c:	60da      	str	r2, [r3, #12]
 800120e:	e007      	b.n	8001220 <USART_Init+0x108>
	}
	else
	{
		pUSARTxHandle->pUSARTx->CR1 &= ~(1 << 15);
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	68da      	ldr	r2, [r3, #12]
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800121e:	60da      	str	r2, [r3, #12]
	}

	// 7. Set baud rate
	USART_SetBaudRate(pUSARTxHandle->pUSARTx, pUSARTxHandle->USART_Config.USART_BaudRate);
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	681a      	ldr	r2, [r3, #0]
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	689b      	ldr	r3, [r3, #8]
 8001228:	4619      	mov	r1, r3
 800122a:	4610      	mov	r0, r2
 800122c:	f7ff fed2 	bl	8000fd4 <USART_SetBaudRate>

	// 8. Set Tx/Rx mode
	if (pUSARTxHandle->USART_Config.USART_Mode == USART_RX_ONLY)
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	791b      	ldrb	r3, [r3, #4]
 8001234:	2b00      	cmp	r3, #0
 8001236:	d108      	bne.n	800124a <USART_Init+0x132>
	{
		pUSARTxHandle->pUSARTx->CR1 |= (1 << 2);
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	68da      	ldr	r2, [r3, #12]
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	f042 0204 	orr.w	r2, r2, #4
 8001246:	60da      	str	r2, [r3, #12]
 8001248:	e018      	b.n	800127c <USART_Init+0x164>
	}
	else if (pUSARTxHandle->USART_Config.USART_Mode == USART_TX_ONLY)
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	791b      	ldrb	r3, [r3, #4]
 800124e:	2b01      	cmp	r3, #1
 8001250:	d108      	bne.n	8001264 <USART_Init+0x14c>
	{
		pUSARTxHandle->pUSARTx->CR1 |= (1 << 3);
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	68da      	ldr	r2, [r3, #12]
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	f042 0208 	orr.w	r2, r2, #8
 8001260:	60da      	str	r2, [r3, #12]
 8001262:	e00b      	b.n	800127c <USART_Init+0x164>
	}
	else if (pUSARTxHandle->USART_Config.USART_Mode == USART_RX_TX)
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	791b      	ldrb	r3, [r3, #4]
 8001268:	2b02      	cmp	r3, #2
 800126a:	d107      	bne.n	800127c <USART_Init+0x164>
	{
		pUSARTxHandle->pUSARTx->CR1 |= (1 << 3) | (1 << 2);
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	68da      	ldr	r2, [r3, #12]
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	f042 020c 	orr.w	r2, r2, #12
 800127a:	60da      	str	r2, [r3, #12]
	}

	// 9. Hardware flow control setup
	pUSARTxHandle->pUSARTx->CR2 &= ~(0x3 << 8);
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	691a      	ldr	r2, [r3, #16]
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800128a:	611a      	str	r2, [r3, #16]

	if (pUSARTxHandle->USART_Config.USART_HWFlowCtrl == USART_RTS_ON)
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	7bdb      	ldrb	r3, [r3, #15]
 8001290:	2b01      	cmp	r3, #1
 8001292:	d108      	bne.n	80012a6 <USART_Init+0x18e>
	{
		pUSARTxHandle->pUSARTx->CR3 |= (1 << 8);
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	695a      	ldr	r2, [r3, #20]
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80012a2:	615a      	str	r2, [r3, #20]
	}
	else if (pUSARTxHandle->USART_Config.USART_HWFlowCtrl == USART_RTS_CTS_ON)
	{
		pUSARTxHandle->pUSARTx->CR3 |= (0x3 << 8);
	}
}
 80012a4:	e018      	b.n	80012d8 <USART_Init+0x1c0>
	else if (pUSARTxHandle->USART_Config.USART_HWFlowCtrl == USART_CTS_ON)
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	7bdb      	ldrb	r3, [r3, #15]
 80012aa:	2b02      	cmp	r3, #2
 80012ac:	d108      	bne.n	80012c0 <USART_Init+0x1a8>
		pUSARTxHandle->pUSARTx->CR3 |= (1 << 9);
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	695a      	ldr	r2, [r3, #20]
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80012bc:	615a      	str	r2, [r3, #20]
}
 80012be:	e00b      	b.n	80012d8 <USART_Init+0x1c0>
	else if (pUSARTxHandle->USART_Config.USART_HWFlowCtrl == USART_RTS_CTS_ON)
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	7bdb      	ldrb	r3, [r3, #15]
 80012c4:	2b03      	cmp	r3, #3
 80012c6:	d107      	bne.n	80012d8 <USART_Init+0x1c0>
		pUSARTxHandle->pUSARTx->CR3 |= (0x3 << 8);
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	695a      	ldr	r2, [r3, #20]
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 80012d6:	615a      	str	r2, [r3, #20]
}
 80012d8:	bf00      	nop
 80012da:	3708      	adds	r7, #8
 80012dc:	46bd      	mov	sp, r7
 80012de:	bd80      	pop	{r7, pc}

080012e0 <USART_IRQConfig>:
 * Params: 		uint8_t IRQNumber - IRQ position being configured
 * 				uint8_t Value - Enabling or disabling interrupt (1 or 0)
 *
 */
void USART_IRQConfig(uint8_t IRQNumber, uint8_t EnOrDi)
{
 80012e0:	b480      	push	{r7}
 80012e2:	b083      	sub	sp, #12
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	4603      	mov	r3, r0
 80012e8:	460a      	mov	r2, r1
 80012ea:	71fb      	strb	r3, [r7, #7]
 80012ec:	4613      	mov	r3, r2
 80012ee:	71bb      	strb	r3, [r7, #6]
	if (EnOrDi == ENABLE)
 80012f0:	79bb      	ldrb	r3, [r7, #6]
 80012f2:	2b01      	cmp	r3, #1
 80012f4:	d10c      	bne.n	8001310 <USART_IRQConfig+0x30>
	{
		NVIC_ISER->IER[IRQNumber / 32] = (1 << (IRQNumber % 32));
 80012f6:	79fb      	ldrb	r3, [r7, #7]
 80012f8:	f003 031f 	and.w	r3, r3, #31
 80012fc:	2201      	movs	r2, #1
 80012fe:	fa02 f103 	lsl.w	r1, r2, r3
 8001302:	4a0d      	ldr	r2, [pc, #52]	; (8001338 <USART_IRQConfig+0x58>)
 8001304:	79fb      	ldrb	r3, [r7, #7]
 8001306:	095b      	lsrs	r3, r3, #5
 8001308:	b2db      	uxtb	r3, r3
 800130a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	}
	else if (EnOrDi == DISABLE)
	{
		NVIC_ICER->IER[IRQNumber / 32] = (1 << (IRQNumber % 32));
	}
}
 800130e:	e00e      	b.n	800132e <USART_IRQConfig+0x4e>
	else if (EnOrDi == DISABLE)
 8001310:	79bb      	ldrb	r3, [r7, #6]
 8001312:	2b00      	cmp	r3, #0
 8001314:	d10b      	bne.n	800132e <USART_IRQConfig+0x4e>
		NVIC_ICER->IER[IRQNumber / 32] = (1 << (IRQNumber % 32));
 8001316:	79fb      	ldrb	r3, [r7, #7]
 8001318:	f003 031f 	and.w	r3, r3, #31
 800131c:	2201      	movs	r2, #1
 800131e:	fa02 f103 	lsl.w	r1, r2, r3
 8001322:	4a06      	ldr	r2, [pc, #24]	; (800133c <USART_IRQConfig+0x5c>)
 8001324:	79fb      	ldrb	r3, [r7, #7]
 8001326:	095b      	lsrs	r3, r3, #5
 8001328:	b2db      	uxtb	r3, r3
 800132a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 800132e:	bf00      	nop
 8001330:	370c      	adds	r7, #12
 8001332:	46bd      	mov	sp, r7
 8001334:	bc80      	pop	{r7}
 8001336:	4770      	bx	lr
 8001338:	e000e100 	.word	0xe000e100
 800133c:	e000e180 	.word	0xe000e180

08001340 <USART_EV_IRQHandling>:

/*
 *
 */
void USART_EV_IRQHandling(USART_Handle_t *pUSARTxHandle)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b084      	sub	sp, #16
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
	// 1. Check which interrupts have been set(RXNEIE, TCIE, TXEIE, CTSIE)
	uint8_t temp1, temp2, temp3;

	// 2. Is TC interrupt?
	temp1 = pUSARTxHandle->pUSARTx->SR & (1 << 6);
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	b2db      	uxtb	r3, r3
 8001350:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001354:	73fb      	strb	r3, [r7, #15]
	temp2 = pUSARTxHandle->pUSARTx->CR1 & (1 << 6);
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	68db      	ldr	r3, [r3, #12]
 800135c:	b2db      	uxtb	r3, r3
 800135e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001362:	73bb      	strb	r3, [r7, #14]
	if (temp1 && temp2)
 8001364:	7bfb      	ldrb	r3, [r7, #15]
 8001366:	2b00      	cmp	r3, #0
 8001368:	d00e      	beq.n	8001388 <USART_EV_IRQHandling+0x48>
 800136a:	7bbb      	ldrb	r3, [r7, #14]
 800136c:	2b00      	cmp	r3, #0
 800136e:	d00b      	beq.n	8001388 <USART_EV_IRQHandling+0x48>
	{
		// If TXE also raised, TxLen = 0 then this is end of transmission
		if (pUSARTxHandle->TxState == USART_BUSY_TX && pUSARTxHandle->TxLen == 0)
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001376:	2b02      	cmp	r3, #2
 8001378:	d106      	bne.n	8001388 <USART_EV_IRQHandling+0x48>
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	69db      	ldr	r3, [r3, #28]
 800137e:	2b00      	cmp	r3, #0
 8001380:	d102      	bne.n	8001388 <USART_EV_IRQHandling+0x48>
		{
			USART_CloseTx_IT(pUSARTxHandle);
 8001382:	6878      	ldr	r0, [r7, #4]
 8001384:	f000 f976 	bl	8001674 <USART_CloseTx_IT>
		}
	}

	// 3. Is TXE interrupt?
	temp1 = pUSARTxHandle->pUSARTx->SR & (1 << 7);
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	b2db      	uxtb	r3, r3
 8001390:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8001394:	73fb      	strb	r3, [r7, #15]
	temp2 = pUSARTxHandle->pUSARTx->CR1 & (1 << 7);
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	68db      	ldr	r3, [r3, #12]
 800139c:	b2db      	uxtb	r3, r3
 800139e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80013a2:	73bb      	strb	r3, [r7, #14]
	if (temp1 && temp2)
 80013a4:	7bfb      	ldrb	r3, [r7, #15]
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d00a      	beq.n	80013c0 <USART_EV_IRQHandling+0x80>
 80013aa:	7bbb      	ldrb	r3, [r7, #14]
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d007      	beq.n	80013c0 <USART_EV_IRQHandling+0x80>
	{
		if (pUSARTxHandle->TxState == USART_BUSY_TX)
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80013b6:	2b02      	cmp	r3, #2
 80013b8:	d102      	bne.n	80013c0 <USART_EV_IRQHandling+0x80>
		{
			USART_Write_IT_Handle(pUSARTxHandle);
 80013ba:	6878      	ldr	r0, [r7, #4]
 80013bc:	f000 f8d3 	bl	8001566 <USART_Write_IT_Handle>
		}
	}

	// 4. Is RXNE interrupt?
	temp1 = pUSARTxHandle->pUSARTx->SR & (1 << 5);
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	b2db      	uxtb	r3, r3
 80013c8:	f003 0320 	and.w	r3, r3, #32
 80013cc:	73fb      	strb	r3, [r7, #15]
	temp2 = pUSARTxHandle->pUSARTx->CR1 & (1 << 5);
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	68db      	ldr	r3, [r3, #12]
 80013d4:	b2db      	uxtb	r3, r3
 80013d6:	f003 0320 	and.w	r3, r3, #32
 80013da:	73bb      	strb	r3, [r7, #14]
	if (temp1 && temp2)
 80013dc:	7bfb      	ldrb	r3, [r7, #15]
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d00a      	beq.n	80013f8 <USART_EV_IRQHandling+0xb8>
 80013e2:	7bbb      	ldrb	r3, [r7, #14]
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d007      	beq.n	80013f8 <USART_EV_IRQHandling+0xb8>
	{
		if (pUSARTxHandle->RxState == USART_BUSY_RX)
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80013ee:	2b01      	cmp	r3, #1
 80013f0:	d102      	bne.n	80013f8 <USART_EV_IRQHandling+0xb8>
		{
			USART_Read_IT_Handle(pUSARTxHandle);
 80013f2:	6878      	ldr	r0, [r7, #4]
 80013f4:	f000 f8f1 	bl	80015da <USART_Read_IT_Handle>
		}
	}

	// 6. Is CTS interrupt?
	temp1 = pUSARTxHandle->pUSARTx->SR & (1 << 9);
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	2300      	movs	r3, #0
 8001400:	73fb      	strb	r3, [r7, #15]
	temp2 = pUSARTxHandle->pUSARTx->CR3 & (1 << 9);
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	695b      	ldr	r3, [r3, #20]
 8001408:	2300      	movs	r3, #0
 800140a:	73bb      	strb	r3, [r7, #14]
	temp3 = pUSARTxHandle->pUSARTx->CR3 & (1 << 10);
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	695b      	ldr	r3, [r3, #20]
 8001412:	2300      	movs	r3, #0
 8001414:	737b      	strb	r3, [r7, #13]
	{
		// TODO
	}

	// 7. Is ORE error interrupt
	temp1 = pUSARTxHandle->pUSARTx->SR & (1 << 3);
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	b2db      	uxtb	r3, r3
 800141e:	f003 0308 	and.w	r3, r3, #8
 8001422:	73fb      	strb	r3, [r7, #15]
	temp2 = pUSARTxHandle->pUSARTx->CR3 & (1 << 9);
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	695b      	ldr	r3, [r3, #20]
 800142a:	2300      	movs	r3, #0
 800142c:	73bb      	strb	r3, [r7, #14]
	if (temp1 && temp2)
 800142e:	7bfb      	ldrb	r3, [r7, #15]
 8001430:	2b00      	cmp	r3, #0
 8001432:	d010      	beq.n	8001456 <USART_EV_IRQHandling+0x116>
 8001434:	7bbb      	ldrb	r3, [r7, #14]
 8001436:	2b00      	cmp	r3, #0
 8001438:	d00d      	beq.n	8001456 <USART_EV_IRQHandling+0x116>
	{
		// If RXNE also set, a data bit has been lost
		if (pUSARTxHandle->pUSARTx->SR & (1 << 5))
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	f003 0320 	and.w	r3, r3, #32
 8001444:	2b00      	cmp	r3, #0
 8001446:	d006      	beq.n	8001456 <USART_EV_IRQHandling+0x116>
		{
			// Close reception and send callback
			USART_CloseRx_IT(pUSARTxHandle);
 8001448:	6878      	ldr	r0, [r7, #4]
 800144a:	f000 f939 	bl	80016c0 <USART_CloseRx_IT>
			USART_ApplicationCallbackEvent(pUSARTxHandle, USART_ORE_ERROR);
 800144e:	2104      	movs	r1, #4
 8001450:	6878      	ldr	r0, [r7, #4]
 8001452:	f000 facd 	bl	80019f0 <USART_ApplicationCallbackEvent>
		}
	}
}
 8001456:	bf00      	nop
 8001458:	3710      	adds	r7, #16
 800145a:	46bd      	mov	sp, r7
 800145c:	bd80      	pop	{r7, pc}

0800145e <USART_Write_IT>:
 * 				uint8_t* pTxBuffer - pointer to data to be sent
 * 				uint32_t len - number of 8-bit data packets to be sent
 *
 */
uint8_t USART_Write_IT(USART_Handle_t *pUSARTxHandle, uint8_t *pTxBuffer, uint8_t len)
{
 800145e:	b480      	push	{r7}
 8001460:	b087      	sub	sp, #28
 8001462:	af00      	add	r7, sp, #0
 8001464:	60f8      	str	r0, [r7, #12]
 8001466:	60b9      	str	r1, [r7, #8]
 8001468:	4613      	mov	r3, r2
 800146a:	71fb      	strb	r3, [r7, #7]
	uint8_t state = pUSARTxHandle->TxState;
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001472:	75fb      	strb	r3, [r7, #23]

	if (state != USART_BUSY_TX)
 8001474:	7dfb      	ldrb	r3, [r7, #23]
 8001476:	2b02      	cmp	r3, #2
 8001478:	d041      	beq.n	80014fe <USART_Write_IT+0xa0>
	{
		// 1. Set to busy in Tx
		pUSARTxHandle->TxState = USART_BUSY_TX;
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	2202      	movs	r2, #2
 800147e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

		// 2. Store parameters in handle
		pUSARTxHandle->TxLen = len;
 8001482:	79fa      	ldrb	r2, [r7, #7]
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	61da      	str	r2, [r3, #28]
		pUSARTxHandle->pTxBuffer = pTxBuffer;
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	68ba      	ldr	r2, [r7, #8]
 800148c:	615a      	str	r2, [r3, #20]

		// 3. CTS interrupt only if in HW flow control
		if (pUSARTxHandle->USART_Config.USART_HWFlowCtrl == USART_CTS_ON || pUSARTxHandle->USART_Config.USART_HWFlowCtrl == USART_RTS_CTS_ON)
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	7bdb      	ldrb	r3, [r3, #15]
 8001492:	2b02      	cmp	r3, #2
 8001494:	d003      	beq.n	800149e <USART_Write_IT+0x40>
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	7bdb      	ldrb	r3, [r3, #15]
 800149a:	2b03      	cmp	r3, #3
 800149c:	d107      	bne.n	80014ae <USART_Write_IT+0x50>
		{
			pUSARTxHandle->pUSARTx->CR3 |= (1 << 10);
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	695a      	ldr	r2, [r3, #20]
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80014ac:	615a      	str	r2, [r3, #20]
		}

		// 4. Enable interrupt TXEIE, TCIE, CTSIE
		pUSARTxHandle->pUSARTx->CR1 |= (1 << 7);
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	68da      	ldr	r2, [r3, #12]
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80014bc:	60da      	str	r2, [r3, #12]
		pUSARTxHandle->pUSARTx->CR1 |= (1 << 6);
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	68da      	ldr	r2, [r3, #12]
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80014cc:	60da      	str	r2, [r3, #12]

		// 5. CTSIE only if HW flow control
		if (pUSARTxHandle->USART_Config.USART_HWFlowCtrl == USART_CTS_ON || pUSARTxHandle->USART_Config.USART_HWFlowCtrl == USART_RTS_CTS_ON)
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	7bdb      	ldrb	r3, [r3, #15]
 80014d2:	2b02      	cmp	r3, #2
 80014d4:	d003      	beq.n	80014de <USART_Write_IT+0x80>
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	7bdb      	ldrb	r3, [r3, #15]
 80014da:	2b03      	cmp	r3, #3
 80014dc:	d107      	bne.n	80014ee <USART_Write_IT+0x90>
		{
			pUSARTxHandle->pUSARTx->CR3 |= (1 << 10);
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	695a      	ldr	r2, [r3, #20]
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80014ec:	615a      	str	r2, [r3, #20]
		}

		// 6. Set TE bit to send start
		pUSARTxHandle->pUSARTx->CR1 |= (1 << 3);
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	68da      	ldr	r2, [r3, #12]
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	f042 0208 	orr.w	r2, r2, #8
 80014fc:	60da      	str	r2, [r3, #12]
	}

	return state;
 80014fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8001500:	4618      	mov	r0, r3
 8001502:	371c      	adds	r7, #28
 8001504:	46bd      	mov	sp, r7
 8001506:	bc80      	pop	{r7}
 8001508:	4770      	bx	lr

0800150a <USART_Read_IT>:
 * 				uint8_t* pRxBuffer - pointer where received data will be written
 * 				uint32_t len - number of 8-bit data packets to be read
 *
 */
uint8_t USART_Read_IT(USART_Handle_t *pUSARTxHandle, uint8_t *pRxBuffer, uint8_t len)
{
 800150a:	b480      	push	{r7}
 800150c:	b087      	sub	sp, #28
 800150e:	af00      	add	r7, sp, #0
 8001510:	60f8      	str	r0, [r7, #12]
 8001512:	60b9      	str	r1, [r7, #8]
 8001514:	4613      	mov	r3, r2
 8001516:	71fb      	strb	r3, [r7, #7]
	uint8_t state = pUSARTxHandle->RxState;
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800151e:	75fb      	strb	r3, [r7, #23]

	if (state != USART_BUSY_RX)
 8001520:	7dfb      	ldrb	r3, [r7, #23]
 8001522:	2b01      	cmp	r3, #1
 8001524:	d019      	beq.n	800155a <USART_Read_IT+0x50>
	{
		// 1. Set RE bit to listen for start
		pUSARTxHandle->pUSARTx->CR1 |= (1 << 2);
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	68da      	ldr	r2, [r3, #12]
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	f042 0204 	orr.w	r2, r2, #4
 8001534:	60da      	str	r2, [r3, #12]

		// 2. Set to busy in Rx
		pUSARTxHandle->RxState = USART_BUSY_RX;
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	2201      	movs	r2, #1
 800153a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

		// 3. Store parameters in handle
		pUSARTxHandle->RxLen = len;
 800153e:	79fa      	ldrb	r2, [r7, #7]
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	621a      	str	r2, [r3, #32]
		pUSARTxHandle->pRxBuffer = pRxBuffer;
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	68ba      	ldr	r2, [r7, #8]
 8001548:	619a      	str	r2, [r3, #24]

		// 4. Enable interrupts for RXNEIE
		pUSARTxHandle->pUSARTx->CR1 |= (1 << 5);
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	68da      	ldr	r2, [r3, #12]
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	f042 0220 	orr.w	r2, r2, #32
 8001558:	60da      	str	r2, [r3, #12]
	}

	return state;
 800155a:	7dfb      	ldrb	r3, [r7, #23]
}
 800155c:	4618      	mov	r0, r3
 800155e:	371c      	adds	r7, #28
 8001560:	46bd      	mov	sp, r7
 8001562:	bc80      	pop	{r7}
 8001564:	4770      	bx	lr

08001566 <USART_Write_IT_Handle>:
 *
 * Params: 		USART_Handle_t *pUSARTxHandle - USART/UART handle
 *
 */
void USART_Write_IT_Handle(USART_Handle_t *pUSARTxHandle)
{
 8001566:	b480      	push	{r7}
 8001568:	b083      	sub	sp, #12
 800156a:	af00      	add	r7, sp, #0
 800156c:	6078      	str	r0, [r7, #4]
	// Is there data to be written
	if (pUSARTxHandle->TxLen > 0)
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	69db      	ldr	r3, [r3, #28]
 8001572:	2b00      	cmp	r3, #0
 8001574:	d02c      	beq.n	80015d0 <USART_Write_IT_Handle+0x6a>
	{
		// Is 9 bit word length?
		if (pUSARTxHandle->USART_Config.USART_WordLen == USART_9BIT_DATA)
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	7b5b      	ldrb	r3, [r3, #13]
 800157a:	2b01      	cmp	r3, #1
 800157c:	d114      	bne.n	80015a8 <USART_Write_IT_Handle+0x42>
		{
			// If parity is disabled, 9 bits of data will be sent - increment buffer accordingly
			if (pUSARTxHandle->USART_Config.USART_ParitySet == USART_PARITY_DISABLE)
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	7b9b      	ldrb	r3, [r3, #14]
 8001582:	2b00      	cmp	r3, #0
 8001584:	d11a      	bne.n	80015bc <USART_Write_IT_Handle+0x56>
			{
				pUSARTxHandle->pUSARTx->DR = (uint16_t)*(pUSARTxHandle->pTxBuffer) & (0x01FF);
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	695b      	ldr	r3, [r3, #20]
 800158a:	781a      	ldrb	r2, [r3, #0]
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	605a      	str	r2, [r3, #4]
				(pUSARTxHandle->pTxBuffer)++;
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	695b      	ldr	r3, [r3, #20]
 8001596:	1c5a      	adds	r2, r3, #1
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	615a      	str	r2, [r3, #20]
				(pUSARTxHandle->TxLen)--;
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	69db      	ldr	r3, [r3, #28]
 80015a0:	1e5a      	subs	r2, r3, #1
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	61da      	str	r2, [r3, #28]
 80015a6:	e009      	b.n	80015bc <USART_Write_IT_Handle+0x56>
			}
		}
		else
		{
			if (pUSARTxHandle->USART_Config.USART_ParitySet == USART_PARITY_DISABLE)
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	7b9b      	ldrb	r3, [r3, #14]
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d105      	bne.n	80015bc <USART_Write_IT_Handle+0x56>
			{
				pUSARTxHandle->pUSARTx->DR = *(pUSARTxHandle->pTxBuffer);
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	695b      	ldr	r3, [r3, #20]
 80015b4:	781a      	ldrb	r2, [r3, #0]
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	605a      	str	r2, [r3, #4]
			}
		}

		(pUSARTxHandle->pTxBuffer)++;
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	695b      	ldr	r3, [r3, #20]
 80015c0:	1c5a      	adds	r2, r3, #1
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	615a      	str	r2, [r3, #20]
		(pUSARTxHandle->TxLen)--;
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	69db      	ldr	r3, [r3, #28]
 80015ca:	1e5a      	subs	r2, r3, #1
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	61da      	str	r2, [r3, #28]
	}
}
 80015d0:	bf00      	nop
 80015d2:	370c      	adds	r7, #12
 80015d4:	46bd      	mov	sp, r7
 80015d6:	bc80      	pop	{r7}
 80015d8:	4770      	bx	lr

080015da <USART_Read_IT_Handle>:
 *
 * Params: 		USART_Handle_t *pUSARTxHandle - USART/UART handle
 *
 */
void USART_Read_IT_Handle(USART_Handle_t *pUSARTxHandle)
{
 80015da:	b580      	push	{r7, lr}
 80015dc:	b082      	sub	sp, #8
 80015de:	af00      	add	r7, sp, #0
 80015e0:	6078      	str	r0, [r7, #4]
	if (pUSARTxHandle->RxLen > 0)
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	6a1b      	ldr	r3, [r3, #32]
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d03d      	beq.n	8001666 <USART_Read_IT_Handle+0x8c>
	{
		// Check if 9-bit or 8-bit data to read
		if (pUSARTxHandle->USART_Config.USART_WordLen == USART_9BIT_DATA )
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	7b5b      	ldrb	r3, [r3, #13]
 80015ee:	2b01      	cmp	r3, #1
 80015f0:	d118      	bne.n	8001624 <USART_Read_IT_Handle+0x4a>
		{
			 if (pUSARTxHandle->USART_Config.USART_ParitySet == USART_PARITY_DISABLE)
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	7b9b      	ldrb	r3, [r3, #14]
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d12a      	bne.n	8001650 <USART_Read_IT_Handle+0x76>
			 {
				 // 9 bits of data sent, so increment buffer once here and again later
				 *((uint16_t*)(pUSARTxHandle->pRxBuffer)) = pUSARTxHandle->pUSARTx->DR & 0x01FF;
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	685b      	ldr	r3, [r3, #4]
 8001600:	b29a      	uxth	r2, r3
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	699b      	ldr	r3, [r3, #24]
 8001606:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800160a:	b292      	uxth	r2, r2
 800160c:	801a      	strh	r2, [r3, #0]
				 (pUSARTxHandle->pRxBuffer)++;
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	699b      	ldr	r3, [r3, #24]
 8001612:	1c5a      	adds	r2, r3, #1
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	619a      	str	r2, [r3, #24]
				 (pUSARTxHandle->RxLen)--;
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	6a1b      	ldr	r3, [r3, #32]
 800161c:	1e5a      	subs	r2, r3, #1
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	621a      	str	r2, [r3, #32]
 8001622:	e015      	b.n	8001650 <USART_Read_IT_Handle+0x76>
			 }
		}
		else
		{
			 if (pUSARTxHandle->USART_Config.USART_ParitySet == USART_PARITY_DISABLE)
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	7b9b      	ldrb	r3, [r3, #14]
 8001628:	2b00      	cmp	r3, #0
 800162a:	d107      	bne.n	800163c <USART_Read_IT_Handle+0x62>
			 {
				 *(pUSARTxHandle->pRxBuffer) = pUSARTxHandle->pUSARTx->DR & 0x00FF;
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	685a      	ldr	r2, [r3, #4]
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	699b      	ldr	r3, [r3, #24]
 8001636:	b2d2      	uxtb	r2, r2
 8001638:	701a      	strb	r2, [r3, #0]
 800163a:	e009      	b.n	8001650 <USART_Read_IT_Handle+0x76>
			 }
			 else
			 {
				 // If 8 bit data with parity, ignore the MSB
				 *(pUSARTxHandle->pRxBuffer) = pUSARTxHandle->pUSARTx->DR & 0x007F;
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	685b      	ldr	r3, [r3, #4]
 8001642:	b2da      	uxtb	r2, r3
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	699b      	ldr	r3, [r3, #24]
 8001648:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800164c:	b2d2      	uxtb	r2, r2
 800164e:	701a      	strb	r2, [r3, #0]
			 }
		}

		 (pUSARTxHandle->pRxBuffer)++;
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	699b      	ldr	r3, [r3, #24]
 8001654:	1c5a      	adds	r2, r3, #1
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	619a      	str	r2, [r3, #24]
		 (pUSARTxHandle->RxLen)--;
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	6a1b      	ldr	r3, [r3, #32]
 800165e:	1e5a      	subs	r2, r3, #1
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	621a      	str	r2, [r3, #32]
	else
	{
		// If length 0, close Rx and fire callback
		USART_CloseRx_IT(pUSARTxHandle);
	}
}
 8001664:	e002      	b.n	800166c <USART_Read_IT_Handle+0x92>
		USART_CloseRx_IT(pUSARTxHandle);
 8001666:	6878      	ldr	r0, [r7, #4]
 8001668:	f000 f82a 	bl	80016c0 <USART_CloseRx_IT>
}
 800166c:	bf00      	nop
 800166e:	3708      	adds	r7, #8
 8001670:	46bd      	mov	sp, r7
 8001672:	bd80      	pop	{r7, pc}

08001674 <USART_CloseTx_IT>:


void USART_CloseTx_IT(USART_Handle_t *pUSARTxHandle)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b082      	sub	sp, #8
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
	// 1. Reset TXEIE, TCEIE, CTSIE interrupts
	pUSARTxHandle->pUSARTx->CR1 &= ~(0x3 << 6);
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	68da      	ldr	r2, [r3, #12]
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800168a:	60da      	str	r2, [r3, #12]
	pUSARTxHandle->pUSARTx->CR3 &= ~(1 << 10);
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	695a      	ldr	r2, [r3, #20]
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800169a:	615a      	str	r2, [r3, #20]

	// 2. Reset handle fields
	pUSARTxHandle->TxLen = 0;
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	2200      	movs	r2, #0
 80016a0:	61da      	str	r2, [r3, #28]
	pUSARTxHandle->pTxBuffer = NULL;
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	2200      	movs	r2, #0
 80016a6:	615a      	str	r2, [r3, #20]
	pUSARTxHandle->TxState = USART_RDY;
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	2200      	movs	r2, #0
 80016ac:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	// 3. Send callback
	USART_ApplicationCallbackEvent(pUSARTxHandle, USART_TX_CMPLT);
 80016b0:	2100      	movs	r1, #0
 80016b2:	6878      	ldr	r0, [r7, #4]
 80016b4:	f000 f99c 	bl	80019f0 <USART_ApplicationCallbackEvent>
}
 80016b8:	bf00      	nop
 80016ba:	3708      	adds	r7, #8
 80016bc:	46bd      	mov	sp, r7
 80016be:	bd80      	pop	{r7, pc}

080016c0 <USART_CloseRx_IT>:


void USART_CloseRx_IT(USART_Handle_t *pUSARTxHandle)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b082      	sub	sp, #8
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
	// 1. Reset interrupts
	pUSARTxHandle->pUSARTx->CR1 &= ~(1 << 5);
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	68da      	ldr	r2, [r3, #12]
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	f022 0220 	bic.w	r2, r2, #32
 80016d6:	60da      	str	r2, [r3, #12]

	// 2. Reset handle fields
	pUSARTxHandle->RxLen = 0;
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	2200      	movs	r2, #0
 80016dc:	621a      	str	r2, [r3, #32]
	pUSARTxHandle->pRxBuffer = NULL;
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	2200      	movs	r2, #0
 80016e2:	619a      	str	r2, [r3, #24]
	pUSARTxHandle->RxState = USART_RDY;
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	2200      	movs	r2, #0
 80016e8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

	// 4. Send callback
	USART_ApplicationCallbackEvent(pUSARTxHandle, USART_RX_CMPLT);
 80016ec:	2101      	movs	r1, #1
 80016ee:	6878      	ldr	r0, [r7, #4]
 80016f0:	f000 f97e 	bl	80019f0 <USART_ApplicationCallbackEvent>
}
 80016f4:	bf00      	nop
 80016f6:	3708      	adds	r7, #8
 80016f8:	46bd      	mov	sp, r7
 80016fa:	bd80      	pop	{r7, pc}

080016fc <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b084      	sub	sp, #16
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001704:	4b11      	ldr	r3, [pc, #68]	; (800174c <_sbrk+0x50>)
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	2b00      	cmp	r3, #0
 800170a:	d102      	bne.n	8001712 <_sbrk+0x16>
		heap_end = &end;
 800170c:	4b0f      	ldr	r3, [pc, #60]	; (800174c <_sbrk+0x50>)
 800170e:	4a10      	ldr	r2, [pc, #64]	; (8001750 <_sbrk+0x54>)
 8001710:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8001712:	4b0e      	ldr	r3, [pc, #56]	; (800174c <_sbrk+0x50>)
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001718:	4b0c      	ldr	r3, [pc, #48]	; (800174c <_sbrk+0x50>)
 800171a:	681a      	ldr	r2, [r3, #0]
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	4413      	add	r3, r2
 8001720:	466a      	mov	r2, sp
 8001722:	4293      	cmp	r3, r2
 8001724:	d907      	bls.n	8001736 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8001726:	f000 fc49 	bl	8001fbc <__errno>
 800172a:	4602      	mov	r2, r0
 800172c:	230c      	movs	r3, #12
 800172e:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8001730:	f04f 33ff 	mov.w	r3, #4294967295
 8001734:	e006      	b.n	8001744 <_sbrk+0x48>
	}

	heap_end += incr;
 8001736:	4b05      	ldr	r3, [pc, #20]	; (800174c <_sbrk+0x50>)
 8001738:	681a      	ldr	r2, [r3, #0]
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	4413      	add	r3, r2
 800173e:	4a03      	ldr	r2, [pc, #12]	; (800174c <_sbrk+0x50>)
 8001740:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8001742:	68fb      	ldr	r3, [r7, #12]
}
 8001744:	4618      	mov	r0, r3
 8001746:	3710      	adds	r7, #16
 8001748:	46bd      	mov	sp, r7
 800174a:	bd80      	pop	{r7, pc}
 800174c:	200000a0 	.word	0x200000a0
 8001750:	20000188 	.word	0x20000188

08001754 <delay>:
// Status variable for feeback from call back function
uint8_t status = RESET;


void delay(uint32_t multiplier)
{
 8001754:	b480      	push	{r7}
 8001756:	b085      	sub	sp, #20
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
	uint32_t timer = 0;
 800175c:	2300      	movs	r3, #0
 800175e:	60fb      	str	r3, [r7, #12]

	// 16 MHz  internal CLK so multiplier = 1 gives 1 ms delay (4 clock cycles per computation)
	while (timer < (multiplier * 1000))
 8001760:	e002      	b.n	8001768 <delay+0x14>
	{
		timer++;
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	3301      	adds	r3, #1
 8001766:	60fb      	str	r3, [r7, #12]
	while (timer < (multiplier * 1000))
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800176e:	fb02 f303 	mul.w	r3, r2, r3
 8001772:	68fa      	ldr	r2, [r7, #12]
 8001774:	429a      	cmp	r2, r3
 8001776:	d3f4      	bcc.n	8001762 <delay+0xe>
	}
}
 8001778:	bf00      	nop
 800177a:	3714      	adds	r7, #20
 800177c:	46bd      	mov	sp, r7
 800177e:	bc80      	pop	{r7}
 8001780:	4770      	bx	lr
	...

08001784 <GPIO_USART_Config>:

/*
 * Set GPIO pins PA9 - PA12 as USART1 functions
 */
void GPIO_USART_Config()
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b084      	sub	sp, #16
 8001788:	af00      	add	r7, sp, #0
	GPIO_Handle_t Gpio_usartHandle;
	Gpio_usartHandle.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_AF;
 800178a:	2302      	movs	r3, #2
 800178c:	727b      	strb	r3, [r7, #9]
	Gpio_usartHandle.GPIO_PinConfig.GPIO_PuPdCtrl = GPIO_PUPD_PU;
 800178e:	2301      	movs	r3, #1
 8001790:	72fb      	strb	r3, [r7, #11]
	Gpio_usartHandle.GPIO_PinConfig.GPIO_OpType = GPIO_OTYPE_PUPL;
 8001792:	2300      	movs	r3, #0
 8001794:	733b      	strb	r3, [r7, #12]
	Gpio_usartHandle.GPIO_PinConfig.GPIO_PinSpeed = GPIO_HIGH_SPEED;
 8001796:	2303      	movs	r3, #3
 8001798:	72bb      	strb	r3, [r7, #10]
	Gpio_usartHandle.GPIO_PinConfig.GPIO_AfMode = GPIO_AF_7;
 800179a:	2307      	movs	r3, #7
 800179c:	737b      	strb	r3, [r7, #13]
	Gpio_usartHandle.pGPIOx = GPIOA;
 800179e:	4b0f      	ldr	r3, [pc, #60]	; (80017dc <GPIO_USART_Config+0x58>)
 80017a0:	607b      	str	r3, [r7, #4]

	// Set PA9 as USART1 Tx
	Gpio_usartHandle.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NUM_9;
 80017a2:	2309      	movs	r3, #9
 80017a4:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&Gpio_usartHandle);
 80017a6:	1d3b      	adds	r3, r7, #4
 80017a8:	4618      	mov	r0, r3
 80017aa:	f7ff f921 	bl	80009f0 <GPIO_Init>

	// Set PA10 as USART1 Rx
	Gpio_usartHandle.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NUM_10;
 80017ae:	230a      	movs	r3, #10
 80017b0:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&Gpio_usartHandle);
 80017b2:	1d3b      	adds	r3, r7, #4
 80017b4:	4618      	mov	r0, r3
 80017b6:	f7ff f91b 	bl	80009f0 <GPIO_Init>

	// Set PA11 as USART1 CTS
	Gpio_usartHandle.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NUM_11;
 80017ba:	230b      	movs	r3, #11
 80017bc:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&Gpio_usartHandle);
 80017be:	1d3b      	adds	r3, r7, #4
 80017c0:	4618      	mov	r0, r3
 80017c2:	f7ff f915 	bl	80009f0 <GPIO_Init>

	// Set PA12 as USART1 RTS
	Gpio_usartHandle.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NUM_12;
 80017c6:	230c      	movs	r3, #12
 80017c8:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&Gpio_usartHandle);
 80017ca:	1d3b      	adds	r3, r7, #4
 80017cc:	4618      	mov	r0, r3
 80017ce:	f7ff f90f 	bl	80009f0 <GPIO_Init>
}
 80017d2:	bf00      	nop
 80017d4:	3710      	adds	r7, #16
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bd80      	pop	{r7, pc}
 80017da:	bf00      	nop
 80017dc:	40020000 	.word	0x40020000

080017e0 <USART1_Config>:

/*
 * Configure USART1 in Tx
 */
void USART1_Config(USART_Handle_t *pUsart_Handle)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b082      	sub	sp, #8
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
	// Handle globally defined
	pUsart_Handle->USART_Config.USART_Mode = USART_RX_TX;
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	2202      	movs	r2, #2
 80017ec:	711a      	strb	r2, [r3, #4]
	pUsart_Handle->USART_Config.USART_BaudRate = USART_BAUD_115200;
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80017f4:	609a      	str	r2, [r3, #8]
	pUsart_Handle->USART_Config.USART_ParitySet = USART_PARITY_DISABLE;
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	2200      	movs	r2, #0
 80017fa:	739a      	strb	r2, [r3, #14]
	pUsart_Handle->USART_Config.USART_StopBits = USART_1_STOP;
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	2201      	movs	r2, #1
 8001800:	731a      	strb	r2, [r3, #12]
	pUsart_Handle->USART_Config.USART_WordLen = USART_8BIT_DATA;
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	2200      	movs	r2, #0
 8001806:	735a      	strb	r2, [r3, #13]
	pUsart_Handle->USART_Config.USART_Oversampling = USART_OVERSMPL_8;
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	2201      	movs	r2, #1
 800180c:	741a      	strb	r2, [r3, #16]
	pUsart_Handle->USART_Config.USART_HWFlowCtrl = USART_HWCTRL_NONE;
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	2200      	movs	r2, #0
 8001812:	73da      	strb	r2, [r3, #15]
	pUsart_Handle->pUSARTx = USART1;
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	4a04      	ldr	r2, [pc, #16]	; (8001828 <USART1_Config+0x48>)
 8001818:	601a      	str	r2, [r3, #0]

	USART_Init(pUsart_Handle);
 800181a:	6878      	ldr	r0, [r7, #4]
 800181c:	f7ff fc7c 	bl	8001118 <USART_Init>
}
 8001820:	bf00      	nop
 8001822:	3708      	adds	r7, #8
 8001824:	46bd      	mov	sp, r7
 8001826:	bd80      	pop	{r7, pc}
 8001828:	40011000 	.word	0x40011000

0800182c <GPIO_OnBoardLedBtn_Set>:

/*
 * Set on board button as input (PC13) and LED driving GPIO pin as output (PA5)
 */
void GPIO_OnBoardLedBtn_Set()
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b086      	sub	sp, #24
 8001830:	af00      	add	r7, sp, #0
	GPIO_Handle_t GpioBtn, GpioLed;
	GPIOA_PCLK_EN();
 8001832:	4b17      	ldr	r3, [pc, #92]	; (8001890 <GPIO_OnBoardLedBtn_Set+0x64>)
 8001834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001836:	4a16      	ldr	r2, [pc, #88]	; (8001890 <GPIO_OnBoardLedBtn_Set+0x64>)
 8001838:	f043 0301 	orr.w	r3, r3, #1
 800183c:	6313      	str	r3, [r2, #48]	; 0x30
	GPIOC_PCLK_EN();
 800183e:	4b14      	ldr	r3, [pc, #80]	; (8001890 <GPIO_OnBoardLedBtn_Set+0x64>)
 8001840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001842:	4a13      	ldr	r2, [pc, #76]	; (8001890 <GPIO_OnBoardLedBtn_Set+0x64>)
 8001844:	f043 0304 	orr.w	r3, r3, #4
 8001848:	6313      	str	r3, [r2, #48]	; 0x30

	// GPIO input from on-board button
	GpioBtn.pGPIOx = GPIOC;
 800184a:	4b12      	ldr	r3, [pc, #72]	; (8001894 <GPIO_OnBoardLedBtn_Set+0x68>)
 800184c:	60fb      	str	r3, [r7, #12]
	GpioBtn.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NUM_13;
 800184e:	230d      	movs	r3, #13
 8001850:	743b      	strb	r3, [r7, #16]
	GpioBtn.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_IN;
 8001852:	2300      	movs	r3, #0
 8001854:	747b      	strb	r3, [r7, #17]
	GpioBtn.GPIO_PinConfig.GPIO_PinSpeed = GPIO_HIGH_SPEED;
 8001856:	2303      	movs	r3, #3
 8001858:	74bb      	strb	r3, [r7, #18]
	GpioBtn.GPIO_PinConfig.GPIO_PuPdCtrl = GPIO_PUPD_NONE;
 800185a:	2300      	movs	r3, #0
 800185c:	74fb      	strb	r3, [r7, #19]

	// GPIO output to on-board LED
	GpioLed.pGPIOx = GPIOA;
 800185e:	4b0e      	ldr	r3, [pc, #56]	; (8001898 <GPIO_OnBoardLedBtn_Set+0x6c>)
 8001860:	603b      	str	r3, [r7, #0]
	GpioLed.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NUM_5;
 8001862:	2305      	movs	r3, #5
 8001864:	713b      	strb	r3, [r7, #4]
	GpioLed.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_OUT;
 8001866:	2301      	movs	r3, #1
 8001868:	717b      	strb	r3, [r7, #5]
	GpioLed.GPIO_PinConfig.GPIO_OpType = GPIO_OTYPE_PUPL;
 800186a:	2300      	movs	r3, #0
 800186c:	723b      	strb	r3, [r7, #8]
	GpioLed.GPIO_PinConfig.GPIO_PinSpeed = GPIO_HIGH_SPEED;
 800186e:	2303      	movs	r3, #3
 8001870:	71bb      	strb	r3, [r7, #6]
	GpioLed.GPIO_PinConfig.GPIO_PuPdCtrl = GPIO_PUPD_NONE;
 8001872:	2300      	movs	r3, #0
 8001874:	71fb      	strb	r3, [r7, #7]

	GPIO_Init(&GpioBtn);
 8001876:	f107 030c 	add.w	r3, r7, #12
 800187a:	4618      	mov	r0, r3
 800187c:	f7ff f8b8 	bl	80009f0 <GPIO_Init>
	GPIO_Init(&GpioLed);
 8001880:	463b      	mov	r3, r7
 8001882:	4618      	mov	r0, r3
 8001884:	f7ff f8b4 	bl	80009f0 <GPIO_Init>
}
 8001888:	bf00      	nop
 800188a:	3718      	adds	r7, #24
 800188c:	46bd      	mov	sp, r7
 800188e:	bd80      	pop	{r7, pc}
 8001890:	40023800 	.word	0x40023800
 8001894:	40020800 	.word	0x40020800
 8001898:	40020000 	.word	0x40020000

0800189c <USART1_IRQHandler>:

void USART1_IRQHandler()
{
 800189c:	b580      	push	{r7, lr}
 800189e:	af00      	add	r7, sp, #0
	USART_EV_IRQHandling(&Usart1_Handle);
 80018a0:	4802      	ldr	r0, [pc, #8]	; (80018ac <USART1_IRQHandler+0x10>)
 80018a2:	f7ff fd4d 	bl	8001340 <USART_EV_IRQHandling>
}
 80018a6:	bf00      	nop
 80018a8:	bd80      	pop	{r7, pc}
 80018aa:	bf00      	nop
 80018ac:	2000015c 	.word	0x2000015c

080018b0 <main>:


int main(void)
{
 80018b0:	b590      	push	{r4, r7, lr}
 80018b2:	b0e7      	sub	sp, #412	; 0x19c
 80018b4:	af00      	add	r7, sp, #0
	// Enable semi-hosting
	initialise_monitor_handles();
 80018b6:	f000 fb07 	bl	8001ec8 <initialise_monitor_handles>

	char msg[3][100] = {"Eyy you need some milk?\n", "Milk is good with bread\n", "Put PB&J on that break tho\n"};
 80018ba:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80018be:	4a45      	ldr	r2, [pc, #276]	; (80019d4 <main+0x124>)
 80018c0:	4618      	mov	r0, r3
 80018c2:	4611      	mov	r1, r2
 80018c4:	f44f 7396 	mov.w	r3, #300	; 0x12c
 80018c8:	461a      	mov	r2, r3
 80018ca:	f000 fc6b 	bl	80021a4 <memcpy>
	char response[100];
	uint8_t count = 0;
 80018ce:	2300      	movs	r3, #0
 80018d0:	f887 3197 	strb.w	r3, [r7, #407]	; 0x197

	// 1. Set GPIO on-board button and LED GPIO pins for feedback
	GPIO_OnBoardLedBtn_Set();
 80018d4:	f7ff ffaa 	bl	800182c <GPIO_OnBoardLedBtn_Set>

	// 2. Set GPIOA pins PA9 - PA12 in AF7 for USART1 function
	GPIO_USART_Config();
 80018d8:	f7ff ff54 	bl	8001784 <GPIO_USART_Config>

	// 3. Configure USART1 in Tx mode, no parity bit, 8 bit data, over sampling with 8
	USART1_Config(&Usart1_Handle);
 80018dc:	483e      	ldr	r0, [pc, #248]	; (80019d8 <main+0x128>)
 80018de:	f7ff ff7f 	bl	80017e0 <USART1_Config>

	// 4. Set up interrupts in NVIC for USART1
	USART_IRQConfig(IRQ_POS_USART1, ENABLE);
 80018e2:	2101      	movs	r1, #1
 80018e4:	2025      	movs	r0, #37	; 0x25
 80018e6:	f7ff fcfb 	bl	80012e0 <USART_IRQConfig>

	while(1)
	{
		count = count % 3;
 80018ea:	f897 2197 	ldrb.w	r2, [r7, #407]	; 0x197
 80018ee:	4b3b      	ldr	r3, [pc, #236]	; (80019dc <main+0x12c>)
 80018f0:	fba3 1302 	umull	r1, r3, r3, r2
 80018f4:	0859      	lsrs	r1, r3, #1
 80018f6:	460b      	mov	r3, r1
 80018f8:	005b      	lsls	r3, r3, #1
 80018fa:	440b      	add	r3, r1
 80018fc:	1ad3      	subs	r3, r2, r3
 80018fe:	f887 3197 	strb.w	r3, [r7, #407]	; 0x197

		// 4. Wait till button press, turn on LED for visual feedback
		while(GPIO_ReadFromInputPin(GPIOC, GPIO_PIN_NUM_13));
 8001902:	bf00      	nop
 8001904:	210d      	movs	r1, #13
 8001906:	4836      	ldr	r0, [pc, #216]	; (80019e0 <main+0x130>)
 8001908:	f7ff f9c8 	bl	8000c9c <GPIO_ReadFromInputPin>
 800190c:	4603      	mov	r3, r0
 800190e:	2b00      	cmp	r3, #0
 8001910:	d1f8      	bne.n	8001904 <main+0x54>
		GPIO_ToggleOutputPin(GPIOA, GPIO_PIN_NUM_5);
 8001912:	2105      	movs	r1, #5
 8001914:	4833      	ldr	r0, [pc, #204]	; (80019e4 <main+0x134>)
 8001916:	f7ff f9d6 	bl	8000cc6 <GPIO_ToggleOutputPin>
		delay(200);
 800191a:	20c8      	movs	r0, #200	; 0xc8
 800191c:	f7ff ff1a 	bl	8001754 <delay>

		// 6. Enable read to read back identical message when Arduino sends
		while(USART_Read_IT(&Usart1_Handle, (uint8_t*)response, strlen(msg[count])) != USART_RDY);
 8001920:	bf00      	nop
 8001922:	f897 3197 	ldrb.w	r3, [r7, #407]	; 0x197
 8001926:	f107 0268 	add.w	r2, r7, #104	; 0x68
 800192a:	2164      	movs	r1, #100	; 0x64
 800192c:	fb01 f303 	mul.w	r3, r1, r3
 8001930:	4413      	add	r3, r2
 8001932:	4618      	mov	r0, r3
 8001934:	f7fe fc6c 	bl	8000210 <strlen>
 8001938:	4603      	mov	r3, r0
 800193a:	b2da      	uxtb	r2, r3
 800193c:	1d3b      	adds	r3, r7, #4
 800193e:	4619      	mov	r1, r3
 8001940:	4825      	ldr	r0, [pc, #148]	; (80019d8 <main+0x128>)
 8001942:	f7ff fde2 	bl	800150a <USART_Read_IT>
 8001946:	4603      	mov	r3, r0
 8001948:	2b00      	cmp	r3, #0
 800194a:	d1ea      	bne.n	8001922 <main+0x72>

		// 5. Send data via USART interrupt
		while(USART_Write_IT(&Usart1_Handle, (uint8_t*)msg[count], strlen(msg[count])) != USART_RDY);
 800194c:	bf00      	nop
 800194e:	f897 3197 	ldrb.w	r3, [r7, #407]	; 0x197
 8001952:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8001956:	2164      	movs	r1, #100	; 0x64
 8001958:	fb01 f303 	mul.w	r3, r1, r3
 800195c:	18d4      	adds	r4, r2, r3
 800195e:	f897 3197 	ldrb.w	r3, [r7, #407]	; 0x197
 8001962:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8001966:	2164      	movs	r1, #100	; 0x64
 8001968:	fb01 f303 	mul.w	r3, r1, r3
 800196c:	4413      	add	r3, r2
 800196e:	4618      	mov	r0, r3
 8001970:	f7fe fc4e 	bl	8000210 <strlen>
 8001974:	4603      	mov	r3, r0
 8001976:	b2db      	uxtb	r3, r3
 8001978:	461a      	mov	r2, r3
 800197a:	4621      	mov	r1, r4
 800197c:	4816      	ldr	r0, [pc, #88]	; (80019d8 <main+0x128>)
 800197e:	f7ff fd6e 	bl	800145e <USART_Write_IT>
 8001982:	4603      	mov	r3, r0
 8001984:	2b00      	cmp	r3, #0
 8001986:	d1e2      	bne.n	800194e <main+0x9e>

		// 8. Wait till callback notifies that Rx is done
		while(status != SET);
 8001988:	bf00      	nop
 800198a:	4b17      	ldr	r3, [pc, #92]	; (80019e8 <main+0x138>)
 800198c:	781b      	ldrb	r3, [r3, #0]
 800198e:	2b01      	cmp	r3, #1
 8001990:	d1fb      	bne.n	800198a <main+0xda>
		status = RESET;
 8001992:	4b15      	ldr	r3, [pc, #84]	; (80019e8 <main+0x138>)
 8001994:	2200      	movs	r2, #0
 8001996:	701a      	strb	r2, [r3, #0]
		GPIO_ToggleOutputPin(GPIOA, GPIO_PIN_NUM_5);
 8001998:	2105      	movs	r1, #5
 800199a:	4812      	ldr	r0, [pc, #72]	; (80019e4 <main+0x134>)
 800199c:	f7ff f993 	bl	8000cc6 <GPIO_ToggleOutputPin>

		response[strlen(msg[count])] = '\0';
 80019a0:	f897 3197 	ldrb.w	r3, [r7, #407]	; 0x197
 80019a4:	f107 0268 	add.w	r2, r7, #104	; 0x68
 80019a8:	2164      	movs	r1, #100	; 0x64
 80019aa:	fb01 f303 	mul.w	r3, r1, r3
 80019ae:	4413      	add	r3, r2
 80019b0:	4618      	mov	r0, r3
 80019b2:	f7fe fc2d 	bl	8000210 <strlen>
 80019b6:	4602      	mov	r2, r0
 80019b8:	1d3b      	adds	r3, r7, #4
 80019ba:	2100      	movs	r1, #0
 80019bc:	5499      	strb	r1, [r3, r2]
		printf("Response is: %s\n", response);
 80019be:	1d3b      	adds	r3, r7, #4
 80019c0:	4619      	mov	r1, r3
 80019c2:	480a      	ldr	r0, [pc, #40]	; (80019ec <main+0x13c>)
 80019c4:	f000 fc5c 	bl	8002280 <iprintf>
		count++;
 80019c8:	f897 3197 	ldrb.w	r3, [r7, #407]	; 0x197
 80019cc:	3301      	adds	r3, #1
 80019ce:	f887 3197 	strb.w	r3, [r7, #407]	; 0x197
		count = count % 3;
 80019d2:	e78a      	b.n	80018ea <main+0x3a>
 80019d4:	08002e28 	.word	0x08002e28
 80019d8:	2000015c 	.word	0x2000015c
 80019dc:	aaaaaaab 	.word	0xaaaaaaab
 80019e0:	40020800 	.word	0x40020800
 80019e4:	40020000 	.word	0x40020000
 80019e8:	200000a4 	.word	0x200000a4
 80019ec:	08002e14 	.word	0x08002e14

080019f0 <USART_ApplicationCallbackEvent>:

/*
 * Call back function from interrupt events
 */
void USART_ApplicationCallbackEvent(USART_Handle_t *pUSARTxHandle, uint8_t event)
{
 80019f0:	b480      	push	{r7}
 80019f2:	b083      	sub	sp, #12
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
 80019f8:	460b      	mov	r3, r1
 80019fa:	70fb      	strb	r3, [r7, #3]
	if (event == USART_RX_CMPLT)
 80019fc:	78fb      	ldrb	r3, [r7, #3]
 80019fe:	2b01      	cmp	r3, #1
 8001a00:	d102      	bne.n	8001a08 <USART_ApplicationCallbackEvent+0x18>
	{
		status = SET;
 8001a02:	4b04      	ldr	r3, [pc, #16]	; (8001a14 <USART_ApplicationCallbackEvent+0x24>)
 8001a04:	2201      	movs	r2, #1
 8001a06:	701a      	strb	r2, [r3, #0]
	}
}
 8001a08:	bf00      	nop
 8001a0a:	370c      	adds	r7, #12
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	bc80      	pop	{r7}
 8001a10:	4770      	bx	lr
 8001a12:	bf00      	nop
 8001a14:	200000a4 	.word	0x200000a4

08001a18 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001a18:	480d      	ldr	r0, [pc, #52]	; (8001a50 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001a1a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001a1c:	480d      	ldr	r0, [pc, #52]	; (8001a54 <LoopForever+0x6>)
  ldr r1, =_edata
 8001a1e:	490e      	ldr	r1, [pc, #56]	; (8001a58 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001a20:	4a0e      	ldr	r2, [pc, #56]	; (8001a5c <LoopForever+0xe>)
  movs r3, #0
 8001a22:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a24:	e002      	b.n	8001a2c <LoopCopyDataInit>

08001a26 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a26:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a28:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a2a:	3304      	adds	r3, #4

08001a2c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a2c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a2e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a30:	d3f9      	bcc.n	8001a26 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a32:	4a0b      	ldr	r2, [pc, #44]	; (8001a60 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001a34:	4c0b      	ldr	r4, [pc, #44]	; (8001a64 <LoopForever+0x16>)
  movs r3, #0
 8001a36:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a38:	e001      	b.n	8001a3e <LoopFillZerobss>

08001a3a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a3a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a3c:	3204      	adds	r2, #4

08001a3e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a3e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a40:	d3fb      	bcc.n	8001a3a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001a42:	f3af 8000 	nop.w
/* Call static constructors */
  bl __libc_init_array
 8001a46:	f000 fb89 	bl	800215c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001a4a:	f7ff ff31 	bl	80018b0 <main>

08001a4e <LoopForever>:

LoopForever:
    b LoopForever
 8001a4e:	e7fe      	b.n	8001a4e <LoopForever>
  ldr   r0, =_estack
 8001a50:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001a54:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a58:	20000084 	.word	0x20000084
  ldr r2, =_sidata
 8001a5c:	08003010 	.word	0x08003010
  ldr r2, =_sbss
 8001a60:	20000084 	.word	0x20000084
  ldr r4, =_ebss
 8001a64:	20000188 	.word	0x20000188

08001a68 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001a68:	e7fe      	b.n	8001a68 <ADC_IRQHandler>
	...

08001a6c <findslot>:
 8001a6c:	4b0a      	ldr	r3, [pc, #40]	; (8001a98 <findslot+0x2c>)
 8001a6e:	b510      	push	{r4, lr}
 8001a70:	4604      	mov	r4, r0
 8001a72:	6818      	ldr	r0, [r3, #0]
 8001a74:	b118      	cbz	r0, 8001a7e <findslot+0x12>
 8001a76:	6983      	ldr	r3, [r0, #24]
 8001a78:	b90b      	cbnz	r3, 8001a7e <findslot+0x12>
 8001a7a:	f000 fae5 	bl	8002048 <__sinit>
 8001a7e:	2c13      	cmp	r4, #19
 8001a80:	d807      	bhi.n	8001a92 <findslot+0x26>
 8001a82:	4806      	ldr	r0, [pc, #24]	; (8001a9c <findslot+0x30>)
 8001a84:	f850 3034 	ldr.w	r3, [r0, r4, lsl #3]
 8001a88:	3301      	adds	r3, #1
 8001a8a:	d002      	beq.n	8001a92 <findslot+0x26>
 8001a8c:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 8001a90:	bd10      	pop	{r4, pc}
 8001a92:	2000      	movs	r0, #0
 8001a94:	e7fc      	b.n	8001a90 <findslot+0x24>
 8001a96:	bf00      	nop
 8001a98:	20000020 	.word	0x20000020
 8001a9c:	200000b4 	.word	0x200000b4

08001aa0 <checkerror>:
 8001aa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001aa2:	1c43      	adds	r3, r0, #1
 8001aa4:	4605      	mov	r5, r0
 8001aa6:	d109      	bne.n	8001abc <checkerror+0x1c>
 8001aa8:	f000 fa88 	bl	8001fbc <__errno>
 8001aac:	2413      	movs	r4, #19
 8001aae:	4606      	mov	r6, r0
 8001ab0:	2700      	movs	r7, #0
 8001ab2:	4620      	mov	r0, r4
 8001ab4:	4639      	mov	r1, r7
 8001ab6:	beab      	bkpt	0x00ab
 8001ab8:	4604      	mov	r4, r0
 8001aba:	6034      	str	r4, [r6, #0]
 8001abc:	4628      	mov	r0, r5
 8001abe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08001ac0 <error>:
 8001ac0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001ac2:	4605      	mov	r5, r0
 8001ac4:	f000 fa7a 	bl	8001fbc <__errno>
 8001ac8:	2413      	movs	r4, #19
 8001aca:	4606      	mov	r6, r0
 8001acc:	2700      	movs	r7, #0
 8001ace:	4620      	mov	r0, r4
 8001ad0:	4639      	mov	r1, r7
 8001ad2:	beab      	bkpt	0x00ab
 8001ad4:	4604      	mov	r4, r0
 8001ad6:	6034      	str	r4, [r6, #0]
 8001ad8:	4628      	mov	r0, r5
 8001ada:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08001adc <_swiread>:
 8001adc:	b530      	push	{r4, r5, lr}
 8001ade:	b085      	sub	sp, #20
 8001ae0:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8001ae4:	9203      	str	r2, [sp, #12]
 8001ae6:	2406      	movs	r4, #6
 8001ae8:	ad01      	add	r5, sp, #4
 8001aea:	4620      	mov	r0, r4
 8001aec:	4629      	mov	r1, r5
 8001aee:	beab      	bkpt	0x00ab
 8001af0:	4604      	mov	r4, r0
 8001af2:	4620      	mov	r0, r4
 8001af4:	f7ff ffd4 	bl	8001aa0 <checkerror>
 8001af8:	b005      	add	sp, #20
 8001afa:	bd30      	pop	{r4, r5, pc}

08001afc <_read>:
 8001afc:	b570      	push	{r4, r5, r6, lr}
 8001afe:	460e      	mov	r6, r1
 8001b00:	4615      	mov	r5, r2
 8001b02:	f7ff ffb3 	bl	8001a6c <findslot>
 8001b06:	4604      	mov	r4, r0
 8001b08:	b930      	cbnz	r0, 8001b18 <_read+0x1c>
 8001b0a:	f000 fa57 	bl	8001fbc <__errno>
 8001b0e:	2309      	movs	r3, #9
 8001b10:	6003      	str	r3, [r0, #0]
 8001b12:	f04f 30ff 	mov.w	r0, #4294967295
 8001b16:	bd70      	pop	{r4, r5, r6, pc}
 8001b18:	462a      	mov	r2, r5
 8001b1a:	4631      	mov	r1, r6
 8001b1c:	6800      	ldr	r0, [r0, #0]
 8001b1e:	f7ff ffdd 	bl	8001adc <_swiread>
 8001b22:	1c43      	adds	r3, r0, #1
 8001b24:	bf1f      	itttt	ne
 8001b26:	6863      	ldrne	r3, [r4, #4]
 8001b28:	1a28      	subne	r0, r5, r0
 8001b2a:	181b      	addne	r3, r3, r0
 8001b2c:	6063      	strne	r3, [r4, #4]
 8001b2e:	e7f2      	b.n	8001b16 <_read+0x1a>

08001b30 <_swilseek>:
 8001b30:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001b32:	460c      	mov	r4, r1
 8001b34:	4616      	mov	r6, r2
 8001b36:	f7ff ff99 	bl	8001a6c <findslot>
 8001b3a:	4605      	mov	r5, r0
 8001b3c:	b940      	cbnz	r0, 8001b50 <_swilseek+0x20>
 8001b3e:	f000 fa3d 	bl	8001fbc <__errno>
 8001b42:	2309      	movs	r3, #9
 8001b44:	6003      	str	r3, [r0, #0]
 8001b46:	f04f 34ff 	mov.w	r4, #4294967295
 8001b4a:	4620      	mov	r0, r4
 8001b4c:	b003      	add	sp, #12
 8001b4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001b50:	2e02      	cmp	r6, #2
 8001b52:	d903      	bls.n	8001b5c <_swilseek+0x2c>
 8001b54:	f000 fa32 	bl	8001fbc <__errno>
 8001b58:	2316      	movs	r3, #22
 8001b5a:	e7f3      	b.n	8001b44 <_swilseek+0x14>
 8001b5c:	2e01      	cmp	r6, #1
 8001b5e:	d112      	bne.n	8001b86 <_swilseek+0x56>
 8001b60:	6843      	ldr	r3, [r0, #4]
 8001b62:	18e4      	adds	r4, r4, r3
 8001b64:	d4f6      	bmi.n	8001b54 <_swilseek+0x24>
 8001b66:	682b      	ldr	r3, [r5, #0]
 8001b68:	260a      	movs	r6, #10
 8001b6a:	e9cd 3400 	strd	r3, r4, [sp]
 8001b6e:	466f      	mov	r7, sp
 8001b70:	4630      	mov	r0, r6
 8001b72:	4639      	mov	r1, r7
 8001b74:	beab      	bkpt	0x00ab
 8001b76:	4606      	mov	r6, r0
 8001b78:	4630      	mov	r0, r6
 8001b7a:	f7ff ff91 	bl	8001aa0 <checkerror>
 8001b7e:	2800      	cmp	r0, #0
 8001b80:	dbe1      	blt.n	8001b46 <_swilseek+0x16>
 8001b82:	606c      	str	r4, [r5, #4]
 8001b84:	e7e1      	b.n	8001b4a <_swilseek+0x1a>
 8001b86:	2e02      	cmp	r6, #2
 8001b88:	d1ed      	bne.n	8001b66 <_swilseek+0x36>
 8001b8a:	af02      	add	r7, sp, #8
 8001b8c:	6803      	ldr	r3, [r0, #0]
 8001b8e:	f847 3d08 	str.w	r3, [r7, #-8]!
 8001b92:	260c      	movs	r6, #12
 8001b94:	4630      	mov	r0, r6
 8001b96:	4639      	mov	r1, r7
 8001b98:	beab      	bkpt	0x00ab
 8001b9a:	4606      	mov	r6, r0
 8001b9c:	4630      	mov	r0, r6
 8001b9e:	f7ff ff7f 	bl	8001aa0 <checkerror>
 8001ba2:	1c43      	adds	r3, r0, #1
 8001ba4:	d0cf      	beq.n	8001b46 <_swilseek+0x16>
 8001ba6:	4404      	add	r4, r0
 8001ba8:	e7dd      	b.n	8001b66 <_swilseek+0x36>

08001baa <_lseek>:
 8001baa:	f7ff bfc1 	b.w	8001b30 <_swilseek>

08001bae <_swiwrite>:
 8001bae:	b530      	push	{r4, r5, lr}
 8001bb0:	b085      	sub	sp, #20
 8001bb2:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8001bb6:	9203      	str	r2, [sp, #12]
 8001bb8:	2405      	movs	r4, #5
 8001bba:	ad01      	add	r5, sp, #4
 8001bbc:	4620      	mov	r0, r4
 8001bbe:	4629      	mov	r1, r5
 8001bc0:	beab      	bkpt	0x00ab
 8001bc2:	4604      	mov	r4, r0
 8001bc4:	4620      	mov	r0, r4
 8001bc6:	f7ff ff6b 	bl	8001aa0 <checkerror>
 8001bca:	b005      	add	sp, #20
 8001bcc:	bd30      	pop	{r4, r5, pc}

08001bce <_write>:
 8001bce:	b570      	push	{r4, r5, r6, lr}
 8001bd0:	460e      	mov	r6, r1
 8001bd2:	4615      	mov	r5, r2
 8001bd4:	f7ff ff4a 	bl	8001a6c <findslot>
 8001bd8:	4604      	mov	r4, r0
 8001bda:	b930      	cbnz	r0, 8001bea <_write+0x1c>
 8001bdc:	f000 f9ee 	bl	8001fbc <__errno>
 8001be0:	2309      	movs	r3, #9
 8001be2:	6003      	str	r3, [r0, #0]
 8001be4:	f04f 30ff 	mov.w	r0, #4294967295
 8001be8:	bd70      	pop	{r4, r5, r6, pc}
 8001bea:	462a      	mov	r2, r5
 8001bec:	4631      	mov	r1, r6
 8001bee:	6800      	ldr	r0, [r0, #0]
 8001bf0:	f7ff ffdd 	bl	8001bae <_swiwrite>
 8001bf4:	1e02      	subs	r2, r0, #0
 8001bf6:	dbf5      	blt.n	8001be4 <_write+0x16>
 8001bf8:	6863      	ldr	r3, [r4, #4]
 8001bfa:	1aa8      	subs	r0, r5, r2
 8001bfc:	4403      	add	r3, r0
 8001bfe:	42aa      	cmp	r2, r5
 8001c00:	6063      	str	r3, [r4, #4]
 8001c02:	d1f1      	bne.n	8001be8 <_write+0x1a>
 8001c04:	2000      	movs	r0, #0
 8001c06:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8001c0a:	f7ff bf59 	b.w	8001ac0 <error>

08001c0e <_swiclose>:
 8001c0e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8001c10:	ad02      	add	r5, sp, #8
 8001c12:	2402      	movs	r4, #2
 8001c14:	f845 0d04 	str.w	r0, [r5, #-4]!
 8001c18:	4620      	mov	r0, r4
 8001c1a:	4629      	mov	r1, r5
 8001c1c:	beab      	bkpt	0x00ab
 8001c1e:	4604      	mov	r4, r0
 8001c20:	4620      	mov	r0, r4
 8001c22:	f7ff ff3d 	bl	8001aa0 <checkerror>
 8001c26:	b003      	add	sp, #12
 8001c28:	bd30      	pop	{r4, r5, pc}
	...

08001c2c <_close>:
 8001c2c:	b538      	push	{r3, r4, r5, lr}
 8001c2e:	4605      	mov	r5, r0
 8001c30:	f7ff ff1c 	bl	8001a6c <findslot>
 8001c34:	4604      	mov	r4, r0
 8001c36:	b930      	cbnz	r0, 8001c46 <_close+0x1a>
 8001c38:	f000 f9c0 	bl	8001fbc <__errno>
 8001c3c:	2309      	movs	r3, #9
 8001c3e:	6003      	str	r3, [r0, #0]
 8001c40:	f04f 30ff 	mov.w	r0, #4294967295
 8001c44:	bd38      	pop	{r3, r4, r5, pc}
 8001c46:	3d01      	subs	r5, #1
 8001c48:	2d01      	cmp	r5, #1
 8001c4a:	d809      	bhi.n	8001c60 <_close+0x34>
 8001c4c:	4b09      	ldr	r3, [pc, #36]	; (8001c74 <_close+0x48>)
 8001c4e:	689a      	ldr	r2, [r3, #8]
 8001c50:	691b      	ldr	r3, [r3, #16]
 8001c52:	429a      	cmp	r2, r3
 8001c54:	d104      	bne.n	8001c60 <_close+0x34>
 8001c56:	f04f 33ff 	mov.w	r3, #4294967295
 8001c5a:	6003      	str	r3, [r0, #0]
 8001c5c:	2000      	movs	r0, #0
 8001c5e:	e7f1      	b.n	8001c44 <_close+0x18>
 8001c60:	6820      	ldr	r0, [r4, #0]
 8001c62:	f7ff ffd4 	bl	8001c0e <_swiclose>
 8001c66:	2800      	cmp	r0, #0
 8001c68:	d1ec      	bne.n	8001c44 <_close+0x18>
 8001c6a:	f04f 33ff 	mov.w	r3, #4294967295
 8001c6e:	6023      	str	r3, [r4, #0]
 8001c70:	e7e8      	b.n	8001c44 <_close+0x18>
 8001c72:	bf00      	nop
 8001c74:	200000b4 	.word	0x200000b4

08001c78 <_swistat>:
 8001c78:	b570      	push	{r4, r5, r6, lr}
 8001c7a:	460c      	mov	r4, r1
 8001c7c:	f7ff fef6 	bl	8001a6c <findslot>
 8001c80:	4606      	mov	r6, r0
 8001c82:	b930      	cbnz	r0, 8001c92 <_swistat+0x1a>
 8001c84:	f000 f99a 	bl	8001fbc <__errno>
 8001c88:	2309      	movs	r3, #9
 8001c8a:	6003      	str	r3, [r0, #0]
 8001c8c:	f04f 30ff 	mov.w	r0, #4294967295
 8001c90:	bd70      	pop	{r4, r5, r6, pc}
 8001c92:	6863      	ldr	r3, [r4, #4]
 8001c94:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001c98:	6063      	str	r3, [r4, #4]
 8001c9a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001c9e:	6463      	str	r3, [r4, #68]	; 0x44
 8001ca0:	250c      	movs	r5, #12
 8001ca2:	4628      	mov	r0, r5
 8001ca4:	4631      	mov	r1, r6
 8001ca6:	beab      	bkpt	0x00ab
 8001ca8:	4605      	mov	r5, r0
 8001caa:	4628      	mov	r0, r5
 8001cac:	f7ff fef8 	bl	8001aa0 <checkerror>
 8001cb0:	1c43      	adds	r3, r0, #1
 8001cb2:	bf1c      	itt	ne
 8001cb4:	6120      	strne	r0, [r4, #16]
 8001cb6:	2000      	movne	r0, #0
 8001cb8:	e7ea      	b.n	8001c90 <_swistat+0x18>

08001cba <_fstat>:
 8001cba:	460b      	mov	r3, r1
 8001cbc:	b510      	push	{r4, lr}
 8001cbe:	2100      	movs	r1, #0
 8001cc0:	4604      	mov	r4, r0
 8001cc2:	2258      	movs	r2, #88	; 0x58
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	f000 fa78 	bl	80021ba <memset>
 8001cca:	4601      	mov	r1, r0
 8001ccc:	4620      	mov	r0, r4
 8001cce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001cd2:	f7ff bfd1 	b.w	8001c78 <_swistat>

08001cd6 <_stat>:
 8001cd6:	b538      	push	{r3, r4, r5, lr}
 8001cd8:	460d      	mov	r5, r1
 8001cda:	4604      	mov	r4, r0
 8001cdc:	2258      	movs	r2, #88	; 0x58
 8001cde:	2100      	movs	r1, #0
 8001ce0:	4628      	mov	r0, r5
 8001ce2:	f000 fa6a 	bl	80021ba <memset>
 8001ce6:	4620      	mov	r0, r4
 8001ce8:	2100      	movs	r1, #0
 8001cea:	f000 f811 	bl	8001d10 <_swiopen>
 8001cee:	1c43      	adds	r3, r0, #1
 8001cf0:	4604      	mov	r4, r0
 8001cf2:	d00b      	beq.n	8001d0c <_stat+0x36>
 8001cf4:	686b      	ldr	r3, [r5, #4]
 8001cf6:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8001cfa:	606b      	str	r3, [r5, #4]
 8001cfc:	4629      	mov	r1, r5
 8001cfe:	f7ff ffbb 	bl	8001c78 <_swistat>
 8001d02:	4605      	mov	r5, r0
 8001d04:	4620      	mov	r0, r4
 8001d06:	f7ff ff91 	bl	8001c2c <_close>
 8001d0a:	462c      	mov	r4, r5
 8001d0c:	4620      	mov	r0, r4
 8001d0e:	bd38      	pop	{r3, r4, r5, pc}

08001d10 <_swiopen>:
 8001d10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001d14:	4b2b      	ldr	r3, [pc, #172]	; (8001dc4 <_swiopen+0xb4>)
 8001d16:	b096      	sub	sp, #88	; 0x58
 8001d18:	4682      	mov	sl, r0
 8001d1a:	460e      	mov	r6, r1
 8001d1c:	2500      	movs	r5, #0
 8001d1e:	4698      	mov	r8, r3
 8001d20:	f853 4035 	ldr.w	r4, [r3, r5, lsl #3]
 8001d24:	1c61      	adds	r1, r4, #1
 8001d26:	ea4f 07c5 	mov.w	r7, r5, lsl #3
 8001d2a:	d036      	beq.n	8001d9a <_swiopen+0x8a>
 8001d2c:	3501      	adds	r5, #1
 8001d2e:	2d14      	cmp	r5, #20
 8001d30:	d1f6      	bne.n	8001d20 <_swiopen+0x10>
 8001d32:	f000 f943 	bl	8001fbc <__errno>
 8001d36:	2318      	movs	r3, #24
 8001d38:	6003      	str	r3, [r0, #0]
 8001d3a:	f04f 34ff 	mov.w	r4, #4294967295
 8001d3e:	e03c      	b.n	8001dba <_swiopen+0xaa>
 8001d40:	f3c6 4400 	ubfx	r4, r6, #16, #1
 8001d44:	f240 6301 	movw	r3, #1537	; 0x601
 8001d48:	07b2      	lsls	r2, r6, #30
 8001d4a:	bf48      	it	mi
 8001d4c:	f044 0402 	orrmi.w	r4, r4, #2
 8001d50:	421e      	tst	r6, r3
 8001d52:	bf18      	it	ne
 8001d54:	f044 0404 	orrne.w	r4, r4, #4
 8001d58:	0733      	lsls	r3, r6, #28
 8001d5a:	bf48      	it	mi
 8001d5c:	f024 0404 	bicmi.w	r4, r4, #4
 8001d60:	4650      	mov	r0, sl
 8001d62:	bf48      	it	mi
 8001d64:	f044 0408 	orrmi.w	r4, r4, #8
 8001d68:	f8cd a000 	str.w	sl, [sp]
 8001d6c:	f7fe fa50 	bl	8000210 <strlen>
 8001d70:	e9cd 4001 	strd	r4, r0, [sp, #4]
 8001d74:	2401      	movs	r4, #1
 8001d76:	4620      	mov	r0, r4
 8001d78:	4649      	mov	r1, r9
 8001d7a:	beab      	bkpt	0x00ab
 8001d7c:	4604      	mov	r4, r0
 8001d7e:	2c00      	cmp	r4, #0
 8001d80:	db06      	blt.n	8001d90 <_swiopen+0x80>
 8001d82:	4447      	add	r7, r8
 8001d84:	2300      	movs	r3, #0
 8001d86:	f848 4035 	str.w	r4, [r8, r5, lsl #3]
 8001d8a:	607b      	str	r3, [r7, #4]
 8001d8c:	462c      	mov	r4, r5
 8001d8e:	e014      	b.n	8001dba <_swiopen+0xaa>
 8001d90:	4620      	mov	r0, r4
 8001d92:	f7ff fe95 	bl	8001ac0 <error>
 8001d96:	4604      	mov	r4, r0
 8001d98:	e00f      	b.n	8001dba <_swiopen+0xaa>
 8001d9a:	f406 6320 	and.w	r3, r6, #2560	; 0xa00
 8001d9e:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8001da2:	46e9      	mov	r9, sp
 8001da4:	d1cc      	bne.n	8001d40 <_swiopen+0x30>
 8001da6:	4649      	mov	r1, r9
 8001da8:	4650      	mov	r0, sl
 8001daa:	f7ff ff94 	bl	8001cd6 <_stat>
 8001dae:	3001      	adds	r0, #1
 8001db0:	d0c6      	beq.n	8001d40 <_swiopen+0x30>
 8001db2:	f000 f903 	bl	8001fbc <__errno>
 8001db6:	2311      	movs	r3, #17
 8001db8:	6003      	str	r3, [r0, #0]
 8001dba:	4620      	mov	r0, r4
 8001dbc:	b016      	add	sp, #88	; 0x58
 8001dbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001dc2:	bf00      	nop
 8001dc4:	200000b4 	.word	0x200000b4

08001dc8 <_get_semihosting_exts>:
 8001dc8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8001dcc:	4607      	mov	r7, r0
 8001dce:	4688      	mov	r8, r1
 8001dd0:	4829      	ldr	r0, [pc, #164]	; (8001e78 <_get_semihosting_exts+0xb0>)
 8001dd2:	2100      	movs	r1, #0
 8001dd4:	4615      	mov	r5, r2
 8001dd6:	f7ff ff9b 	bl	8001d10 <_swiopen>
 8001dda:	462a      	mov	r2, r5
 8001ddc:	4604      	mov	r4, r0
 8001dde:	2100      	movs	r1, #0
 8001de0:	4638      	mov	r0, r7
 8001de2:	f000 f9ea 	bl	80021ba <memset>
 8001de6:	1c63      	adds	r3, r4, #1
 8001de8:	d015      	beq.n	8001e16 <_get_semihosting_exts+0x4e>
 8001dea:	4620      	mov	r0, r4
 8001dec:	f7ff fe3e 	bl	8001a6c <findslot>
 8001df0:	260c      	movs	r6, #12
 8001df2:	4681      	mov	r9, r0
 8001df4:	4630      	mov	r0, r6
 8001df6:	4649      	mov	r1, r9
 8001df8:	beab      	bkpt	0x00ab
 8001dfa:	4606      	mov	r6, r0
 8001dfc:	4630      	mov	r0, r6
 8001dfe:	f7ff fe4f 	bl	8001aa0 <checkerror>
 8001e02:	2803      	cmp	r0, #3
 8001e04:	dd02      	ble.n	8001e0c <_get_semihosting_exts+0x44>
 8001e06:	3803      	subs	r0, #3
 8001e08:	42a8      	cmp	r0, r5
 8001e0a:	dc08      	bgt.n	8001e1e <_get_semihosting_exts+0x56>
 8001e0c:	4620      	mov	r0, r4
 8001e0e:	f7ff ff0d 	bl	8001c2c <_close>
 8001e12:	f04f 34ff 	mov.w	r4, #4294967295
 8001e16:	4620      	mov	r0, r4
 8001e18:	b003      	add	sp, #12
 8001e1a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001e1e:	2204      	movs	r2, #4
 8001e20:	eb0d 0102 	add.w	r1, sp, r2
 8001e24:	4620      	mov	r0, r4
 8001e26:	f7ff fe69 	bl	8001afc <_read>
 8001e2a:	2803      	cmp	r0, #3
 8001e2c:	ddee      	ble.n	8001e0c <_get_semihosting_exts+0x44>
 8001e2e:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8001e32:	2b53      	cmp	r3, #83	; 0x53
 8001e34:	d1ea      	bne.n	8001e0c <_get_semihosting_exts+0x44>
 8001e36:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8001e3a:	2b48      	cmp	r3, #72	; 0x48
 8001e3c:	d1e6      	bne.n	8001e0c <_get_semihosting_exts+0x44>
 8001e3e:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8001e42:	2b46      	cmp	r3, #70	; 0x46
 8001e44:	d1e2      	bne.n	8001e0c <_get_semihosting_exts+0x44>
 8001e46:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8001e4a:	2b42      	cmp	r3, #66	; 0x42
 8001e4c:	d1de      	bne.n	8001e0c <_get_semihosting_exts+0x44>
 8001e4e:	2201      	movs	r2, #1
 8001e50:	4641      	mov	r1, r8
 8001e52:	4620      	mov	r0, r4
 8001e54:	f7ff fe6c 	bl	8001b30 <_swilseek>
 8001e58:	2800      	cmp	r0, #0
 8001e5a:	dbd7      	blt.n	8001e0c <_get_semihosting_exts+0x44>
 8001e5c:	462a      	mov	r2, r5
 8001e5e:	4639      	mov	r1, r7
 8001e60:	4620      	mov	r0, r4
 8001e62:	f7ff fe4b 	bl	8001afc <_read>
 8001e66:	4605      	mov	r5, r0
 8001e68:	4620      	mov	r0, r4
 8001e6a:	f7ff fedf 	bl	8001c2c <_close>
 8001e6e:	4628      	mov	r0, r5
 8001e70:	f7ff fe16 	bl	8001aa0 <checkerror>
 8001e74:	4604      	mov	r4, r0
 8001e76:	e7ce      	b.n	8001e16 <_get_semihosting_exts+0x4e>
 8001e78:	08002f54 	.word	0x08002f54

08001e7c <initialise_semihosting_exts>:
 8001e7c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8001e7e:	4d0a      	ldr	r5, [pc, #40]	; (8001ea8 <initialise_semihosting_exts+0x2c>)
 8001e80:	4c0a      	ldr	r4, [pc, #40]	; (8001eac <initialise_semihosting_exts+0x30>)
 8001e82:	2100      	movs	r1, #0
 8001e84:	2201      	movs	r2, #1
 8001e86:	a801      	add	r0, sp, #4
 8001e88:	6029      	str	r1, [r5, #0]
 8001e8a:	6022      	str	r2, [r4, #0]
 8001e8c:	f7ff ff9c 	bl	8001dc8 <_get_semihosting_exts>
 8001e90:	2800      	cmp	r0, #0
 8001e92:	dd07      	ble.n	8001ea4 <initialise_semihosting_exts+0x28>
 8001e94:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8001e98:	f003 0201 	and.w	r2, r3, #1
 8001e9c:	f003 0302 	and.w	r3, r3, #2
 8001ea0:	602a      	str	r2, [r5, #0]
 8001ea2:	6023      	str	r3, [r4, #0]
 8001ea4:	b003      	add	sp, #12
 8001ea6:	bd30      	pop	{r4, r5, pc}
 8001ea8:	20000018 	.word	0x20000018
 8001eac:	2000001c 	.word	0x2000001c

08001eb0 <_has_ext_stdout_stderr>:
 8001eb0:	b510      	push	{r4, lr}
 8001eb2:	4c04      	ldr	r4, [pc, #16]	; (8001ec4 <_has_ext_stdout_stderr+0x14>)
 8001eb4:	6822      	ldr	r2, [r4, #0]
 8001eb6:	2a00      	cmp	r2, #0
 8001eb8:	da01      	bge.n	8001ebe <_has_ext_stdout_stderr+0xe>
 8001eba:	f7ff ffdf 	bl	8001e7c <initialise_semihosting_exts>
 8001ebe:	6820      	ldr	r0, [r4, #0]
 8001ec0:	bd10      	pop	{r4, pc}
 8001ec2:	bf00      	nop
 8001ec4:	2000001c 	.word	0x2000001c

08001ec8 <initialise_monitor_handles>:
 8001ec8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001ecc:	b085      	sub	sp, #20
 8001ece:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 8001f80 <initialise_monitor_handles+0xb8>
 8001ed2:	f8cd 9004 	str.w	r9, [sp, #4]
 8001ed6:	2303      	movs	r3, #3
 8001ed8:	2400      	movs	r4, #0
 8001eda:	9303      	str	r3, [sp, #12]
 8001edc:	f10d 0804 	add.w	r8, sp, #4
 8001ee0:	9402      	str	r4, [sp, #8]
 8001ee2:	2501      	movs	r5, #1
 8001ee4:	4628      	mov	r0, r5
 8001ee6:	4641      	mov	r1, r8
 8001ee8:	beab      	bkpt	0x00ab
 8001eea:	4605      	mov	r5, r0
 8001eec:	4e20      	ldr	r6, [pc, #128]	; (8001f70 <initialise_monitor_handles+0xa8>)
 8001eee:	4a21      	ldr	r2, [pc, #132]	; (8001f74 <initialise_monitor_handles+0xac>)
 8001ef0:	6035      	str	r5, [r6, #0]
 8001ef2:	4623      	mov	r3, r4
 8001ef4:	f04f 31ff 	mov.w	r1, #4294967295
 8001ef8:	4614      	mov	r4, r2
 8001efa:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
 8001efe:	3301      	adds	r3, #1
 8001f00:	2b14      	cmp	r3, #20
 8001f02:	d1fa      	bne.n	8001efa <initialise_monitor_handles+0x32>
 8001f04:	f7ff ffd4 	bl	8001eb0 <_has_ext_stdout_stderr>
 8001f08:	4d1b      	ldr	r5, [pc, #108]	; (8001f78 <initialise_monitor_handles+0xb0>)
 8001f0a:	b1d0      	cbz	r0, 8001f42 <initialise_monitor_handles+0x7a>
 8001f0c:	f04f 0a03 	mov.w	sl, #3
 8001f10:	2304      	movs	r3, #4
 8001f12:	f8cd 9004 	str.w	r9, [sp, #4]
 8001f16:	2701      	movs	r7, #1
 8001f18:	f8cd a00c 	str.w	sl, [sp, #12]
 8001f1c:	9302      	str	r3, [sp, #8]
 8001f1e:	4638      	mov	r0, r7
 8001f20:	4641      	mov	r1, r8
 8001f22:	beab      	bkpt	0x00ab
 8001f24:	4683      	mov	fp, r0
 8001f26:	4b15      	ldr	r3, [pc, #84]	; (8001f7c <initialise_monitor_handles+0xb4>)
 8001f28:	f8cd 9004 	str.w	r9, [sp, #4]
 8001f2c:	f8c3 b000 	str.w	fp, [r3]
 8001f30:	2308      	movs	r3, #8
 8001f32:	f8cd a00c 	str.w	sl, [sp, #12]
 8001f36:	9302      	str	r3, [sp, #8]
 8001f38:	4638      	mov	r0, r7
 8001f3a:	4641      	mov	r1, r8
 8001f3c:	beab      	bkpt	0x00ab
 8001f3e:	4607      	mov	r7, r0
 8001f40:	602f      	str	r7, [r5, #0]
 8001f42:	682b      	ldr	r3, [r5, #0]
 8001f44:	3301      	adds	r3, #1
 8001f46:	bf02      	ittt	eq
 8001f48:	4b0c      	ldreq	r3, [pc, #48]	; (8001f7c <initialise_monitor_handles+0xb4>)
 8001f4a:	681b      	ldreq	r3, [r3, #0]
 8001f4c:	602b      	streq	r3, [r5, #0]
 8001f4e:	6833      	ldr	r3, [r6, #0]
 8001f50:	6023      	str	r3, [r4, #0]
 8001f52:	2600      	movs	r6, #0
 8001f54:	6066      	str	r6, [r4, #4]
 8001f56:	f7ff ffab 	bl	8001eb0 <_has_ext_stdout_stderr>
 8001f5a:	b130      	cbz	r0, 8001f6a <initialise_monitor_handles+0xa2>
 8001f5c:	4b07      	ldr	r3, [pc, #28]	; (8001f7c <initialise_monitor_handles+0xb4>)
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	e9c4 3602 	strd	r3, r6, [r4, #8]
 8001f64:	682b      	ldr	r3, [r5, #0]
 8001f66:	e9c4 3604 	strd	r3, r6, [r4, #16]
 8001f6a:	b005      	add	sp, #20
 8001f6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001f70:	200000ac 	.word	0x200000ac
 8001f74:	200000b4 	.word	0x200000b4
 8001f78:	200000a8 	.word	0x200000a8
 8001f7c:	200000b0 	.word	0x200000b0
 8001f80:	08002f6a 	.word	0x08002f6a

08001f84 <_isatty>:
 8001f84:	b570      	push	{r4, r5, r6, lr}
 8001f86:	f7ff fd71 	bl	8001a6c <findslot>
 8001f8a:	2509      	movs	r5, #9
 8001f8c:	4604      	mov	r4, r0
 8001f8e:	b920      	cbnz	r0, 8001f9a <_isatty+0x16>
 8001f90:	f000 f814 	bl	8001fbc <__errno>
 8001f94:	6005      	str	r5, [r0, #0]
 8001f96:	4620      	mov	r0, r4
 8001f98:	bd70      	pop	{r4, r5, r6, pc}
 8001f9a:	4628      	mov	r0, r5
 8001f9c:	4621      	mov	r1, r4
 8001f9e:	beab      	bkpt	0x00ab
 8001fa0:	4604      	mov	r4, r0
 8001fa2:	2c01      	cmp	r4, #1
 8001fa4:	d0f7      	beq.n	8001f96 <_isatty+0x12>
 8001fa6:	f000 f809 	bl	8001fbc <__errno>
 8001faa:	2400      	movs	r4, #0
 8001fac:	4606      	mov	r6, r0
 8001fae:	2513      	movs	r5, #19
 8001fb0:	4628      	mov	r0, r5
 8001fb2:	4621      	mov	r1, r4
 8001fb4:	beab      	bkpt	0x00ab
 8001fb6:	4605      	mov	r5, r0
 8001fb8:	6035      	str	r5, [r6, #0]
 8001fba:	e7ec      	b.n	8001f96 <_isatty+0x12>

08001fbc <__errno>:
 8001fbc:	4b01      	ldr	r3, [pc, #4]	; (8001fc4 <__errno+0x8>)
 8001fbe:	6818      	ldr	r0, [r3, #0]
 8001fc0:	4770      	bx	lr
 8001fc2:	bf00      	nop
 8001fc4:	20000020 	.word	0x20000020

08001fc8 <std>:
 8001fc8:	2300      	movs	r3, #0
 8001fca:	b510      	push	{r4, lr}
 8001fcc:	4604      	mov	r4, r0
 8001fce:	e9c0 3300 	strd	r3, r3, [r0]
 8001fd2:	6083      	str	r3, [r0, #8]
 8001fd4:	8181      	strh	r1, [r0, #12]
 8001fd6:	6643      	str	r3, [r0, #100]	; 0x64
 8001fd8:	81c2      	strh	r2, [r0, #14]
 8001fda:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8001fde:	6183      	str	r3, [r0, #24]
 8001fe0:	4619      	mov	r1, r3
 8001fe2:	2208      	movs	r2, #8
 8001fe4:	305c      	adds	r0, #92	; 0x5c
 8001fe6:	f000 f8e8 	bl	80021ba <memset>
 8001fea:	4b05      	ldr	r3, [pc, #20]	; (8002000 <std+0x38>)
 8001fec:	6263      	str	r3, [r4, #36]	; 0x24
 8001fee:	4b05      	ldr	r3, [pc, #20]	; (8002004 <std+0x3c>)
 8001ff0:	62a3      	str	r3, [r4, #40]	; 0x28
 8001ff2:	4b05      	ldr	r3, [pc, #20]	; (8002008 <std+0x40>)
 8001ff4:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001ff6:	4b05      	ldr	r3, [pc, #20]	; (800200c <std+0x44>)
 8001ff8:	6224      	str	r4, [r4, #32]
 8001ffa:	6323      	str	r3, [r4, #48]	; 0x30
 8001ffc:	bd10      	pop	{r4, pc}
 8001ffe:	bf00      	nop
 8002000:	080022d1 	.word	0x080022d1
 8002004:	080022f3 	.word	0x080022f3
 8002008:	0800232b 	.word	0x0800232b
 800200c:	0800234f 	.word	0x0800234f

08002010 <_cleanup_r>:
 8002010:	4901      	ldr	r1, [pc, #4]	; (8002018 <_cleanup_r+0x8>)
 8002012:	f000 b885 	b.w	8002120 <_fwalk_reent>
 8002016:	bf00      	nop
 8002018:	080024a9 	.word	0x080024a9

0800201c <__sfmoreglue>:
 800201c:	b570      	push	{r4, r5, r6, lr}
 800201e:	1e4a      	subs	r2, r1, #1
 8002020:	2568      	movs	r5, #104	; 0x68
 8002022:	4355      	muls	r5, r2
 8002024:	460e      	mov	r6, r1
 8002026:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800202a:	f000 f8cf 	bl	80021cc <_malloc_r>
 800202e:	4604      	mov	r4, r0
 8002030:	b140      	cbz	r0, 8002044 <__sfmoreglue+0x28>
 8002032:	2100      	movs	r1, #0
 8002034:	e9c0 1600 	strd	r1, r6, [r0]
 8002038:	300c      	adds	r0, #12
 800203a:	60a0      	str	r0, [r4, #8]
 800203c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8002040:	f000 f8bb 	bl	80021ba <memset>
 8002044:	4620      	mov	r0, r4
 8002046:	bd70      	pop	{r4, r5, r6, pc}

08002048 <__sinit>:
 8002048:	6983      	ldr	r3, [r0, #24]
 800204a:	b510      	push	{r4, lr}
 800204c:	4604      	mov	r4, r0
 800204e:	bb33      	cbnz	r3, 800209e <__sinit+0x56>
 8002050:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8002054:	6503      	str	r3, [r0, #80]	; 0x50
 8002056:	4b12      	ldr	r3, [pc, #72]	; (80020a0 <__sinit+0x58>)
 8002058:	4a12      	ldr	r2, [pc, #72]	; (80020a4 <__sinit+0x5c>)
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	6282      	str	r2, [r0, #40]	; 0x28
 800205e:	4298      	cmp	r0, r3
 8002060:	bf04      	itt	eq
 8002062:	2301      	moveq	r3, #1
 8002064:	6183      	streq	r3, [r0, #24]
 8002066:	f000 f81f 	bl	80020a8 <__sfp>
 800206a:	6060      	str	r0, [r4, #4]
 800206c:	4620      	mov	r0, r4
 800206e:	f000 f81b 	bl	80020a8 <__sfp>
 8002072:	60a0      	str	r0, [r4, #8]
 8002074:	4620      	mov	r0, r4
 8002076:	f000 f817 	bl	80020a8 <__sfp>
 800207a:	2200      	movs	r2, #0
 800207c:	60e0      	str	r0, [r4, #12]
 800207e:	2104      	movs	r1, #4
 8002080:	6860      	ldr	r0, [r4, #4]
 8002082:	f7ff ffa1 	bl	8001fc8 <std>
 8002086:	2201      	movs	r2, #1
 8002088:	2109      	movs	r1, #9
 800208a:	68a0      	ldr	r0, [r4, #8]
 800208c:	f7ff ff9c 	bl	8001fc8 <std>
 8002090:	2202      	movs	r2, #2
 8002092:	2112      	movs	r1, #18
 8002094:	68e0      	ldr	r0, [r4, #12]
 8002096:	f7ff ff97 	bl	8001fc8 <std>
 800209a:	2301      	movs	r3, #1
 800209c:	61a3      	str	r3, [r4, #24]
 800209e:	bd10      	pop	{r4, pc}
 80020a0:	08002fd0 	.word	0x08002fd0
 80020a4:	08002011 	.word	0x08002011

080020a8 <__sfp>:
 80020a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80020aa:	4b1b      	ldr	r3, [pc, #108]	; (8002118 <__sfp+0x70>)
 80020ac:	681e      	ldr	r6, [r3, #0]
 80020ae:	69b3      	ldr	r3, [r6, #24]
 80020b0:	4607      	mov	r7, r0
 80020b2:	b913      	cbnz	r3, 80020ba <__sfp+0x12>
 80020b4:	4630      	mov	r0, r6
 80020b6:	f7ff ffc7 	bl	8002048 <__sinit>
 80020ba:	3648      	adds	r6, #72	; 0x48
 80020bc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80020c0:	3b01      	subs	r3, #1
 80020c2:	d503      	bpl.n	80020cc <__sfp+0x24>
 80020c4:	6833      	ldr	r3, [r6, #0]
 80020c6:	b133      	cbz	r3, 80020d6 <__sfp+0x2e>
 80020c8:	6836      	ldr	r6, [r6, #0]
 80020ca:	e7f7      	b.n	80020bc <__sfp+0x14>
 80020cc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80020d0:	b16d      	cbz	r5, 80020ee <__sfp+0x46>
 80020d2:	3468      	adds	r4, #104	; 0x68
 80020d4:	e7f4      	b.n	80020c0 <__sfp+0x18>
 80020d6:	2104      	movs	r1, #4
 80020d8:	4638      	mov	r0, r7
 80020da:	f7ff ff9f 	bl	800201c <__sfmoreglue>
 80020de:	6030      	str	r0, [r6, #0]
 80020e0:	2800      	cmp	r0, #0
 80020e2:	d1f1      	bne.n	80020c8 <__sfp+0x20>
 80020e4:	230c      	movs	r3, #12
 80020e6:	603b      	str	r3, [r7, #0]
 80020e8:	4604      	mov	r4, r0
 80020ea:	4620      	mov	r0, r4
 80020ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80020ee:	4b0b      	ldr	r3, [pc, #44]	; (800211c <__sfp+0x74>)
 80020f0:	6665      	str	r5, [r4, #100]	; 0x64
 80020f2:	e9c4 5500 	strd	r5, r5, [r4]
 80020f6:	60a5      	str	r5, [r4, #8]
 80020f8:	e9c4 3503 	strd	r3, r5, [r4, #12]
 80020fc:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8002100:	2208      	movs	r2, #8
 8002102:	4629      	mov	r1, r5
 8002104:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8002108:	f000 f857 	bl	80021ba <memset>
 800210c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8002110:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8002114:	e7e9      	b.n	80020ea <__sfp+0x42>
 8002116:	bf00      	nop
 8002118:	08002fd0 	.word	0x08002fd0
 800211c:	ffff0001 	.word	0xffff0001

08002120 <_fwalk_reent>:
 8002120:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002124:	4680      	mov	r8, r0
 8002126:	4689      	mov	r9, r1
 8002128:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800212c:	2600      	movs	r6, #0
 800212e:	b914      	cbnz	r4, 8002136 <_fwalk_reent+0x16>
 8002130:	4630      	mov	r0, r6
 8002132:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002136:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800213a:	3f01      	subs	r7, #1
 800213c:	d501      	bpl.n	8002142 <_fwalk_reent+0x22>
 800213e:	6824      	ldr	r4, [r4, #0]
 8002140:	e7f5      	b.n	800212e <_fwalk_reent+0xe>
 8002142:	89ab      	ldrh	r3, [r5, #12]
 8002144:	2b01      	cmp	r3, #1
 8002146:	d907      	bls.n	8002158 <_fwalk_reent+0x38>
 8002148:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800214c:	3301      	adds	r3, #1
 800214e:	d003      	beq.n	8002158 <_fwalk_reent+0x38>
 8002150:	4629      	mov	r1, r5
 8002152:	4640      	mov	r0, r8
 8002154:	47c8      	blx	r9
 8002156:	4306      	orrs	r6, r0
 8002158:	3568      	adds	r5, #104	; 0x68
 800215a:	e7ee      	b.n	800213a <_fwalk_reent+0x1a>

0800215c <__libc_init_array>:
 800215c:	b570      	push	{r4, r5, r6, lr}
 800215e:	4e0d      	ldr	r6, [pc, #52]	; (8002194 <__libc_init_array+0x38>)
 8002160:	4c0d      	ldr	r4, [pc, #52]	; (8002198 <__libc_init_array+0x3c>)
 8002162:	1ba4      	subs	r4, r4, r6
 8002164:	10a4      	asrs	r4, r4, #2
 8002166:	2500      	movs	r5, #0
 8002168:	42a5      	cmp	r5, r4
 800216a:	d109      	bne.n	8002180 <__libc_init_array+0x24>
 800216c:	4e0b      	ldr	r6, [pc, #44]	; (800219c <__libc_init_array+0x40>)
 800216e:	4c0c      	ldr	r4, [pc, #48]	; (80021a0 <__libc_init_array+0x44>)
 8002170:	f000 fe44 	bl	8002dfc <_init>
 8002174:	1ba4      	subs	r4, r4, r6
 8002176:	10a4      	asrs	r4, r4, #2
 8002178:	2500      	movs	r5, #0
 800217a:	42a5      	cmp	r5, r4
 800217c:	d105      	bne.n	800218a <__libc_init_array+0x2e>
 800217e:	bd70      	pop	{r4, r5, r6, pc}
 8002180:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002184:	4798      	blx	r3
 8002186:	3501      	adds	r5, #1
 8002188:	e7ee      	b.n	8002168 <__libc_init_array+0xc>
 800218a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800218e:	4798      	blx	r3
 8002190:	3501      	adds	r5, #1
 8002192:	e7f2      	b.n	800217a <__libc_init_array+0x1e>
 8002194:	08003008 	.word	0x08003008
 8002198:	08003008 	.word	0x08003008
 800219c:	08003008 	.word	0x08003008
 80021a0:	0800300c 	.word	0x0800300c

080021a4 <memcpy>:
 80021a4:	b510      	push	{r4, lr}
 80021a6:	1e43      	subs	r3, r0, #1
 80021a8:	440a      	add	r2, r1
 80021aa:	4291      	cmp	r1, r2
 80021ac:	d100      	bne.n	80021b0 <memcpy+0xc>
 80021ae:	bd10      	pop	{r4, pc}
 80021b0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80021b4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80021b8:	e7f7      	b.n	80021aa <memcpy+0x6>

080021ba <memset>:
 80021ba:	4402      	add	r2, r0
 80021bc:	4603      	mov	r3, r0
 80021be:	4293      	cmp	r3, r2
 80021c0:	d100      	bne.n	80021c4 <memset+0xa>
 80021c2:	4770      	bx	lr
 80021c4:	f803 1b01 	strb.w	r1, [r3], #1
 80021c8:	e7f9      	b.n	80021be <memset+0x4>
	...

080021cc <_malloc_r>:
 80021cc:	b570      	push	{r4, r5, r6, lr}
 80021ce:	1ccd      	adds	r5, r1, #3
 80021d0:	f025 0503 	bic.w	r5, r5, #3
 80021d4:	3508      	adds	r5, #8
 80021d6:	2d0c      	cmp	r5, #12
 80021d8:	bf38      	it	cc
 80021da:	250c      	movcc	r5, #12
 80021dc:	2d00      	cmp	r5, #0
 80021de:	4606      	mov	r6, r0
 80021e0:	db01      	blt.n	80021e6 <_malloc_r+0x1a>
 80021e2:	42a9      	cmp	r1, r5
 80021e4:	d903      	bls.n	80021ee <_malloc_r+0x22>
 80021e6:	230c      	movs	r3, #12
 80021e8:	6033      	str	r3, [r6, #0]
 80021ea:	2000      	movs	r0, #0
 80021ec:	bd70      	pop	{r4, r5, r6, pc}
 80021ee:	f000 f997 	bl	8002520 <__malloc_lock>
 80021f2:	4a21      	ldr	r2, [pc, #132]	; (8002278 <_malloc_r+0xac>)
 80021f4:	6814      	ldr	r4, [r2, #0]
 80021f6:	4621      	mov	r1, r4
 80021f8:	b991      	cbnz	r1, 8002220 <_malloc_r+0x54>
 80021fa:	4c20      	ldr	r4, [pc, #128]	; (800227c <_malloc_r+0xb0>)
 80021fc:	6823      	ldr	r3, [r4, #0]
 80021fe:	b91b      	cbnz	r3, 8002208 <_malloc_r+0x3c>
 8002200:	4630      	mov	r0, r6
 8002202:	f000 f855 	bl	80022b0 <_sbrk_r>
 8002206:	6020      	str	r0, [r4, #0]
 8002208:	4629      	mov	r1, r5
 800220a:	4630      	mov	r0, r6
 800220c:	f000 f850 	bl	80022b0 <_sbrk_r>
 8002210:	1c43      	adds	r3, r0, #1
 8002212:	d124      	bne.n	800225e <_malloc_r+0x92>
 8002214:	230c      	movs	r3, #12
 8002216:	6033      	str	r3, [r6, #0]
 8002218:	4630      	mov	r0, r6
 800221a:	f000 f982 	bl	8002522 <__malloc_unlock>
 800221e:	e7e4      	b.n	80021ea <_malloc_r+0x1e>
 8002220:	680b      	ldr	r3, [r1, #0]
 8002222:	1b5b      	subs	r3, r3, r5
 8002224:	d418      	bmi.n	8002258 <_malloc_r+0x8c>
 8002226:	2b0b      	cmp	r3, #11
 8002228:	d90f      	bls.n	800224a <_malloc_r+0x7e>
 800222a:	600b      	str	r3, [r1, #0]
 800222c:	50cd      	str	r5, [r1, r3]
 800222e:	18cc      	adds	r4, r1, r3
 8002230:	4630      	mov	r0, r6
 8002232:	f000 f976 	bl	8002522 <__malloc_unlock>
 8002236:	f104 000b 	add.w	r0, r4, #11
 800223a:	1d23      	adds	r3, r4, #4
 800223c:	f020 0007 	bic.w	r0, r0, #7
 8002240:	1ac3      	subs	r3, r0, r3
 8002242:	d0d3      	beq.n	80021ec <_malloc_r+0x20>
 8002244:	425a      	negs	r2, r3
 8002246:	50e2      	str	r2, [r4, r3]
 8002248:	e7d0      	b.n	80021ec <_malloc_r+0x20>
 800224a:	428c      	cmp	r4, r1
 800224c:	684b      	ldr	r3, [r1, #4]
 800224e:	bf16      	itet	ne
 8002250:	6063      	strne	r3, [r4, #4]
 8002252:	6013      	streq	r3, [r2, #0]
 8002254:	460c      	movne	r4, r1
 8002256:	e7eb      	b.n	8002230 <_malloc_r+0x64>
 8002258:	460c      	mov	r4, r1
 800225a:	6849      	ldr	r1, [r1, #4]
 800225c:	e7cc      	b.n	80021f8 <_malloc_r+0x2c>
 800225e:	1cc4      	adds	r4, r0, #3
 8002260:	f024 0403 	bic.w	r4, r4, #3
 8002264:	42a0      	cmp	r0, r4
 8002266:	d005      	beq.n	8002274 <_malloc_r+0xa8>
 8002268:	1a21      	subs	r1, r4, r0
 800226a:	4630      	mov	r0, r6
 800226c:	f000 f820 	bl	80022b0 <_sbrk_r>
 8002270:	3001      	adds	r0, #1
 8002272:	d0cf      	beq.n	8002214 <_malloc_r+0x48>
 8002274:	6025      	str	r5, [r4, #0]
 8002276:	e7db      	b.n	8002230 <_malloc_r+0x64>
 8002278:	20000154 	.word	0x20000154
 800227c:	20000158 	.word	0x20000158

08002280 <iprintf>:
 8002280:	b40f      	push	{r0, r1, r2, r3}
 8002282:	4b0a      	ldr	r3, [pc, #40]	; (80022ac <iprintf+0x2c>)
 8002284:	b513      	push	{r0, r1, r4, lr}
 8002286:	681c      	ldr	r4, [r3, #0]
 8002288:	b124      	cbz	r4, 8002294 <iprintf+0x14>
 800228a:	69a3      	ldr	r3, [r4, #24]
 800228c:	b913      	cbnz	r3, 8002294 <iprintf+0x14>
 800228e:	4620      	mov	r0, r4
 8002290:	f7ff feda 	bl	8002048 <__sinit>
 8002294:	ab05      	add	r3, sp, #20
 8002296:	9a04      	ldr	r2, [sp, #16]
 8002298:	68a1      	ldr	r1, [r4, #8]
 800229a:	9301      	str	r3, [sp, #4]
 800229c:	4620      	mov	r0, r4
 800229e:	f000 f9b7 	bl	8002610 <_vfiprintf_r>
 80022a2:	b002      	add	sp, #8
 80022a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80022a8:	b004      	add	sp, #16
 80022aa:	4770      	bx	lr
 80022ac:	20000020 	.word	0x20000020

080022b0 <_sbrk_r>:
 80022b0:	b538      	push	{r3, r4, r5, lr}
 80022b2:	4c06      	ldr	r4, [pc, #24]	; (80022cc <_sbrk_r+0x1c>)
 80022b4:	2300      	movs	r3, #0
 80022b6:	4605      	mov	r5, r0
 80022b8:	4608      	mov	r0, r1
 80022ba:	6023      	str	r3, [r4, #0]
 80022bc:	f7ff fa1e 	bl	80016fc <_sbrk>
 80022c0:	1c43      	adds	r3, r0, #1
 80022c2:	d102      	bne.n	80022ca <_sbrk_r+0x1a>
 80022c4:	6823      	ldr	r3, [r4, #0]
 80022c6:	b103      	cbz	r3, 80022ca <_sbrk_r+0x1a>
 80022c8:	602b      	str	r3, [r5, #0]
 80022ca:	bd38      	pop	{r3, r4, r5, pc}
 80022cc:	20000184 	.word	0x20000184

080022d0 <__sread>:
 80022d0:	b510      	push	{r4, lr}
 80022d2:	460c      	mov	r4, r1
 80022d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80022d8:	f000 fc38 	bl	8002b4c <_read_r>
 80022dc:	2800      	cmp	r0, #0
 80022de:	bfab      	itete	ge
 80022e0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80022e2:	89a3      	ldrhlt	r3, [r4, #12]
 80022e4:	181b      	addge	r3, r3, r0
 80022e6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80022ea:	bfac      	ite	ge
 80022ec:	6563      	strge	r3, [r4, #84]	; 0x54
 80022ee:	81a3      	strhlt	r3, [r4, #12]
 80022f0:	bd10      	pop	{r4, pc}

080022f2 <__swrite>:
 80022f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80022f6:	461f      	mov	r7, r3
 80022f8:	898b      	ldrh	r3, [r1, #12]
 80022fa:	05db      	lsls	r3, r3, #23
 80022fc:	4605      	mov	r5, r0
 80022fe:	460c      	mov	r4, r1
 8002300:	4616      	mov	r6, r2
 8002302:	d505      	bpl.n	8002310 <__swrite+0x1e>
 8002304:	2302      	movs	r3, #2
 8002306:	2200      	movs	r2, #0
 8002308:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800230c:	f000 f8f6 	bl	80024fc <_lseek_r>
 8002310:	89a3      	ldrh	r3, [r4, #12]
 8002312:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002316:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800231a:	81a3      	strh	r3, [r4, #12]
 800231c:	4632      	mov	r2, r6
 800231e:	463b      	mov	r3, r7
 8002320:	4628      	mov	r0, r5
 8002322:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002326:	f000 b817 	b.w	8002358 <_write_r>

0800232a <__sseek>:
 800232a:	b510      	push	{r4, lr}
 800232c:	460c      	mov	r4, r1
 800232e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002332:	f000 f8e3 	bl	80024fc <_lseek_r>
 8002336:	1c43      	adds	r3, r0, #1
 8002338:	89a3      	ldrh	r3, [r4, #12]
 800233a:	bf15      	itete	ne
 800233c:	6560      	strne	r0, [r4, #84]	; 0x54
 800233e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8002342:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8002346:	81a3      	strheq	r3, [r4, #12]
 8002348:	bf18      	it	ne
 800234a:	81a3      	strhne	r3, [r4, #12]
 800234c:	bd10      	pop	{r4, pc}

0800234e <__sclose>:
 800234e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002352:	f000 b813 	b.w	800237c <_close_r>
	...

08002358 <_write_r>:
 8002358:	b538      	push	{r3, r4, r5, lr}
 800235a:	4c07      	ldr	r4, [pc, #28]	; (8002378 <_write_r+0x20>)
 800235c:	4605      	mov	r5, r0
 800235e:	4608      	mov	r0, r1
 8002360:	4611      	mov	r1, r2
 8002362:	2200      	movs	r2, #0
 8002364:	6022      	str	r2, [r4, #0]
 8002366:	461a      	mov	r2, r3
 8002368:	f7ff fc31 	bl	8001bce <_write>
 800236c:	1c43      	adds	r3, r0, #1
 800236e:	d102      	bne.n	8002376 <_write_r+0x1e>
 8002370:	6823      	ldr	r3, [r4, #0]
 8002372:	b103      	cbz	r3, 8002376 <_write_r+0x1e>
 8002374:	602b      	str	r3, [r5, #0]
 8002376:	bd38      	pop	{r3, r4, r5, pc}
 8002378:	20000184 	.word	0x20000184

0800237c <_close_r>:
 800237c:	b538      	push	{r3, r4, r5, lr}
 800237e:	4c06      	ldr	r4, [pc, #24]	; (8002398 <_close_r+0x1c>)
 8002380:	2300      	movs	r3, #0
 8002382:	4605      	mov	r5, r0
 8002384:	4608      	mov	r0, r1
 8002386:	6023      	str	r3, [r4, #0]
 8002388:	f7ff fc50 	bl	8001c2c <_close>
 800238c:	1c43      	adds	r3, r0, #1
 800238e:	d102      	bne.n	8002396 <_close_r+0x1a>
 8002390:	6823      	ldr	r3, [r4, #0]
 8002392:	b103      	cbz	r3, 8002396 <_close_r+0x1a>
 8002394:	602b      	str	r3, [r5, #0]
 8002396:	bd38      	pop	{r3, r4, r5, pc}
 8002398:	20000184 	.word	0x20000184

0800239c <__sflush_r>:
 800239c:	898a      	ldrh	r2, [r1, #12]
 800239e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80023a2:	4605      	mov	r5, r0
 80023a4:	0710      	lsls	r0, r2, #28
 80023a6:	460c      	mov	r4, r1
 80023a8:	d458      	bmi.n	800245c <__sflush_r+0xc0>
 80023aa:	684b      	ldr	r3, [r1, #4]
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	dc05      	bgt.n	80023bc <__sflush_r+0x20>
 80023b0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	dc02      	bgt.n	80023bc <__sflush_r+0x20>
 80023b6:	2000      	movs	r0, #0
 80023b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80023bc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80023be:	2e00      	cmp	r6, #0
 80023c0:	d0f9      	beq.n	80023b6 <__sflush_r+0x1a>
 80023c2:	2300      	movs	r3, #0
 80023c4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80023c8:	682f      	ldr	r7, [r5, #0]
 80023ca:	6a21      	ldr	r1, [r4, #32]
 80023cc:	602b      	str	r3, [r5, #0]
 80023ce:	d032      	beq.n	8002436 <__sflush_r+0x9a>
 80023d0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80023d2:	89a3      	ldrh	r3, [r4, #12]
 80023d4:	075a      	lsls	r2, r3, #29
 80023d6:	d505      	bpl.n	80023e4 <__sflush_r+0x48>
 80023d8:	6863      	ldr	r3, [r4, #4]
 80023da:	1ac0      	subs	r0, r0, r3
 80023dc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80023de:	b10b      	cbz	r3, 80023e4 <__sflush_r+0x48>
 80023e0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80023e2:	1ac0      	subs	r0, r0, r3
 80023e4:	2300      	movs	r3, #0
 80023e6:	4602      	mov	r2, r0
 80023e8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80023ea:	6a21      	ldr	r1, [r4, #32]
 80023ec:	4628      	mov	r0, r5
 80023ee:	47b0      	blx	r6
 80023f0:	1c43      	adds	r3, r0, #1
 80023f2:	89a3      	ldrh	r3, [r4, #12]
 80023f4:	d106      	bne.n	8002404 <__sflush_r+0x68>
 80023f6:	6829      	ldr	r1, [r5, #0]
 80023f8:	291d      	cmp	r1, #29
 80023fa:	d848      	bhi.n	800248e <__sflush_r+0xf2>
 80023fc:	4a29      	ldr	r2, [pc, #164]	; (80024a4 <__sflush_r+0x108>)
 80023fe:	40ca      	lsrs	r2, r1
 8002400:	07d6      	lsls	r6, r2, #31
 8002402:	d544      	bpl.n	800248e <__sflush_r+0xf2>
 8002404:	2200      	movs	r2, #0
 8002406:	6062      	str	r2, [r4, #4]
 8002408:	04d9      	lsls	r1, r3, #19
 800240a:	6922      	ldr	r2, [r4, #16]
 800240c:	6022      	str	r2, [r4, #0]
 800240e:	d504      	bpl.n	800241a <__sflush_r+0x7e>
 8002410:	1c42      	adds	r2, r0, #1
 8002412:	d101      	bne.n	8002418 <__sflush_r+0x7c>
 8002414:	682b      	ldr	r3, [r5, #0]
 8002416:	b903      	cbnz	r3, 800241a <__sflush_r+0x7e>
 8002418:	6560      	str	r0, [r4, #84]	; 0x54
 800241a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800241c:	602f      	str	r7, [r5, #0]
 800241e:	2900      	cmp	r1, #0
 8002420:	d0c9      	beq.n	80023b6 <__sflush_r+0x1a>
 8002422:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002426:	4299      	cmp	r1, r3
 8002428:	d002      	beq.n	8002430 <__sflush_r+0x94>
 800242a:	4628      	mov	r0, r5
 800242c:	f000 f87a 	bl	8002524 <_free_r>
 8002430:	2000      	movs	r0, #0
 8002432:	6360      	str	r0, [r4, #52]	; 0x34
 8002434:	e7c0      	b.n	80023b8 <__sflush_r+0x1c>
 8002436:	2301      	movs	r3, #1
 8002438:	4628      	mov	r0, r5
 800243a:	47b0      	blx	r6
 800243c:	1c41      	adds	r1, r0, #1
 800243e:	d1c8      	bne.n	80023d2 <__sflush_r+0x36>
 8002440:	682b      	ldr	r3, [r5, #0]
 8002442:	2b00      	cmp	r3, #0
 8002444:	d0c5      	beq.n	80023d2 <__sflush_r+0x36>
 8002446:	2b1d      	cmp	r3, #29
 8002448:	d001      	beq.n	800244e <__sflush_r+0xb2>
 800244a:	2b16      	cmp	r3, #22
 800244c:	d101      	bne.n	8002452 <__sflush_r+0xb6>
 800244e:	602f      	str	r7, [r5, #0]
 8002450:	e7b1      	b.n	80023b6 <__sflush_r+0x1a>
 8002452:	89a3      	ldrh	r3, [r4, #12]
 8002454:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002458:	81a3      	strh	r3, [r4, #12]
 800245a:	e7ad      	b.n	80023b8 <__sflush_r+0x1c>
 800245c:	690f      	ldr	r7, [r1, #16]
 800245e:	2f00      	cmp	r7, #0
 8002460:	d0a9      	beq.n	80023b6 <__sflush_r+0x1a>
 8002462:	0793      	lsls	r3, r2, #30
 8002464:	680e      	ldr	r6, [r1, #0]
 8002466:	bf08      	it	eq
 8002468:	694b      	ldreq	r3, [r1, #20]
 800246a:	600f      	str	r7, [r1, #0]
 800246c:	bf18      	it	ne
 800246e:	2300      	movne	r3, #0
 8002470:	eba6 0807 	sub.w	r8, r6, r7
 8002474:	608b      	str	r3, [r1, #8]
 8002476:	f1b8 0f00 	cmp.w	r8, #0
 800247a:	dd9c      	ble.n	80023b6 <__sflush_r+0x1a>
 800247c:	4643      	mov	r3, r8
 800247e:	463a      	mov	r2, r7
 8002480:	6a21      	ldr	r1, [r4, #32]
 8002482:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8002484:	4628      	mov	r0, r5
 8002486:	47b0      	blx	r6
 8002488:	2800      	cmp	r0, #0
 800248a:	dc06      	bgt.n	800249a <__sflush_r+0xfe>
 800248c:	89a3      	ldrh	r3, [r4, #12]
 800248e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002492:	81a3      	strh	r3, [r4, #12]
 8002494:	f04f 30ff 	mov.w	r0, #4294967295
 8002498:	e78e      	b.n	80023b8 <__sflush_r+0x1c>
 800249a:	4407      	add	r7, r0
 800249c:	eba8 0800 	sub.w	r8, r8, r0
 80024a0:	e7e9      	b.n	8002476 <__sflush_r+0xda>
 80024a2:	bf00      	nop
 80024a4:	20400001 	.word	0x20400001

080024a8 <_fflush_r>:
 80024a8:	b538      	push	{r3, r4, r5, lr}
 80024aa:	690b      	ldr	r3, [r1, #16]
 80024ac:	4605      	mov	r5, r0
 80024ae:	460c      	mov	r4, r1
 80024b0:	b1db      	cbz	r3, 80024ea <_fflush_r+0x42>
 80024b2:	b118      	cbz	r0, 80024bc <_fflush_r+0x14>
 80024b4:	6983      	ldr	r3, [r0, #24]
 80024b6:	b90b      	cbnz	r3, 80024bc <_fflush_r+0x14>
 80024b8:	f7ff fdc6 	bl	8002048 <__sinit>
 80024bc:	4b0c      	ldr	r3, [pc, #48]	; (80024f0 <_fflush_r+0x48>)
 80024be:	429c      	cmp	r4, r3
 80024c0:	d109      	bne.n	80024d6 <_fflush_r+0x2e>
 80024c2:	686c      	ldr	r4, [r5, #4]
 80024c4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80024c8:	b17b      	cbz	r3, 80024ea <_fflush_r+0x42>
 80024ca:	4621      	mov	r1, r4
 80024cc:	4628      	mov	r0, r5
 80024ce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80024d2:	f7ff bf63 	b.w	800239c <__sflush_r>
 80024d6:	4b07      	ldr	r3, [pc, #28]	; (80024f4 <_fflush_r+0x4c>)
 80024d8:	429c      	cmp	r4, r3
 80024da:	d101      	bne.n	80024e0 <_fflush_r+0x38>
 80024dc:	68ac      	ldr	r4, [r5, #8]
 80024de:	e7f1      	b.n	80024c4 <_fflush_r+0x1c>
 80024e0:	4b05      	ldr	r3, [pc, #20]	; (80024f8 <_fflush_r+0x50>)
 80024e2:	429c      	cmp	r4, r3
 80024e4:	bf08      	it	eq
 80024e6:	68ec      	ldreq	r4, [r5, #12]
 80024e8:	e7ec      	b.n	80024c4 <_fflush_r+0x1c>
 80024ea:	2000      	movs	r0, #0
 80024ec:	bd38      	pop	{r3, r4, r5, pc}
 80024ee:	bf00      	nop
 80024f0:	08002f90 	.word	0x08002f90
 80024f4:	08002fb0 	.word	0x08002fb0
 80024f8:	08002f70 	.word	0x08002f70

080024fc <_lseek_r>:
 80024fc:	b538      	push	{r3, r4, r5, lr}
 80024fe:	4c07      	ldr	r4, [pc, #28]	; (800251c <_lseek_r+0x20>)
 8002500:	4605      	mov	r5, r0
 8002502:	4608      	mov	r0, r1
 8002504:	4611      	mov	r1, r2
 8002506:	2200      	movs	r2, #0
 8002508:	6022      	str	r2, [r4, #0]
 800250a:	461a      	mov	r2, r3
 800250c:	f7ff fb4d 	bl	8001baa <_lseek>
 8002510:	1c43      	adds	r3, r0, #1
 8002512:	d102      	bne.n	800251a <_lseek_r+0x1e>
 8002514:	6823      	ldr	r3, [r4, #0]
 8002516:	b103      	cbz	r3, 800251a <_lseek_r+0x1e>
 8002518:	602b      	str	r3, [r5, #0]
 800251a:	bd38      	pop	{r3, r4, r5, pc}
 800251c:	20000184 	.word	0x20000184

08002520 <__malloc_lock>:
 8002520:	4770      	bx	lr

08002522 <__malloc_unlock>:
 8002522:	4770      	bx	lr

08002524 <_free_r>:
 8002524:	b538      	push	{r3, r4, r5, lr}
 8002526:	4605      	mov	r5, r0
 8002528:	2900      	cmp	r1, #0
 800252a:	d045      	beq.n	80025b8 <_free_r+0x94>
 800252c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002530:	1f0c      	subs	r4, r1, #4
 8002532:	2b00      	cmp	r3, #0
 8002534:	bfb8      	it	lt
 8002536:	18e4      	addlt	r4, r4, r3
 8002538:	f7ff fff2 	bl	8002520 <__malloc_lock>
 800253c:	4a1f      	ldr	r2, [pc, #124]	; (80025bc <_free_r+0x98>)
 800253e:	6813      	ldr	r3, [r2, #0]
 8002540:	4610      	mov	r0, r2
 8002542:	b933      	cbnz	r3, 8002552 <_free_r+0x2e>
 8002544:	6063      	str	r3, [r4, #4]
 8002546:	6014      	str	r4, [r2, #0]
 8002548:	4628      	mov	r0, r5
 800254a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800254e:	f7ff bfe8 	b.w	8002522 <__malloc_unlock>
 8002552:	42a3      	cmp	r3, r4
 8002554:	d90c      	bls.n	8002570 <_free_r+0x4c>
 8002556:	6821      	ldr	r1, [r4, #0]
 8002558:	1862      	adds	r2, r4, r1
 800255a:	4293      	cmp	r3, r2
 800255c:	bf04      	itt	eq
 800255e:	681a      	ldreq	r2, [r3, #0]
 8002560:	685b      	ldreq	r3, [r3, #4]
 8002562:	6063      	str	r3, [r4, #4]
 8002564:	bf04      	itt	eq
 8002566:	1852      	addeq	r2, r2, r1
 8002568:	6022      	streq	r2, [r4, #0]
 800256a:	6004      	str	r4, [r0, #0]
 800256c:	e7ec      	b.n	8002548 <_free_r+0x24>
 800256e:	4613      	mov	r3, r2
 8002570:	685a      	ldr	r2, [r3, #4]
 8002572:	b10a      	cbz	r2, 8002578 <_free_r+0x54>
 8002574:	42a2      	cmp	r2, r4
 8002576:	d9fa      	bls.n	800256e <_free_r+0x4a>
 8002578:	6819      	ldr	r1, [r3, #0]
 800257a:	1858      	adds	r0, r3, r1
 800257c:	42a0      	cmp	r0, r4
 800257e:	d10b      	bne.n	8002598 <_free_r+0x74>
 8002580:	6820      	ldr	r0, [r4, #0]
 8002582:	4401      	add	r1, r0
 8002584:	1858      	adds	r0, r3, r1
 8002586:	4282      	cmp	r2, r0
 8002588:	6019      	str	r1, [r3, #0]
 800258a:	d1dd      	bne.n	8002548 <_free_r+0x24>
 800258c:	6810      	ldr	r0, [r2, #0]
 800258e:	6852      	ldr	r2, [r2, #4]
 8002590:	605a      	str	r2, [r3, #4]
 8002592:	4401      	add	r1, r0
 8002594:	6019      	str	r1, [r3, #0]
 8002596:	e7d7      	b.n	8002548 <_free_r+0x24>
 8002598:	d902      	bls.n	80025a0 <_free_r+0x7c>
 800259a:	230c      	movs	r3, #12
 800259c:	602b      	str	r3, [r5, #0]
 800259e:	e7d3      	b.n	8002548 <_free_r+0x24>
 80025a0:	6820      	ldr	r0, [r4, #0]
 80025a2:	1821      	adds	r1, r4, r0
 80025a4:	428a      	cmp	r2, r1
 80025a6:	bf04      	itt	eq
 80025a8:	6811      	ldreq	r1, [r2, #0]
 80025aa:	6852      	ldreq	r2, [r2, #4]
 80025ac:	6062      	str	r2, [r4, #4]
 80025ae:	bf04      	itt	eq
 80025b0:	1809      	addeq	r1, r1, r0
 80025b2:	6021      	streq	r1, [r4, #0]
 80025b4:	605c      	str	r4, [r3, #4]
 80025b6:	e7c7      	b.n	8002548 <_free_r+0x24>
 80025b8:	bd38      	pop	{r3, r4, r5, pc}
 80025ba:	bf00      	nop
 80025bc:	20000154 	.word	0x20000154

080025c0 <__sfputc_r>:
 80025c0:	6893      	ldr	r3, [r2, #8]
 80025c2:	3b01      	subs	r3, #1
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	b410      	push	{r4}
 80025c8:	6093      	str	r3, [r2, #8]
 80025ca:	da07      	bge.n	80025dc <__sfputc_r+0x1c>
 80025cc:	6994      	ldr	r4, [r2, #24]
 80025ce:	42a3      	cmp	r3, r4
 80025d0:	db01      	blt.n	80025d6 <__sfputc_r+0x16>
 80025d2:	290a      	cmp	r1, #10
 80025d4:	d102      	bne.n	80025dc <__sfputc_r+0x1c>
 80025d6:	bc10      	pop	{r4}
 80025d8:	f000 baca 	b.w	8002b70 <__swbuf_r>
 80025dc:	6813      	ldr	r3, [r2, #0]
 80025de:	1c58      	adds	r0, r3, #1
 80025e0:	6010      	str	r0, [r2, #0]
 80025e2:	7019      	strb	r1, [r3, #0]
 80025e4:	4608      	mov	r0, r1
 80025e6:	bc10      	pop	{r4}
 80025e8:	4770      	bx	lr

080025ea <__sfputs_r>:
 80025ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80025ec:	4606      	mov	r6, r0
 80025ee:	460f      	mov	r7, r1
 80025f0:	4614      	mov	r4, r2
 80025f2:	18d5      	adds	r5, r2, r3
 80025f4:	42ac      	cmp	r4, r5
 80025f6:	d101      	bne.n	80025fc <__sfputs_r+0x12>
 80025f8:	2000      	movs	r0, #0
 80025fa:	e007      	b.n	800260c <__sfputs_r+0x22>
 80025fc:	463a      	mov	r2, r7
 80025fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002602:	4630      	mov	r0, r6
 8002604:	f7ff ffdc 	bl	80025c0 <__sfputc_r>
 8002608:	1c43      	adds	r3, r0, #1
 800260a:	d1f3      	bne.n	80025f4 <__sfputs_r+0xa>
 800260c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08002610 <_vfiprintf_r>:
 8002610:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002614:	460c      	mov	r4, r1
 8002616:	b09d      	sub	sp, #116	; 0x74
 8002618:	4617      	mov	r7, r2
 800261a:	461d      	mov	r5, r3
 800261c:	4606      	mov	r6, r0
 800261e:	b118      	cbz	r0, 8002628 <_vfiprintf_r+0x18>
 8002620:	6983      	ldr	r3, [r0, #24]
 8002622:	b90b      	cbnz	r3, 8002628 <_vfiprintf_r+0x18>
 8002624:	f7ff fd10 	bl	8002048 <__sinit>
 8002628:	4b7c      	ldr	r3, [pc, #496]	; (800281c <_vfiprintf_r+0x20c>)
 800262a:	429c      	cmp	r4, r3
 800262c:	d158      	bne.n	80026e0 <_vfiprintf_r+0xd0>
 800262e:	6874      	ldr	r4, [r6, #4]
 8002630:	89a3      	ldrh	r3, [r4, #12]
 8002632:	0718      	lsls	r0, r3, #28
 8002634:	d55e      	bpl.n	80026f4 <_vfiprintf_r+0xe4>
 8002636:	6923      	ldr	r3, [r4, #16]
 8002638:	2b00      	cmp	r3, #0
 800263a:	d05b      	beq.n	80026f4 <_vfiprintf_r+0xe4>
 800263c:	2300      	movs	r3, #0
 800263e:	9309      	str	r3, [sp, #36]	; 0x24
 8002640:	2320      	movs	r3, #32
 8002642:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002646:	2330      	movs	r3, #48	; 0x30
 8002648:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800264c:	9503      	str	r5, [sp, #12]
 800264e:	f04f 0b01 	mov.w	fp, #1
 8002652:	46b8      	mov	r8, r7
 8002654:	4645      	mov	r5, r8
 8002656:	f815 3b01 	ldrb.w	r3, [r5], #1
 800265a:	b10b      	cbz	r3, 8002660 <_vfiprintf_r+0x50>
 800265c:	2b25      	cmp	r3, #37	; 0x25
 800265e:	d154      	bne.n	800270a <_vfiprintf_r+0xfa>
 8002660:	ebb8 0a07 	subs.w	sl, r8, r7
 8002664:	d00b      	beq.n	800267e <_vfiprintf_r+0x6e>
 8002666:	4653      	mov	r3, sl
 8002668:	463a      	mov	r2, r7
 800266a:	4621      	mov	r1, r4
 800266c:	4630      	mov	r0, r6
 800266e:	f7ff ffbc 	bl	80025ea <__sfputs_r>
 8002672:	3001      	adds	r0, #1
 8002674:	f000 80c2 	beq.w	80027fc <_vfiprintf_r+0x1ec>
 8002678:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800267a:	4453      	add	r3, sl
 800267c:	9309      	str	r3, [sp, #36]	; 0x24
 800267e:	f898 3000 	ldrb.w	r3, [r8]
 8002682:	2b00      	cmp	r3, #0
 8002684:	f000 80ba 	beq.w	80027fc <_vfiprintf_r+0x1ec>
 8002688:	2300      	movs	r3, #0
 800268a:	f04f 32ff 	mov.w	r2, #4294967295
 800268e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002692:	9304      	str	r3, [sp, #16]
 8002694:	9307      	str	r3, [sp, #28]
 8002696:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800269a:	931a      	str	r3, [sp, #104]	; 0x68
 800269c:	46a8      	mov	r8, r5
 800269e:	2205      	movs	r2, #5
 80026a0:	f818 1b01 	ldrb.w	r1, [r8], #1
 80026a4:	485e      	ldr	r0, [pc, #376]	; (8002820 <_vfiprintf_r+0x210>)
 80026a6:	f7fd fdbb 	bl	8000220 <memchr>
 80026aa:	9b04      	ldr	r3, [sp, #16]
 80026ac:	bb78      	cbnz	r0, 800270e <_vfiprintf_r+0xfe>
 80026ae:	06d9      	lsls	r1, r3, #27
 80026b0:	bf44      	itt	mi
 80026b2:	2220      	movmi	r2, #32
 80026b4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80026b8:	071a      	lsls	r2, r3, #28
 80026ba:	bf44      	itt	mi
 80026bc:	222b      	movmi	r2, #43	; 0x2b
 80026be:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80026c2:	782a      	ldrb	r2, [r5, #0]
 80026c4:	2a2a      	cmp	r2, #42	; 0x2a
 80026c6:	d02a      	beq.n	800271e <_vfiprintf_r+0x10e>
 80026c8:	9a07      	ldr	r2, [sp, #28]
 80026ca:	46a8      	mov	r8, r5
 80026cc:	2000      	movs	r0, #0
 80026ce:	250a      	movs	r5, #10
 80026d0:	4641      	mov	r1, r8
 80026d2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80026d6:	3b30      	subs	r3, #48	; 0x30
 80026d8:	2b09      	cmp	r3, #9
 80026da:	d969      	bls.n	80027b0 <_vfiprintf_r+0x1a0>
 80026dc:	b360      	cbz	r0, 8002738 <_vfiprintf_r+0x128>
 80026de:	e024      	b.n	800272a <_vfiprintf_r+0x11a>
 80026e0:	4b50      	ldr	r3, [pc, #320]	; (8002824 <_vfiprintf_r+0x214>)
 80026e2:	429c      	cmp	r4, r3
 80026e4:	d101      	bne.n	80026ea <_vfiprintf_r+0xda>
 80026e6:	68b4      	ldr	r4, [r6, #8]
 80026e8:	e7a2      	b.n	8002630 <_vfiprintf_r+0x20>
 80026ea:	4b4f      	ldr	r3, [pc, #316]	; (8002828 <_vfiprintf_r+0x218>)
 80026ec:	429c      	cmp	r4, r3
 80026ee:	bf08      	it	eq
 80026f0:	68f4      	ldreq	r4, [r6, #12]
 80026f2:	e79d      	b.n	8002630 <_vfiprintf_r+0x20>
 80026f4:	4621      	mov	r1, r4
 80026f6:	4630      	mov	r0, r6
 80026f8:	f000 fa8c 	bl	8002c14 <__swsetup_r>
 80026fc:	2800      	cmp	r0, #0
 80026fe:	d09d      	beq.n	800263c <_vfiprintf_r+0x2c>
 8002700:	f04f 30ff 	mov.w	r0, #4294967295
 8002704:	b01d      	add	sp, #116	; 0x74
 8002706:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800270a:	46a8      	mov	r8, r5
 800270c:	e7a2      	b.n	8002654 <_vfiprintf_r+0x44>
 800270e:	4a44      	ldr	r2, [pc, #272]	; (8002820 <_vfiprintf_r+0x210>)
 8002710:	1a80      	subs	r0, r0, r2
 8002712:	fa0b f000 	lsl.w	r0, fp, r0
 8002716:	4318      	orrs	r0, r3
 8002718:	9004      	str	r0, [sp, #16]
 800271a:	4645      	mov	r5, r8
 800271c:	e7be      	b.n	800269c <_vfiprintf_r+0x8c>
 800271e:	9a03      	ldr	r2, [sp, #12]
 8002720:	1d11      	adds	r1, r2, #4
 8002722:	6812      	ldr	r2, [r2, #0]
 8002724:	9103      	str	r1, [sp, #12]
 8002726:	2a00      	cmp	r2, #0
 8002728:	db01      	blt.n	800272e <_vfiprintf_r+0x11e>
 800272a:	9207      	str	r2, [sp, #28]
 800272c:	e004      	b.n	8002738 <_vfiprintf_r+0x128>
 800272e:	4252      	negs	r2, r2
 8002730:	f043 0302 	orr.w	r3, r3, #2
 8002734:	9207      	str	r2, [sp, #28]
 8002736:	9304      	str	r3, [sp, #16]
 8002738:	f898 3000 	ldrb.w	r3, [r8]
 800273c:	2b2e      	cmp	r3, #46	; 0x2e
 800273e:	d10e      	bne.n	800275e <_vfiprintf_r+0x14e>
 8002740:	f898 3001 	ldrb.w	r3, [r8, #1]
 8002744:	2b2a      	cmp	r3, #42	; 0x2a
 8002746:	d138      	bne.n	80027ba <_vfiprintf_r+0x1aa>
 8002748:	9b03      	ldr	r3, [sp, #12]
 800274a:	1d1a      	adds	r2, r3, #4
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	9203      	str	r2, [sp, #12]
 8002750:	2b00      	cmp	r3, #0
 8002752:	bfb8      	it	lt
 8002754:	f04f 33ff 	movlt.w	r3, #4294967295
 8002758:	f108 0802 	add.w	r8, r8, #2
 800275c:	9305      	str	r3, [sp, #20]
 800275e:	4d33      	ldr	r5, [pc, #204]	; (800282c <_vfiprintf_r+0x21c>)
 8002760:	f898 1000 	ldrb.w	r1, [r8]
 8002764:	2203      	movs	r2, #3
 8002766:	4628      	mov	r0, r5
 8002768:	f7fd fd5a 	bl	8000220 <memchr>
 800276c:	b140      	cbz	r0, 8002780 <_vfiprintf_r+0x170>
 800276e:	2340      	movs	r3, #64	; 0x40
 8002770:	1b40      	subs	r0, r0, r5
 8002772:	fa03 f000 	lsl.w	r0, r3, r0
 8002776:	9b04      	ldr	r3, [sp, #16]
 8002778:	4303      	orrs	r3, r0
 800277a:	f108 0801 	add.w	r8, r8, #1
 800277e:	9304      	str	r3, [sp, #16]
 8002780:	f898 1000 	ldrb.w	r1, [r8]
 8002784:	482a      	ldr	r0, [pc, #168]	; (8002830 <_vfiprintf_r+0x220>)
 8002786:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800278a:	2206      	movs	r2, #6
 800278c:	f108 0701 	add.w	r7, r8, #1
 8002790:	f7fd fd46 	bl	8000220 <memchr>
 8002794:	2800      	cmp	r0, #0
 8002796:	d037      	beq.n	8002808 <_vfiprintf_r+0x1f8>
 8002798:	4b26      	ldr	r3, [pc, #152]	; (8002834 <_vfiprintf_r+0x224>)
 800279a:	bb1b      	cbnz	r3, 80027e4 <_vfiprintf_r+0x1d4>
 800279c:	9b03      	ldr	r3, [sp, #12]
 800279e:	3307      	adds	r3, #7
 80027a0:	f023 0307 	bic.w	r3, r3, #7
 80027a4:	3308      	adds	r3, #8
 80027a6:	9303      	str	r3, [sp, #12]
 80027a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80027aa:	444b      	add	r3, r9
 80027ac:	9309      	str	r3, [sp, #36]	; 0x24
 80027ae:	e750      	b.n	8002652 <_vfiprintf_r+0x42>
 80027b0:	fb05 3202 	mla	r2, r5, r2, r3
 80027b4:	2001      	movs	r0, #1
 80027b6:	4688      	mov	r8, r1
 80027b8:	e78a      	b.n	80026d0 <_vfiprintf_r+0xc0>
 80027ba:	2300      	movs	r3, #0
 80027bc:	f108 0801 	add.w	r8, r8, #1
 80027c0:	9305      	str	r3, [sp, #20]
 80027c2:	4619      	mov	r1, r3
 80027c4:	250a      	movs	r5, #10
 80027c6:	4640      	mov	r0, r8
 80027c8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80027cc:	3a30      	subs	r2, #48	; 0x30
 80027ce:	2a09      	cmp	r2, #9
 80027d0:	d903      	bls.n	80027da <_vfiprintf_r+0x1ca>
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d0c3      	beq.n	800275e <_vfiprintf_r+0x14e>
 80027d6:	9105      	str	r1, [sp, #20]
 80027d8:	e7c1      	b.n	800275e <_vfiprintf_r+0x14e>
 80027da:	fb05 2101 	mla	r1, r5, r1, r2
 80027de:	2301      	movs	r3, #1
 80027e0:	4680      	mov	r8, r0
 80027e2:	e7f0      	b.n	80027c6 <_vfiprintf_r+0x1b6>
 80027e4:	ab03      	add	r3, sp, #12
 80027e6:	9300      	str	r3, [sp, #0]
 80027e8:	4622      	mov	r2, r4
 80027ea:	4b13      	ldr	r3, [pc, #76]	; (8002838 <_vfiprintf_r+0x228>)
 80027ec:	a904      	add	r1, sp, #16
 80027ee:	4630      	mov	r0, r6
 80027f0:	f3af 8000 	nop.w
 80027f4:	f1b0 3fff 	cmp.w	r0, #4294967295
 80027f8:	4681      	mov	r9, r0
 80027fa:	d1d5      	bne.n	80027a8 <_vfiprintf_r+0x198>
 80027fc:	89a3      	ldrh	r3, [r4, #12]
 80027fe:	065b      	lsls	r3, r3, #25
 8002800:	f53f af7e 	bmi.w	8002700 <_vfiprintf_r+0xf0>
 8002804:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002806:	e77d      	b.n	8002704 <_vfiprintf_r+0xf4>
 8002808:	ab03      	add	r3, sp, #12
 800280a:	9300      	str	r3, [sp, #0]
 800280c:	4622      	mov	r2, r4
 800280e:	4b0a      	ldr	r3, [pc, #40]	; (8002838 <_vfiprintf_r+0x228>)
 8002810:	a904      	add	r1, sp, #16
 8002812:	4630      	mov	r0, r6
 8002814:	f000 f888 	bl	8002928 <_printf_i>
 8002818:	e7ec      	b.n	80027f4 <_vfiprintf_r+0x1e4>
 800281a:	bf00      	nop
 800281c:	08002f90 	.word	0x08002f90
 8002820:	08002fd4 	.word	0x08002fd4
 8002824:	08002fb0 	.word	0x08002fb0
 8002828:	08002f70 	.word	0x08002f70
 800282c:	08002fda 	.word	0x08002fda
 8002830:	08002fde 	.word	0x08002fde
 8002834:	00000000 	.word	0x00000000
 8002838:	080025eb 	.word	0x080025eb

0800283c <_printf_common>:
 800283c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002840:	4691      	mov	r9, r2
 8002842:	461f      	mov	r7, r3
 8002844:	688a      	ldr	r2, [r1, #8]
 8002846:	690b      	ldr	r3, [r1, #16]
 8002848:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800284c:	4293      	cmp	r3, r2
 800284e:	bfb8      	it	lt
 8002850:	4613      	movlt	r3, r2
 8002852:	f8c9 3000 	str.w	r3, [r9]
 8002856:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800285a:	4606      	mov	r6, r0
 800285c:	460c      	mov	r4, r1
 800285e:	b112      	cbz	r2, 8002866 <_printf_common+0x2a>
 8002860:	3301      	adds	r3, #1
 8002862:	f8c9 3000 	str.w	r3, [r9]
 8002866:	6823      	ldr	r3, [r4, #0]
 8002868:	0699      	lsls	r1, r3, #26
 800286a:	bf42      	ittt	mi
 800286c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8002870:	3302      	addmi	r3, #2
 8002872:	f8c9 3000 	strmi.w	r3, [r9]
 8002876:	6825      	ldr	r5, [r4, #0]
 8002878:	f015 0506 	ands.w	r5, r5, #6
 800287c:	d107      	bne.n	800288e <_printf_common+0x52>
 800287e:	f104 0a19 	add.w	sl, r4, #25
 8002882:	68e3      	ldr	r3, [r4, #12]
 8002884:	f8d9 2000 	ldr.w	r2, [r9]
 8002888:	1a9b      	subs	r3, r3, r2
 800288a:	42ab      	cmp	r3, r5
 800288c:	dc28      	bgt.n	80028e0 <_printf_common+0xa4>
 800288e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8002892:	6822      	ldr	r2, [r4, #0]
 8002894:	3300      	adds	r3, #0
 8002896:	bf18      	it	ne
 8002898:	2301      	movne	r3, #1
 800289a:	0692      	lsls	r2, r2, #26
 800289c:	d42d      	bmi.n	80028fa <_printf_common+0xbe>
 800289e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80028a2:	4639      	mov	r1, r7
 80028a4:	4630      	mov	r0, r6
 80028a6:	47c0      	blx	r8
 80028a8:	3001      	adds	r0, #1
 80028aa:	d020      	beq.n	80028ee <_printf_common+0xb2>
 80028ac:	6823      	ldr	r3, [r4, #0]
 80028ae:	68e5      	ldr	r5, [r4, #12]
 80028b0:	f8d9 2000 	ldr.w	r2, [r9]
 80028b4:	f003 0306 	and.w	r3, r3, #6
 80028b8:	2b04      	cmp	r3, #4
 80028ba:	bf08      	it	eq
 80028bc:	1aad      	subeq	r5, r5, r2
 80028be:	68a3      	ldr	r3, [r4, #8]
 80028c0:	6922      	ldr	r2, [r4, #16]
 80028c2:	bf0c      	ite	eq
 80028c4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80028c8:	2500      	movne	r5, #0
 80028ca:	4293      	cmp	r3, r2
 80028cc:	bfc4      	itt	gt
 80028ce:	1a9b      	subgt	r3, r3, r2
 80028d0:	18ed      	addgt	r5, r5, r3
 80028d2:	f04f 0900 	mov.w	r9, #0
 80028d6:	341a      	adds	r4, #26
 80028d8:	454d      	cmp	r5, r9
 80028da:	d11a      	bne.n	8002912 <_printf_common+0xd6>
 80028dc:	2000      	movs	r0, #0
 80028de:	e008      	b.n	80028f2 <_printf_common+0xb6>
 80028e0:	2301      	movs	r3, #1
 80028e2:	4652      	mov	r2, sl
 80028e4:	4639      	mov	r1, r7
 80028e6:	4630      	mov	r0, r6
 80028e8:	47c0      	blx	r8
 80028ea:	3001      	adds	r0, #1
 80028ec:	d103      	bne.n	80028f6 <_printf_common+0xba>
 80028ee:	f04f 30ff 	mov.w	r0, #4294967295
 80028f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80028f6:	3501      	adds	r5, #1
 80028f8:	e7c3      	b.n	8002882 <_printf_common+0x46>
 80028fa:	18e1      	adds	r1, r4, r3
 80028fc:	1c5a      	adds	r2, r3, #1
 80028fe:	2030      	movs	r0, #48	; 0x30
 8002900:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002904:	4422      	add	r2, r4
 8002906:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800290a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800290e:	3302      	adds	r3, #2
 8002910:	e7c5      	b.n	800289e <_printf_common+0x62>
 8002912:	2301      	movs	r3, #1
 8002914:	4622      	mov	r2, r4
 8002916:	4639      	mov	r1, r7
 8002918:	4630      	mov	r0, r6
 800291a:	47c0      	blx	r8
 800291c:	3001      	adds	r0, #1
 800291e:	d0e6      	beq.n	80028ee <_printf_common+0xb2>
 8002920:	f109 0901 	add.w	r9, r9, #1
 8002924:	e7d8      	b.n	80028d8 <_printf_common+0x9c>
	...

08002928 <_printf_i>:
 8002928:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800292c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8002930:	460c      	mov	r4, r1
 8002932:	7e09      	ldrb	r1, [r1, #24]
 8002934:	b085      	sub	sp, #20
 8002936:	296e      	cmp	r1, #110	; 0x6e
 8002938:	4617      	mov	r7, r2
 800293a:	4606      	mov	r6, r0
 800293c:	4698      	mov	r8, r3
 800293e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8002940:	f000 80b3 	beq.w	8002aaa <_printf_i+0x182>
 8002944:	d822      	bhi.n	800298c <_printf_i+0x64>
 8002946:	2963      	cmp	r1, #99	; 0x63
 8002948:	d036      	beq.n	80029b8 <_printf_i+0x90>
 800294a:	d80a      	bhi.n	8002962 <_printf_i+0x3a>
 800294c:	2900      	cmp	r1, #0
 800294e:	f000 80b9 	beq.w	8002ac4 <_printf_i+0x19c>
 8002952:	2958      	cmp	r1, #88	; 0x58
 8002954:	f000 8083 	beq.w	8002a5e <_printf_i+0x136>
 8002958:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800295c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8002960:	e032      	b.n	80029c8 <_printf_i+0xa0>
 8002962:	2964      	cmp	r1, #100	; 0x64
 8002964:	d001      	beq.n	800296a <_printf_i+0x42>
 8002966:	2969      	cmp	r1, #105	; 0x69
 8002968:	d1f6      	bne.n	8002958 <_printf_i+0x30>
 800296a:	6820      	ldr	r0, [r4, #0]
 800296c:	6813      	ldr	r3, [r2, #0]
 800296e:	0605      	lsls	r5, r0, #24
 8002970:	f103 0104 	add.w	r1, r3, #4
 8002974:	d52a      	bpl.n	80029cc <_printf_i+0xa4>
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	6011      	str	r1, [r2, #0]
 800297a:	2b00      	cmp	r3, #0
 800297c:	da03      	bge.n	8002986 <_printf_i+0x5e>
 800297e:	222d      	movs	r2, #45	; 0x2d
 8002980:	425b      	negs	r3, r3
 8002982:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8002986:	486f      	ldr	r0, [pc, #444]	; (8002b44 <_printf_i+0x21c>)
 8002988:	220a      	movs	r2, #10
 800298a:	e039      	b.n	8002a00 <_printf_i+0xd8>
 800298c:	2973      	cmp	r1, #115	; 0x73
 800298e:	f000 809d 	beq.w	8002acc <_printf_i+0x1a4>
 8002992:	d808      	bhi.n	80029a6 <_printf_i+0x7e>
 8002994:	296f      	cmp	r1, #111	; 0x6f
 8002996:	d020      	beq.n	80029da <_printf_i+0xb2>
 8002998:	2970      	cmp	r1, #112	; 0x70
 800299a:	d1dd      	bne.n	8002958 <_printf_i+0x30>
 800299c:	6823      	ldr	r3, [r4, #0]
 800299e:	f043 0320 	orr.w	r3, r3, #32
 80029a2:	6023      	str	r3, [r4, #0]
 80029a4:	e003      	b.n	80029ae <_printf_i+0x86>
 80029a6:	2975      	cmp	r1, #117	; 0x75
 80029a8:	d017      	beq.n	80029da <_printf_i+0xb2>
 80029aa:	2978      	cmp	r1, #120	; 0x78
 80029ac:	d1d4      	bne.n	8002958 <_printf_i+0x30>
 80029ae:	2378      	movs	r3, #120	; 0x78
 80029b0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80029b4:	4864      	ldr	r0, [pc, #400]	; (8002b48 <_printf_i+0x220>)
 80029b6:	e055      	b.n	8002a64 <_printf_i+0x13c>
 80029b8:	6813      	ldr	r3, [r2, #0]
 80029ba:	1d19      	adds	r1, r3, #4
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	6011      	str	r1, [r2, #0]
 80029c0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80029c4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80029c8:	2301      	movs	r3, #1
 80029ca:	e08c      	b.n	8002ae6 <_printf_i+0x1be>
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	6011      	str	r1, [r2, #0]
 80029d0:	f010 0f40 	tst.w	r0, #64	; 0x40
 80029d4:	bf18      	it	ne
 80029d6:	b21b      	sxthne	r3, r3
 80029d8:	e7cf      	b.n	800297a <_printf_i+0x52>
 80029da:	6813      	ldr	r3, [r2, #0]
 80029dc:	6825      	ldr	r5, [r4, #0]
 80029de:	1d18      	adds	r0, r3, #4
 80029e0:	6010      	str	r0, [r2, #0]
 80029e2:	0628      	lsls	r0, r5, #24
 80029e4:	d501      	bpl.n	80029ea <_printf_i+0xc2>
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	e002      	b.n	80029f0 <_printf_i+0xc8>
 80029ea:	0668      	lsls	r0, r5, #25
 80029ec:	d5fb      	bpl.n	80029e6 <_printf_i+0xbe>
 80029ee:	881b      	ldrh	r3, [r3, #0]
 80029f0:	4854      	ldr	r0, [pc, #336]	; (8002b44 <_printf_i+0x21c>)
 80029f2:	296f      	cmp	r1, #111	; 0x6f
 80029f4:	bf14      	ite	ne
 80029f6:	220a      	movne	r2, #10
 80029f8:	2208      	moveq	r2, #8
 80029fa:	2100      	movs	r1, #0
 80029fc:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002a00:	6865      	ldr	r5, [r4, #4]
 8002a02:	60a5      	str	r5, [r4, #8]
 8002a04:	2d00      	cmp	r5, #0
 8002a06:	f2c0 8095 	blt.w	8002b34 <_printf_i+0x20c>
 8002a0a:	6821      	ldr	r1, [r4, #0]
 8002a0c:	f021 0104 	bic.w	r1, r1, #4
 8002a10:	6021      	str	r1, [r4, #0]
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d13d      	bne.n	8002a92 <_printf_i+0x16a>
 8002a16:	2d00      	cmp	r5, #0
 8002a18:	f040 808e 	bne.w	8002b38 <_printf_i+0x210>
 8002a1c:	4665      	mov	r5, ip
 8002a1e:	2a08      	cmp	r2, #8
 8002a20:	d10b      	bne.n	8002a3a <_printf_i+0x112>
 8002a22:	6823      	ldr	r3, [r4, #0]
 8002a24:	07db      	lsls	r3, r3, #31
 8002a26:	d508      	bpl.n	8002a3a <_printf_i+0x112>
 8002a28:	6923      	ldr	r3, [r4, #16]
 8002a2a:	6862      	ldr	r2, [r4, #4]
 8002a2c:	429a      	cmp	r2, r3
 8002a2e:	bfde      	ittt	le
 8002a30:	2330      	movle	r3, #48	; 0x30
 8002a32:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002a36:	f105 35ff 	addle.w	r5, r5, #4294967295
 8002a3a:	ebac 0305 	sub.w	r3, ip, r5
 8002a3e:	6123      	str	r3, [r4, #16]
 8002a40:	f8cd 8000 	str.w	r8, [sp]
 8002a44:	463b      	mov	r3, r7
 8002a46:	aa03      	add	r2, sp, #12
 8002a48:	4621      	mov	r1, r4
 8002a4a:	4630      	mov	r0, r6
 8002a4c:	f7ff fef6 	bl	800283c <_printf_common>
 8002a50:	3001      	adds	r0, #1
 8002a52:	d14d      	bne.n	8002af0 <_printf_i+0x1c8>
 8002a54:	f04f 30ff 	mov.w	r0, #4294967295
 8002a58:	b005      	add	sp, #20
 8002a5a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002a5e:	4839      	ldr	r0, [pc, #228]	; (8002b44 <_printf_i+0x21c>)
 8002a60:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8002a64:	6813      	ldr	r3, [r2, #0]
 8002a66:	6821      	ldr	r1, [r4, #0]
 8002a68:	1d1d      	adds	r5, r3, #4
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	6015      	str	r5, [r2, #0]
 8002a6e:	060a      	lsls	r2, r1, #24
 8002a70:	d50b      	bpl.n	8002a8a <_printf_i+0x162>
 8002a72:	07ca      	lsls	r2, r1, #31
 8002a74:	bf44      	itt	mi
 8002a76:	f041 0120 	orrmi.w	r1, r1, #32
 8002a7a:	6021      	strmi	r1, [r4, #0]
 8002a7c:	b91b      	cbnz	r3, 8002a86 <_printf_i+0x15e>
 8002a7e:	6822      	ldr	r2, [r4, #0]
 8002a80:	f022 0220 	bic.w	r2, r2, #32
 8002a84:	6022      	str	r2, [r4, #0]
 8002a86:	2210      	movs	r2, #16
 8002a88:	e7b7      	b.n	80029fa <_printf_i+0xd2>
 8002a8a:	064d      	lsls	r5, r1, #25
 8002a8c:	bf48      	it	mi
 8002a8e:	b29b      	uxthmi	r3, r3
 8002a90:	e7ef      	b.n	8002a72 <_printf_i+0x14a>
 8002a92:	4665      	mov	r5, ip
 8002a94:	fbb3 f1f2 	udiv	r1, r3, r2
 8002a98:	fb02 3311 	mls	r3, r2, r1, r3
 8002a9c:	5cc3      	ldrb	r3, [r0, r3]
 8002a9e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8002aa2:	460b      	mov	r3, r1
 8002aa4:	2900      	cmp	r1, #0
 8002aa6:	d1f5      	bne.n	8002a94 <_printf_i+0x16c>
 8002aa8:	e7b9      	b.n	8002a1e <_printf_i+0xf6>
 8002aaa:	6813      	ldr	r3, [r2, #0]
 8002aac:	6825      	ldr	r5, [r4, #0]
 8002aae:	6961      	ldr	r1, [r4, #20]
 8002ab0:	1d18      	adds	r0, r3, #4
 8002ab2:	6010      	str	r0, [r2, #0]
 8002ab4:	0628      	lsls	r0, r5, #24
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	d501      	bpl.n	8002abe <_printf_i+0x196>
 8002aba:	6019      	str	r1, [r3, #0]
 8002abc:	e002      	b.n	8002ac4 <_printf_i+0x19c>
 8002abe:	066a      	lsls	r2, r5, #25
 8002ac0:	d5fb      	bpl.n	8002aba <_printf_i+0x192>
 8002ac2:	8019      	strh	r1, [r3, #0]
 8002ac4:	2300      	movs	r3, #0
 8002ac6:	6123      	str	r3, [r4, #16]
 8002ac8:	4665      	mov	r5, ip
 8002aca:	e7b9      	b.n	8002a40 <_printf_i+0x118>
 8002acc:	6813      	ldr	r3, [r2, #0]
 8002ace:	1d19      	adds	r1, r3, #4
 8002ad0:	6011      	str	r1, [r2, #0]
 8002ad2:	681d      	ldr	r5, [r3, #0]
 8002ad4:	6862      	ldr	r2, [r4, #4]
 8002ad6:	2100      	movs	r1, #0
 8002ad8:	4628      	mov	r0, r5
 8002ada:	f7fd fba1 	bl	8000220 <memchr>
 8002ade:	b108      	cbz	r0, 8002ae4 <_printf_i+0x1bc>
 8002ae0:	1b40      	subs	r0, r0, r5
 8002ae2:	6060      	str	r0, [r4, #4]
 8002ae4:	6863      	ldr	r3, [r4, #4]
 8002ae6:	6123      	str	r3, [r4, #16]
 8002ae8:	2300      	movs	r3, #0
 8002aea:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002aee:	e7a7      	b.n	8002a40 <_printf_i+0x118>
 8002af0:	6923      	ldr	r3, [r4, #16]
 8002af2:	462a      	mov	r2, r5
 8002af4:	4639      	mov	r1, r7
 8002af6:	4630      	mov	r0, r6
 8002af8:	47c0      	blx	r8
 8002afa:	3001      	adds	r0, #1
 8002afc:	d0aa      	beq.n	8002a54 <_printf_i+0x12c>
 8002afe:	6823      	ldr	r3, [r4, #0]
 8002b00:	079b      	lsls	r3, r3, #30
 8002b02:	d413      	bmi.n	8002b2c <_printf_i+0x204>
 8002b04:	68e0      	ldr	r0, [r4, #12]
 8002b06:	9b03      	ldr	r3, [sp, #12]
 8002b08:	4298      	cmp	r0, r3
 8002b0a:	bfb8      	it	lt
 8002b0c:	4618      	movlt	r0, r3
 8002b0e:	e7a3      	b.n	8002a58 <_printf_i+0x130>
 8002b10:	2301      	movs	r3, #1
 8002b12:	464a      	mov	r2, r9
 8002b14:	4639      	mov	r1, r7
 8002b16:	4630      	mov	r0, r6
 8002b18:	47c0      	blx	r8
 8002b1a:	3001      	adds	r0, #1
 8002b1c:	d09a      	beq.n	8002a54 <_printf_i+0x12c>
 8002b1e:	3501      	adds	r5, #1
 8002b20:	68e3      	ldr	r3, [r4, #12]
 8002b22:	9a03      	ldr	r2, [sp, #12]
 8002b24:	1a9b      	subs	r3, r3, r2
 8002b26:	42ab      	cmp	r3, r5
 8002b28:	dcf2      	bgt.n	8002b10 <_printf_i+0x1e8>
 8002b2a:	e7eb      	b.n	8002b04 <_printf_i+0x1dc>
 8002b2c:	2500      	movs	r5, #0
 8002b2e:	f104 0919 	add.w	r9, r4, #25
 8002b32:	e7f5      	b.n	8002b20 <_printf_i+0x1f8>
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d1ac      	bne.n	8002a92 <_printf_i+0x16a>
 8002b38:	7803      	ldrb	r3, [r0, #0]
 8002b3a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002b3e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002b42:	e76c      	b.n	8002a1e <_printf_i+0xf6>
 8002b44:	08002fe5 	.word	0x08002fe5
 8002b48:	08002ff6 	.word	0x08002ff6

08002b4c <_read_r>:
 8002b4c:	b538      	push	{r3, r4, r5, lr}
 8002b4e:	4c07      	ldr	r4, [pc, #28]	; (8002b6c <_read_r+0x20>)
 8002b50:	4605      	mov	r5, r0
 8002b52:	4608      	mov	r0, r1
 8002b54:	4611      	mov	r1, r2
 8002b56:	2200      	movs	r2, #0
 8002b58:	6022      	str	r2, [r4, #0]
 8002b5a:	461a      	mov	r2, r3
 8002b5c:	f7fe ffce 	bl	8001afc <_read>
 8002b60:	1c43      	adds	r3, r0, #1
 8002b62:	d102      	bne.n	8002b6a <_read_r+0x1e>
 8002b64:	6823      	ldr	r3, [r4, #0]
 8002b66:	b103      	cbz	r3, 8002b6a <_read_r+0x1e>
 8002b68:	602b      	str	r3, [r5, #0]
 8002b6a:	bd38      	pop	{r3, r4, r5, pc}
 8002b6c:	20000184 	.word	0x20000184

08002b70 <__swbuf_r>:
 8002b70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b72:	460e      	mov	r6, r1
 8002b74:	4614      	mov	r4, r2
 8002b76:	4605      	mov	r5, r0
 8002b78:	b118      	cbz	r0, 8002b82 <__swbuf_r+0x12>
 8002b7a:	6983      	ldr	r3, [r0, #24]
 8002b7c:	b90b      	cbnz	r3, 8002b82 <__swbuf_r+0x12>
 8002b7e:	f7ff fa63 	bl	8002048 <__sinit>
 8002b82:	4b21      	ldr	r3, [pc, #132]	; (8002c08 <__swbuf_r+0x98>)
 8002b84:	429c      	cmp	r4, r3
 8002b86:	d12a      	bne.n	8002bde <__swbuf_r+0x6e>
 8002b88:	686c      	ldr	r4, [r5, #4]
 8002b8a:	69a3      	ldr	r3, [r4, #24]
 8002b8c:	60a3      	str	r3, [r4, #8]
 8002b8e:	89a3      	ldrh	r3, [r4, #12]
 8002b90:	071a      	lsls	r2, r3, #28
 8002b92:	d52e      	bpl.n	8002bf2 <__swbuf_r+0x82>
 8002b94:	6923      	ldr	r3, [r4, #16]
 8002b96:	b363      	cbz	r3, 8002bf2 <__swbuf_r+0x82>
 8002b98:	6923      	ldr	r3, [r4, #16]
 8002b9a:	6820      	ldr	r0, [r4, #0]
 8002b9c:	1ac0      	subs	r0, r0, r3
 8002b9e:	6963      	ldr	r3, [r4, #20]
 8002ba0:	b2f6      	uxtb	r6, r6
 8002ba2:	4283      	cmp	r3, r0
 8002ba4:	4637      	mov	r7, r6
 8002ba6:	dc04      	bgt.n	8002bb2 <__swbuf_r+0x42>
 8002ba8:	4621      	mov	r1, r4
 8002baa:	4628      	mov	r0, r5
 8002bac:	f7ff fc7c 	bl	80024a8 <_fflush_r>
 8002bb0:	bb28      	cbnz	r0, 8002bfe <__swbuf_r+0x8e>
 8002bb2:	68a3      	ldr	r3, [r4, #8]
 8002bb4:	3b01      	subs	r3, #1
 8002bb6:	60a3      	str	r3, [r4, #8]
 8002bb8:	6823      	ldr	r3, [r4, #0]
 8002bba:	1c5a      	adds	r2, r3, #1
 8002bbc:	6022      	str	r2, [r4, #0]
 8002bbe:	701e      	strb	r6, [r3, #0]
 8002bc0:	6963      	ldr	r3, [r4, #20]
 8002bc2:	3001      	adds	r0, #1
 8002bc4:	4283      	cmp	r3, r0
 8002bc6:	d004      	beq.n	8002bd2 <__swbuf_r+0x62>
 8002bc8:	89a3      	ldrh	r3, [r4, #12]
 8002bca:	07db      	lsls	r3, r3, #31
 8002bcc:	d519      	bpl.n	8002c02 <__swbuf_r+0x92>
 8002bce:	2e0a      	cmp	r6, #10
 8002bd0:	d117      	bne.n	8002c02 <__swbuf_r+0x92>
 8002bd2:	4621      	mov	r1, r4
 8002bd4:	4628      	mov	r0, r5
 8002bd6:	f7ff fc67 	bl	80024a8 <_fflush_r>
 8002bda:	b190      	cbz	r0, 8002c02 <__swbuf_r+0x92>
 8002bdc:	e00f      	b.n	8002bfe <__swbuf_r+0x8e>
 8002bde:	4b0b      	ldr	r3, [pc, #44]	; (8002c0c <__swbuf_r+0x9c>)
 8002be0:	429c      	cmp	r4, r3
 8002be2:	d101      	bne.n	8002be8 <__swbuf_r+0x78>
 8002be4:	68ac      	ldr	r4, [r5, #8]
 8002be6:	e7d0      	b.n	8002b8a <__swbuf_r+0x1a>
 8002be8:	4b09      	ldr	r3, [pc, #36]	; (8002c10 <__swbuf_r+0xa0>)
 8002bea:	429c      	cmp	r4, r3
 8002bec:	bf08      	it	eq
 8002bee:	68ec      	ldreq	r4, [r5, #12]
 8002bf0:	e7cb      	b.n	8002b8a <__swbuf_r+0x1a>
 8002bf2:	4621      	mov	r1, r4
 8002bf4:	4628      	mov	r0, r5
 8002bf6:	f000 f80d 	bl	8002c14 <__swsetup_r>
 8002bfa:	2800      	cmp	r0, #0
 8002bfc:	d0cc      	beq.n	8002b98 <__swbuf_r+0x28>
 8002bfe:	f04f 37ff 	mov.w	r7, #4294967295
 8002c02:	4638      	mov	r0, r7
 8002c04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002c06:	bf00      	nop
 8002c08:	08002f90 	.word	0x08002f90
 8002c0c:	08002fb0 	.word	0x08002fb0
 8002c10:	08002f70 	.word	0x08002f70

08002c14 <__swsetup_r>:
 8002c14:	4b32      	ldr	r3, [pc, #200]	; (8002ce0 <__swsetup_r+0xcc>)
 8002c16:	b570      	push	{r4, r5, r6, lr}
 8002c18:	681d      	ldr	r5, [r3, #0]
 8002c1a:	4606      	mov	r6, r0
 8002c1c:	460c      	mov	r4, r1
 8002c1e:	b125      	cbz	r5, 8002c2a <__swsetup_r+0x16>
 8002c20:	69ab      	ldr	r3, [r5, #24]
 8002c22:	b913      	cbnz	r3, 8002c2a <__swsetup_r+0x16>
 8002c24:	4628      	mov	r0, r5
 8002c26:	f7ff fa0f 	bl	8002048 <__sinit>
 8002c2a:	4b2e      	ldr	r3, [pc, #184]	; (8002ce4 <__swsetup_r+0xd0>)
 8002c2c:	429c      	cmp	r4, r3
 8002c2e:	d10f      	bne.n	8002c50 <__swsetup_r+0x3c>
 8002c30:	686c      	ldr	r4, [r5, #4]
 8002c32:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002c36:	b29a      	uxth	r2, r3
 8002c38:	0715      	lsls	r5, r2, #28
 8002c3a:	d42c      	bmi.n	8002c96 <__swsetup_r+0x82>
 8002c3c:	06d0      	lsls	r0, r2, #27
 8002c3e:	d411      	bmi.n	8002c64 <__swsetup_r+0x50>
 8002c40:	2209      	movs	r2, #9
 8002c42:	6032      	str	r2, [r6, #0]
 8002c44:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002c48:	81a3      	strh	r3, [r4, #12]
 8002c4a:	f04f 30ff 	mov.w	r0, #4294967295
 8002c4e:	e03e      	b.n	8002cce <__swsetup_r+0xba>
 8002c50:	4b25      	ldr	r3, [pc, #148]	; (8002ce8 <__swsetup_r+0xd4>)
 8002c52:	429c      	cmp	r4, r3
 8002c54:	d101      	bne.n	8002c5a <__swsetup_r+0x46>
 8002c56:	68ac      	ldr	r4, [r5, #8]
 8002c58:	e7eb      	b.n	8002c32 <__swsetup_r+0x1e>
 8002c5a:	4b24      	ldr	r3, [pc, #144]	; (8002cec <__swsetup_r+0xd8>)
 8002c5c:	429c      	cmp	r4, r3
 8002c5e:	bf08      	it	eq
 8002c60:	68ec      	ldreq	r4, [r5, #12]
 8002c62:	e7e6      	b.n	8002c32 <__swsetup_r+0x1e>
 8002c64:	0751      	lsls	r1, r2, #29
 8002c66:	d512      	bpl.n	8002c8e <__swsetup_r+0x7a>
 8002c68:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002c6a:	b141      	cbz	r1, 8002c7e <__swsetup_r+0x6a>
 8002c6c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002c70:	4299      	cmp	r1, r3
 8002c72:	d002      	beq.n	8002c7a <__swsetup_r+0x66>
 8002c74:	4630      	mov	r0, r6
 8002c76:	f7ff fc55 	bl	8002524 <_free_r>
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	6363      	str	r3, [r4, #52]	; 0x34
 8002c7e:	89a3      	ldrh	r3, [r4, #12]
 8002c80:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8002c84:	81a3      	strh	r3, [r4, #12]
 8002c86:	2300      	movs	r3, #0
 8002c88:	6063      	str	r3, [r4, #4]
 8002c8a:	6923      	ldr	r3, [r4, #16]
 8002c8c:	6023      	str	r3, [r4, #0]
 8002c8e:	89a3      	ldrh	r3, [r4, #12]
 8002c90:	f043 0308 	orr.w	r3, r3, #8
 8002c94:	81a3      	strh	r3, [r4, #12]
 8002c96:	6923      	ldr	r3, [r4, #16]
 8002c98:	b94b      	cbnz	r3, 8002cae <__swsetup_r+0x9a>
 8002c9a:	89a3      	ldrh	r3, [r4, #12]
 8002c9c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8002ca0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002ca4:	d003      	beq.n	8002cae <__swsetup_r+0x9a>
 8002ca6:	4621      	mov	r1, r4
 8002ca8:	4630      	mov	r0, r6
 8002caa:	f000 f845 	bl	8002d38 <__smakebuf_r>
 8002cae:	89a2      	ldrh	r2, [r4, #12]
 8002cb0:	f012 0301 	ands.w	r3, r2, #1
 8002cb4:	d00c      	beq.n	8002cd0 <__swsetup_r+0xbc>
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	60a3      	str	r3, [r4, #8]
 8002cba:	6963      	ldr	r3, [r4, #20]
 8002cbc:	425b      	negs	r3, r3
 8002cbe:	61a3      	str	r3, [r4, #24]
 8002cc0:	6923      	ldr	r3, [r4, #16]
 8002cc2:	b953      	cbnz	r3, 8002cda <__swsetup_r+0xc6>
 8002cc4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002cc8:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8002ccc:	d1ba      	bne.n	8002c44 <__swsetup_r+0x30>
 8002cce:	bd70      	pop	{r4, r5, r6, pc}
 8002cd0:	0792      	lsls	r2, r2, #30
 8002cd2:	bf58      	it	pl
 8002cd4:	6963      	ldrpl	r3, [r4, #20]
 8002cd6:	60a3      	str	r3, [r4, #8]
 8002cd8:	e7f2      	b.n	8002cc0 <__swsetup_r+0xac>
 8002cda:	2000      	movs	r0, #0
 8002cdc:	e7f7      	b.n	8002cce <__swsetup_r+0xba>
 8002cde:	bf00      	nop
 8002ce0:	20000020 	.word	0x20000020
 8002ce4:	08002f90 	.word	0x08002f90
 8002ce8:	08002fb0 	.word	0x08002fb0
 8002cec:	08002f70 	.word	0x08002f70

08002cf0 <__swhatbuf_r>:
 8002cf0:	b570      	push	{r4, r5, r6, lr}
 8002cf2:	460e      	mov	r6, r1
 8002cf4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002cf8:	2900      	cmp	r1, #0
 8002cfa:	b096      	sub	sp, #88	; 0x58
 8002cfc:	4614      	mov	r4, r2
 8002cfe:	461d      	mov	r5, r3
 8002d00:	da07      	bge.n	8002d12 <__swhatbuf_r+0x22>
 8002d02:	2300      	movs	r3, #0
 8002d04:	602b      	str	r3, [r5, #0]
 8002d06:	89b3      	ldrh	r3, [r6, #12]
 8002d08:	061a      	lsls	r2, r3, #24
 8002d0a:	d410      	bmi.n	8002d2e <__swhatbuf_r+0x3e>
 8002d0c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002d10:	e00e      	b.n	8002d30 <__swhatbuf_r+0x40>
 8002d12:	466a      	mov	r2, sp
 8002d14:	f000 f850 	bl	8002db8 <_fstat_r>
 8002d18:	2800      	cmp	r0, #0
 8002d1a:	dbf2      	blt.n	8002d02 <__swhatbuf_r+0x12>
 8002d1c:	9a01      	ldr	r2, [sp, #4]
 8002d1e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8002d22:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8002d26:	425a      	negs	r2, r3
 8002d28:	415a      	adcs	r2, r3
 8002d2a:	602a      	str	r2, [r5, #0]
 8002d2c:	e7ee      	b.n	8002d0c <__swhatbuf_r+0x1c>
 8002d2e:	2340      	movs	r3, #64	; 0x40
 8002d30:	2000      	movs	r0, #0
 8002d32:	6023      	str	r3, [r4, #0]
 8002d34:	b016      	add	sp, #88	; 0x58
 8002d36:	bd70      	pop	{r4, r5, r6, pc}

08002d38 <__smakebuf_r>:
 8002d38:	898b      	ldrh	r3, [r1, #12]
 8002d3a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002d3c:	079d      	lsls	r5, r3, #30
 8002d3e:	4606      	mov	r6, r0
 8002d40:	460c      	mov	r4, r1
 8002d42:	d507      	bpl.n	8002d54 <__smakebuf_r+0x1c>
 8002d44:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8002d48:	6023      	str	r3, [r4, #0]
 8002d4a:	6123      	str	r3, [r4, #16]
 8002d4c:	2301      	movs	r3, #1
 8002d4e:	6163      	str	r3, [r4, #20]
 8002d50:	b002      	add	sp, #8
 8002d52:	bd70      	pop	{r4, r5, r6, pc}
 8002d54:	ab01      	add	r3, sp, #4
 8002d56:	466a      	mov	r2, sp
 8002d58:	f7ff ffca 	bl	8002cf0 <__swhatbuf_r>
 8002d5c:	9900      	ldr	r1, [sp, #0]
 8002d5e:	4605      	mov	r5, r0
 8002d60:	4630      	mov	r0, r6
 8002d62:	f7ff fa33 	bl	80021cc <_malloc_r>
 8002d66:	b948      	cbnz	r0, 8002d7c <__smakebuf_r+0x44>
 8002d68:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002d6c:	059a      	lsls	r2, r3, #22
 8002d6e:	d4ef      	bmi.n	8002d50 <__smakebuf_r+0x18>
 8002d70:	f023 0303 	bic.w	r3, r3, #3
 8002d74:	f043 0302 	orr.w	r3, r3, #2
 8002d78:	81a3      	strh	r3, [r4, #12]
 8002d7a:	e7e3      	b.n	8002d44 <__smakebuf_r+0xc>
 8002d7c:	4b0d      	ldr	r3, [pc, #52]	; (8002db4 <__smakebuf_r+0x7c>)
 8002d7e:	62b3      	str	r3, [r6, #40]	; 0x28
 8002d80:	89a3      	ldrh	r3, [r4, #12]
 8002d82:	6020      	str	r0, [r4, #0]
 8002d84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002d88:	81a3      	strh	r3, [r4, #12]
 8002d8a:	9b00      	ldr	r3, [sp, #0]
 8002d8c:	6163      	str	r3, [r4, #20]
 8002d8e:	9b01      	ldr	r3, [sp, #4]
 8002d90:	6120      	str	r0, [r4, #16]
 8002d92:	b15b      	cbz	r3, 8002dac <__smakebuf_r+0x74>
 8002d94:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002d98:	4630      	mov	r0, r6
 8002d9a:	f000 f81f 	bl	8002ddc <_isatty_r>
 8002d9e:	b128      	cbz	r0, 8002dac <__smakebuf_r+0x74>
 8002da0:	89a3      	ldrh	r3, [r4, #12]
 8002da2:	f023 0303 	bic.w	r3, r3, #3
 8002da6:	f043 0301 	orr.w	r3, r3, #1
 8002daa:	81a3      	strh	r3, [r4, #12]
 8002dac:	89a3      	ldrh	r3, [r4, #12]
 8002dae:	431d      	orrs	r5, r3
 8002db0:	81a5      	strh	r5, [r4, #12]
 8002db2:	e7cd      	b.n	8002d50 <__smakebuf_r+0x18>
 8002db4:	08002011 	.word	0x08002011

08002db8 <_fstat_r>:
 8002db8:	b538      	push	{r3, r4, r5, lr}
 8002dba:	4c07      	ldr	r4, [pc, #28]	; (8002dd8 <_fstat_r+0x20>)
 8002dbc:	2300      	movs	r3, #0
 8002dbe:	4605      	mov	r5, r0
 8002dc0:	4608      	mov	r0, r1
 8002dc2:	4611      	mov	r1, r2
 8002dc4:	6023      	str	r3, [r4, #0]
 8002dc6:	f7fe ff78 	bl	8001cba <_fstat>
 8002dca:	1c43      	adds	r3, r0, #1
 8002dcc:	d102      	bne.n	8002dd4 <_fstat_r+0x1c>
 8002dce:	6823      	ldr	r3, [r4, #0]
 8002dd0:	b103      	cbz	r3, 8002dd4 <_fstat_r+0x1c>
 8002dd2:	602b      	str	r3, [r5, #0]
 8002dd4:	bd38      	pop	{r3, r4, r5, pc}
 8002dd6:	bf00      	nop
 8002dd8:	20000184 	.word	0x20000184

08002ddc <_isatty_r>:
 8002ddc:	b538      	push	{r3, r4, r5, lr}
 8002dde:	4c06      	ldr	r4, [pc, #24]	; (8002df8 <_isatty_r+0x1c>)
 8002de0:	2300      	movs	r3, #0
 8002de2:	4605      	mov	r5, r0
 8002de4:	4608      	mov	r0, r1
 8002de6:	6023      	str	r3, [r4, #0]
 8002de8:	f7ff f8cc 	bl	8001f84 <_isatty>
 8002dec:	1c43      	adds	r3, r0, #1
 8002dee:	d102      	bne.n	8002df6 <_isatty_r+0x1a>
 8002df0:	6823      	ldr	r3, [r4, #0]
 8002df2:	b103      	cbz	r3, 8002df6 <_isatty_r+0x1a>
 8002df4:	602b      	str	r3, [r5, #0]
 8002df6:	bd38      	pop	{r3, r4, r5, pc}
 8002df8:	20000184 	.word	0x20000184

08002dfc <_init>:
 8002dfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002dfe:	bf00      	nop
 8002e00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e02:	bc08      	pop	{r3}
 8002e04:	469e      	mov	lr, r3
 8002e06:	4770      	bx	lr

08002e08 <_fini>:
 8002e08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e0a:	bf00      	nop
 8002e0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e0e:	bc08      	pop	{r3}
 8002e10:	469e      	mov	lr, r3
 8002e12:	4770      	bx	lr
