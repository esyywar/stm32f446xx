
stm32f446xx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000006d0  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000894  0800089c  0001089c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000894  08000894  0001089c  2**0
                  CONTENTS
  4 .ARM          00000000  08000894  08000894  0001089c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000894  0800089c  0001089c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000894  08000894  00010894  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000898  08000898  00010898  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  0001089c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  0800089c  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  0800089c  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  0001089c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001ac0  00000000  00000000  000108c6  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000433  00000000  00000000  00012386  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000000c8  00000000  00000000  000127c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000000a0  00000000  00000000  00012888  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00002b8d  00000000  00000000  00012928  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00000f98  00000000  00000000  000154b5  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0000b651  00000000  00000000  0001644d  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00021a9e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000274  00000000  00000000  00021b1c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000000 	.word	0x20000000
 80001e0:	00000000 	.word	0x00000000
 80001e4:	0800087c 	.word	0x0800087c

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000004 	.word	0x20000004
 8000200:	0800087c 	.word	0x0800087c

08000204 <GPIO_PortCode>:
 *
 * Params: 		struct GPIO_RegDef_t* - GPIO register base address
 *
 */
uint8_t GPIO_PortCode(GPIO_RegDef_t *pGPIOx)
{
 8000204:	b480      	push	{r7}
 8000206:	b083      	sub	sp, #12
 8000208:	af00      	add	r7, sp, #0
 800020a:	6078      	str	r0, [r7, #4]
	if (pGPIOx == GPIOA)
 800020c:	687b      	ldr	r3, [r7, #4]
 800020e:	4a1a      	ldr	r2, [pc, #104]	; (8000278 <GPIO_PortCode+0x74>)
 8000210:	4293      	cmp	r3, r2
 8000212:	d101      	bne.n	8000218 <GPIO_PortCode+0x14>
	{
		return 0;
 8000214:	2300      	movs	r3, #0
 8000216:	e02a      	b.n	800026e <GPIO_PortCode+0x6a>
	}
	else if (pGPIOx == GPIOB)
 8000218:	687b      	ldr	r3, [r7, #4]
 800021a:	4a18      	ldr	r2, [pc, #96]	; (800027c <GPIO_PortCode+0x78>)
 800021c:	4293      	cmp	r3, r2
 800021e:	d101      	bne.n	8000224 <GPIO_PortCode+0x20>
	{
		return 1;
 8000220:	2301      	movs	r3, #1
 8000222:	e024      	b.n	800026e <GPIO_PortCode+0x6a>
	}
	else if (pGPIOx == GPIOC)
 8000224:	687b      	ldr	r3, [r7, #4]
 8000226:	4a16      	ldr	r2, [pc, #88]	; (8000280 <GPIO_PortCode+0x7c>)
 8000228:	4293      	cmp	r3, r2
 800022a:	d101      	bne.n	8000230 <GPIO_PortCode+0x2c>
	{
		return 2;
 800022c:	2302      	movs	r3, #2
 800022e:	e01e      	b.n	800026e <GPIO_PortCode+0x6a>
	}
	else if (pGPIOx == GPIOD)
 8000230:	687b      	ldr	r3, [r7, #4]
 8000232:	4a14      	ldr	r2, [pc, #80]	; (8000284 <GPIO_PortCode+0x80>)
 8000234:	4293      	cmp	r3, r2
 8000236:	d101      	bne.n	800023c <GPIO_PortCode+0x38>
	{
		return 3;
 8000238:	2303      	movs	r3, #3
 800023a:	e018      	b.n	800026e <GPIO_PortCode+0x6a>
	}
	else if (pGPIOx == GPIOE)
 800023c:	687b      	ldr	r3, [r7, #4]
 800023e:	4a12      	ldr	r2, [pc, #72]	; (8000288 <GPIO_PortCode+0x84>)
 8000240:	4293      	cmp	r3, r2
 8000242:	d101      	bne.n	8000248 <GPIO_PortCode+0x44>
	{
		return 4;
 8000244:	2304      	movs	r3, #4
 8000246:	e012      	b.n	800026e <GPIO_PortCode+0x6a>
	}
	else if (pGPIOx == GPIOF)
 8000248:	687b      	ldr	r3, [r7, #4]
 800024a:	4a10      	ldr	r2, [pc, #64]	; (800028c <GPIO_PortCode+0x88>)
 800024c:	4293      	cmp	r3, r2
 800024e:	d101      	bne.n	8000254 <GPIO_PortCode+0x50>
	{
		return 5;
 8000250:	2305      	movs	r3, #5
 8000252:	e00c      	b.n	800026e <GPIO_PortCode+0x6a>
	}
	else if (pGPIOx == GPIOG)
 8000254:	687b      	ldr	r3, [r7, #4]
 8000256:	4a0e      	ldr	r2, [pc, #56]	; (8000290 <GPIO_PortCode+0x8c>)
 8000258:	4293      	cmp	r3, r2
 800025a:	d101      	bne.n	8000260 <GPIO_PortCode+0x5c>
	{
		return 6;
 800025c:	2306      	movs	r3, #6
 800025e:	e006      	b.n	800026e <GPIO_PortCode+0x6a>
	}
	else if (pGPIOx == GPIOH)
 8000260:	687b      	ldr	r3, [r7, #4]
 8000262:	4a0c      	ldr	r2, [pc, #48]	; (8000294 <GPIO_PortCode+0x90>)
 8000264:	4293      	cmp	r3, r2
 8000266:	d101      	bne.n	800026c <GPIO_PortCode+0x68>
	{
		return 7;
 8000268:	2307      	movs	r3, #7
 800026a:	e000      	b.n	800026e <GPIO_PortCode+0x6a>
	}

	return 0;
 800026c:	2300      	movs	r3, #0
}
 800026e:	4618      	mov	r0, r3
 8000270:	370c      	adds	r7, #12
 8000272:	46bd      	mov	sp, r7
 8000274:	bc80      	pop	{r7}
 8000276:	4770      	bx	lr
 8000278:	40020000 	.word	0x40020000
 800027c:	40020400 	.word	0x40020400
 8000280:	40020800 	.word	0x40020800
 8000284:	40020c00 	.word	0x40020c00
 8000288:	40021000 	.word	0x40021000
 800028c:	40021400 	.word	0x40021400
 8000290:	40021800 	.word	0x40021800
 8000294:	40021c00 	.word	0x40021c00

08000298 <GPIO_PeriClockControl>:
 * Params: 		struct GPIO_RegDef_t* - GPIO register base address
 * 				uint8_t - Enable or disable value
 *
 */
void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnOrDi)
{
 8000298:	b480      	push	{r7}
 800029a:	b083      	sub	sp, #12
 800029c:	af00      	add	r7, sp, #0
 800029e:	6078      	str	r0, [r7, #4]
 80002a0:	460b      	mov	r3, r1
 80002a2:	70fb      	strb	r3, [r7, #3]
	if (EnOrDi == ENABLE)
 80002a4:	78fb      	ldrb	r3, [r7, #3]
 80002a6:	2b01      	cmp	r3, #1
 80002a8:	d157      	bne.n	800035a <GPIO_PeriClockControl+0xc2>
	{
		if (pGPIOx == GPIOA)
 80002aa:	687b      	ldr	r3, [r7, #4]
 80002ac:	4a59      	ldr	r2, [pc, #356]	; (8000414 <GPIO_PeriClockControl+0x17c>)
 80002ae:	4293      	cmp	r3, r2
 80002b0:	d106      	bne.n	80002c0 <GPIO_PeriClockControl+0x28>
		{
			GPIOA_PCLK_EN();
 80002b2:	4b59      	ldr	r3, [pc, #356]	; (8000418 <GPIO_PeriClockControl+0x180>)
 80002b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002b6:	4a58      	ldr	r2, [pc, #352]	; (8000418 <GPIO_PeriClockControl+0x180>)
 80002b8:	f043 0301 	orr.w	r3, r3, #1
 80002bc:	6313      	str	r3, [r2, #48]	; 0x30
		else if (pGPIOx == GPIOH)
		{
			GPIOH_PCLK_DI();
		}
	}
}
 80002be:	e0a3      	b.n	8000408 <GPIO_PeriClockControl+0x170>
		else if (pGPIOx == GPIOB)
 80002c0:	687b      	ldr	r3, [r7, #4]
 80002c2:	4a56      	ldr	r2, [pc, #344]	; (800041c <GPIO_PeriClockControl+0x184>)
 80002c4:	4293      	cmp	r3, r2
 80002c6:	d106      	bne.n	80002d6 <GPIO_PeriClockControl+0x3e>
			GPIOB_PCLK_EN();
 80002c8:	4b53      	ldr	r3, [pc, #332]	; (8000418 <GPIO_PeriClockControl+0x180>)
 80002ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002cc:	4a52      	ldr	r2, [pc, #328]	; (8000418 <GPIO_PeriClockControl+0x180>)
 80002ce:	f043 0302 	orr.w	r3, r3, #2
 80002d2:	6313      	str	r3, [r2, #48]	; 0x30
}
 80002d4:	e098      	b.n	8000408 <GPIO_PeriClockControl+0x170>
		else if (pGPIOx == GPIOC)
 80002d6:	687b      	ldr	r3, [r7, #4]
 80002d8:	4a51      	ldr	r2, [pc, #324]	; (8000420 <GPIO_PeriClockControl+0x188>)
 80002da:	4293      	cmp	r3, r2
 80002dc:	d106      	bne.n	80002ec <GPIO_PeriClockControl+0x54>
			GPIOC_PCLK_EN();
 80002de:	4b4e      	ldr	r3, [pc, #312]	; (8000418 <GPIO_PeriClockControl+0x180>)
 80002e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002e2:	4a4d      	ldr	r2, [pc, #308]	; (8000418 <GPIO_PeriClockControl+0x180>)
 80002e4:	f043 0304 	orr.w	r3, r3, #4
 80002e8:	6313      	str	r3, [r2, #48]	; 0x30
}
 80002ea:	e08d      	b.n	8000408 <GPIO_PeriClockControl+0x170>
		else if (pGPIOx == GPIOD)
 80002ec:	687b      	ldr	r3, [r7, #4]
 80002ee:	4a4d      	ldr	r2, [pc, #308]	; (8000424 <GPIO_PeriClockControl+0x18c>)
 80002f0:	4293      	cmp	r3, r2
 80002f2:	d106      	bne.n	8000302 <GPIO_PeriClockControl+0x6a>
			GPIOD_PCLK_EN();
 80002f4:	4b48      	ldr	r3, [pc, #288]	; (8000418 <GPIO_PeriClockControl+0x180>)
 80002f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002f8:	4a47      	ldr	r2, [pc, #284]	; (8000418 <GPIO_PeriClockControl+0x180>)
 80002fa:	f043 0308 	orr.w	r3, r3, #8
 80002fe:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000300:	e082      	b.n	8000408 <GPIO_PeriClockControl+0x170>
		else if (pGPIOx == GPIOE)
 8000302:	687b      	ldr	r3, [r7, #4]
 8000304:	4a48      	ldr	r2, [pc, #288]	; (8000428 <GPIO_PeriClockControl+0x190>)
 8000306:	4293      	cmp	r3, r2
 8000308:	d106      	bne.n	8000318 <GPIO_PeriClockControl+0x80>
			GPIOE_PCLK_EN();
 800030a:	4b43      	ldr	r3, [pc, #268]	; (8000418 <GPIO_PeriClockControl+0x180>)
 800030c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800030e:	4a42      	ldr	r2, [pc, #264]	; (8000418 <GPIO_PeriClockControl+0x180>)
 8000310:	f043 0310 	orr.w	r3, r3, #16
 8000314:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000316:	e077      	b.n	8000408 <GPIO_PeriClockControl+0x170>
		else if (pGPIOx == GPIOF)
 8000318:	687b      	ldr	r3, [r7, #4]
 800031a:	4a44      	ldr	r2, [pc, #272]	; (800042c <GPIO_PeriClockControl+0x194>)
 800031c:	4293      	cmp	r3, r2
 800031e:	d106      	bne.n	800032e <GPIO_PeriClockControl+0x96>
			GPIOF_PCLK_EN();
 8000320:	4b3d      	ldr	r3, [pc, #244]	; (8000418 <GPIO_PeriClockControl+0x180>)
 8000322:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000324:	4a3c      	ldr	r2, [pc, #240]	; (8000418 <GPIO_PeriClockControl+0x180>)
 8000326:	f043 0320 	orr.w	r3, r3, #32
 800032a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800032c:	e06c      	b.n	8000408 <GPIO_PeriClockControl+0x170>
		else if (pGPIOx == GPIOG)
 800032e:	687b      	ldr	r3, [r7, #4]
 8000330:	4a3f      	ldr	r2, [pc, #252]	; (8000430 <GPIO_PeriClockControl+0x198>)
 8000332:	4293      	cmp	r3, r2
 8000334:	d106      	bne.n	8000344 <GPIO_PeriClockControl+0xac>
			GPIOG_PCLK_EN();
 8000336:	4b38      	ldr	r3, [pc, #224]	; (8000418 <GPIO_PeriClockControl+0x180>)
 8000338:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800033a:	4a37      	ldr	r2, [pc, #220]	; (8000418 <GPIO_PeriClockControl+0x180>)
 800033c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000340:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000342:	e061      	b.n	8000408 <GPIO_PeriClockControl+0x170>
		else if (pGPIOx == GPIOH)
 8000344:	687b      	ldr	r3, [r7, #4]
 8000346:	4a3b      	ldr	r2, [pc, #236]	; (8000434 <GPIO_PeriClockControl+0x19c>)
 8000348:	4293      	cmp	r3, r2
 800034a:	d15d      	bne.n	8000408 <GPIO_PeriClockControl+0x170>
			GPIOH_PCLK_EN();
 800034c:	4b32      	ldr	r3, [pc, #200]	; (8000418 <GPIO_PeriClockControl+0x180>)
 800034e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000350:	4a31      	ldr	r2, [pc, #196]	; (8000418 <GPIO_PeriClockControl+0x180>)
 8000352:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000356:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000358:	e056      	b.n	8000408 <GPIO_PeriClockControl+0x170>
		if (pGPIOx == GPIOA)
 800035a:	687b      	ldr	r3, [r7, #4]
 800035c:	4a2d      	ldr	r2, [pc, #180]	; (8000414 <GPIO_PeriClockControl+0x17c>)
 800035e:	4293      	cmp	r3, r2
 8000360:	d106      	bne.n	8000370 <GPIO_PeriClockControl+0xd8>
			GPIOA_PCLK_DI();
 8000362:	4b2d      	ldr	r3, [pc, #180]	; (8000418 <GPIO_PeriClockControl+0x180>)
 8000364:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000366:	4a2c      	ldr	r2, [pc, #176]	; (8000418 <GPIO_PeriClockControl+0x180>)
 8000368:	f023 0301 	bic.w	r3, r3, #1
 800036c:	6313      	str	r3, [r2, #48]	; 0x30
}
 800036e:	e04b      	b.n	8000408 <GPIO_PeriClockControl+0x170>
		else if (pGPIOx == GPIOB)
 8000370:	687b      	ldr	r3, [r7, #4]
 8000372:	4a2a      	ldr	r2, [pc, #168]	; (800041c <GPIO_PeriClockControl+0x184>)
 8000374:	4293      	cmp	r3, r2
 8000376:	d106      	bne.n	8000386 <GPIO_PeriClockControl+0xee>
			GPIOB_PCLK_DI();
 8000378:	4b27      	ldr	r3, [pc, #156]	; (8000418 <GPIO_PeriClockControl+0x180>)
 800037a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800037c:	4a26      	ldr	r2, [pc, #152]	; (8000418 <GPIO_PeriClockControl+0x180>)
 800037e:	f023 0302 	bic.w	r3, r3, #2
 8000382:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000384:	e040      	b.n	8000408 <GPIO_PeriClockControl+0x170>
		else if (pGPIOx == GPIOC)
 8000386:	687b      	ldr	r3, [r7, #4]
 8000388:	4a25      	ldr	r2, [pc, #148]	; (8000420 <GPIO_PeriClockControl+0x188>)
 800038a:	4293      	cmp	r3, r2
 800038c:	d106      	bne.n	800039c <GPIO_PeriClockControl+0x104>
			GPIOC_PCLK_DI();
 800038e:	4b22      	ldr	r3, [pc, #136]	; (8000418 <GPIO_PeriClockControl+0x180>)
 8000390:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000392:	4a21      	ldr	r2, [pc, #132]	; (8000418 <GPIO_PeriClockControl+0x180>)
 8000394:	f023 0304 	bic.w	r3, r3, #4
 8000398:	6313      	str	r3, [r2, #48]	; 0x30
}
 800039a:	e035      	b.n	8000408 <GPIO_PeriClockControl+0x170>
		else if (pGPIOx == GPIOD)
 800039c:	687b      	ldr	r3, [r7, #4]
 800039e:	4a21      	ldr	r2, [pc, #132]	; (8000424 <GPIO_PeriClockControl+0x18c>)
 80003a0:	4293      	cmp	r3, r2
 80003a2:	d106      	bne.n	80003b2 <GPIO_PeriClockControl+0x11a>
			GPIOD_PCLK_DI();
 80003a4:	4b1c      	ldr	r3, [pc, #112]	; (8000418 <GPIO_PeriClockControl+0x180>)
 80003a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003a8:	4a1b      	ldr	r2, [pc, #108]	; (8000418 <GPIO_PeriClockControl+0x180>)
 80003aa:	f023 0308 	bic.w	r3, r3, #8
 80003ae:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003b0:	e02a      	b.n	8000408 <GPIO_PeriClockControl+0x170>
		else if (pGPIOx == GPIOE)
 80003b2:	687b      	ldr	r3, [r7, #4]
 80003b4:	4a1c      	ldr	r2, [pc, #112]	; (8000428 <GPIO_PeriClockControl+0x190>)
 80003b6:	4293      	cmp	r3, r2
 80003b8:	d106      	bne.n	80003c8 <GPIO_PeriClockControl+0x130>
			GPIOE_PCLK_DI();
 80003ba:	4b17      	ldr	r3, [pc, #92]	; (8000418 <GPIO_PeriClockControl+0x180>)
 80003bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003be:	4a16      	ldr	r2, [pc, #88]	; (8000418 <GPIO_PeriClockControl+0x180>)
 80003c0:	f023 0310 	bic.w	r3, r3, #16
 80003c4:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003c6:	e01f      	b.n	8000408 <GPIO_PeriClockControl+0x170>
		else if (pGPIOx == GPIOF)
 80003c8:	687b      	ldr	r3, [r7, #4]
 80003ca:	4a18      	ldr	r2, [pc, #96]	; (800042c <GPIO_PeriClockControl+0x194>)
 80003cc:	4293      	cmp	r3, r2
 80003ce:	d106      	bne.n	80003de <GPIO_PeriClockControl+0x146>
			GPIOF_PCLK_DI();
 80003d0:	4b11      	ldr	r3, [pc, #68]	; (8000418 <GPIO_PeriClockControl+0x180>)
 80003d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003d4:	4a10      	ldr	r2, [pc, #64]	; (8000418 <GPIO_PeriClockControl+0x180>)
 80003d6:	f023 0320 	bic.w	r3, r3, #32
 80003da:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003dc:	e014      	b.n	8000408 <GPIO_PeriClockControl+0x170>
		else if (pGPIOx == GPIOG)
 80003de:	687b      	ldr	r3, [r7, #4]
 80003e0:	4a13      	ldr	r2, [pc, #76]	; (8000430 <GPIO_PeriClockControl+0x198>)
 80003e2:	4293      	cmp	r3, r2
 80003e4:	d106      	bne.n	80003f4 <GPIO_PeriClockControl+0x15c>
			GPIOG_PCLK_DI();
 80003e6:	4b0c      	ldr	r3, [pc, #48]	; (8000418 <GPIO_PeriClockControl+0x180>)
 80003e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003ea:	4a0b      	ldr	r2, [pc, #44]	; (8000418 <GPIO_PeriClockControl+0x180>)
 80003ec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80003f0:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003f2:	e009      	b.n	8000408 <GPIO_PeriClockControl+0x170>
		else if (pGPIOx == GPIOH)
 80003f4:	687b      	ldr	r3, [r7, #4]
 80003f6:	4a0f      	ldr	r2, [pc, #60]	; (8000434 <GPIO_PeriClockControl+0x19c>)
 80003f8:	4293      	cmp	r3, r2
 80003fa:	d105      	bne.n	8000408 <GPIO_PeriClockControl+0x170>
			GPIOH_PCLK_DI();
 80003fc:	4b06      	ldr	r3, [pc, #24]	; (8000418 <GPIO_PeriClockControl+0x180>)
 80003fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000400:	4a05      	ldr	r2, [pc, #20]	; (8000418 <GPIO_PeriClockControl+0x180>)
 8000402:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000406:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000408:	bf00      	nop
 800040a:	370c      	adds	r7, #12
 800040c:	46bd      	mov	sp, r7
 800040e:	bc80      	pop	{r7}
 8000410:	4770      	bx	lr
 8000412:	bf00      	nop
 8000414:	40020000 	.word	0x40020000
 8000418:	40023800 	.word	0x40023800
 800041c:	40020400 	.word	0x40020400
 8000420:	40020800 	.word	0x40020800
 8000424:	40020c00 	.word	0x40020c00
 8000428:	40021000 	.word	0x40021000
 800042c:	40021400 	.word	0x40021400
 8000430:	40021800 	.word	0x40021800
 8000434:	40021c00 	.word	0x40021c00

08000438 <GPIO_Init>:
 * Params:		struct GPIO_Handle_t*
 *
 *
 */
void GPIO_Init(GPIO_Handle_t *pGPIOxHandle)
{
 8000438:	b580      	push	{r7, lr}
 800043a:	b086      	sub	sp, #24
 800043c:	af00      	add	r7, sp, #0
 800043e:	6078      	str	r0, [r7, #4]
	// Enable clock to GPIO port
	GPIO_PeriClockControl(pGPIOxHandle->pGPIOx, ENABLE);
 8000440:	687b      	ldr	r3, [r7, #4]
 8000442:	681b      	ldr	r3, [r3, #0]
 8000444:	2101      	movs	r1, #1
 8000446:	4618      	mov	r0, r3
 8000448:	f7ff ff26 	bl	8000298 <GPIO_PeriClockControl>

	uint32_t temp = 0;
 800044c:	2300      	movs	r3, #0
 800044e:	617b      	str	r3, [r7, #20]

	// 1. Set GPIO pin mode
	if (pGPIOxHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG)
 8000450:	687b      	ldr	r3, [r7, #4]
 8000452:	795b      	ldrb	r3, [r3, #5]
 8000454:	2b03      	cmp	r3, #3
 8000456:	d822      	bhi.n	800049e <GPIO_Init+0x66>
	{
		temp = (pGPIOxHandle->GPIO_PinConfig.GPIO_PinMode << (2 * pGPIOxHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000458:	687b      	ldr	r3, [r7, #4]
 800045a:	795b      	ldrb	r3, [r3, #5]
 800045c:	461a      	mov	r2, r3
 800045e:	687b      	ldr	r3, [r7, #4]
 8000460:	791b      	ldrb	r3, [r3, #4]
 8000462:	005b      	lsls	r3, r3, #1
 8000464:	fa02 f303 	lsl.w	r3, r2, r3
 8000468:	617b      	str	r3, [r7, #20]
		pGPIOxHandle->pGPIOx->MODER &= ~((0x3) << (2 * pGPIOxHandle->GPIO_PinConfig.GPIO_PinNumber));
 800046a:	687b      	ldr	r3, [r7, #4]
 800046c:	681b      	ldr	r3, [r3, #0]
 800046e:	681a      	ldr	r2, [r3, #0]
 8000470:	687b      	ldr	r3, [r7, #4]
 8000472:	791b      	ldrb	r3, [r3, #4]
 8000474:	005b      	lsls	r3, r3, #1
 8000476:	2103      	movs	r1, #3
 8000478:	fa01 f303 	lsl.w	r3, r1, r3
 800047c:	43db      	mvns	r3, r3
 800047e:	4619      	mov	r1, r3
 8000480:	687b      	ldr	r3, [r7, #4]
 8000482:	681b      	ldr	r3, [r3, #0]
 8000484:	400a      	ands	r2, r1
 8000486:	601a      	str	r2, [r3, #0]
		pGPIOxHandle->pGPIOx->MODER |= temp;
 8000488:	687b      	ldr	r3, [r7, #4]
 800048a:	681b      	ldr	r3, [r3, #0]
 800048c:	6819      	ldr	r1, [r3, #0]
 800048e:	687b      	ldr	r3, [r7, #4]
 8000490:	681b      	ldr	r3, [r3, #0]
 8000492:	697a      	ldr	r2, [r7, #20]
 8000494:	430a      	orrs	r2, r1
 8000496:	601a      	str	r2, [r3, #0]
		temp = 0;
 8000498:	2300      	movs	r3, #0
 800049a:	617b      	str	r3, [r7, #20]
 800049c:	e07c      	b.n	8000598 <GPIO_Init+0x160>
	}
	else {
		//For setting to interrupt mode...

		// Enable clock to SYSCFG (needed to set IRQ in EXTI)
		SYSCFG_PCLK_EN();
 800049e:	4b8e      	ldr	r3, [pc, #568]	; (80006d8 <GPIO_Init+0x2a0>)
 80004a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80004a2:	4a8d      	ldr	r2, [pc, #564]	; (80006d8 <GPIO_Init+0x2a0>)
 80004a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80004a8:	6453      	str	r3, [r2, #68]	; 0x44

		// 1. Set rising/falling edge trigger(s)
		if (pGPIOxHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_IT_MODE_RT)
 80004aa:	687b      	ldr	r3, [r7, #4]
 80004ac:	795b      	ldrb	r3, [r3, #5]
 80004ae:	2b04      	cmp	r3, #4
 80004b0:	d117      	bne.n	80004e2 <GPIO_Init+0xaa>
		{
			EXTI->RTSR |= (1 << pGPIOxHandle->GPIO_PinConfig.GPIO_PinNumber);
 80004b2:	4b8a      	ldr	r3, [pc, #552]	; (80006dc <GPIO_Init+0x2a4>)
 80004b4:	689b      	ldr	r3, [r3, #8]
 80004b6:	687a      	ldr	r2, [r7, #4]
 80004b8:	7912      	ldrb	r2, [r2, #4]
 80004ba:	4611      	mov	r1, r2
 80004bc:	2201      	movs	r2, #1
 80004be:	408a      	lsls	r2, r1
 80004c0:	4611      	mov	r1, r2
 80004c2:	4a86      	ldr	r2, [pc, #536]	; (80006dc <GPIO_Init+0x2a4>)
 80004c4:	430b      	orrs	r3, r1
 80004c6:	6093      	str	r3, [r2, #8]
			EXTI->FTSR &= ~(1 << pGPIOxHandle->GPIO_PinConfig.GPIO_PinNumber);
 80004c8:	4b84      	ldr	r3, [pc, #528]	; (80006dc <GPIO_Init+0x2a4>)
 80004ca:	68db      	ldr	r3, [r3, #12]
 80004cc:	687a      	ldr	r2, [r7, #4]
 80004ce:	7912      	ldrb	r2, [r2, #4]
 80004d0:	4611      	mov	r1, r2
 80004d2:	2201      	movs	r2, #1
 80004d4:	408a      	lsls	r2, r1
 80004d6:	43d2      	mvns	r2, r2
 80004d8:	4611      	mov	r1, r2
 80004da:	4a80      	ldr	r2, [pc, #512]	; (80006dc <GPIO_Init+0x2a4>)
 80004dc:	400b      	ands	r3, r1
 80004de:	60d3      	str	r3, [r2, #12]
 80004e0:	e035      	b.n	800054e <GPIO_Init+0x116>
		}
		else if (pGPIOxHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_IT_MODE_FT)
 80004e2:	687b      	ldr	r3, [r7, #4]
 80004e4:	795b      	ldrb	r3, [r3, #5]
 80004e6:	2b05      	cmp	r3, #5
 80004e8:	d117      	bne.n	800051a <GPIO_Init+0xe2>
		{
			EXTI->FTSR |= (1 << pGPIOxHandle->GPIO_PinConfig.GPIO_PinNumber);
 80004ea:	4b7c      	ldr	r3, [pc, #496]	; (80006dc <GPIO_Init+0x2a4>)
 80004ec:	68db      	ldr	r3, [r3, #12]
 80004ee:	687a      	ldr	r2, [r7, #4]
 80004f0:	7912      	ldrb	r2, [r2, #4]
 80004f2:	4611      	mov	r1, r2
 80004f4:	2201      	movs	r2, #1
 80004f6:	408a      	lsls	r2, r1
 80004f8:	4611      	mov	r1, r2
 80004fa:	4a78      	ldr	r2, [pc, #480]	; (80006dc <GPIO_Init+0x2a4>)
 80004fc:	430b      	orrs	r3, r1
 80004fe:	60d3      	str	r3, [r2, #12]
			EXTI->RTSR &= ~(1 << pGPIOxHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000500:	4b76      	ldr	r3, [pc, #472]	; (80006dc <GPIO_Init+0x2a4>)
 8000502:	689b      	ldr	r3, [r3, #8]
 8000504:	687a      	ldr	r2, [r7, #4]
 8000506:	7912      	ldrb	r2, [r2, #4]
 8000508:	4611      	mov	r1, r2
 800050a:	2201      	movs	r2, #1
 800050c:	408a      	lsls	r2, r1
 800050e:	43d2      	mvns	r2, r2
 8000510:	4611      	mov	r1, r2
 8000512:	4a72      	ldr	r2, [pc, #456]	; (80006dc <GPIO_Init+0x2a4>)
 8000514:	400b      	ands	r3, r1
 8000516:	6093      	str	r3, [r2, #8]
 8000518:	e019      	b.n	800054e <GPIO_Init+0x116>
		}
		else if (pGPIOxHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_IT_MODE_RFT)
 800051a:	687b      	ldr	r3, [r7, #4]
 800051c:	795b      	ldrb	r3, [r3, #5]
 800051e:	2b06      	cmp	r3, #6
 8000520:	d115      	bne.n	800054e <GPIO_Init+0x116>
		{
			EXTI->RTSR |= (1 << pGPIOxHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000522:	4b6e      	ldr	r3, [pc, #440]	; (80006dc <GPIO_Init+0x2a4>)
 8000524:	689b      	ldr	r3, [r3, #8]
 8000526:	687a      	ldr	r2, [r7, #4]
 8000528:	7912      	ldrb	r2, [r2, #4]
 800052a:	4611      	mov	r1, r2
 800052c:	2201      	movs	r2, #1
 800052e:	408a      	lsls	r2, r1
 8000530:	4611      	mov	r1, r2
 8000532:	4a6a      	ldr	r2, [pc, #424]	; (80006dc <GPIO_Init+0x2a4>)
 8000534:	430b      	orrs	r3, r1
 8000536:	6093      	str	r3, [r2, #8]
			EXTI->FTSR |= (1 << pGPIOxHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000538:	4b68      	ldr	r3, [pc, #416]	; (80006dc <GPIO_Init+0x2a4>)
 800053a:	68db      	ldr	r3, [r3, #12]
 800053c:	687a      	ldr	r2, [r7, #4]
 800053e:	7912      	ldrb	r2, [r2, #4]
 8000540:	4611      	mov	r1, r2
 8000542:	2201      	movs	r2, #1
 8000544:	408a      	lsls	r2, r1
 8000546:	4611      	mov	r1, r2
 8000548:	4a64      	ldr	r2, [pc, #400]	; (80006dc <GPIO_Init+0x2a4>)
 800054a:	430b      	orrs	r3, r1
 800054c:	60d3      	str	r3, [r2, #12]
		}

		// 2. Configure GPIO port selection in SYSCFG
		uint8_t temp1 = pGPIOxHandle->GPIO_PinConfig.GPIO_PinNumber / 4;
 800054e:	687b      	ldr	r3, [r7, #4]
 8000550:	791b      	ldrb	r3, [r3, #4]
 8000552:	089b      	lsrs	r3, r3, #2
 8000554:	74fb      	strb	r3, [r7, #19]
		uint8_t temp2 = pGPIOxHandle->GPIO_PinConfig.GPIO_PinNumber % 4;
 8000556:	687b      	ldr	r3, [r7, #4]
 8000558:	791b      	ldrb	r3, [r3, #4]
 800055a:	f003 0303 	and.w	r3, r3, #3
 800055e:	74bb      	strb	r3, [r7, #18]
		uint8_t portCode = GPIO_PortCode(pGPIOxHandle->pGPIOx);
 8000560:	687b      	ldr	r3, [r7, #4]
 8000562:	681b      	ldr	r3, [r3, #0]
 8000564:	4618      	mov	r0, r3
 8000566:	f7ff fe4d 	bl	8000204 <GPIO_PortCode>
 800056a:	4603      	mov	r3, r0
 800056c:	747b      	strb	r3, [r7, #17]
		SYSCFG->EXTICR[temp1] = portCode << (temp2 * 4);
 800056e:	7c7a      	ldrb	r2, [r7, #17]
 8000570:	7cbb      	ldrb	r3, [r7, #18]
 8000572:	009b      	lsls	r3, r3, #2
 8000574:	fa02 f103 	lsl.w	r1, r2, r3
 8000578:	4a59      	ldr	r2, [pc, #356]	; (80006e0 <GPIO_Init+0x2a8>)
 800057a:	7cfb      	ldrb	r3, [r7, #19]
 800057c:	3302      	adds	r3, #2
 800057e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

		// 3. Enable EXTI interrupt using interrupt register masking
		EXTI->IMR |= (1 << pGPIOxHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000582:	4b56      	ldr	r3, [pc, #344]	; (80006dc <GPIO_Init+0x2a4>)
 8000584:	681b      	ldr	r3, [r3, #0]
 8000586:	687a      	ldr	r2, [r7, #4]
 8000588:	7912      	ldrb	r2, [r2, #4]
 800058a:	4611      	mov	r1, r2
 800058c:	2201      	movs	r2, #1
 800058e:	408a      	lsls	r2, r1
 8000590:	4611      	mov	r1, r2
 8000592:	4a52      	ldr	r2, [pc, #328]	; (80006dc <GPIO_Init+0x2a4>)
 8000594:	430b      	orrs	r3, r1
 8000596:	6013      	str	r3, [r2, #0]
	}

	// 2. Set pin speed
	temp = (pGPIOxHandle->GPIO_PinConfig.GPIO_PinSpeed << (2 * pGPIOxHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	799b      	ldrb	r3, [r3, #6]
 800059c:	461a      	mov	r2, r3
 800059e:	687b      	ldr	r3, [r7, #4]
 80005a0:	791b      	ldrb	r3, [r3, #4]
 80005a2:	005b      	lsls	r3, r3, #1
 80005a4:	fa02 f303 	lsl.w	r3, r2, r3
 80005a8:	617b      	str	r3, [r7, #20]
	pGPIOxHandle->pGPIOx->OSPEEDR &= ~((0x3) << (2 * pGPIOxHandle->GPIO_PinConfig.GPIO_PinNumber));
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	681b      	ldr	r3, [r3, #0]
 80005ae:	689a      	ldr	r2, [r3, #8]
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	791b      	ldrb	r3, [r3, #4]
 80005b4:	005b      	lsls	r3, r3, #1
 80005b6:	2103      	movs	r1, #3
 80005b8:	fa01 f303 	lsl.w	r3, r1, r3
 80005bc:	43db      	mvns	r3, r3
 80005be:	4619      	mov	r1, r3
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	400a      	ands	r2, r1
 80005c6:	609a      	str	r2, [r3, #8]
	pGPIOxHandle->pGPIOx->OSPEEDR |= temp;
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	6899      	ldr	r1, [r3, #8]
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	681b      	ldr	r3, [r3, #0]
 80005d2:	697a      	ldr	r2, [r7, #20]
 80005d4:	430a      	orrs	r2, r1
 80005d6:	609a      	str	r2, [r3, #8]
	temp = 0;
 80005d8:	2300      	movs	r3, #0
 80005da:	617b      	str	r3, [r7, #20]

	// 3. Set pin pull-up or pull-down mode
	temp = (pGPIOxHandle->GPIO_PinConfig.GPIO_PuPdCtrl << (2 * pGPIOxHandle->GPIO_PinConfig.GPIO_PinNumber));
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	79db      	ldrb	r3, [r3, #7]
 80005e0:	461a      	mov	r2, r3
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	791b      	ldrb	r3, [r3, #4]
 80005e6:	005b      	lsls	r3, r3, #1
 80005e8:	fa02 f303 	lsl.w	r3, r2, r3
 80005ec:	617b      	str	r3, [r7, #20]
	pGPIOxHandle->pGPIOx->PUPDR &= ~((0x3) << (2 * pGPIOxHandle->GPIO_PinConfig.GPIO_PinNumber));
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	681b      	ldr	r3, [r3, #0]
 80005f2:	68da      	ldr	r2, [r3, #12]
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	791b      	ldrb	r3, [r3, #4]
 80005f8:	005b      	lsls	r3, r3, #1
 80005fa:	2103      	movs	r1, #3
 80005fc:	fa01 f303 	lsl.w	r3, r1, r3
 8000600:	43db      	mvns	r3, r3
 8000602:	4619      	mov	r1, r3
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	400a      	ands	r2, r1
 800060a:	60da      	str	r2, [r3, #12]
	pGPIOxHandle->pGPIOx->PUPDR |= temp;
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	68d9      	ldr	r1, [r3, #12]
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	681b      	ldr	r3, [r3, #0]
 8000616:	697a      	ldr	r2, [r7, #20]
 8000618:	430a      	orrs	r2, r1
 800061a:	60da      	str	r2, [r3, #12]
	temp = 0;
 800061c:	2300      	movs	r3, #0
 800061e:	617b      	str	r3, [r7, #20]

	// 4. Configure pin output type (push-pull or open drain)
	temp = (pGPIOxHandle->GPIO_PinConfig.GPIO_OpType << pGPIOxHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	7a1b      	ldrb	r3, [r3, #8]
 8000624:	461a      	mov	r2, r3
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	791b      	ldrb	r3, [r3, #4]
 800062a:	fa02 f303 	lsl.w	r3, r2, r3
 800062e:	617b      	str	r3, [r7, #20]
	pGPIOxHandle->pGPIOx->OTYPER &= ~((0x1) <<  pGPIOxHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	685a      	ldr	r2, [r3, #4]
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	791b      	ldrb	r3, [r3, #4]
 800063a:	4619      	mov	r1, r3
 800063c:	2301      	movs	r3, #1
 800063e:	408b      	lsls	r3, r1
 8000640:	43db      	mvns	r3, r3
 8000642:	4619      	mov	r1, r3
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	681b      	ldr	r3, [r3, #0]
 8000648:	400a      	ands	r2, r1
 800064a:	605a      	str	r2, [r3, #4]
	pGPIOxHandle->pGPIOx->OTYPER |= temp;
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	6859      	ldr	r1, [r3, #4]
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	681b      	ldr	r3, [r3, #0]
 8000656:	697a      	ldr	r2, [r7, #20]
 8000658:	430a      	orrs	r2, r1
 800065a:	605a      	str	r2, [r3, #4]
	temp = 0;
 800065c:	2300      	movs	r3, #0
 800065e:	617b      	str	r3, [r7, #20]

	// 5. Configure alternate mode function
	if (pGPIOxHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_AF)
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	795b      	ldrb	r3, [r3, #5]
 8000664:	2b02      	cmp	r3, #2
 8000666:	d132      	bne.n	80006ce <GPIO_Init+0x296>
	{
		uint32_t temp1, temp2;
		temp1 = pGPIOxHandle->GPIO_PinConfig.GPIO_PinNumber / 8;
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	791b      	ldrb	r3, [r3, #4]
 800066c:	08db      	lsrs	r3, r3, #3
 800066e:	b2db      	uxtb	r3, r3
 8000670:	60fb      	str	r3, [r7, #12]
		temp2 = pGPIOxHandle->GPIO_PinConfig.GPIO_PinNumber % 8;
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	791b      	ldrb	r3, [r3, #4]
 8000676:	f003 0307 	and.w	r3, r3, #7
 800067a:	60bb      	str	r3, [r7, #8]

		pGPIOxHandle->pGPIOx->AFR[temp1] &= ~((0xF) << (4 * temp2));
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	68fa      	ldr	r2, [r7, #12]
 8000682:	3208      	adds	r2, #8
 8000684:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000688:	68bb      	ldr	r3, [r7, #8]
 800068a:	009b      	lsls	r3, r3, #2
 800068c:	210f      	movs	r1, #15
 800068e:	fa01 f303 	lsl.w	r3, r1, r3
 8000692:	43db      	mvns	r3, r3
 8000694:	4619      	mov	r1, r3
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	681b      	ldr	r3, [r3, #0]
 800069a:	4011      	ands	r1, r2
 800069c:	68fa      	ldr	r2, [r7, #12]
 800069e:	3208      	adds	r2, #8
 80006a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOxHandle->pGPIOx->AFR[temp1] |= (pGPIOxHandle->GPIO_PinConfig.GPIO_AfMode << (4 * temp2));
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	68fa      	ldr	r2, [r7, #12]
 80006aa:	3208      	adds	r2, #8
 80006ac:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	7a5b      	ldrb	r3, [r3, #9]
 80006b4:	4619      	mov	r1, r3
 80006b6:	68bb      	ldr	r3, [r7, #8]
 80006b8:	009b      	lsls	r3, r3, #2
 80006ba:	fa01 f303 	lsl.w	r3, r1, r3
 80006be:	4619      	mov	r1, r3
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	4311      	orrs	r1, r2
 80006c6:	68fa      	ldr	r2, [r7, #12]
 80006c8:	3208      	adds	r2, #8
 80006ca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}
}
 80006ce:	bf00      	nop
 80006d0:	3718      	adds	r7, #24
 80006d2:	46bd      	mov	sp, r7
 80006d4:	bd80      	pop	{r7, pc}
 80006d6:	bf00      	nop
 80006d8:	40023800 	.word	0x40023800
 80006dc:	40013c00 	.word	0x40013c00
 80006e0:	40013800 	.word	0x40013800

080006e4 <GPIO_ReadFromInputPin>:
 *
 * Return:		uint8_t - Input pin value (0 or 1)
 *
 */
uint8_t GPIO_ReadFromInputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber)
{
 80006e4:	b480      	push	{r7}
 80006e6:	b085      	sub	sp, #20
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	6078      	str	r0, [r7, #4]
 80006ec:	460b      	mov	r3, r1
 80006ee:	70fb      	strb	r3, [r7, #3]
	uint8_t value = (uint8_t)((pGPIOx->IDR >> PinNumber) & 0x00000001);
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	691a      	ldr	r2, [r3, #16]
 80006f4:	78fb      	ldrb	r3, [r7, #3]
 80006f6:	fa22 f303 	lsr.w	r3, r2, r3
 80006fa:	b2db      	uxtb	r3, r3
 80006fc:	f003 0301 	and.w	r3, r3, #1
 8000700:	73fb      	strb	r3, [r7, #15]
	return value;
 8000702:	7bfb      	ldrb	r3, [r7, #15]
}
 8000704:	4618      	mov	r0, r3
 8000706:	3714      	adds	r7, #20
 8000708:	46bd      	mov	sp, r7
 800070a:	bc80      	pop	{r7}
 800070c:	4770      	bx	lr

0800070e <GPIO_ToggleOutputPin>:
 * Params: 		struct GPIO_RegDef_t* - GPIO register base address
 * 				uint8_t Value - Pin number
 *
 */
void GPIO_ToggleOutputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber)
{
 800070e:	b480      	push	{r7}
 8000710:	b083      	sub	sp, #12
 8000712:	af00      	add	r7, sp, #0
 8000714:	6078      	str	r0, [r7, #4]
 8000716:	460b      	mov	r3, r1
 8000718:	70fb      	strb	r3, [r7, #3]
	pGPIOx->ODR ^= (1 << PinNumber);
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	695b      	ldr	r3, [r3, #20]
 800071e:	78fa      	ldrb	r2, [r7, #3]
 8000720:	2101      	movs	r1, #1
 8000722:	fa01 f202 	lsl.w	r2, r1, r2
 8000726:	405a      	eors	r2, r3
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	615a      	str	r2, [r3, #20]
}
 800072c:	bf00      	nop
 800072e:	370c      	adds	r7, #12
 8000730:	46bd      	mov	sp, r7
 8000732:	bc80      	pop	{r7}
 8000734:	4770      	bx	lr

08000736 <delay>:
#include "stm32f446xx.h"
#include "stm32f446xx_gpio_driver.h"


void delay(uint32_t multiplier)
{
 8000736:	b480      	push	{r7}
 8000738:	b085      	sub	sp, #20
 800073a:	af00      	add	r7, sp, #0
 800073c:	6078      	str	r0, [r7, #4]
	uint32_t timer = 0;
 800073e:	2300      	movs	r3, #0
 8000740:	60fb      	str	r3, [r7, #12]

	while (timer < (multiplier * 1000))
 8000742:	e002      	b.n	800074a <delay+0x14>
	{
		timer++;
 8000744:	68fb      	ldr	r3, [r7, #12]
 8000746:	3301      	adds	r3, #1
 8000748:	60fb      	str	r3, [r7, #12]
	while (timer < (multiplier * 1000))
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000750:	fb02 f303 	mul.w	r3, r2, r3
 8000754:	68fa      	ldr	r2, [r7, #12]
 8000756:	429a      	cmp	r2, r3
 8000758:	d3f4      	bcc.n	8000744 <delay+0xe>
	}
}
 800075a:	bf00      	nop
 800075c:	3714      	adds	r7, #20
 800075e:	46bd      	mov	sp, r7
 8000760:	bc80      	pop	{r7}
 8000762:	4770      	bx	lr

08000764 <main>:

int main(void)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	b086      	sub	sp, #24
 8000768:	af00      	add	r7, sp, #0
	 *	The on-board LED is connected at PA5 with no pull-up/pull-down
	 *
	 */

	// 1. Enable clock signal to GPIO Port C and Port A on AHB1
	GPIO_PeriClockControl(GPIOA, ENABLE);
 800076a:	2101      	movs	r1, #1
 800076c:	481a      	ldr	r0, [pc, #104]	; (80007d8 <main+0x74>)
 800076e:	f7ff fd93 	bl	8000298 <GPIO_PeriClockControl>
	GPIO_PeriClockControl(GPIOC, ENABLE);
 8000772:	2101      	movs	r1, #1
 8000774:	4819      	ldr	r0, [pc, #100]	; (80007dc <main+0x78>)
 8000776:	f7ff fd8f 	bl	8000298 <GPIO_PeriClockControl>

	GPIO_Handle_t GpioBtn, GpioLed;

	// Initialization of button GPIO
	GpioBtn.pGPIOx = GPIOC;
 800077a:	4b18      	ldr	r3, [pc, #96]	; (80007dc <main+0x78>)
 800077c:	60fb      	str	r3, [r7, #12]
	GpioBtn.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NUM_13;
 800077e:	230d      	movs	r3, #13
 8000780:	743b      	strb	r3, [r7, #16]
	GpioBtn.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_IN;
 8000782:	2300      	movs	r3, #0
 8000784:	747b      	strb	r3, [r7, #17]
	GpioBtn.GPIO_PinConfig.GPIO_PinSpeed = GPIO_HIGH_SPEED;
 8000786:	2303      	movs	r3, #3
 8000788:	74bb      	strb	r3, [r7, #18]
	GpioBtn.GPIO_PinConfig.GPIO_PuPdCtrl = GPIO_PUPD_NONE;
 800078a:	2300      	movs	r3, #0
 800078c:	74fb      	strb	r3, [r7, #19]

	GPIO_Init(&GpioBtn);
 800078e:	f107 030c 	add.w	r3, r7, #12
 8000792:	4618      	mov	r0, r3
 8000794:	f7ff fe50 	bl	8000438 <GPIO_Init>

	// Initialization of LED driving GPIO
	GpioLed.pGPIOx = GPIOA;
 8000798:	4b0f      	ldr	r3, [pc, #60]	; (80007d8 <main+0x74>)
 800079a:	603b      	str	r3, [r7, #0]
	GpioLed.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NUM_5;
 800079c:	2305      	movs	r3, #5
 800079e:	713b      	strb	r3, [r7, #4]
	GpioLed.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_OUT;
 80007a0:	2301      	movs	r3, #1
 80007a2:	717b      	strb	r3, [r7, #5]
	GpioLed.GPIO_PinConfig.GPIO_OpType = GPIO_OTYPE_PUPL;
 80007a4:	2300      	movs	r3, #0
 80007a6:	723b      	strb	r3, [r7, #8]
	GpioLed.GPIO_PinConfig.GPIO_PinSpeed = GPIO_HIGH_SPEED;
 80007a8:	2303      	movs	r3, #3
 80007aa:	71bb      	strb	r3, [r7, #6]
	GpioLed.GPIO_PinConfig.GPIO_PuPdCtrl = GPIO_PUPD_NONE;
 80007ac:	2300      	movs	r3, #0
 80007ae:	71fb      	strb	r3, [r7, #7]

	GPIO_Init(&GpioLed);
 80007b0:	463b      	mov	r3, r7
 80007b2:	4618      	mov	r0, r3
 80007b4:	f7ff fe40 	bl	8000438 <GPIO_Init>

	while(1)
	{
		if (!(GPIO_ReadFromInputPin(GPIOC, GPIO_PIN_NUM_13)))
 80007b8:	210d      	movs	r1, #13
 80007ba:	4808      	ldr	r0, [pc, #32]	; (80007dc <main+0x78>)
 80007bc:	f7ff ff92 	bl	80006e4 <GPIO_ReadFromInputPin>
 80007c0:	4603      	mov	r3, r0
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d1f8      	bne.n	80007b8 <main+0x54>
		{
			delay(200);
 80007c6:	20c8      	movs	r0, #200	; 0xc8
 80007c8:	f7ff ffb5 	bl	8000736 <delay>
			GPIO_ToggleOutputPin(GPIOA, GPIO_PIN_NUM_5);
 80007cc:	2105      	movs	r1, #5
 80007ce:	4802      	ldr	r0, [pc, #8]	; (80007d8 <main+0x74>)
 80007d0:	f7ff ff9d 	bl	800070e <GPIO_ToggleOutputPin>
		if (!(GPIO_ReadFromInputPin(GPIOC, GPIO_PIN_NUM_13)))
 80007d4:	e7f0      	b.n	80007b8 <main+0x54>
 80007d6:	bf00      	nop
 80007d8:	40020000 	.word	0x40020000
 80007dc:	40020800 	.word	0x40020800

080007e0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80007e0:	480d      	ldr	r0, [pc, #52]	; (8000818 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80007e2:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80007e4:	480d      	ldr	r0, [pc, #52]	; (800081c <LoopForever+0x6>)
  ldr r1, =_edata
 80007e6:	490e      	ldr	r1, [pc, #56]	; (8000820 <LoopForever+0xa>)
  ldr r2, =_sidata
 80007e8:	4a0e      	ldr	r2, [pc, #56]	; (8000824 <LoopForever+0xe>)
  movs r3, #0
 80007ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80007ec:	e002      	b.n	80007f4 <LoopCopyDataInit>

080007ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80007ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80007f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80007f2:	3304      	adds	r3, #4

080007f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80007f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80007f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80007f8:	d3f9      	bcc.n	80007ee <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80007fa:	4a0b      	ldr	r2, [pc, #44]	; (8000828 <LoopForever+0x12>)
  ldr r4, =_ebss
 80007fc:	4c0b      	ldr	r4, [pc, #44]	; (800082c <LoopForever+0x16>)
  movs r3, #0
 80007fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000800:	e001      	b.n	8000806 <LoopFillZerobss>

08000802 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000802:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000804:	3204      	adds	r2, #4

08000806 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000806:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000808:	d3fb      	bcc.n	8000802 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800080a:	f3af 8000 	nop.w
/* Call static constructors */
  bl __libc_init_array
 800080e:	f000 f811 	bl	8000834 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000812:	f7ff ffa7 	bl	8000764 <main>

08000816 <LoopForever>:

LoopForever:
    b LoopForever
 8000816:	e7fe      	b.n	8000816 <LoopForever>
  ldr   r0, =_estack
 8000818:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800081c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000820:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000824:	0800089c 	.word	0x0800089c
  ldr r2, =_sbss
 8000828:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 800082c:	2000001c 	.word	0x2000001c

08000830 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000830:	e7fe      	b.n	8000830 <ADC_IRQHandler>
	...

08000834 <__libc_init_array>:
 8000834:	b570      	push	{r4, r5, r6, lr}
 8000836:	4e0d      	ldr	r6, [pc, #52]	; (800086c <__libc_init_array+0x38>)
 8000838:	4c0d      	ldr	r4, [pc, #52]	; (8000870 <__libc_init_array+0x3c>)
 800083a:	1ba4      	subs	r4, r4, r6
 800083c:	10a4      	asrs	r4, r4, #2
 800083e:	2500      	movs	r5, #0
 8000840:	42a5      	cmp	r5, r4
 8000842:	d109      	bne.n	8000858 <__libc_init_array+0x24>
 8000844:	4e0b      	ldr	r6, [pc, #44]	; (8000874 <__libc_init_array+0x40>)
 8000846:	4c0c      	ldr	r4, [pc, #48]	; (8000878 <__libc_init_array+0x44>)
 8000848:	f000 f818 	bl	800087c <_init>
 800084c:	1ba4      	subs	r4, r4, r6
 800084e:	10a4      	asrs	r4, r4, #2
 8000850:	2500      	movs	r5, #0
 8000852:	42a5      	cmp	r5, r4
 8000854:	d105      	bne.n	8000862 <__libc_init_array+0x2e>
 8000856:	bd70      	pop	{r4, r5, r6, pc}
 8000858:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800085c:	4798      	blx	r3
 800085e:	3501      	adds	r5, #1
 8000860:	e7ee      	b.n	8000840 <__libc_init_array+0xc>
 8000862:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000866:	4798      	blx	r3
 8000868:	3501      	adds	r5, #1
 800086a:	e7f2      	b.n	8000852 <__libc_init_array+0x1e>
 800086c:	08000894 	.word	0x08000894
 8000870:	08000894 	.word	0x08000894
 8000874:	08000894 	.word	0x08000894
 8000878:	08000898 	.word	0x08000898

0800087c <_init>:
 800087c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800087e:	bf00      	nop
 8000880:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000882:	bc08      	pop	{r3}
 8000884:	469e      	mov	lr, r3
 8000886:	4770      	bx	lr

08000888 <_fini>:
 8000888:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800088a:	bf00      	nop
 800088c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800088e:	bc08      	pop	{r3}
 8000890:	469e      	mov	lr, r3
 8000892:	4770      	bx	lr
