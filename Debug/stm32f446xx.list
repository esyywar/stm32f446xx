
stm32f446xx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002b14  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c8  08002ce4  08002ce4  00012ce4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002dac  08002dac  00020084  2**0
                  CONTENTS
  4 .ARM          00000000  08002dac  08002dac  00020084  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002dac  08002dac  00020084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002dac  08002dac  00012dac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002db0  08002db0  00012db0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  08002db4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000110  20000084  08002e38  00020084  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000194  08002e38  00020194  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 12 .debug_info   00005320  00000000  00000000  000200ae  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000cee  00000000  00000000  000253ce  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000248  00000000  00000000  000260c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000001e0  00000000  00000000  00026308  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00003e8e  00000000  00000000  000264e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00002e62  00000000  00000000  0002a376  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0000c6ea  00000000  00000000  0002d1d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000398c2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001330  00000000  00000000  00039940  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000084 	.word	0x20000084
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08002ccc 	.word	0x08002ccc

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000088 	.word	0x20000088
 800020c:	08002ccc 	.word	0x08002ccc

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_frsub>:
 80002c0:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__addsf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_fsub>:
 80002c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080002cc <__addsf3>:
 80002cc:	0042      	lsls	r2, r0, #1
 80002ce:	bf1f      	itttt	ne
 80002d0:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80002d4:	ea92 0f03 	teqne	r2, r3
 80002d8:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80002dc:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80002e0:	d06a      	beq.n	80003b8 <__addsf3+0xec>
 80002e2:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80002e6:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80002ea:	bfc1      	itttt	gt
 80002ec:	18d2      	addgt	r2, r2, r3
 80002ee:	4041      	eorgt	r1, r0
 80002f0:	4048      	eorgt	r0, r1
 80002f2:	4041      	eorgt	r1, r0
 80002f4:	bfb8      	it	lt
 80002f6:	425b      	neglt	r3, r3
 80002f8:	2b19      	cmp	r3, #25
 80002fa:	bf88      	it	hi
 80002fc:	4770      	bxhi	lr
 80002fe:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000302:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000306:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 800030a:	bf18      	it	ne
 800030c:	4240      	negne	r0, r0
 800030e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000312:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000316:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 800031a:	bf18      	it	ne
 800031c:	4249      	negne	r1, r1
 800031e:	ea92 0f03 	teq	r2, r3
 8000322:	d03f      	beq.n	80003a4 <__addsf3+0xd8>
 8000324:	f1a2 0201 	sub.w	r2, r2, #1
 8000328:	fa41 fc03 	asr.w	ip, r1, r3
 800032c:	eb10 000c 	adds.w	r0, r0, ip
 8000330:	f1c3 0320 	rsb	r3, r3, #32
 8000334:	fa01 f103 	lsl.w	r1, r1, r3
 8000338:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800033c:	d502      	bpl.n	8000344 <__addsf3+0x78>
 800033e:	4249      	negs	r1, r1
 8000340:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000344:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000348:	d313      	bcc.n	8000372 <__addsf3+0xa6>
 800034a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800034e:	d306      	bcc.n	800035e <__addsf3+0x92>
 8000350:	0840      	lsrs	r0, r0, #1
 8000352:	ea4f 0131 	mov.w	r1, r1, rrx
 8000356:	f102 0201 	add.w	r2, r2, #1
 800035a:	2afe      	cmp	r2, #254	; 0xfe
 800035c:	d251      	bcs.n	8000402 <__addsf3+0x136>
 800035e:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000362:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000366:	bf08      	it	eq
 8000368:	f020 0001 	biceq.w	r0, r0, #1
 800036c:	ea40 0003 	orr.w	r0, r0, r3
 8000370:	4770      	bx	lr
 8000372:	0049      	lsls	r1, r1, #1
 8000374:	eb40 0000 	adc.w	r0, r0, r0
 8000378:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 800037c:	f1a2 0201 	sub.w	r2, r2, #1
 8000380:	d1ed      	bne.n	800035e <__addsf3+0x92>
 8000382:	fab0 fc80 	clz	ip, r0
 8000386:	f1ac 0c08 	sub.w	ip, ip, #8
 800038a:	ebb2 020c 	subs.w	r2, r2, ip
 800038e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000392:	bfaa      	itet	ge
 8000394:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000398:	4252      	neglt	r2, r2
 800039a:	4318      	orrge	r0, r3
 800039c:	bfbc      	itt	lt
 800039e:	40d0      	lsrlt	r0, r2
 80003a0:	4318      	orrlt	r0, r3
 80003a2:	4770      	bx	lr
 80003a4:	f092 0f00 	teq	r2, #0
 80003a8:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 80003ac:	bf06      	itte	eq
 80003ae:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 80003b2:	3201      	addeq	r2, #1
 80003b4:	3b01      	subne	r3, #1
 80003b6:	e7b5      	b.n	8000324 <__addsf3+0x58>
 80003b8:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80003bc:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80003c0:	bf18      	it	ne
 80003c2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80003c6:	d021      	beq.n	800040c <__addsf3+0x140>
 80003c8:	ea92 0f03 	teq	r2, r3
 80003cc:	d004      	beq.n	80003d8 <__addsf3+0x10c>
 80003ce:	f092 0f00 	teq	r2, #0
 80003d2:	bf08      	it	eq
 80003d4:	4608      	moveq	r0, r1
 80003d6:	4770      	bx	lr
 80003d8:	ea90 0f01 	teq	r0, r1
 80003dc:	bf1c      	itt	ne
 80003de:	2000      	movne	r0, #0
 80003e0:	4770      	bxne	lr
 80003e2:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 80003e6:	d104      	bne.n	80003f2 <__addsf3+0x126>
 80003e8:	0040      	lsls	r0, r0, #1
 80003ea:	bf28      	it	cs
 80003ec:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 80003f0:	4770      	bx	lr
 80003f2:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 80003f6:	bf3c      	itt	cc
 80003f8:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 80003fc:	4770      	bxcc	lr
 80003fe:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000402:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000406:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800040a:	4770      	bx	lr
 800040c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000410:	bf16      	itet	ne
 8000412:	4608      	movne	r0, r1
 8000414:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000418:	4601      	movne	r1, r0
 800041a:	0242      	lsls	r2, r0, #9
 800041c:	bf06      	itte	eq
 800041e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000422:	ea90 0f01 	teqeq	r0, r1
 8000426:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 800042a:	4770      	bx	lr

0800042c <__aeabi_ui2f>:
 800042c:	f04f 0300 	mov.w	r3, #0
 8000430:	e004      	b.n	800043c <__aeabi_i2f+0x8>
 8000432:	bf00      	nop

08000434 <__aeabi_i2f>:
 8000434:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000438:	bf48      	it	mi
 800043a:	4240      	negmi	r0, r0
 800043c:	ea5f 0c00 	movs.w	ip, r0
 8000440:	bf08      	it	eq
 8000442:	4770      	bxeq	lr
 8000444:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000448:	4601      	mov	r1, r0
 800044a:	f04f 0000 	mov.w	r0, #0
 800044e:	e01c      	b.n	800048a <__aeabi_l2f+0x2a>

08000450 <__aeabi_ul2f>:
 8000450:	ea50 0201 	orrs.w	r2, r0, r1
 8000454:	bf08      	it	eq
 8000456:	4770      	bxeq	lr
 8000458:	f04f 0300 	mov.w	r3, #0
 800045c:	e00a      	b.n	8000474 <__aeabi_l2f+0x14>
 800045e:	bf00      	nop

08000460 <__aeabi_l2f>:
 8000460:	ea50 0201 	orrs.w	r2, r0, r1
 8000464:	bf08      	it	eq
 8000466:	4770      	bxeq	lr
 8000468:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 800046c:	d502      	bpl.n	8000474 <__aeabi_l2f+0x14>
 800046e:	4240      	negs	r0, r0
 8000470:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000474:	ea5f 0c01 	movs.w	ip, r1
 8000478:	bf02      	ittt	eq
 800047a:	4684      	moveq	ip, r0
 800047c:	4601      	moveq	r1, r0
 800047e:	2000      	moveq	r0, #0
 8000480:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000484:	bf08      	it	eq
 8000486:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 800048a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800048e:	fabc f28c 	clz	r2, ip
 8000492:	3a08      	subs	r2, #8
 8000494:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000498:	db10      	blt.n	80004bc <__aeabi_l2f+0x5c>
 800049a:	fa01 fc02 	lsl.w	ip, r1, r2
 800049e:	4463      	add	r3, ip
 80004a0:	fa00 fc02 	lsl.w	ip, r0, r2
 80004a4:	f1c2 0220 	rsb	r2, r2, #32
 80004a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004ac:	fa20 f202 	lsr.w	r2, r0, r2
 80004b0:	eb43 0002 	adc.w	r0, r3, r2
 80004b4:	bf08      	it	eq
 80004b6:	f020 0001 	biceq.w	r0, r0, #1
 80004ba:	4770      	bx	lr
 80004bc:	f102 0220 	add.w	r2, r2, #32
 80004c0:	fa01 fc02 	lsl.w	ip, r1, r2
 80004c4:	f1c2 0220 	rsb	r2, r2, #32
 80004c8:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 80004cc:	fa21 f202 	lsr.w	r2, r1, r2
 80004d0:	eb43 0002 	adc.w	r0, r3, r2
 80004d4:	bf08      	it	eq
 80004d6:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80004da:	4770      	bx	lr

080004dc <__aeabi_fmul>:
 80004dc:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004e0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80004e4:	bf1e      	ittt	ne
 80004e6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80004ea:	ea92 0f0c 	teqne	r2, ip
 80004ee:	ea93 0f0c 	teqne	r3, ip
 80004f2:	d06f      	beq.n	80005d4 <__aeabi_fmul+0xf8>
 80004f4:	441a      	add	r2, r3
 80004f6:	ea80 0c01 	eor.w	ip, r0, r1
 80004fa:	0240      	lsls	r0, r0, #9
 80004fc:	bf18      	it	ne
 80004fe:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000502:	d01e      	beq.n	8000542 <__aeabi_fmul+0x66>
 8000504:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000508:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 800050c:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000510:	fba0 3101 	umull	r3, r1, r0, r1
 8000514:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000518:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 800051c:	bf3e      	ittt	cc
 800051e:	0049      	lslcc	r1, r1, #1
 8000520:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000524:	005b      	lslcc	r3, r3, #1
 8000526:	ea40 0001 	orr.w	r0, r0, r1
 800052a:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 800052e:	2afd      	cmp	r2, #253	; 0xfd
 8000530:	d81d      	bhi.n	800056e <__aeabi_fmul+0x92>
 8000532:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000536:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800053a:	bf08      	it	eq
 800053c:	f020 0001 	biceq.w	r0, r0, #1
 8000540:	4770      	bx	lr
 8000542:	f090 0f00 	teq	r0, #0
 8000546:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 800054a:	bf08      	it	eq
 800054c:	0249      	lsleq	r1, r1, #9
 800054e:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000552:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000556:	3a7f      	subs	r2, #127	; 0x7f
 8000558:	bfc2      	ittt	gt
 800055a:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 800055e:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000562:	4770      	bxgt	lr
 8000564:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000568:	f04f 0300 	mov.w	r3, #0
 800056c:	3a01      	subs	r2, #1
 800056e:	dc5d      	bgt.n	800062c <__aeabi_fmul+0x150>
 8000570:	f112 0f19 	cmn.w	r2, #25
 8000574:	bfdc      	itt	le
 8000576:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 800057a:	4770      	bxle	lr
 800057c:	f1c2 0200 	rsb	r2, r2, #0
 8000580:	0041      	lsls	r1, r0, #1
 8000582:	fa21 f102 	lsr.w	r1, r1, r2
 8000586:	f1c2 0220 	rsb	r2, r2, #32
 800058a:	fa00 fc02 	lsl.w	ip, r0, r2
 800058e:	ea5f 0031 	movs.w	r0, r1, rrx
 8000592:	f140 0000 	adc.w	r0, r0, #0
 8000596:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800059a:	bf08      	it	eq
 800059c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80005a0:	4770      	bx	lr
 80005a2:	f092 0f00 	teq	r2, #0
 80005a6:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80005aa:	bf02      	ittt	eq
 80005ac:	0040      	lsleq	r0, r0, #1
 80005ae:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80005b2:	3a01      	subeq	r2, #1
 80005b4:	d0f9      	beq.n	80005aa <__aeabi_fmul+0xce>
 80005b6:	ea40 000c 	orr.w	r0, r0, ip
 80005ba:	f093 0f00 	teq	r3, #0
 80005be:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80005c2:	bf02      	ittt	eq
 80005c4:	0049      	lsleq	r1, r1, #1
 80005c6:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80005ca:	3b01      	subeq	r3, #1
 80005cc:	d0f9      	beq.n	80005c2 <__aeabi_fmul+0xe6>
 80005ce:	ea41 010c 	orr.w	r1, r1, ip
 80005d2:	e78f      	b.n	80004f4 <__aeabi_fmul+0x18>
 80005d4:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005d8:	ea92 0f0c 	teq	r2, ip
 80005dc:	bf18      	it	ne
 80005de:	ea93 0f0c 	teqne	r3, ip
 80005e2:	d00a      	beq.n	80005fa <__aeabi_fmul+0x11e>
 80005e4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80005e8:	bf18      	it	ne
 80005ea:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80005ee:	d1d8      	bne.n	80005a2 <__aeabi_fmul+0xc6>
 80005f0:	ea80 0001 	eor.w	r0, r0, r1
 80005f4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80005f8:	4770      	bx	lr
 80005fa:	f090 0f00 	teq	r0, #0
 80005fe:	bf17      	itett	ne
 8000600:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000604:	4608      	moveq	r0, r1
 8000606:	f091 0f00 	teqne	r1, #0
 800060a:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 800060e:	d014      	beq.n	800063a <__aeabi_fmul+0x15e>
 8000610:	ea92 0f0c 	teq	r2, ip
 8000614:	d101      	bne.n	800061a <__aeabi_fmul+0x13e>
 8000616:	0242      	lsls	r2, r0, #9
 8000618:	d10f      	bne.n	800063a <__aeabi_fmul+0x15e>
 800061a:	ea93 0f0c 	teq	r3, ip
 800061e:	d103      	bne.n	8000628 <__aeabi_fmul+0x14c>
 8000620:	024b      	lsls	r3, r1, #9
 8000622:	bf18      	it	ne
 8000624:	4608      	movne	r0, r1
 8000626:	d108      	bne.n	800063a <__aeabi_fmul+0x15e>
 8000628:	ea80 0001 	eor.w	r0, r0, r1
 800062c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000630:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000634:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000638:	4770      	bx	lr
 800063a:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 800063e:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000642:	4770      	bx	lr

08000644 <__aeabi_fdiv>:
 8000644:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000648:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 800064c:	bf1e      	ittt	ne
 800064e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000652:	ea92 0f0c 	teqne	r2, ip
 8000656:	ea93 0f0c 	teqne	r3, ip
 800065a:	d069      	beq.n	8000730 <__aeabi_fdiv+0xec>
 800065c:	eba2 0203 	sub.w	r2, r2, r3
 8000660:	ea80 0c01 	eor.w	ip, r0, r1
 8000664:	0249      	lsls	r1, r1, #9
 8000666:	ea4f 2040 	mov.w	r0, r0, lsl #9
 800066a:	d037      	beq.n	80006dc <__aeabi_fdiv+0x98>
 800066c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000670:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000674:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000678:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 800067c:	428b      	cmp	r3, r1
 800067e:	bf38      	it	cc
 8000680:	005b      	lslcc	r3, r3, #1
 8000682:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000686:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 800068a:	428b      	cmp	r3, r1
 800068c:	bf24      	itt	cs
 800068e:	1a5b      	subcs	r3, r3, r1
 8000690:	ea40 000c 	orrcs.w	r0, r0, ip
 8000694:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000698:	bf24      	itt	cs
 800069a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800069e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80006a2:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 80006a6:	bf24      	itt	cs
 80006a8:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 80006ac:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80006b0:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 80006b4:	bf24      	itt	cs
 80006b6:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 80006ba:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80006be:	011b      	lsls	r3, r3, #4
 80006c0:	bf18      	it	ne
 80006c2:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 80006c6:	d1e0      	bne.n	800068a <__aeabi_fdiv+0x46>
 80006c8:	2afd      	cmp	r2, #253	; 0xfd
 80006ca:	f63f af50 	bhi.w	800056e <__aeabi_fmul+0x92>
 80006ce:	428b      	cmp	r3, r1
 80006d0:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80006d4:	bf08      	it	eq
 80006d6:	f020 0001 	biceq.w	r0, r0, #1
 80006da:	4770      	bx	lr
 80006dc:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80006e0:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80006e4:	327f      	adds	r2, #127	; 0x7f
 80006e6:	bfc2      	ittt	gt
 80006e8:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80006ec:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80006f0:	4770      	bxgt	lr
 80006f2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80006f6:	f04f 0300 	mov.w	r3, #0
 80006fa:	3a01      	subs	r2, #1
 80006fc:	e737      	b.n	800056e <__aeabi_fmul+0x92>
 80006fe:	f092 0f00 	teq	r2, #0
 8000702:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000706:	bf02      	ittt	eq
 8000708:	0040      	lsleq	r0, r0, #1
 800070a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800070e:	3a01      	subeq	r2, #1
 8000710:	d0f9      	beq.n	8000706 <__aeabi_fdiv+0xc2>
 8000712:	ea40 000c 	orr.w	r0, r0, ip
 8000716:	f093 0f00 	teq	r3, #0
 800071a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800071e:	bf02      	ittt	eq
 8000720:	0049      	lsleq	r1, r1, #1
 8000722:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000726:	3b01      	subeq	r3, #1
 8000728:	d0f9      	beq.n	800071e <__aeabi_fdiv+0xda>
 800072a:	ea41 010c 	orr.w	r1, r1, ip
 800072e:	e795      	b.n	800065c <__aeabi_fdiv+0x18>
 8000730:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000734:	ea92 0f0c 	teq	r2, ip
 8000738:	d108      	bne.n	800074c <__aeabi_fdiv+0x108>
 800073a:	0242      	lsls	r2, r0, #9
 800073c:	f47f af7d 	bne.w	800063a <__aeabi_fmul+0x15e>
 8000740:	ea93 0f0c 	teq	r3, ip
 8000744:	f47f af70 	bne.w	8000628 <__aeabi_fmul+0x14c>
 8000748:	4608      	mov	r0, r1
 800074a:	e776      	b.n	800063a <__aeabi_fmul+0x15e>
 800074c:	ea93 0f0c 	teq	r3, ip
 8000750:	d104      	bne.n	800075c <__aeabi_fdiv+0x118>
 8000752:	024b      	lsls	r3, r1, #9
 8000754:	f43f af4c 	beq.w	80005f0 <__aeabi_fmul+0x114>
 8000758:	4608      	mov	r0, r1
 800075a:	e76e      	b.n	800063a <__aeabi_fmul+0x15e>
 800075c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000760:	bf18      	it	ne
 8000762:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000766:	d1ca      	bne.n	80006fe <__aeabi_fdiv+0xba>
 8000768:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 800076c:	f47f af5c 	bne.w	8000628 <__aeabi_fmul+0x14c>
 8000770:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000774:	f47f af3c 	bne.w	80005f0 <__aeabi_fmul+0x114>
 8000778:	e75f      	b.n	800063a <__aeabi_fmul+0x15e>
 800077a:	bf00      	nop

0800077c <__aeabi_f2uiz>:
 800077c:	0042      	lsls	r2, r0, #1
 800077e:	d20e      	bcs.n	800079e <__aeabi_f2uiz+0x22>
 8000780:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000784:	d30b      	bcc.n	800079e <__aeabi_f2uiz+0x22>
 8000786:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800078a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800078e:	d409      	bmi.n	80007a4 <__aeabi_f2uiz+0x28>
 8000790:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000794:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000798:	fa23 f002 	lsr.w	r0, r3, r2
 800079c:	4770      	bx	lr
 800079e:	f04f 0000 	mov.w	r0, #0
 80007a2:	4770      	bx	lr
 80007a4:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80007a8:	d101      	bne.n	80007ae <__aeabi_f2uiz+0x32>
 80007aa:	0242      	lsls	r2, r0, #9
 80007ac:	d102      	bne.n	80007b4 <__aeabi_f2uiz+0x38>
 80007ae:	f04f 30ff 	mov.w	r0, #4294967295
 80007b2:	4770      	bx	lr
 80007b4:	f04f 0000 	mov.w	r0, #0
 80007b8:	4770      	bx	lr
 80007ba:	bf00      	nop

080007bc <ADC_PeriClockControl>:
 * Params: 		struct ADC_RegDef_t* *pADCx - ADC base address
 * 				uint8_t EnOrDi - Enable or disable value
 *
 */
void ADC_PeriClockControl(ADC_RegDef_t *pADCx, uint8_t EnOrDi)
{
 80007bc:	b480      	push	{r7}
 80007be:	b083      	sub	sp, #12
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	6078      	str	r0, [r7, #4]
 80007c4:	460b      	mov	r3, r1
 80007c6:	70fb      	strb	r3, [r7, #3]
	if (EnOrDi == ENABLE)
 80007c8:	78fb      	ldrb	r3, [r7, #3]
 80007ca:	2b01      	cmp	r3, #1
 80007cc:	d120      	bne.n	8000810 <ADC_PeriClockControl+0x54>
	{
		if (pADCx == ADC1)
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	4a22      	ldr	r2, [pc, #136]	; (800085c <ADC_PeriClockControl+0xa0>)
 80007d2:	4293      	cmp	r3, r2
 80007d4:	d106      	bne.n	80007e4 <ADC_PeriClockControl+0x28>
		{
			ADC1_PCLK_EN();
 80007d6:	4b22      	ldr	r3, [pc, #136]	; (8000860 <ADC_PeriClockControl+0xa4>)
 80007d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007da:	4a21      	ldr	r2, [pc, #132]	; (8000860 <ADC_PeriClockControl+0xa4>)
 80007dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80007e0:	6453      	str	r3, [r2, #68]	; 0x44
		else if (pADCx == ADC3)
		{
			ADC3_PCLK_DI();
		}
	}
}
 80007e2:	e035      	b.n	8000850 <ADC_PeriClockControl+0x94>
		else if (pADCx == ADC2)
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	4a1f      	ldr	r2, [pc, #124]	; (8000864 <ADC_PeriClockControl+0xa8>)
 80007e8:	4293      	cmp	r3, r2
 80007ea:	d106      	bne.n	80007fa <ADC_PeriClockControl+0x3e>
			ADC2_PCLK_EN();
 80007ec:	4b1c      	ldr	r3, [pc, #112]	; (8000860 <ADC_PeriClockControl+0xa4>)
 80007ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007f0:	4a1b      	ldr	r2, [pc, #108]	; (8000860 <ADC_PeriClockControl+0xa4>)
 80007f2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80007f6:	6453      	str	r3, [r2, #68]	; 0x44
}
 80007f8:	e02a      	b.n	8000850 <ADC_PeriClockControl+0x94>
		else if (pADCx == ADC3)
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	4a1a      	ldr	r2, [pc, #104]	; (8000868 <ADC_PeriClockControl+0xac>)
 80007fe:	4293      	cmp	r3, r2
 8000800:	d126      	bne.n	8000850 <ADC_PeriClockControl+0x94>
			ADC3_PCLK_EN();
 8000802:	4b17      	ldr	r3, [pc, #92]	; (8000860 <ADC_PeriClockControl+0xa4>)
 8000804:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000806:	4a16      	ldr	r2, [pc, #88]	; (8000860 <ADC_PeriClockControl+0xa4>)
 8000808:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800080c:	6453      	str	r3, [r2, #68]	; 0x44
}
 800080e:	e01f      	b.n	8000850 <ADC_PeriClockControl+0x94>
		if (pADCx == ADC1)
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	4a12      	ldr	r2, [pc, #72]	; (800085c <ADC_PeriClockControl+0xa0>)
 8000814:	4293      	cmp	r3, r2
 8000816:	d106      	bne.n	8000826 <ADC_PeriClockControl+0x6a>
			ADC1_PCLK_DI();
 8000818:	4b11      	ldr	r3, [pc, #68]	; (8000860 <ADC_PeriClockControl+0xa4>)
 800081a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800081c:	4a10      	ldr	r2, [pc, #64]	; (8000860 <ADC_PeriClockControl+0xa4>)
 800081e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000822:	6453      	str	r3, [r2, #68]	; 0x44
}
 8000824:	e014      	b.n	8000850 <ADC_PeriClockControl+0x94>
		else if (pADCx == ADC2)
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	4a0e      	ldr	r2, [pc, #56]	; (8000864 <ADC_PeriClockControl+0xa8>)
 800082a:	4293      	cmp	r3, r2
 800082c:	d106      	bne.n	800083c <ADC_PeriClockControl+0x80>
			ADC2_PCLK_DI();
 800082e:	4b0c      	ldr	r3, [pc, #48]	; (8000860 <ADC_PeriClockControl+0xa4>)
 8000830:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000832:	4a0b      	ldr	r2, [pc, #44]	; (8000860 <ADC_PeriClockControl+0xa4>)
 8000834:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8000838:	6453      	str	r3, [r2, #68]	; 0x44
}
 800083a:	e009      	b.n	8000850 <ADC_PeriClockControl+0x94>
		else if (pADCx == ADC3)
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	4a0a      	ldr	r2, [pc, #40]	; (8000868 <ADC_PeriClockControl+0xac>)
 8000840:	4293      	cmp	r3, r2
 8000842:	d105      	bne.n	8000850 <ADC_PeriClockControl+0x94>
			ADC3_PCLK_DI();
 8000844:	4b06      	ldr	r3, [pc, #24]	; (8000860 <ADC_PeriClockControl+0xa4>)
 8000846:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000848:	4a05      	ldr	r2, [pc, #20]	; (8000860 <ADC_PeriClockControl+0xa4>)
 800084a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800084e:	6453      	str	r3, [r2, #68]	; 0x44
}
 8000850:	bf00      	nop
 8000852:	370c      	adds	r7, #12
 8000854:	46bd      	mov	sp, r7
 8000856:	bc80      	pop	{r7}
 8000858:	4770      	bx	lr
 800085a:	bf00      	nop
 800085c:	40012000 	.word	0x40012000
 8000860:	40023800 	.word	0x40023800
 8000864:	40012100 	.word	0x40012100
 8000868:	40012200 	.word	0x40012200

0800086c <ADC_Init>:
 *
 * Params: 		struct ADC_Handle_t* *pADCx - ADC handle address
 *
 */
void ADC_Init(ADC_Handle_t *pADCxHandle)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	b082      	sub	sp, #8
 8000870:	af00      	add	r7, sp, #0
 8000872:	6078      	str	r0, [r7, #4]
	// 1. Enable clock signal to the ADC
	ADC_PeriClockControl(pADCxHandle->pADCx, ENABLE);
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	2101      	movs	r1, #1
 800087a:	4618      	mov	r0, r3
 800087c:	f7ff ff9e 	bl	80007bc <ADC_PeriClockControl>

	// 2. Set the ADC clock prescaler
	ADC_COMM->CCR |= (uint32_t)(pADCxHandle->ADC_Config.ADC_PreSc << 16);
 8000880:	4b11      	ldr	r3, [pc, #68]	; (80008c8 <ADC_Init+0x5c>)
 8000882:	685b      	ldr	r3, [r3, #4]
 8000884:	687a      	ldr	r2, [r7, #4]
 8000886:	7952      	ldrb	r2, [r2, #5]
 8000888:	0412      	lsls	r2, r2, #16
 800088a:	4611      	mov	r1, r2
 800088c:	4a0e      	ldr	r2, [pc, #56]	; (80008c8 <ADC_Init+0x5c>)
 800088e:	430b      	orrs	r3, r1
 8000890:	6053      	str	r3, [r2, #4]

	// 3. Set ADC resolution
	pADCxHandle->pADCx->CR1 |= (uint32_t)(pADCxHandle->ADC_Config.ADC_Res << 24);
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	681b      	ldr	r3, [r3, #0]
 8000896:	685a      	ldr	r2, [r3, #4]
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	791b      	ldrb	r3, [r3, #4]
 800089c:	061b      	lsls	r3, r3, #24
 800089e:	4619      	mov	r1, r3
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	681b      	ldr	r3, [r3, #0]
 80008a4:	430a      	orrs	r2, r1
 80008a6:	605a      	str	r2, [r3, #4]

	// 4. Set external trigger
	pADCxHandle->pADCx->CR2 |= (uint32_t)(pADCxHandle->ADC_Config.ADC_Ext_Trig << 28);
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	689a      	ldr	r2, [r3, #8]
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	799b      	ldrb	r3, [r3, #6]
 80008b2:	071b      	lsls	r3, r3, #28
 80008b4:	4619      	mov	r1, r3
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	681b      	ldr	r3, [r3, #0]
 80008ba:	430a      	orrs	r2, r1
 80008bc:	609a      	str	r2, [r3, #8]
}
 80008be:	bf00      	nop
 80008c0:	3708      	adds	r7, #8
 80008c2:	46bd      	mov	sp, r7
 80008c4:	bd80      	pop	{r7, pc}
 80008c6:	bf00      	nop
 80008c8:	40012300 	.word	0x40012300

080008cc <ADC_Read_Channel>:
 * 				uint8_t sampleCycles - Number of cycle to take reading
 * 				uint8_t adcReadMode - Take single reading or continuous mode
 *
 */
void ADC_Read_Channel(ADC_Handle_t *pADCxHandle, uint8_t ADC_CHAN, uint8_t ADC_SMP_CYC, uint8_t ADC_DAQ_MODE)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b082      	sub	sp, #8
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	6078      	str	r0, [r7, #4]
 80008d4:	4608      	mov	r0, r1
 80008d6:	4611      	mov	r1, r2
 80008d8:	461a      	mov	r2, r3
 80008da:	4603      	mov	r3, r0
 80008dc:	70fb      	strb	r3, [r7, #3]
 80008de:	460b      	mov	r3, r1
 80008e0:	70bb      	strb	r3, [r7, #2]
 80008e2:	4613      	mov	r3, r2
 80008e4:	707b      	strb	r3, [r7, #1]
	// 1. Set the ADC On (Note: several steps b/w this and 'START' to allow stabilization time
	pADCxHandle->pADCx->CR2 |= (1 << 0);
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	681b      	ldr	r3, [r3, #0]
 80008ea:	689a      	ldr	r2, [r3, #8]
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	f042 0201 	orr.w	r2, r2, #1
 80008f4:	609a      	str	r2, [r3, #8]

	// 2. Reset ADC continuous mode for single reading
	if (ADC_DAQ_MODE == ADC_SINGLE_READ)
 80008f6:	787b      	ldrb	r3, [r7, #1]
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d108      	bne.n	800090e <ADC_Read_Channel+0x42>
	{
		pADCxHandle->pADCx->CR2 &= ~(1 << 1);
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	689a      	ldr	r2, [r3, #8]
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	681b      	ldr	r3, [r3, #0]
 8000906:	f022 0202 	bic.w	r2, r2, #2
 800090a:	609a      	str	r2, [r3, #8]
 800090c:	e00a      	b.n	8000924 <ADC_Read_Channel+0x58>
	}
	else if (ADC_DAQ_MODE == ADC_CONT_READ)
 800090e:	787b      	ldrb	r3, [r7, #1]
 8000910:	2b01      	cmp	r3, #1
 8000912:	d107      	bne.n	8000924 <ADC_Read_Channel+0x58>
	{
		pADCxHandle->pADCx->CR2 |= (1 << 1);
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	689a      	ldr	r2, [r3, #8]
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	681b      	ldr	r3, [r3, #0]
 800091e:	f042 0202 	orr.w	r2, r2, #2
 8000922:	609a      	str	r2, [r3, #8]
	}

	// 3. Set number of channels in sequence to 1
	pADCxHandle->pADCx->SQR[0] &= ~(0xF << 20);
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	681b      	ldr	r3, [r3, #0]
 800092e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8000932:	62da      	str	r2, [r3, #44]	; 0x2c

	// 4. Load the channel to be read
	pADCxHandle->pADCx->SQR[2] = (ADC_CHAN << 0);
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	78fa      	ldrb	r2, [r7, #3]
 800093a:	635a      	str	r2, [r3, #52]	; 0x34

	// 5. Number of sampling cycles
	pADCxHandle->pADCx->SMPR[1] = (ADC_SMP_CYC << 0);
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	78ba      	ldrb	r2, [r7, #2]
 8000942:	611a      	str	r2, [r3, #16]

	// 6. Enable end of conversion interrupt
	pADCxHandle->pADCx->CR1 |= (1 << 5);
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	685a      	ldr	r2, [r3, #4]
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	681b      	ldr	r3, [r3, #0]
 800094e:	f042 0220 	orr.w	r2, r2, #32
 8000952:	605a      	str	r2, [r3, #4]
	ADC_IRQConfig(IRQ_POS_ADC, ENABLE);
 8000954:	2101      	movs	r1, #1
 8000956:	2012      	movs	r0, #18
 8000958:	f000 f81e 	bl	8000998 <ADC_IRQConfig>

	// 7. Set start conversion of regular channels
	pADCxHandle->pADCx->CR2 |= (1 << 30);
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	689a      	ldr	r2, [r3, #8]
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	681b      	ldr	r3, [r3, #0]
 8000966:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800096a:	609a      	str	r2, [r3, #8]
}
 800096c:	bf00      	nop
 800096e:	3708      	adds	r7, #8
 8000970:	46bd      	mov	sp, r7
 8000972:	bd80      	pop	{r7, pc}

08000974 <ADC_GetFlagStatus>:
 * Params: 		struct ADC_RegDef_t *pADCx - ADC base address
 * 				uint8_t ADC_FLAG - flag being checked
 *
 */
uint8_t ADC_GetFlagStatus(ADC_RegDef_t *pADCx, uint8_t ADC_FLAG)
{
 8000974:	b480      	push	{r7}
 8000976:	b083      	sub	sp, #12
 8000978:	af00      	add	r7, sp, #0
 800097a:	6078      	str	r0, [r7, #4]
 800097c:	460b      	mov	r3, r1
 800097e:	70fb      	strb	r3, [r7, #3]
	return (pADCx->SR & ADC_FLAG);
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	b2da      	uxtb	r2, r3
 8000986:	78fb      	ldrb	r3, [r7, #3]
 8000988:	4013      	ands	r3, r2
 800098a:	b2db      	uxtb	r3, r3
}
 800098c:	4618      	mov	r0, r3
 800098e:	370c      	adds	r7, #12
 8000990:	46bd      	mov	sp, r7
 8000992:	bc80      	pop	{r7}
 8000994:	4770      	bx	lr
	...

08000998 <ADC_IRQConfig>:
 * Params: 		uint8_t IRQNumber - IRQ position being configured
 * 				uint8_t Value - Enabling or disabling interrupt (1 or 0)
 *
 */
void ADC_IRQConfig(uint8_t IRQNumber, uint8_t EnOrDi)
{
 8000998:	b490      	push	{r4, r7}
 800099a:	b082      	sub	sp, #8
 800099c:	af00      	add	r7, sp, #0
 800099e:	4603      	mov	r3, r0
 80009a0:	460a      	mov	r2, r1
 80009a2:	71fb      	strb	r3, [r7, #7]
 80009a4:	4613      	mov	r3, r2
 80009a6:	71bb      	strb	r3, [r7, #6]
	if (EnOrDi == ENABLE)
 80009a8:	79bb      	ldrb	r3, [r7, #6]
 80009aa:	2b01      	cmp	r3, #1
 80009ac:	d113      	bne.n	80009d6 <ADC_IRQConfig+0x3e>
	{
		NVIC_ISER->ISER[IRQNumber / 32] |= (1 << (IRQNumber % 32));
 80009ae:	4a17      	ldr	r2, [pc, #92]	; (8000a0c <ADC_IRQConfig+0x74>)
 80009b0:	79fb      	ldrb	r3, [r7, #7]
 80009b2:	095b      	lsrs	r3, r3, #5
 80009b4:	b2d8      	uxtb	r0, r3
 80009b6:	4603      	mov	r3, r0
 80009b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009bc:	79fa      	ldrb	r2, [r7, #7]
 80009be:	f002 021f 	and.w	r2, r2, #31
 80009c2:	2101      	movs	r1, #1
 80009c4:	fa01 f202 	lsl.w	r2, r1, r2
 80009c8:	4614      	mov	r4, r2
 80009ca:	4a10      	ldr	r2, [pc, #64]	; (8000a0c <ADC_IRQConfig+0x74>)
 80009cc:	4601      	mov	r1, r0
 80009ce:	4323      	orrs	r3, r4
 80009d0:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	}
	else if (EnOrDi == DISABLE)
	{
		NVIC_ICER->ICER[IRQNumber / 32] |= (1 << (IRQNumber % 32));
	}
}
 80009d4:	e015      	b.n	8000a02 <ADC_IRQConfig+0x6a>
	else if (EnOrDi == DISABLE)
 80009d6:	79bb      	ldrb	r3, [r7, #6]
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d112      	bne.n	8000a02 <ADC_IRQConfig+0x6a>
		NVIC_ICER->ICER[IRQNumber / 32] |= (1 << (IRQNumber % 32));
 80009dc:	4a0c      	ldr	r2, [pc, #48]	; (8000a10 <ADC_IRQConfig+0x78>)
 80009de:	79fb      	ldrb	r3, [r7, #7]
 80009e0:	095b      	lsrs	r3, r3, #5
 80009e2:	b2d8      	uxtb	r0, r3
 80009e4:	4603      	mov	r3, r0
 80009e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009ea:	79fa      	ldrb	r2, [r7, #7]
 80009ec:	f002 021f 	and.w	r2, r2, #31
 80009f0:	2101      	movs	r1, #1
 80009f2:	fa01 f202 	lsl.w	r2, r1, r2
 80009f6:	4614      	mov	r4, r2
 80009f8:	4a05      	ldr	r2, [pc, #20]	; (8000a10 <ADC_IRQConfig+0x78>)
 80009fa:	4601      	mov	r1, r0
 80009fc:	4323      	orrs	r3, r4
 80009fe:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
}
 8000a02:	bf00      	nop
 8000a04:	3708      	adds	r7, #8
 8000a06:	46bd      	mov	sp, r7
 8000a08:	bc90      	pop	{r4, r7}
 8000a0a:	4770      	bx	lr
 8000a0c:	e000e100 	.word	0xe000e100
 8000a10:	e000e180 	.word	0xe000e180

08000a14 <ADC_EV_IRQHandling>:
 * Params: 		uint8_t IRQNumber - IRQ position being configured
 * 				uint8_t IRQPriority - Priority value (0 - 255)
 *
 */
void ADC_EV_IRQHandling(ADC_Handle_t *pADCxHandle)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b082      	sub	sp, #8
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	6078      	str	r0, [r7, #4]
	// 1. Is analog watchdog interrupt?
	if (ADC_GetFlagStatus(pADCxHandle->pADCx, ADC_FLAG_AWD))
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	2101      	movs	r1, #1
 8000a22:	4618      	mov	r0, r3
 8000a24:	f7ff ffa6 	bl	8000974 <ADC_GetFlagStatus>
 8000a28:	4603      	mov	r3, r0
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d007      	beq.n	8000a3e <ADC_EV_IRQHandling+0x2a>
	{
		pADCxHandle->pADCx->SR &= ~(1 << 5);
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	681b      	ldr	r3, [r3, #0]
 8000a32:	681a      	ldr	r2, [r3, #0]
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	f022 0220 	bic.w	r2, r2, #32
 8000a3c:	601a      	str	r2, [r3, #0]
	}

	// 2. Is end of conversion interrupt?
	if (ADC_GetFlagStatus(pADCxHandle->pADCx, ADC_FLAG_EOC))
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	681b      	ldr	r3, [r3, #0]
 8000a42:	2102      	movs	r1, #2
 8000a44:	4618      	mov	r0, r3
 8000a46:	f7ff ff95 	bl	8000974 <ADC_GetFlagStatus>
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d002      	beq.n	8000a56 <ADC_EV_IRQHandling+0x42>
	{
		ADC_Read_IT_Handle(pADCxHandle);
 8000a50:	6878      	ldr	r0, [r7, #4]
 8000a52:	f000 f848 	bl	8000ae6 <ADC_Read_IT_Handle>
	}

	// 3. Is injected channel end of conversion interrupt?
	if (ADC_GetFlagStatus(pADCxHandle->pADCx, ADC_FLAG_JEOC))
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	681b      	ldr	r3, [r3, #0]
 8000a5a:	2104      	movs	r1, #4
 8000a5c:	4618      	mov	r0, r3
 8000a5e:	f7ff ff89 	bl	8000974 <ADC_GetFlagStatus>
 8000a62:	4603      	mov	r3, r0
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d007      	beq.n	8000a78 <ADC_EV_IRQHandling+0x64>
	{
		pADCxHandle->pADCx->SR &= ~(1 << 3);
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	681a      	ldr	r2, [r3, #0]
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	681b      	ldr	r3, [r3, #0]
 8000a72:	f022 0208 	bic.w	r2, r2, #8
 8000a76:	601a      	str	r2, [r3, #0]
	}

	// 4. Is injected channel start interrupt?
	if (ADC_GetFlagStatus(pADCxHandle->pADCx, ADC_FLAG_JSTRT))
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	2108      	movs	r1, #8
 8000a7e:	4618      	mov	r0, r3
 8000a80:	f7ff ff78 	bl	8000974 <ADC_GetFlagStatus>
 8000a84:	4603      	mov	r3, r0
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d007      	beq.n	8000a9a <ADC_EV_IRQHandling+0x86>
	{
		pADCxHandle->pADCx->SR &= ~(1 << 2);
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	681a      	ldr	r2, [r3, #0]
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	f022 0204 	bic.w	r2, r2, #4
 8000a98:	601a      	str	r2, [r3, #0]
	}

	// 5. Is regular channel start interrupt?
	if (ADC_GetFlagStatus(pADCxHandle->pADCx, ADC_FLAG_STRT))
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	681b      	ldr	r3, [r3, #0]
 8000a9e:	2110      	movs	r1, #16
 8000aa0:	4618      	mov	r0, r3
 8000aa2:	f7ff ff67 	bl	8000974 <ADC_GetFlagStatus>
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d007      	beq.n	8000abc <ADC_EV_IRQHandling+0xa8>
	{
		pADCxHandle->pADCx->SR &= ~(1 << 1);
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	681a      	ldr	r2, [r3, #0]
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	681b      	ldr	r3, [r3, #0]
 8000ab6:	f022 0202 	bic.w	r2, r2, #2
 8000aba:	601a      	str	r2, [r3, #0]
	}

	// 5. Is overrun interrupt?
	if (ADC_GetFlagStatus(pADCxHandle->pADCx, ADC_FLAG_OVR))
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	2120      	movs	r1, #32
 8000ac2:	4618      	mov	r0, r3
 8000ac4:	f7ff ff56 	bl	8000974 <ADC_GetFlagStatus>
 8000ac8:	4603      	mov	r3, r0
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d007      	beq.n	8000ade <ADC_EV_IRQHandling+0xca>
	{
		pADCxHandle->pADCx->SR &= ~(1 << 0);
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	681a      	ldr	r2, [r3, #0]
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	f022 0201 	bic.w	r2, r2, #1
 8000adc:	601a      	str	r2, [r3, #0]
	}
}
 8000ade:	bf00      	nop
 8000ae0:	3708      	adds	r7, #8
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	bd80      	pop	{r7, pc}

08000ae6 <ADC_Read_IT_Handle>:

void ADC_Read_IT_Handle(ADC_Handle_t *pADCxHandle)
{
 8000ae6:	b580      	push	{r7, lr}
 8000ae8:	b082      	sub	sp, #8
 8000aea:	af00      	add	r7, sp, #0
 8000aec:	6078      	str	r0, [r7, #4]
	// 1. Read value from DR into buffer
	*(pADCxHandle->pDataBuffer) = pADCxHandle->pADCx->DR & 0xFFFF;
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	689b      	ldr	r3, [r3, #8]
 8000af8:	b292      	uxth	r2, r2
 8000afa:	801a      	strh	r2, [r3, #0]

	// 2. Send callback
	ADC_ApplicationCallbackEvent(pADCxHandle, ADC_READ_CMPLT);
 8000afc:	2100      	movs	r1, #0
 8000afe:	6878      	ldr	r0, [r7, #4]
 8000b00:	f000 feb4 	bl	800186c <ADC_ApplicationCallbackEvent>
}
 8000b04:	bf00      	nop
 8000b06:	3708      	adds	r7, #8
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	bd80      	pop	{r7, pc}

08000b0c <GPIO_PortCode>:
 *
 * Params: 		struct GPIO_RegDef_t* - GPIO register base address
 *
 */
uint8_t GPIO_PortCode(GPIO_RegDef_t *pGPIOx)
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	b083      	sub	sp, #12
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]
	if (pGPIOx == GPIOA)
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	4a1a      	ldr	r2, [pc, #104]	; (8000b80 <GPIO_PortCode+0x74>)
 8000b18:	4293      	cmp	r3, r2
 8000b1a:	d101      	bne.n	8000b20 <GPIO_PortCode+0x14>
	{
		return 0;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	e02a      	b.n	8000b76 <GPIO_PortCode+0x6a>
	}
	else if (pGPIOx == GPIOB)
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	4a18      	ldr	r2, [pc, #96]	; (8000b84 <GPIO_PortCode+0x78>)
 8000b24:	4293      	cmp	r3, r2
 8000b26:	d101      	bne.n	8000b2c <GPIO_PortCode+0x20>
	{
		return 1;
 8000b28:	2301      	movs	r3, #1
 8000b2a:	e024      	b.n	8000b76 <GPIO_PortCode+0x6a>
	}
	else if (pGPIOx == GPIOC)
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	4a16      	ldr	r2, [pc, #88]	; (8000b88 <GPIO_PortCode+0x7c>)
 8000b30:	4293      	cmp	r3, r2
 8000b32:	d101      	bne.n	8000b38 <GPIO_PortCode+0x2c>
	{
		return 2;
 8000b34:	2302      	movs	r3, #2
 8000b36:	e01e      	b.n	8000b76 <GPIO_PortCode+0x6a>
	}
	else if (pGPIOx == GPIOD)
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	4a14      	ldr	r2, [pc, #80]	; (8000b8c <GPIO_PortCode+0x80>)
 8000b3c:	4293      	cmp	r3, r2
 8000b3e:	d101      	bne.n	8000b44 <GPIO_PortCode+0x38>
	{
		return 3;
 8000b40:	2303      	movs	r3, #3
 8000b42:	e018      	b.n	8000b76 <GPIO_PortCode+0x6a>
	}
	else if (pGPIOx == GPIOE)
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	4a12      	ldr	r2, [pc, #72]	; (8000b90 <GPIO_PortCode+0x84>)
 8000b48:	4293      	cmp	r3, r2
 8000b4a:	d101      	bne.n	8000b50 <GPIO_PortCode+0x44>
	{
		return 4;
 8000b4c:	2304      	movs	r3, #4
 8000b4e:	e012      	b.n	8000b76 <GPIO_PortCode+0x6a>
	}
	else if (pGPIOx == GPIOF)
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	4a10      	ldr	r2, [pc, #64]	; (8000b94 <GPIO_PortCode+0x88>)
 8000b54:	4293      	cmp	r3, r2
 8000b56:	d101      	bne.n	8000b5c <GPIO_PortCode+0x50>
	{
		return 5;
 8000b58:	2305      	movs	r3, #5
 8000b5a:	e00c      	b.n	8000b76 <GPIO_PortCode+0x6a>
	}
	else if (pGPIOx == GPIOG)
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	4a0e      	ldr	r2, [pc, #56]	; (8000b98 <GPIO_PortCode+0x8c>)
 8000b60:	4293      	cmp	r3, r2
 8000b62:	d101      	bne.n	8000b68 <GPIO_PortCode+0x5c>
	{
		return 6;
 8000b64:	2306      	movs	r3, #6
 8000b66:	e006      	b.n	8000b76 <GPIO_PortCode+0x6a>
	}
	else if (pGPIOx == GPIOH)
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	4a0c      	ldr	r2, [pc, #48]	; (8000b9c <GPIO_PortCode+0x90>)
 8000b6c:	4293      	cmp	r3, r2
 8000b6e:	d101      	bne.n	8000b74 <GPIO_PortCode+0x68>
	{
		return 7;
 8000b70:	2307      	movs	r3, #7
 8000b72:	e000      	b.n	8000b76 <GPIO_PortCode+0x6a>
	}

	return 0;
 8000b74:	2300      	movs	r3, #0
}
 8000b76:	4618      	mov	r0, r3
 8000b78:	370c      	adds	r7, #12
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	bc80      	pop	{r7}
 8000b7e:	4770      	bx	lr
 8000b80:	40020000 	.word	0x40020000
 8000b84:	40020400 	.word	0x40020400
 8000b88:	40020800 	.word	0x40020800
 8000b8c:	40020c00 	.word	0x40020c00
 8000b90:	40021000 	.word	0x40021000
 8000b94:	40021400 	.word	0x40021400
 8000b98:	40021800 	.word	0x40021800
 8000b9c:	40021c00 	.word	0x40021c00

08000ba0 <GPIO_PeriClockControl>:
 * Params: 		struct GPIO_RegDef_t* - GPIO register base address
 * 				uint8_t - Enable or disable value
 *
 */
void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnOrDi)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	b083      	sub	sp, #12
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]
 8000ba8:	460b      	mov	r3, r1
 8000baa:	70fb      	strb	r3, [r7, #3]
	if (EnOrDi == ENABLE)
 8000bac:	78fb      	ldrb	r3, [r7, #3]
 8000bae:	2b01      	cmp	r3, #1
 8000bb0:	d157      	bne.n	8000c62 <GPIO_PeriClockControl+0xc2>
	{
		if (pGPIOx == GPIOA)
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	4a59      	ldr	r2, [pc, #356]	; (8000d1c <GPIO_PeriClockControl+0x17c>)
 8000bb6:	4293      	cmp	r3, r2
 8000bb8:	d106      	bne.n	8000bc8 <GPIO_PeriClockControl+0x28>
		{
			GPIOA_PCLK_EN();
 8000bba:	4b59      	ldr	r3, [pc, #356]	; (8000d20 <GPIO_PeriClockControl+0x180>)
 8000bbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bbe:	4a58      	ldr	r2, [pc, #352]	; (8000d20 <GPIO_PeriClockControl+0x180>)
 8000bc0:	f043 0301 	orr.w	r3, r3, #1
 8000bc4:	6313      	str	r3, [r2, #48]	; 0x30
		else if (pGPIOx == GPIOH)
		{
			GPIOH_PCLK_DI();
		}
	}
}
 8000bc6:	e0a3      	b.n	8000d10 <GPIO_PeriClockControl+0x170>
		else if (pGPIOx == GPIOB)
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	4a56      	ldr	r2, [pc, #344]	; (8000d24 <GPIO_PeriClockControl+0x184>)
 8000bcc:	4293      	cmp	r3, r2
 8000bce:	d106      	bne.n	8000bde <GPIO_PeriClockControl+0x3e>
			GPIOB_PCLK_EN();
 8000bd0:	4b53      	ldr	r3, [pc, #332]	; (8000d20 <GPIO_PeriClockControl+0x180>)
 8000bd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bd4:	4a52      	ldr	r2, [pc, #328]	; (8000d20 <GPIO_PeriClockControl+0x180>)
 8000bd6:	f043 0302 	orr.w	r3, r3, #2
 8000bda:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000bdc:	e098      	b.n	8000d10 <GPIO_PeriClockControl+0x170>
		else if (pGPIOx == GPIOC)
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	4a51      	ldr	r2, [pc, #324]	; (8000d28 <GPIO_PeriClockControl+0x188>)
 8000be2:	4293      	cmp	r3, r2
 8000be4:	d106      	bne.n	8000bf4 <GPIO_PeriClockControl+0x54>
			GPIOC_PCLK_EN();
 8000be6:	4b4e      	ldr	r3, [pc, #312]	; (8000d20 <GPIO_PeriClockControl+0x180>)
 8000be8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bea:	4a4d      	ldr	r2, [pc, #308]	; (8000d20 <GPIO_PeriClockControl+0x180>)
 8000bec:	f043 0304 	orr.w	r3, r3, #4
 8000bf0:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000bf2:	e08d      	b.n	8000d10 <GPIO_PeriClockControl+0x170>
		else if (pGPIOx == GPIOD)
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	4a4d      	ldr	r2, [pc, #308]	; (8000d2c <GPIO_PeriClockControl+0x18c>)
 8000bf8:	4293      	cmp	r3, r2
 8000bfa:	d106      	bne.n	8000c0a <GPIO_PeriClockControl+0x6a>
			GPIOD_PCLK_EN();
 8000bfc:	4b48      	ldr	r3, [pc, #288]	; (8000d20 <GPIO_PeriClockControl+0x180>)
 8000bfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c00:	4a47      	ldr	r2, [pc, #284]	; (8000d20 <GPIO_PeriClockControl+0x180>)
 8000c02:	f043 0308 	orr.w	r3, r3, #8
 8000c06:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000c08:	e082      	b.n	8000d10 <GPIO_PeriClockControl+0x170>
		else if (pGPIOx == GPIOE)
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	4a48      	ldr	r2, [pc, #288]	; (8000d30 <GPIO_PeriClockControl+0x190>)
 8000c0e:	4293      	cmp	r3, r2
 8000c10:	d106      	bne.n	8000c20 <GPIO_PeriClockControl+0x80>
			GPIOE_PCLK_EN();
 8000c12:	4b43      	ldr	r3, [pc, #268]	; (8000d20 <GPIO_PeriClockControl+0x180>)
 8000c14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c16:	4a42      	ldr	r2, [pc, #264]	; (8000d20 <GPIO_PeriClockControl+0x180>)
 8000c18:	f043 0310 	orr.w	r3, r3, #16
 8000c1c:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000c1e:	e077      	b.n	8000d10 <GPIO_PeriClockControl+0x170>
		else if (pGPIOx == GPIOF)
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	4a44      	ldr	r2, [pc, #272]	; (8000d34 <GPIO_PeriClockControl+0x194>)
 8000c24:	4293      	cmp	r3, r2
 8000c26:	d106      	bne.n	8000c36 <GPIO_PeriClockControl+0x96>
			GPIOF_PCLK_EN();
 8000c28:	4b3d      	ldr	r3, [pc, #244]	; (8000d20 <GPIO_PeriClockControl+0x180>)
 8000c2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c2c:	4a3c      	ldr	r2, [pc, #240]	; (8000d20 <GPIO_PeriClockControl+0x180>)
 8000c2e:	f043 0320 	orr.w	r3, r3, #32
 8000c32:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000c34:	e06c      	b.n	8000d10 <GPIO_PeriClockControl+0x170>
		else if (pGPIOx == GPIOG)
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	4a3f      	ldr	r2, [pc, #252]	; (8000d38 <GPIO_PeriClockControl+0x198>)
 8000c3a:	4293      	cmp	r3, r2
 8000c3c:	d106      	bne.n	8000c4c <GPIO_PeriClockControl+0xac>
			GPIOG_PCLK_EN();
 8000c3e:	4b38      	ldr	r3, [pc, #224]	; (8000d20 <GPIO_PeriClockControl+0x180>)
 8000c40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c42:	4a37      	ldr	r2, [pc, #220]	; (8000d20 <GPIO_PeriClockControl+0x180>)
 8000c44:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c48:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000c4a:	e061      	b.n	8000d10 <GPIO_PeriClockControl+0x170>
		else if (pGPIOx == GPIOH)
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	4a3b      	ldr	r2, [pc, #236]	; (8000d3c <GPIO_PeriClockControl+0x19c>)
 8000c50:	4293      	cmp	r3, r2
 8000c52:	d15d      	bne.n	8000d10 <GPIO_PeriClockControl+0x170>
			GPIOH_PCLK_EN();
 8000c54:	4b32      	ldr	r3, [pc, #200]	; (8000d20 <GPIO_PeriClockControl+0x180>)
 8000c56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c58:	4a31      	ldr	r2, [pc, #196]	; (8000d20 <GPIO_PeriClockControl+0x180>)
 8000c5a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c5e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000c60:	e056      	b.n	8000d10 <GPIO_PeriClockControl+0x170>
		if (pGPIOx == GPIOA)
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	4a2d      	ldr	r2, [pc, #180]	; (8000d1c <GPIO_PeriClockControl+0x17c>)
 8000c66:	4293      	cmp	r3, r2
 8000c68:	d106      	bne.n	8000c78 <GPIO_PeriClockControl+0xd8>
			GPIOA_PCLK_DI();
 8000c6a:	4b2d      	ldr	r3, [pc, #180]	; (8000d20 <GPIO_PeriClockControl+0x180>)
 8000c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c6e:	4a2c      	ldr	r2, [pc, #176]	; (8000d20 <GPIO_PeriClockControl+0x180>)
 8000c70:	f023 0301 	bic.w	r3, r3, #1
 8000c74:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000c76:	e04b      	b.n	8000d10 <GPIO_PeriClockControl+0x170>
		else if (pGPIOx == GPIOB)
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	4a2a      	ldr	r2, [pc, #168]	; (8000d24 <GPIO_PeriClockControl+0x184>)
 8000c7c:	4293      	cmp	r3, r2
 8000c7e:	d106      	bne.n	8000c8e <GPIO_PeriClockControl+0xee>
			GPIOB_PCLK_DI();
 8000c80:	4b27      	ldr	r3, [pc, #156]	; (8000d20 <GPIO_PeriClockControl+0x180>)
 8000c82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c84:	4a26      	ldr	r2, [pc, #152]	; (8000d20 <GPIO_PeriClockControl+0x180>)
 8000c86:	f023 0302 	bic.w	r3, r3, #2
 8000c8a:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000c8c:	e040      	b.n	8000d10 <GPIO_PeriClockControl+0x170>
		else if (pGPIOx == GPIOC)
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	4a25      	ldr	r2, [pc, #148]	; (8000d28 <GPIO_PeriClockControl+0x188>)
 8000c92:	4293      	cmp	r3, r2
 8000c94:	d106      	bne.n	8000ca4 <GPIO_PeriClockControl+0x104>
			GPIOC_PCLK_DI();
 8000c96:	4b22      	ldr	r3, [pc, #136]	; (8000d20 <GPIO_PeriClockControl+0x180>)
 8000c98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c9a:	4a21      	ldr	r2, [pc, #132]	; (8000d20 <GPIO_PeriClockControl+0x180>)
 8000c9c:	f023 0304 	bic.w	r3, r3, #4
 8000ca0:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000ca2:	e035      	b.n	8000d10 <GPIO_PeriClockControl+0x170>
		else if (pGPIOx == GPIOD)
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	4a21      	ldr	r2, [pc, #132]	; (8000d2c <GPIO_PeriClockControl+0x18c>)
 8000ca8:	4293      	cmp	r3, r2
 8000caa:	d106      	bne.n	8000cba <GPIO_PeriClockControl+0x11a>
			GPIOD_PCLK_DI();
 8000cac:	4b1c      	ldr	r3, [pc, #112]	; (8000d20 <GPIO_PeriClockControl+0x180>)
 8000cae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cb0:	4a1b      	ldr	r2, [pc, #108]	; (8000d20 <GPIO_PeriClockControl+0x180>)
 8000cb2:	f023 0308 	bic.w	r3, r3, #8
 8000cb6:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000cb8:	e02a      	b.n	8000d10 <GPIO_PeriClockControl+0x170>
		else if (pGPIOx == GPIOE)
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	4a1c      	ldr	r2, [pc, #112]	; (8000d30 <GPIO_PeriClockControl+0x190>)
 8000cbe:	4293      	cmp	r3, r2
 8000cc0:	d106      	bne.n	8000cd0 <GPIO_PeriClockControl+0x130>
			GPIOE_PCLK_DI();
 8000cc2:	4b17      	ldr	r3, [pc, #92]	; (8000d20 <GPIO_PeriClockControl+0x180>)
 8000cc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cc6:	4a16      	ldr	r2, [pc, #88]	; (8000d20 <GPIO_PeriClockControl+0x180>)
 8000cc8:	f023 0310 	bic.w	r3, r3, #16
 8000ccc:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000cce:	e01f      	b.n	8000d10 <GPIO_PeriClockControl+0x170>
		else if (pGPIOx == GPIOF)
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	4a18      	ldr	r2, [pc, #96]	; (8000d34 <GPIO_PeriClockControl+0x194>)
 8000cd4:	4293      	cmp	r3, r2
 8000cd6:	d106      	bne.n	8000ce6 <GPIO_PeriClockControl+0x146>
			GPIOF_PCLK_DI();
 8000cd8:	4b11      	ldr	r3, [pc, #68]	; (8000d20 <GPIO_PeriClockControl+0x180>)
 8000cda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cdc:	4a10      	ldr	r2, [pc, #64]	; (8000d20 <GPIO_PeriClockControl+0x180>)
 8000cde:	f023 0320 	bic.w	r3, r3, #32
 8000ce2:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000ce4:	e014      	b.n	8000d10 <GPIO_PeriClockControl+0x170>
		else if (pGPIOx == GPIOG)
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	4a13      	ldr	r2, [pc, #76]	; (8000d38 <GPIO_PeriClockControl+0x198>)
 8000cea:	4293      	cmp	r3, r2
 8000cec:	d106      	bne.n	8000cfc <GPIO_PeriClockControl+0x15c>
			GPIOG_PCLK_DI();
 8000cee:	4b0c      	ldr	r3, [pc, #48]	; (8000d20 <GPIO_PeriClockControl+0x180>)
 8000cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cf2:	4a0b      	ldr	r2, [pc, #44]	; (8000d20 <GPIO_PeriClockControl+0x180>)
 8000cf4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000cf8:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000cfa:	e009      	b.n	8000d10 <GPIO_PeriClockControl+0x170>
		else if (pGPIOx == GPIOH)
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	4a0f      	ldr	r2, [pc, #60]	; (8000d3c <GPIO_PeriClockControl+0x19c>)
 8000d00:	4293      	cmp	r3, r2
 8000d02:	d105      	bne.n	8000d10 <GPIO_PeriClockControl+0x170>
			GPIOH_PCLK_DI();
 8000d04:	4b06      	ldr	r3, [pc, #24]	; (8000d20 <GPIO_PeriClockControl+0x180>)
 8000d06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d08:	4a05      	ldr	r2, [pc, #20]	; (8000d20 <GPIO_PeriClockControl+0x180>)
 8000d0a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000d0e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000d10:	bf00      	nop
 8000d12:	370c      	adds	r7, #12
 8000d14:	46bd      	mov	sp, r7
 8000d16:	bc80      	pop	{r7}
 8000d18:	4770      	bx	lr
 8000d1a:	bf00      	nop
 8000d1c:	40020000 	.word	0x40020000
 8000d20:	40023800 	.word	0x40023800
 8000d24:	40020400 	.word	0x40020400
 8000d28:	40020800 	.word	0x40020800
 8000d2c:	40020c00 	.word	0x40020c00
 8000d30:	40021000 	.word	0x40021000
 8000d34:	40021400 	.word	0x40021400
 8000d38:	40021800 	.word	0x40021800
 8000d3c:	40021c00 	.word	0x40021c00

08000d40 <GPIO_Init>:
 * Params:		struct GPIO_Handle_t*
 *
 *
 */
void GPIO_Init(GPIO_Handle_t *pGPIOxHandle)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b086      	sub	sp, #24
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
	// Enable clock to GPIO port
	GPIO_PeriClockControl(pGPIOxHandle->pGPIOx, ENABLE);
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	2101      	movs	r1, #1
 8000d4e:	4618      	mov	r0, r3
 8000d50:	f7ff ff26 	bl	8000ba0 <GPIO_PeriClockControl>

	uint32_t temp = 0;
 8000d54:	2300      	movs	r3, #0
 8000d56:	617b      	str	r3, [r7, #20]

	// 1. Set GPIO pin mode
	if (pGPIOxHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG)
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	795b      	ldrb	r3, [r3, #5]
 8000d5c:	2b03      	cmp	r3, #3
 8000d5e:	d822      	bhi.n	8000da6 <GPIO_Init+0x66>
	{
		temp = (pGPIOxHandle->GPIO_PinConfig.GPIO_PinMode << (2 * pGPIOxHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	795b      	ldrb	r3, [r3, #5]
 8000d64:	461a      	mov	r2, r3
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	791b      	ldrb	r3, [r3, #4]
 8000d6a:	005b      	lsls	r3, r3, #1
 8000d6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d70:	617b      	str	r3, [r7, #20]
		pGPIOxHandle->pGPIOx->MODER &= ~((0x3) << (2 * pGPIOxHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	681a      	ldr	r2, [r3, #0]
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	791b      	ldrb	r3, [r3, #4]
 8000d7c:	005b      	lsls	r3, r3, #1
 8000d7e:	2103      	movs	r1, #3
 8000d80:	fa01 f303 	lsl.w	r3, r1, r3
 8000d84:	43db      	mvns	r3, r3
 8000d86:	4619      	mov	r1, r3
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	400a      	ands	r2, r1
 8000d8e:	601a      	str	r2, [r3, #0]
		pGPIOxHandle->pGPIOx->MODER |= temp;
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	6819      	ldr	r1, [r3, #0]
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	697a      	ldr	r2, [r7, #20]
 8000d9c:	430a      	orrs	r2, r1
 8000d9e:	601a      	str	r2, [r3, #0]
		temp = 0;
 8000da0:	2300      	movs	r3, #0
 8000da2:	617b      	str	r3, [r7, #20]
 8000da4:	e07c      	b.n	8000ea0 <GPIO_Init+0x160>
	}
	else {
		//For setting to interrupt mode...

		// Enable clock to SYSCFG (needed to set IRQ in EXTI)
		SYSCFG_PCLK_EN();
 8000da6:	4b8e      	ldr	r3, [pc, #568]	; (8000fe0 <GPIO_Init+0x2a0>)
 8000da8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000daa:	4a8d      	ldr	r2, [pc, #564]	; (8000fe0 <GPIO_Init+0x2a0>)
 8000dac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000db0:	6453      	str	r3, [r2, #68]	; 0x44

		// 1. Set rising/falling edge trigger(s)
		if (pGPIOxHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_IT_MODE_RT)
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	795b      	ldrb	r3, [r3, #5]
 8000db6:	2b04      	cmp	r3, #4
 8000db8:	d117      	bne.n	8000dea <GPIO_Init+0xaa>
		{
			EXTI->RTSR |= (1 << pGPIOxHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000dba:	4b8a      	ldr	r3, [pc, #552]	; (8000fe4 <GPIO_Init+0x2a4>)
 8000dbc:	689b      	ldr	r3, [r3, #8]
 8000dbe:	687a      	ldr	r2, [r7, #4]
 8000dc0:	7912      	ldrb	r2, [r2, #4]
 8000dc2:	4611      	mov	r1, r2
 8000dc4:	2201      	movs	r2, #1
 8000dc6:	408a      	lsls	r2, r1
 8000dc8:	4611      	mov	r1, r2
 8000dca:	4a86      	ldr	r2, [pc, #536]	; (8000fe4 <GPIO_Init+0x2a4>)
 8000dcc:	430b      	orrs	r3, r1
 8000dce:	6093      	str	r3, [r2, #8]
			EXTI->FTSR &= ~(1 << pGPIOxHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000dd0:	4b84      	ldr	r3, [pc, #528]	; (8000fe4 <GPIO_Init+0x2a4>)
 8000dd2:	68db      	ldr	r3, [r3, #12]
 8000dd4:	687a      	ldr	r2, [r7, #4]
 8000dd6:	7912      	ldrb	r2, [r2, #4]
 8000dd8:	4611      	mov	r1, r2
 8000dda:	2201      	movs	r2, #1
 8000ddc:	408a      	lsls	r2, r1
 8000dde:	43d2      	mvns	r2, r2
 8000de0:	4611      	mov	r1, r2
 8000de2:	4a80      	ldr	r2, [pc, #512]	; (8000fe4 <GPIO_Init+0x2a4>)
 8000de4:	400b      	ands	r3, r1
 8000de6:	60d3      	str	r3, [r2, #12]
 8000de8:	e035      	b.n	8000e56 <GPIO_Init+0x116>
		}
		else if (pGPIOxHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_IT_MODE_FT)
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	795b      	ldrb	r3, [r3, #5]
 8000dee:	2b05      	cmp	r3, #5
 8000df0:	d117      	bne.n	8000e22 <GPIO_Init+0xe2>
		{
			EXTI->FTSR |= (1 << pGPIOxHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000df2:	4b7c      	ldr	r3, [pc, #496]	; (8000fe4 <GPIO_Init+0x2a4>)
 8000df4:	68db      	ldr	r3, [r3, #12]
 8000df6:	687a      	ldr	r2, [r7, #4]
 8000df8:	7912      	ldrb	r2, [r2, #4]
 8000dfa:	4611      	mov	r1, r2
 8000dfc:	2201      	movs	r2, #1
 8000dfe:	408a      	lsls	r2, r1
 8000e00:	4611      	mov	r1, r2
 8000e02:	4a78      	ldr	r2, [pc, #480]	; (8000fe4 <GPIO_Init+0x2a4>)
 8000e04:	430b      	orrs	r3, r1
 8000e06:	60d3      	str	r3, [r2, #12]
			EXTI->RTSR &= ~(1 << pGPIOxHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000e08:	4b76      	ldr	r3, [pc, #472]	; (8000fe4 <GPIO_Init+0x2a4>)
 8000e0a:	689b      	ldr	r3, [r3, #8]
 8000e0c:	687a      	ldr	r2, [r7, #4]
 8000e0e:	7912      	ldrb	r2, [r2, #4]
 8000e10:	4611      	mov	r1, r2
 8000e12:	2201      	movs	r2, #1
 8000e14:	408a      	lsls	r2, r1
 8000e16:	43d2      	mvns	r2, r2
 8000e18:	4611      	mov	r1, r2
 8000e1a:	4a72      	ldr	r2, [pc, #456]	; (8000fe4 <GPIO_Init+0x2a4>)
 8000e1c:	400b      	ands	r3, r1
 8000e1e:	6093      	str	r3, [r2, #8]
 8000e20:	e019      	b.n	8000e56 <GPIO_Init+0x116>
		}
		else if (pGPIOxHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_IT_MODE_RFT)
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	795b      	ldrb	r3, [r3, #5]
 8000e26:	2b06      	cmp	r3, #6
 8000e28:	d115      	bne.n	8000e56 <GPIO_Init+0x116>
		{
			EXTI->RTSR |= (1 << pGPIOxHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000e2a:	4b6e      	ldr	r3, [pc, #440]	; (8000fe4 <GPIO_Init+0x2a4>)
 8000e2c:	689b      	ldr	r3, [r3, #8]
 8000e2e:	687a      	ldr	r2, [r7, #4]
 8000e30:	7912      	ldrb	r2, [r2, #4]
 8000e32:	4611      	mov	r1, r2
 8000e34:	2201      	movs	r2, #1
 8000e36:	408a      	lsls	r2, r1
 8000e38:	4611      	mov	r1, r2
 8000e3a:	4a6a      	ldr	r2, [pc, #424]	; (8000fe4 <GPIO_Init+0x2a4>)
 8000e3c:	430b      	orrs	r3, r1
 8000e3e:	6093      	str	r3, [r2, #8]
			EXTI->FTSR |= (1 << pGPIOxHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000e40:	4b68      	ldr	r3, [pc, #416]	; (8000fe4 <GPIO_Init+0x2a4>)
 8000e42:	68db      	ldr	r3, [r3, #12]
 8000e44:	687a      	ldr	r2, [r7, #4]
 8000e46:	7912      	ldrb	r2, [r2, #4]
 8000e48:	4611      	mov	r1, r2
 8000e4a:	2201      	movs	r2, #1
 8000e4c:	408a      	lsls	r2, r1
 8000e4e:	4611      	mov	r1, r2
 8000e50:	4a64      	ldr	r2, [pc, #400]	; (8000fe4 <GPIO_Init+0x2a4>)
 8000e52:	430b      	orrs	r3, r1
 8000e54:	60d3      	str	r3, [r2, #12]
		}

		// 2. Configure GPIO port selection in SYSCFG
		uint8_t temp1 = pGPIOxHandle->GPIO_PinConfig.GPIO_PinNumber / 4;
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	791b      	ldrb	r3, [r3, #4]
 8000e5a:	089b      	lsrs	r3, r3, #2
 8000e5c:	74fb      	strb	r3, [r7, #19]
		uint8_t temp2 = pGPIOxHandle->GPIO_PinConfig.GPIO_PinNumber % 4;
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	791b      	ldrb	r3, [r3, #4]
 8000e62:	f003 0303 	and.w	r3, r3, #3
 8000e66:	74bb      	strb	r3, [r7, #18]
		uint8_t portCode = GPIO_PortCode(pGPIOxHandle->pGPIOx);
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	f7ff fe4d 	bl	8000b0c <GPIO_PortCode>
 8000e72:	4603      	mov	r3, r0
 8000e74:	747b      	strb	r3, [r7, #17]
		SYSCFG->EXTICR[temp1] = portCode << (temp2 * 4);
 8000e76:	7c7a      	ldrb	r2, [r7, #17]
 8000e78:	7cbb      	ldrb	r3, [r7, #18]
 8000e7a:	009b      	lsls	r3, r3, #2
 8000e7c:	fa02 f103 	lsl.w	r1, r2, r3
 8000e80:	4a59      	ldr	r2, [pc, #356]	; (8000fe8 <GPIO_Init+0x2a8>)
 8000e82:	7cfb      	ldrb	r3, [r7, #19]
 8000e84:	3302      	adds	r3, #2
 8000e86:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

		// 3. Enable EXTI interrupt using interrupt register masking
		EXTI->IMR |= (1 << pGPIOxHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000e8a:	4b56      	ldr	r3, [pc, #344]	; (8000fe4 <GPIO_Init+0x2a4>)
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	687a      	ldr	r2, [r7, #4]
 8000e90:	7912      	ldrb	r2, [r2, #4]
 8000e92:	4611      	mov	r1, r2
 8000e94:	2201      	movs	r2, #1
 8000e96:	408a      	lsls	r2, r1
 8000e98:	4611      	mov	r1, r2
 8000e9a:	4a52      	ldr	r2, [pc, #328]	; (8000fe4 <GPIO_Init+0x2a4>)
 8000e9c:	430b      	orrs	r3, r1
 8000e9e:	6013      	str	r3, [r2, #0]
	}

	// 2. Set pin speed
	temp = (pGPIOxHandle->GPIO_PinConfig.GPIO_PinSpeed << (2 * pGPIOxHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	799b      	ldrb	r3, [r3, #6]
 8000ea4:	461a      	mov	r2, r3
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	791b      	ldrb	r3, [r3, #4]
 8000eaa:	005b      	lsls	r3, r3, #1
 8000eac:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb0:	617b      	str	r3, [r7, #20]
	pGPIOxHandle->pGPIOx->OSPEEDR &= ~((0x3) << (2 * pGPIOxHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	689a      	ldr	r2, [r3, #8]
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	791b      	ldrb	r3, [r3, #4]
 8000ebc:	005b      	lsls	r3, r3, #1
 8000ebe:	2103      	movs	r1, #3
 8000ec0:	fa01 f303 	lsl.w	r3, r1, r3
 8000ec4:	43db      	mvns	r3, r3
 8000ec6:	4619      	mov	r1, r3
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	400a      	ands	r2, r1
 8000ece:	609a      	str	r2, [r3, #8]
	pGPIOxHandle->pGPIOx->OSPEEDR |= temp;
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	6899      	ldr	r1, [r3, #8]
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	697a      	ldr	r2, [r7, #20]
 8000edc:	430a      	orrs	r2, r1
 8000ede:	609a      	str	r2, [r3, #8]
	temp = 0;
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	617b      	str	r3, [r7, #20]

	// 3. Set pin pull-up or pull-down mode
	temp = (pGPIOxHandle->GPIO_PinConfig.GPIO_PuPdCtrl << (2 * pGPIOxHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	79db      	ldrb	r3, [r3, #7]
 8000ee8:	461a      	mov	r2, r3
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	791b      	ldrb	r3, [r3, #4]
 8000eee:	005b      	lsls	r3, r3, #1
 8000ef0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef4:	617b      	str	r3, [r7, #20]
	pGPIOxHandle->pGPIOx->PUPDR &= ~((0x3) << (2 * pGPIOxHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	68da      	ldr	r2, [r3, #12]
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	791b      	ldrb	r3, [r3, #4]
 8000f00:	005b      	lsls	r3, r3, #1
 8000f02:	2103      	movs	r1, #3
 8000f04:	fa01 f303 	lsl.w	r3, r1, r3
 8000f08:	43db      	mvns	r3, r3
 8000f0a:	4619      	mov	r1, r3
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	400a      	ands	r2, r1
 8000f12:	60da      	str	r2, [r3, #12]
	pGPIOxHandle->pGPIOx->PUPDR |= temp;
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	68d9      	ldr	r1, [r3, #12]
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	697a      	ldr	r2, [r7, #20]
 8000f20:	430a      	orrs	r2, r1
 8000f22:	60da      	str	r2, [r3, #12]
	temp = 0;
 8000f24:	2300      	movs	r3, #0
 8000f26:	617b      	str	r3, [r7, #20]

	// 4. Configure pin output type (push-pull or open drain)
	temp = (pGPIOxHandle->GPIO_PinConfig.GPIO_OpType << pGPIOxHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	7a1b      	ldrb	r3, [r3, #8]
 8000f2c:	461a      	mov	r2, r3
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	791b      	ldrb	r3, [r3, #4]
 8000f32:	fa02 f303 	lsl.w	r3, r2, r3
 8000f36:	617b      	str	r3, [r7, #20]
	pGPIOxHandle->pGPIOx->OTYPER &= ~((0x1) <<  pGPIOxHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	685a      	ldr	r2, [r3, #4]
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	791b      	ldrb	r3, [r3, #4]
 8000f42:	4619      	mov	r1, r3
 8000f44:	2301      	movs	r3, #1
 8000f46:	408b      	lsls	r3, r1
 8000f48:	43db      	mvns	r3, r3
 8000f4a:	4619      	mov	r1, r3
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	400a      	ands	r2, r1
 8000f52:	605a      	str	r2, [r3, #4]
	pGPIOxHandle->pGPIOx->OTYPER |= temp;
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	6859      	ldr	r1, [r3, #4]
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	697a      	ldr	r2, [r7, #20]
 8000f60:	430a      	orrs	r2, r1
 8000f62:	605a      	str	r2, [r3, #4]
	temp = 0;
 8000f64:	2300      	movs	r3, #0
 8000f66:	617b      	str	r3, [r7, #20]

	// 5. Configure alternate mode function
	if (pGPIOxHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_AF)
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	795b      	ldrb	r3, [r3, #5]
 8000f6c:	2b02      	cmp	r3, #2
 8000f6e:	d132      	bne.n	8000fd6 <GPIO_Init+0x296>
	{
		uint32_t temp1, temp2;
		temp1 = pGPIOxHandle->GPIO_PinConfig.GPIO_PinNumber / 8;
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	791b      	ldrb	r3, [r3, #4]
 8000f74:	08db      	lsrs	r3, r3, #3
 8000f76:	b2db      	uxtb	r3, r3
 8000f78:	60fb      	str	r3, [r7, #12]
		temp2 = pGPIOxHandle->GPIO_PinConfig.GPIO_PinNumber % 8;
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	791b      	ldrb	r3, [r3, #4]
 8000f7e:	f003 0307 	and.w	r3, r3, #7
 8000f82:	60bb      	str	r3, [r7, #8]

		pGPIOxHandle->pGPIOx->AFR[temp1] &= ~((0xF) << (4 * temp2));
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	68fa      	ldr	r2, [r7, #12]
 8000f8a:	3208      	adds	r2, #8
 8000f8c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000f90:	68bb      	ldr	r3, [r7, #8]
 8000f92:	009b      	lsls	r3, r3, #2
 8000f94:	210f      	movs	r1, #15
 8000f96:	fa01 f303 	lsl.w	r3, r1, r3
 8000f9a:	43db      	mvns	r3, r3
 8000f9c:	4619      	mov	r1, r3
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	4011      	ands	r1, r2
 8000fa4:	68fa      	ldr	r2, [r7, #12]
 8000fa6:	3208      	adds	r2, #8
 8000fa8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOxHandle->pGPIOx->AFR[temp1] |= (pGPIOxHandle->GPIO_PinConfig.GPIO_AfMode << (4 * temp2));
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	68fa      	ldr	r2, [r7, #12]
 8000fb2:	3208      	adds	r2, #8
 8000fb4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	7a5b      	ldrb	r3, [r3, #9]
 8000fbc:	4619      	mov	r1, r3
 8000fbe:	68bb      	ldr	r3, [r7, #8]
 8000fc0:	009b      	lsls	r3, r3, #2
 8000fc2:	fa01 f303 	lsl.w	r3, r1, r3
 8000fc6:	4619      	mov	r1, r3
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	4311      	orrs	r1, r2
 8000fce:	68fa      	ldr	r2, [r7, #12]
 8000fd0:	3208      	adds	r2, #8
 8000fd2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}
}
 8000fd6:	bf00      	nop
 8000fd8:	3718      	adds	r7, #24
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bd80      	pop	{r7, pc}
 8000fde:	bf00      	nop
 8000fe0:	40023800 	.word	0x40023800
 8000fe4:	40013c00 	.word	0x40013c00
 8000fe8:	40013800 	.word	0x40013800

08000fec <RCC_GetPPLCLK>:
 *
 * Return: 		uint32_t PPLClk - accelerated clock speed (Hz)
 *
 */
uint32_t RCC_GetPPLCLK(void)
{
 8000fec:	b480      	push	{r7}
 8000fee:	af00      	add	r7, sp, #0
	//TODO
	return 0;
 8000ff0:	2300      	movs	r3, #0
}
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	bc80      	pop	{r7}
 8000ff8:	4770      	bx	lr
	...

08000ffc <RCC_GetAPB1CLK>:
 *
 * Return: 		uint32_t Apb1Clk - clock speed to I2C peripherals (Hz)
 *
 */
uint32_t RCC_GetAPB1CLK(void)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b084      	sub	sp, #16
 8001000:	af00      	add	r7, sp, #0
	// 1. Get system clock source (internal, external, PLL)
	uint8_t clkSrc = ((RCC->CFGR >> 2) & 0x3);
 8001002:	4b25      	ldr	r3, [pc, #148]	; (8001098 <RCC_GetAPB1CLK+0x9c>)
 8001004:	689b      	ldr	r3, [r3, #8]
 8001006:	089b      	lsrs	r3, r3, #2
 8001008:	b2db      	uxtb	r3, r3
 800100a:	f003 0303 	and.w	r3, r3, #3
 800100e:	727b      	strb	r3, [r7, #9]

	uint32_t sysClk, Apb1Clk;

	if (clkSrc == 0)
 8001010:	7a7b      	ldrb	r3, [r7, #9]
 8001012:	2b00      	cmp	r3, #0
 8001014:	d102      	bne.n	800101c <RCC_GetAPB1CLK+0x20>
	{
		// Internal oscillator
		sysClk = 16000000;
 8001016:	4b21      	ldr	r3, [pc, #132]	; (800109c <RCC_GetAPB1CLK+0xa0>)
 8001018:	60fb      	str	r3, [r7, #12]
 800101a:	e00d      	b.n	8001038 <RCC_GetAPB1CLK+0x3c>
	}
	else if (clkSrc == 1)
 800101c:	7a7b      	ldrb	r3, [r7, #9]
 800101e:	2b01      	cmp	r3, #1
 8001020:	d102      	bne.n	8001028 <RCC_GetAPB1CLK+0x2c>
	{
		// External on-board oscillator
		sysClk = 8000000;
 8001022:	4b1f      	ldr	r3, [pc, #124]	; (80010a0 <RCC_GetAPB1CLK+0xa4>)
 8001024:	60fb      	str	r3, [r7, #12]
 8001026:	e007      	b.n	8001038 <RCC_GetAPB1CLK+0x3c>
	}
	else if (clkSrc == 2)
 8001028:	7a7b      	ldrb	r3, [r7, #9]
 800102a:	2b02      	cmp	r3, #2
 800102c:	d104      	bne.n	8001038 <RCC_GetAPB1CLK+0x3c>
	{
		Apb1Clk = RCC_GetPPLCLK();
 800102e:	f7ff ffdd 	bl	8000fec <RCC_GetPPLCLK>
 8001032:	6078      	str	r0, [r7, #4]
		return Apb1Clk;
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	e02b      	b.n	8001090 <RCC_GetAPB1CLK+0x94>
	}

	// 2. Get the AHB prescaler value
	uint8_t temp = (RCC->CFGR >> 4) & 0xF;
 8001038:	4b17      	ldr	r3, [pc, #92]	; (8001098 <RCC_GetAPB1CLK+0x9c>)
 800103a:	689b      	ldr	r3, [r3, #8]
 800103c:	091b      	lsrs	r3, r3, #4
 800103e:	b2db      	uxtb	r3, r3
 8001040:	f003 030f 	and.w	r3, r3, #15
 8001044:	70fb      	strb	r3, [r7, #3]
	uint8_t ahbPre = 1, ppre1Pre = 1;
 8001046:	2301      	movs	r3, #1
 8001048:	72fb      	strb	r3, [r7, #11]
 800104a:	2301      	movs	r3, #1
 800104c:	72bb      	strb	r3, [r7, #10]

	if (temp >= 8)
 800104e:	78fb      	ldrb	r3, [r7, #3]
 8001050:	2b07      	cmp	r3, #7
 8001052:	d905      	bls.n	8001060 <RCC_GetAPB1CLK+0x64>
	{
		ahbPre = AHB_Prescaler[temp - 8];
 8001054:	78fb      	ldrb	r3, [r7, #3]
 8001056:	3b08      	subs	r3, #8
 8001058:	4a12      	ldr	r2, [pc, #72]	; (80010a4 <RCC_GetAPB1CLK+0xa8>)
 800105a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800105e:	72fb      	strb	r3, [r7, #11]
	}

	// 3. Get the APB1 prescaler value
	temp = (RCC->CFGR >> 10) & 0x7;
 8001060:	4b0d      	ldr	r3, [pc, #52]	; (8001098 <RCC_GetAPB1CLK+0x9c>)
 8001062:	689b      	ldr	r3, [r3, #8]
 8001064:	0a9b      	lsrs	r3, r3, #10
 8001066:	b2db      	uxtb	r3, r3
 8001068:	f003 0307 	and.w	r3, r3, #7
 800106c:	70fb      	strb	r3, [r7, #3]
	if (temp >= 4)
 800106e:	78fb      	ldrb	r3, [r7, #3]
 8001070:	2b03      	cmp	r3, #3
 8001072:	d904      	bls.n	800107e <RCC_GetAPB1CLK+0x82>
	{
		ppre1Pre = PPRE1_Prescaler[temp - 4];
 8001074:	78fb      	ldrb	r3, [r7, #3]
 8001076:	3b04      	subs	r3, #4
 8001078:	4a0b      	ldr	r2, [pc, #44]	; (80010a8 <RCC_GetAPB1CLK+0xac>)
 800107a:	5cd3      	ldrb	r3, [r2, r3]
 800107c:	72bb      	strb	r3, [r7, #10]
	}

	// 4. Calculate the clock speed to I2C
	Apb1Clk = (sysClk / ahbPre) / ppre1Pre;
 800107e:	7afb      	ldrb	r3, [r7, #11]
 8001080:	68fa      	ldr	r2, [r7, #12]
 8001082:	fbb2 f2f3 	udiv	r2, r2, r3
 8001086:	7abb      	ldrb	r3, [r7, #10]
 8001088:	fbb2 f3f3 	udiv	r3, r2, r3
 800108c:	607b      	str	r3, [r7, #4]

	return Apb1Clk;
 800108e:	687b      	ldr	r3, [r7, #4]
}
 8001090:	4618      	mov	r0, r3
 8001092:	3710      	adds	r7, #16
 8001094:	46bd      	mov	sp, r7
 8001096:	bd80      	pop	{r7, pc}
 8001098:	40023800 	.word	0x40023800
 800109c:	00f42400 	.word	0x00f42400
 80010a0:	007a1200 	.word	0x007a1200
 80010a4:	20000000 	.word	0x20000000
 80010a8:	20000010 	.word	0x20000010

080010ac <RCC_GetAPB2CLK>:
 *
 * Return: 		uint32_t Apb2Clk - clock speed to APB2 (Hz)
 *
 */
uint32_t RCC_GetAPB2CLK(void)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b084      	sub	sp, #16
 80010b0:	af00      	add	r7, sp, #0
	// 1. Get system clock source (internal, external, PLL)
	uint8_t clkSrc = ((RCC->CFGR >> 2) & 0x3);
 80010b2:	4b25      	ldr	r3, [pc, #148]	; (8001148 <RCC_GetAPB2CLK+0x9c>)
 80010b4:	689b      	ldr	r3, [r3, #8]
 80010b6:	089b      	lsrs	r3, r3, #2
 80010b8:	b2db      	uxtb	r3, r3
 80010ba:	f003 0303 	and.w	r3, r3, #3
 80010be:	727b      	strb	r3, [r7, #9]

	uint32_t sysClk, Apb2Clk;

	if (clkSrc == 0)
 80010c0:	7a7b      	ldrb	r3, [r7, #9]
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d102      	bne.n	80010cc <RCC_GetAPB2CLK+0x20>
	{
		// Internal oscillator
		sysClk = 16000000;
 80010c6:	4b21      	ldr	r3, [pc, #132]	; (800114c <RCC_GetAPB2CLK+0xa0>)
 80010c8:	60fb      	str	r3, [r7, #12]
 80010ca:	e00d      	b.n	80010e8 <RCC_GetAPB2CLK+0x3c>
	}
	else if (clkSrc == 1)
 80010cc:	7a7b      	ldrb	r3, [r7, #9]
 80010ce:	2b01      	cmp	r3, #1
 80010d0:	d102      	bne.n	80010d8 <RCC_GetAPB2CLK+0x2c>
	{
		// External on-board oscillator
		sysClk = 8000000;
 80010d2:	4b1f      	ldr	r3, [pc, #124]	; (8001150 <RCC_GetAPB2CLK+0xa4>)
 80010d4:	60fb      	str	r3, [r7, #12]
 80010d6:	e007      	b.n	80010e8 <RCC_GetAPB2CLK+0x3c>
	}
	else if (clkSrc == 2)
 80010d8:	7a7b      	ldrb	r3, [r7, #9]
 80010da:	2b02      	cmp	r3, #2
 80010dc:	d104      	bne.n	80010e8 <RCC_GetAPB2CLK+0x3c>
	{
		Apb2Clk = RCC_GetPPLCLK();
 80010de:	f7ff ff85 	bl	8000fec <RCC_GetPPLCLK>
 80010e2:	6078      	str	r0, [r7, #4]
		return Apb2Clk;
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	e02b      	b.n	8001140 <RCC_GetAPB2CLK+0x94>
	}

	// 2. Get the AHB prescaler value
	uint8_t temp = (RCC->CFGR >> 4) & 0xF;
 80010e8:	4b17      	ldr	r3, [pc, #92]	; (8001148 <RCC_GetAPB2CLK+0x9c>)
 80010ea:	689b      	ldr	r3, [r3, #8]
 80010ec:	091b      	lsrs	r3, r3, #4
 80010ee:	b2db      	uxtb	r3, r3
 80010f0:	f003 030f 	and.w	r3, r3, #15
 80010f4:	70fb      	strb	r3, [r7, #3]
	uint8_t ahbPre = 1, ppre2Pre = 1;
 80010f6:	2301      	movs	r3, #1
 80010f8:	72fb      	strb	r3, [r7, #11]
 80010fa:	2301      	movs	r3, #1
 80010fc:	72bb      	strb	r3, [r7, #10]

	if (temp >= 8)
 80010fe:	78fb      	ldrb	r3, [r7, #3]
 8001100:	2b07      	cmp	r3, #7
 8001102:	d905      	bls.n	8001110 <RCC_GetAPB2CLK+0x64>
	{
		ahbPre = AHB_Prescaler[temp - 8];
 8001104:	78fb      	ldrb	r3, [r7, #3]
 8001106:	3b08      	subs	r3, #8
 8001108:	4a12      	ldr	r2, [pc, #72]	; (8001154 <RCC_GetAPB2CLK+0xa8>)
 800110a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800110e:	72fb      	strb	r3, [r7, #11]
	}

	// 3. Get the APB2 prescaler value
	temp = (RCC->CFGR >> 13) & 0x7;
 8001110:	4b0d      	ldr	r3, [pc, #52]	; (8001148 <RCC_GetAPB2CLK+0x9c>)
 8001112:	689b      	ldr	r3, [r3, #8]
 8001114:	0b5b      	lsrs	r3, r3, #13
 8001116:	b2db      	uxtb	r3, r3
 8001118:	f003 0307 	and.w	r3, r3, #7
 800111c:	70fb      	strb	r3, [r7, #3]
	if (temp >= 4)
 800111e:	78fb      	ldrb	r3, [r7, #3]
 8001120:	2b03      	cmp	r3, #3
 8001122:	d904      	bls.n	800112e <RCC_GetAPB2CLK+0x82>
	{
		ppre2Pre = PPRE2_Prescaler[temp - 4];
 8001124:	78fb      	ldrb	r3, [r7, #3]
 8001126:	3b04      	subs	r3, #4
 8001128:	4a0b      	ldr	r2, [pc, #44]	; (8001158 <RCC_GetAPB2CLK+0xac>)
 800112a:	5cd3      	ldrb	r3, [r2, r3]
 800112c:	72bb      	strb	r3, [r7, #10]
	}

	// 4. Calculate the clock speed to I2C
	Apb2Clk = (sysClk / ahbPre) / ppre2Pre;
 800112e:	7afb      	ldrb	r3, [r7, #11]
 8001130:	68fa      	ldr	r2, [r7, #12]
 8001132:	fbb2 f2f3 	udiv	r2, r2, r3
 8001136:	7abb      	ldrb	r3, [r7, #10]
 8001138:	fbb2 f3f3 	udiv	r3, r2, r3
 800113c:	607b      	str	r3, [r7, #4]

	return Apb2Clk;
 800113e:	687b      	ldr	r3, [r7, #4]
}
 8001140:	4618      	mov	r0, r3
 8001142:	3710      	adds	r7, #16
 8001144:	46bd      	mov	sp, r7
 8001146:	bd80      	pop	{r7, pc}
 8001148:	40023800 	.word	0x40023800
 800114c:	00f42400 	.word	0x00f42400
 8001150:	007a1200 	.word	0x007a1200
 8001154:	20000000 	.word	0x20000000
 8001158:	20000014 	.word	0x20000014

0800115c <USART_PeriClockControl>:
 * Params: 		struct USART_RegDef_t* *pUSARTx - USART/UART base address
 * 				uint8_t - Enable or disable value
 *
 */
void USART_PeriClockControl(USART_RegDef_t *pUSARTx, uint8_t EnOrDi)
{
 800115c:	b480      	push	{r7}
 800115e:	b083      	sub	sp, #12
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
 8001164:	460b      	mov	r3, r1
 8001166:	70fb      	strb	r3, [r7, #3]
	if (EnOrDi == ENABLE)
 8001168:	78fb      	ldrb	r3, [r7, #3]
 800116a:	2b01      	cmp	r3, #1
 800116c:	d141      	bne.n	80011f2 <USART_PeriClockControl+0x96>
	{
		if (pUSARTx == USART1)
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	4a43      	ldr	r2, [pc, #268]	; (8001280 <USART_PeriClockControl+0x124>)
 8001172:	4293      	cmp	r3, r2
 8001174:	d106      	bne.n	8001184 <USART_PeriClockControl+0x28>
		{
			USART1_PCLK_EN();
 8001176:	4b43      	ldr	r3, [pc, #268]	; (8001284 <USART_PeriClockControl+0x128>)
 8001178:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800117a:	4a42      	ldr	r2, [pc, #264]	; (8001284 <USART_PeriClockControl+0x128>)
 800117c:	f043 0310 	orr.w	r3, r3, #16
 8001180:	6453      	str	r3, [r2, #68]	; 0x44
		else if (pUSARTx == USART6)
		{
			USART6_PCLK_DI();
		}
	}
}
 8001182:	e077      	b.n	8001274 <USART_PeriClockControl+0x118>
		else if (pUSARTx == USART2)
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	4a40      	ldr	r2, [pc, #256]	; (8001288 <USART_PeriClockControl+0x12c>)
 8001188:	4293      	cmp	r3, r2
 800118a:	d106      	bne.n	800119a <USART_PeriClockControl+0x3e>
			USART2_PCLK_EN();
 800118c:	4b3d      	ldr	r3, [pc, #244]	; (8001284 <USART_PeriClockControl+0x128>)
 800118e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001190:	4a3c      	ldr	r2, [pc, #240]	; (8001284 <USART_PeriClockControl+0x128>)
 8001192:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001196:	6413      	str	r3, [r2, #64]	; 0x40
}
 8001198:	e06c      	b.n	8001274 <USART_PeriClockControl+0x118>
		else if (pUSARTx == USART3)
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	4a3b      	ldr	r2, [pc, #236]	; (800128c <USART_PeriClockControl+0x130>)
 800119e:	4293      	cmp	r3, r2
 80011a0:	d106      	bne.n	80011b0 <USART_PeriClockControl+0x54>
			USART3_PCLK_EN();
 80011a2:	4b38      	ldr	r3, [pc, #224]	; (8001284 <USART_PeriClockControl+0x128>)
 80011a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011a6:	4a37      	ldr	r2, [pc, #220]	; (8001284 <USART_PeriClockControl+0x128>)
 80011a8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80011ac:	6413      	str	r3, [r2, #64]	; 0x40
}
 80011ae:	e061      	b.n	8001274 <USART_PeriClockControl+0x118>
		else if (pUSARTx == UART4)
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	4a37      	ldr	r2, [pc, #220]	; (8001290 <USART_PeriClockControl+0x134>)
 80011b4:	4293      	cmp	r3, r2
 80011b6:	d106      	bne.n	80011c6 <USART_PeriClockControl+0x6a>
			UART4_PCLK_EN();
 80011b8:	4b32      	ldr	r3, [pc, #200]	; (8001284 <USART_PeriClockControl+0x128>)
 80011ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011bc:	4a31      	ldr	r2, [pc, #196]	; (8001284 <USART_PeriClockControl+0x128>)
 80011be:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80011c2:	6413      	str	r3, [r2, #64]	; 0x40
}
 80011c4:	e056      	b.n	8001274 <USART_PeriClockControl+0x118>
		else if (pUSARTx == UART5)
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	4a32      	ldr	r2, [pc, #200]	; (8001294 <USART_PeriClockControl+0x138>)
 80011ca:	4293      	cmp	r3, r2
 80011cc:	d106      	bne.n	80011dc <USART_PeriClockControl+0x80>
			UART5_PCLK_EN();
 80011ce:	4b2d      	ldr	r3, [pc, #180]	; (8001284 <USART_PeriClockControl+0x128>)
 80011d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011d2:	4a2c      	ldr	r2, [pc, #176]	; (8001284 <USART_PeriClockControl+0x128>)
 80011d4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80011d8:	6413      	str	r3, [r2, #64]	; 0x40
}
 80011da:	e04b      	b.n	8001274 <USART_PeriClockControl+0x118>
		else if (pUSARTx == USART6)
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	4a2e      	ldr	r2, [pc, #184]	; (8001298 <USART_PeriClockControl+0x13c>)
 80011e0:	4293      	cmp	r3, r2
 80011e2:	d147      	bne.n	8001274 <USART_PeriClockControl+0x118>
			USART6_PCLK_EN();
 80011e4:	4b27      	ldr	r3, [pc, #156]	; (8001284 <USART_PeriClockControl+0x128>)
 80011e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011e8:	4a26      	ldr	r2, [pc, #152]	; (8001284 <USART_PeriClockControl+0x128>)
 80011ea:	f043 0320 	orr.w	r3, r3, #32
 80011ee:	6453      	str	r3, [r2, #68]	; 0x44
}
 80011f0:	e040      	b.n	8001274 <USART_PeriClockControl+0x118>
		if (pUSARTx == USART1)
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	4a22      	ldr	r2, [pc, #136]	; (8001280 <USART_PeriClockControl+0x124>)
 80011f6:	4293      	cmp	r3, r2
 80011f8:	d106      	bne.n	8001208 <USART_PeriClockControl+0xac>
			USART1_PCLK_DI();
 80011fa:	4b22      	ldr	r3, [pc, #136]	; (8001284 <USART_PeriClockControl+0x128>)
 80011fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011fe:	4a21      	ldr	r2, [pc, #132]	; (8001284 <USART_PeriClockControl+0x128>)
 8001200:	f023 0310 	bic.w	r3, r3, #16
 8001204:	6453      	str	r3, [r2, #68]	; 0x44
}
 8001206:	e035      	b.n	8001274 <USART_PeriClockControl+0x118>
		else if (pUSARTx == USART2)
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	4a1f      	ldr	r2, [pc, #124]	; (8001288 <USART_PeriClockControl+0x12c>)
 800120c:	4293      	cmp	r3, r2
 800120e:	d106      	bne.n	800121e <USART_PeriClockControl+0xc2>
			USART2_PCLK_DI();
 8001210:	4b1c      	ldr	r3, [pc, #112]	; (8001284 <USART_PeriClockControl+0x128>)
 8001212:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001214:	4a1b      	ldr	r2, [pc, #108]	; (8001284 <USART_PeriClockControl+0x128>)
 8001216:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800121a:	6413      	str	r3, [r2, #64]	; 0x40
}
 800121c:	e02a      	b.n	8001274 <USART_PeriClockControl+0x118>
		else if (pUSARTx == USART3)
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	4a1a      	ldr	r2, [pc, #104]	; (800128c <USART_PeriClockControl+0x130>)
 8001222:	4293      	cmp	r3, r2
 8001224:	d106      	bne.n	8001234 <USART_PeriClockControl+0xd8>
			USART3_PCLK_DI();
 8001226:	4b17      	ldr	r3, [pc, #92]	; (8001284 <USART_PeriClockControl+0x128>)
 8001228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800122a:	4a16      	ldr	r2, [pc, #88]	; (8001284 <USART_PeriClockControl+0x128>)
 800122c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001230:	6413      	str	r3, [r2, #64]	; 0x40
}
 8001232:	e01f      	b.n	8001274 <USART_PeriClockControl+0x118>
		else if (pUSARTx == UART4)
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	4a16      	ldr	r2, [pc, #88]	; (8001290 <USART_PeriClockControl+0x134>)
 8001238:	4293      	cmp	r3, r2
 800123a:	d106      	bne.n	800124a <USART_PeriClockControl+0xee>
			UART4_PCLK_DI();
 800123c:	4b11      	ldr	r3, [pc, #68]	; (8001284 <USART_PeriClockControl+0x128>)
 800123e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001240:	4a10      	ldr	r2, [pc, #64]	; (8001284 <USART_PeriClockControl+0x128>)
 8001242:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8001246:	6413      	str	r3, [r2, #64]	; 0x40
}
 8001248:	e014      	b.n	8001274 <USART_PeriClockControl+0x118>
		else if (pUSARTx == UART5)
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	4a11      	ldr	r2, [pc, #68]	; (8001294 <USART_PeriClockControl+0x138>)
 800124e:	4293      	cmp	r3, r2
 8001250:	d106      	bne.n	8001260 <USART_PeriClockControl+0x104>
			UART5_PCLK_DI();
 8001252:	4b0c      	ldr	r3, [pc, #48]	; (8001284 <USART_PeriClockControl+0x128>)
 8001254:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001256:	4a0b      	ldr	r2, [pc, #44]	; (8001284 <USART_PeriClockControl+0x128>)
 8001258:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800125c:	6413      	str	r3, [r2, #64]	; 0x40
}
 800125e:	e009      	b.n	8001274 <USART_PeriClockControl+0x118>
		else if (pUSARTx == USART6)
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	4a0d      	ldr	r2, [pc, #52]	; (8001298 <USART_PeriClockControl+0x13c>)
 8001264:	4293      	cmp	r3, r2
 8001266:	d105      	bne.n	8001274 <USART_PeriClockControl+0x118>
			USART6_PCLK_DI();
 8001268:	4b06      	ldr	r3, [pc, #24]	; (8001284 <USART_PeriClockControl+0x128>)
 800126a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800126c:	4a05      	ldr	r2, [pc, #20]	; (8001284 <USART_PeriClockControl+0x128>)
 800126e:	f023 0320 	bic.w	r3, r3, #32
 8001272:	6453      	str	r3, [r2, #68]	; 0x44
}
 8001274:	bf00      	nop
 8001276:	370c      	adds	r7, #12
 8001278:	46bd      	mov	sp, r7
 800127a:	bc80      	pop	{r7}
 800127c:	4770      	bx	lr
 800127e:	bf00      	nop
 8001280:	40011000 	.word	0x40011000
 8001284:	40023800 	.word	0x40023800
 8001288:	40004400 	.word	0x40004400
 800128c:	40004800 	.word	0x40004800
 8001290:	40004c00 	.word	0x40004c00
 8001294:	40005000 	.word	0x40005000
 8001298:	40011400 	.word	0x40011400

0800129c <USART_PeripheralControl>:
 * Params: 		struct USART_RegDef_t *pUSARTx - USART/UART base address
 * 				uint8_t EnOrDi - Enable or disable communication (0 or 1)
 *
 */
void USART_PeripheralControl(USART_RegDef_t *pUSARTx, uint8_t EnOrDi)
{
 800129c:	b480      	push	{r7}
 800129e:	b083      	sub	sp, #12
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
 80012a4:	460b      	mov	r3, r1
 80012a6:	70fb      	strb	r3, [r7, #3]
	if (EnOrDi == ENABLE)
 80012a8:	78fb      	ldrb	r3, [r7, #3]
 80012aa:	2b01      	cmp	r3, #1
 80012ac:	d106      	bne.n	80012bc <USART_PeripheralControl+0x20>
	{
		pUSARTx->CR1 |= (1 << 13);
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	68db      	ldr	r3, [r3, #12]
 80012b2:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	60da      	str	r2, [r3, #12]
	}
	else
	{
		pUSARTx->CR1 |= ~(1 << 13);
	}
}
 80012ba:	e005      	b.n	80012c8 <USART_PeripheralControl+0x2c>
		pUSARTx->CR1 |= ~(1 << 13);
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	68db      	ldr	r3, [r3, #12]
 80012c0:	f463 5200 	orn	r2, r3, #8192	; 0x2000
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	60da      	str	r2, [r3, #12]
}
 80012c8:	bf00      	nop
 80012ca:	370c      	adds	r7, #12
 80012cc:	46bd      	mov	sp, r7
 80012ce:	bc80      	pop	{r7}
 80012d0:	4770      	bx	lr

080012d2 <USART_GetFlagStatus>:
 * Params: 		struct USART_RegDef_t *pUSARTx - USART base address
 * 				uint8_t USART_FLAG - flag being checked
 *
 */
uint8_t USART_GetFlagStatus(USART_RegDef_t *pUSARTx, uint8_t USART_FLAG)
{
 80012d2:	b480      	push	{r7}
 80012d4:	b083      	sub	sp, #12
 80012d6:	af00      	add	r7, sp, #0
 80012d8:	6078      	str	r0, [r7, #4]
 80012da:	460b      	mov	r3, r1
 80012dc:	70fb      	strb	r3, [r7, #3]
	return (pUSARTx->SR & USART_FLAG);
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	b2da      	uxtb	r2, r3
 80012e4:	78fb      	ldrb	r3, [r7, #3]
 80012e6:	4013      	ands	r3, r2
 80012e8:	b2db      	uxtb	r3, r3
}
 80012ea:	4618      	mov	r0, r3
 80012ec:	370c      	adds	r7, #12
 80012ee:	46bd      	mov	sp, r7
 80012f0:	bc80      	pop	{r7}
 80012f2:	4770      	bx	lr

080012f4 <USART_ClearFlag>:
 * Params: 		struct USART_RegDef_t *pUSARTx - USART base address
 * 				uint8_t USART_FLAG - flag being cleared
 *
 */
void USART_ClearFlag(USART_RegDef_t *pUSARTx, uint8_t USART_FLAG)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b084      	sub	sp, #16
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
 80012fc:	460b      	mov	r3, r1
 80012fe:	70fb      	strb	r3, [r7, #3]
	int dummyRead, dummyWrite = 0xFF;
 8001300:	23ff      	movs	r3, #255	; 0xff
 8001302:	60fb      	str	r3, [r7, #12]

	if (USART_FLAG == USART_FLAG_PE)
 8001304:	78fb      	ldrb	r3, [r7, #3]
 8001306:	2b01      	cmp	r3, #1
 8001308:	d111      	bne.n	800132e <USART_ClearFlag+0x3a>
	{
		// Clear PE by waiting for RXNE, reading from SR, writing to DR
		while (!USART_GetFlagStatus(pUSARTx, USART_FLAG_RXNE));
 800130a:	bf00      	nop
 800130c:	2120      	movs	r1, #32
 800130e:	6878      	ldr	r0, [r7, #4]
 8001310:	f7ff ffdf 	bl	80012d2 <USART_GetFlagStatus>
 8001314:	4603      	mov	r3, r0
 8001316:	2b00      	cmp	r3, #0
 8001318:	d0f8      	beq.n	800130c <USART_ClearFlag+0x18>
		dummyRead = pUSARTx->SR;
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	60bb      	str	r3, [r7, #8]
		pUSARTx->DR |= dummyWrite;
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	685a      	ldr	r2, [r3, #4]
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	431a      	orrs	r2, r3
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	605a      	str	r2, [r3, #4]
		// Clear CTS by writing to 0
		pUSARTx->SR &= ~(1 << 9);
	}

	(void)dummyRead;
}
 800132c:	e044      	b.n	80013b8 <USART_ClearFlag+0xc4>
	else if (USART_FLAG == USART_FLAG_FE)
 800132e:	78fb      	ldrb	r3, [r7, #3]
 8001330:	2b02      	cmp	r3, #2
 8001332:	d106      	bne.n	8001342 <USART_ClearFlag+0x4e>
		dummyRead = pUSARTx->SR;
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	60bb      	str	r3, [r7, #8]
		dummyRead = pUSARTx->DR;
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	685b      	ldr	r3, [r3, #4]
 800133e:	60bb      	str	r3, [r7, #8]
}
 8001340:	e03a      	b.n	80013b8 <USART_ClearFlag+0xc4>
	else if (USART_FLAG == USART_FLAG_NF)
 8001342:	78fb      	ldrb	r3, [r7, #3]
 8001344:	2b04      	cmp	r3, #4
 8001346:	d106      	bne.n	8001356 <USART_ClearFlag+0x62>
		dummyRead = pUSARTx->SR;
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	60bb      	str	r3, [r7, #8]
		dummyRead = pUSARTx->DR;
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	685b      	ldr	r3, [r3, #4]
 8001352:	60bb      	str	r3, [r7, #8]
}
 8001354:	e030      	b.n	80013b8 <USART_ClearFlag+0xc4>
	else if (USART_FLAG == USART_FLAG_ORE)
 8001356:	78fb      	ldrb	r3, [r7, #3]
 8001358:	2b08      	cmp	r3, #8
 800135a:	d106      	bne.n	800136a <USART_ClearFlag+0x76>
		dummyRead = pUSARTx->SR;
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	60bb      	str	r3, [r7, #8]
		dummyRead = pUSARTx->DR;
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	685b      	ldr	r3, [r3, #4]
 8001366:	60bb      	str	r3, [r7, #8]
}
 8001368:	e026      	b.n	80013b8 <USART_ClearFlag+0xc4>
	else if (USART_FLAG == USART_FLAG_IDLE)
 800136a:	78fb      	ldrb	r3, [r7, #3]
 800136c:	2b10      	cmp	r3, #16
 800136e:	d106      	bne.n	800137e <USART_ClearFlag+0x8a>
		dummyRead = pUSARTx->SR;
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	60bb      	str	r3, [r7, #8]
		dummyRead = pUSARTx->DR;
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	685b      	ldr	r3, [r3, #4]
 800137a:	60bb      	str	r3, [r7, #8]
}
 800137c:	e01c      	b.n	80013b8 <USART_ClearFlag+0xc4>
	else if (USART_FLAG == USART_FLAG_RXNE)
 800137e:	78fb      	ldrb	r3, [r7, #3]
 8001380:	2b20      	cmp	r3, #32
 8001382:	d103      	bne.n	800138c <USART_ClearFlag+0x98>
		dummyRead = pUSARTx->DR;
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	685b      	ldr	r3, [r3, #4]
 8001388:	60bb      	str	r3, [r7, #8]
}
 800138a:	e015      	b.n	80013b8 <USART_ClearFlag+0xc4>
	else if (USART_FLAG == USART_FLAG_TC)
 800138c:	78fb      	ldrb	r3, [r7, #3]
 800138e:	2b40      	cmp	r3, #64	; 0x40
 8001390:	d109      	bne.n	80013a6 <USART_ClearFlag+0xb2>
		dummyRead = pUSARTx->SR;
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	60bb      	str	r3, [r7, #8]
		pUSARTx->DR |= dummyWrite;
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	685a      	ldr	r2, [r3, #4]
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	431a      	orrs	r2, r3
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	605a      	str	r2, [r3, #4]
}
 80013a4:	e008      	b.n	80013b8 <USART_ClearFlag+0xc4>
	else if (USART_FLAG == USART_FLAG_TXE)
 80013a6:	78fb      	ldrb	r3, [r7, #3]
 80013a8:	2b80      	cmp	r3, #128	; 0x80
 80013aa:	d105      	bne.n	80013b8 <USART_ClearFlag+0xc4>
		pUSARTx->DR |= dummyWrite;
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	685a      	ldr	r2, [r3, #4]
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	431a      	orrs	r2, r3
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	605a      	str	r2, [r3, #4]
}
 80013b8:	bf00      	nop
 80013ba:	3710      	adds	r7, #16
 80013bc:	46bd      	mov	sp, r7
 80013be:	bd80      	pop	{r7, pc}

080013c0 <USART_SetBaudRate>:
 * Params: 		struct USART_RegDef_t *pUSARTx - USART base address
 * 				uint16_t USART_BaudRate - Baud rate to be set (bps)
 *
 */
void USART_SetBaudRate(USART_RegDef_t *pUSARTx, uint32_t USART_BaudRate)
{
 80013c0:	b590      	push	{r4, r7, lr}
 80013c2:	b087      	sub	sp, #28
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
 80013c8:	6039      	str	r1, [r7, #0]
	uint32_t ApbClk;

	// 1. Get the peripheral clock to USART/UART
	if (pUSARTx == USART1 || pUSARTx == USART6)
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	4a49      	ldr	r2, [pc, #292]	; (80014f4 <USART_SetBaudRate+0x134>)
 80013ce:	4293      	cmp	r3, r2
 80013d0:	d003      	beq.n	80013da <USART_SetBaudRate+0x1a>
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	4a48      	ldr	r2, [pc, #288]	; (80014f8 <USART_SetBaudRate+0x138>)
 80013d6:	4293      	cmp	r3, r2
 80013d8:	d103      	bne.n	80013e2 <USART_SetBaudRate+0x22>
	{
		ApbClk = RCC_GetAPB2CLK();
 80013da:	f7ff fe67 	bl	80010ac <RCC_GetAPB2CLK>
 80013de:	6178      	str	r0, [r7, #20]
 80013e0:	e002      	b.n	80013e8 <USART_SetBaudRate+0x28>
	}
	else
	{
		ApbClk = RCC_GetAPB1CLK();
 80013e2:	f7ff fe0b 	bl	8000ffc <RCC_GetAPB1CLK>
 80013e6:	6178      	str	r0, [r7, #20]
	}

	// 2. Calculate USARTDIV
	uint8_t over8 = (pUSARTx->CR1 & (1 << 15)) ? 1 : 0;
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	68db      	ldr	r3, [r3, #12]
 80013ec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	bf14      	ite	ne
 80013f4:	2301      	movne	r3, #1
 80013f6:	2300      	moveq	r3, #0
 80013f8:	b2db      	uxtb	r3, r3
 80013fa:	73fb      	strb	r3, [r7, #15]
	float usartDiv = (ApbClk  * 100) / ((8 * (2 - over8)) * USART_BaudRate);   // Multiply hundred to get 2 decimal places
 80013fc:	697b      	ldr	r3, [r7, #20]
 80013fe:	2264      	movs	r2, #100	; 0x64
 8001400:	fb02 f203 	mul.w	r2, r2, r3
 8001404:	7bfb      	ldrb	r3, [r7, #15]
 8001406:	f1c3 0302 	rsb	r3, r3, #2
 800140a:	4619      	mov	r1, r3
 800140c:	683b      	ldr	r3, [r7, #0]
 800140e:	fb03 f301 	mul.w	r3, r3, r1
 8001412:	00db      	lsls	r3, r3, #3
 8001414:	fbb2 f3f3 	udiv	r3, r2, r3
 8001418:	4618      	mov	r0, r3
 800141a:	f7ff f807 	bl	800042c <__aeabi_ui2f>
 800141e:	4603      	mov	r3, r0
 8001420:	60bb      	str	r3, [r7, #8]

	// 3. Calculate mantissa and fraction (See USART 25.4.4 in datasheet for formulas)
	uint16_t mantissa = usartDiv / 100;
 8001422:	4936      	ldr	r1, [pc, #216]	; (80014fc <USART_SetBaudRate+0x13c>)
 8001424:	68b8      	ldr	r0, [r7, #8]
 8001426:	f7ff f90d 	bl	8000644 <__aeabi_fdiv>
 800142a:	4603      	mov	r3, r0
 800142c:	4618      	mov	r0, r3
 800142e:	f7ff f9a5 	bl	800077c <__aeabi_f2uiz>
 8001432:	4603      	mov	r3, r0
 8001434:	827b      	strh	r3, [r7, #18]
	uint16_t fraction = (usartDiv - mantissa * 100) * (8 * (2 - over8));
 8001436:	8a7b      	ldrh	r3, [r7, #18]
 8001438:	2264      	movs	r2, #100	; 0x64
 800143a:	fb02 f303 	mul.w	r3, r2, r3
 800143e:	4618      	mov	r0, r3
 8001440:	f7fe fff8 	bl	8000434 <__aeabi_i2f>
 8001444:	4603      	mov	r3, r0
 8001446:	4619      	mov	r1, r3
 8001448:	68b8      	ldr	r0, [r7, #8]
 800144a:	f7fe ff3d 	bl	80002c8 <__aeabi_fsub>
 800144e:	4603      	mov	r3, r0
 8001450:	461c      	mov	r4, r3
 8001452:	7bfb      	ldrb	r3, [r7, #15]
 8001454:	f1c3 0302 	rsb	r3, r3, #2
 8001458:	00db      	lsls	r3, r3, #3
 800145a:	4618      	mov	r0, r3
 800145c:	f7fe ffea 	bl	8000434 <__aeabi_i2f>
 8001460:	4603      	mov	r3, r0
 8001462:	4619      	mov	r1, r3
 8001464:	4620      	mov	r0, r4
 8001466:	f7ff f839 	bl	80004dc <__aeabi_fmul>
 800146a:	4603      	mov	r3, r0
 800146c:	4618      	mov	r0, r3
 800146e:	f7ff f985 	bl	800077c <__aeabi_f2uiz>
 8001472:	4603      	mov	r3, r0
 8001474:	823b      	strh	r3, [r7, #16]

	// Round fraction
	fraction = (fraction + 50) / 100;
 8001476:	8a3b      	ldrh	r3, [r7, #16]
 8001478:	3332      	adds	r3, #50	; 0x32
 800147a:	4a21      	ldr	r2, [pc, #132]	; (8001500 <USART_SetBaudRate+0x140>)
 800147c:	fb82 1203 	smull	r1, r2, r2, r3
 8001480:	1152      	asrs	r2, r2, #5
 8001482:	17db      	asrs	r3, r3, #31
 8001484:	1ad3      	subs	r3, r2, r3
 8001486:	823b      	strh	r3, [r7, #16]

	// 4. Carry over
	if (over8)
 8001488:	7bfb      	ldrb	r3, [r7, #15]
 800148a:	2b00      	cmp	r3, #0
 800148c:	d017      	beq.n	80014be <USART_SetBaudRate+0xfe>
	{
		// Fraction register is 3 bits
		if (fraction > 7)
 800148e:	8a3b      	ldrh	r3, [r7, #16]
 8001490:	2b07      	cmp	r3, #7
 8001492:	d904      	bls.n	800149e <USART_SetBaudRate+0xde>
		{
			mantissa++;
 8001494:	8a7b      	ldrh	r3, [r7, #18]
 8001496:	3301      	adds	r3, #1
 8001498:	827b      	strh	r3, [r7, #18]
			fraction = 0;
 800149a:	2300      	movs	r3, #0
 800149c:	823b      	strh	r3, [r7, #16]
		}

		pUSARTx->BRR |= (mantissa << 4);
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	689b      	ldr	r3, [r3, #8]
 80014a2:	8a7a      	ldrh	r2, [r7, #18]
 80014a4:	0112      	lsls	r2, r2, #4
 80014a6:	431a      	orrs	r2, r3
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	609a      	str	r2, [r3, #8]
		pUSARTx->BRR |= ((fraction & 0x07) << 0);
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	689a      	ldr	r2, [r3, #8]
 80014b0:	8a3b      	ldrh	r3, [r7, #16]
 80014b2:	f003 0307 	and.w	r3, r3, #7
 80014b6:	431a      	orrs	r2, r3
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	609a      	str	r2, [r3, #8]
		}

		pUSARTx->BRR |= (mantissa << 4);
		pUSARTx->BRR |= ((fraction & 0x0F) << 0);
	}
}
 80014bc:	e016      	b.n	80014ec <USART_SetBaudRate+0x12c>
		if (fraction > 15)
 80014be:	8a3b      	ldrh	r3, [r7, #16]
 80014c0:	2b0f      	cmp	r3, #15
 80014c2:	d904      	bls.n	80014ce <USART_SetBaudRate+0x10e>
			mantissa++;
 80014c4:	8a7b      	ldrh	r3, [r7, #18]
 80014c6:	3301      	adds	r3, #1
 80014c8:	827b      	strh	r3, [r7, #18]
			fraction = 0;
 80014ca:	2300      	movs	r3, #0
 80014cc:	823b      	strh	r3, [r7, #16]
		pUSARTx->BRR |= (mantissa << 4);
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	689b      	ldr	r3, [r3, #8]
 80014d2:	8a7a      	ldrh	r2, [r7, #18]
 80014d4:	0112      	lsls	r2, r2, #4
 80014d6:	431a      	orrs	r2, r3
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	609a      	str	r2, [r3, #8]
		pUSARTx->BRR |= ((fraction & 0x0F) << 0);
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	689a      	ldr	r2, [r3, #8]
 80014e0:	8a3b      	ldrh	r3, [r7, #16]
 80014e2:	f003 030f 	and.w	r3, r3, #15
 80014e6:	431a      	orrs	r2, r3
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	609a      	str	r2, [r3, #8]
}
 80014ec:	bf00      	nop
 80014ee:	371c      	adds	r7, #28
 80014f0:	46bd      	mov	sp, r7
 80014f2:	bd90      	pop	{r4, r7, pc}
 80014f4:	40011000 	.word	0x40011000
 80014f8:	40011400 	.word	0x40011400
 80014fc:	42c80000 	.word	0x42c80000
 8001500:	51eb851f 	.word	0x51eb851f

08001504 <USART_Init>:
 *
 * Params: 		struct USART_Handle_t *pUSARTxHandle - USART peripheral handle
 *
 */
void USART_Init(USART_Handle_t *pUSARTxHandle)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b082      	sub	sp, #8
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
	// 1. Give clock signal to USART/UART bus
	USART_PeriClockControl(pUSARTxHandle->pUSARTx, ENABLE);
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	2101      	movs	r1, #1
 8001512:	4618      	mov	r0, r3
 8001514:	f7ff fe22 	bl	800115c <USART_PeriClockControl>

	// 2. Enable USART/UART peripheral
	USART_PeripheralControl(pUSARTxHandle->pUSARTx, ENABLE);
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	2101      	movs	r1, #1
 800151e:	4618      	mov	r0, r3
 8001520:	f7ff febc 	bl	800129c <USART_PeripheralControl>

	// 3. Set the data length
	if (pUSARTxHandle->USART_Config.USART_WordLen == USART_9BIT_DATA)
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	7b5b      	ldrb	r3, [r3, #13]
 8001528:	2b01      	cmp	r3, #1
 800152a:	d107      	bne.n	800153c <USART_Init+0x38>
	{
		pUSARTxHandle->pUSARTx->CR1 |= (1 << 12);
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	68da      	ldr	r2, [r3, #12]
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800153a:	60da      	str	r2, [r3, #12]
	}

	// 4. Parity setup
	if (pUSARTxHandle->USART_Config.USART_ParitySet != USART_PARITY_DISABLE)
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	7b9b      	ldrb	r3, [r3, #14]
 8001540:	2b00      	cmp	r3, #0
 8001542:	d020      	beq.n	8001586 <USART_Init+0x82>
	{
		pUSARTxHandle->pUSARTx->CR1 |= (1 << 10);
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	68da      	ldr	r2, [r3, #12]
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001552:	60da      	str	r2, [r3, #12]

		if (pUSARTxHandle->USART_Config.USART_ParitySet == USART_EVEN_PARITY)
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	7b9b      	ldrb	r3, [r3, #14]
 8001558:	2b01      	cmp	r3, #1
 800155a:	d108      	bne.n	800156e <USART_Init+0x6a>
		{
			pUSARTxHandle->pUSARTx->CR1 &= ~(1 << 9);
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	68da      	ldr	r2, [r3, #12]
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800156a:	60da      	str	r2, [r3, #12]
 800156c:	e00b      	b.n	8001586 <USART_Init+0x82>
		}
		else if (pUSARTxHandle->USART_Config.USART_ParitySet == USART_ODD_PARITY)
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	7b9b      	ldrb	r3, [r3, #14]
 8001572:	2b02      	cmp	r3, #2
 8001574:	d107      	bne.n	8001586 <USART_Init+0x82>
		{
			pUSARTxHandle->pUSARTx->CR1 |= (1 << 9);
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	68da      	ldr	r2, [r3, #12]
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001584:	60da      	str	r2, [r3, #12]
		}
	}

	// 5. Set number of stop bits
	pUSARTxHandle->pUSARTx->CR2 &= ~(0x3 << 12);
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	691a      	ldr	r2, [r3, #16]
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8001594:	611a      	str	r2, [r3, #16]

	if (pUSARTxHandle->USART_Config.USART_StopBits == USART_HALF_STOP)
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	7b1b      	ldrb	r3, [r3, #12]
 800159a:	2b00      	cmp	r3, #0
 800159c:	d108      	bne.n	80015b0 <USART_Init+0xac>
	{
		pUSARTxHandle->pUSARTx->CR2 |= (1 << 12);
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	691a      	ldr	r2, [r3, #16]
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80015ac:	611a      	str	r2, [r3, #16]
 80015ae:	e018      	b.n	80015e2 <USART_Init+0xde>
	}
	else if (pUSARTxHandle->USART_Config.USART_StopBits == USART_2_STOP)
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	7b1b      	ldrb	r3, [r3, #12]
 80015b4:	2b03      	cmp	r3, #3
 80015b6:	d108      	bne.n	80015ca <USART_Init+0xc6>
	{
		pUSARTxHandle->pUSARTx->CR2 |= (0x2 << 12);
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	691a      	ldr	r2, [r3, #16]
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80015c6:	611a      	str	r2, [r3, #16]
 80015c8:	e00b      	b.n	80015e2 <USART_Init+0xde>
	}
	else if (pUSARTxHandle->USART_Config.USART_StopBits == USART_1ANDHALF_STOP)
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	7b1b      	ldrb	r3, [r3, #12]
 80015ce:	2b02      	cmp	r3, #2
 80015d0:	d107      	bne.n	80015e2 <USART_Init+0xde>
	{
		pUSARTxHandle->pUSARTx->CR2 |= (0x3 << 12);
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	691a      	ldr	r2, [r3, #16]
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	f442 5240 	orr.w	r2, r2, #12288	; 0x3000
 80015e0:	611a      	str	r2, [r3, #16]
	}

	// 6. Set over sampling mode
	if (pUSARTxHandle->USART_Config.USART_Oversampling == USART_OVERSMPL_8)
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	7c1b      	ldrb	r3, [r3, #16]
 80015e6:	2b01      	cmp	r3, #1
 80015e8:	d108      	bne.n	80015fc <USART_Init+0xf8>
	{
		pUSARTxHandle->pUSARTx->CR1 |= (1 << 15);
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	68da      	ldr	r2, [r3, #12]
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80015f8:	60da      	str	r2, [r3, #12]
 80015fa:	e007      	b.n	800160c <USART_Init+0x108>
	}
	else
	{
		pUSARTxHandle->pUSARTx->CR1 &= ~(1 << 15);
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	68da      	ldr	r2, [r3, #12]
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800160a:	60da      	str	r2, [r3, #12]
	}

	// 7. Set baud rate
	USART_SetBaudRate(pUSARTxHandle->pUSARTx, pUSARTxHandle->USART_Config.USART_BaudRate);
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681a      	ldr	r2, [r3, #0]
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	689b      	ldr	r3, [r3, #8]
 8001614:	4619      	mov	r1, r3
 8001616:	4610      	mov	r0, r2
 8001618:	f7ff fed2 	bl	80013c0 <USART_SetBaudRate>

	// 8. Set Tx/Rx mode
	if (pUSARTxHandle->USART_Config.USART_Mode == USART_RX_ONLY)
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	791b      	ldrb	r3, [r3, #4]
 8001620:	2b00      	cmp	r3, #0
 8001622:	d108      	bne.n	8001636 <USART_Init+0x132>
	{
		pUSARTxHandle->pUSARTx->CR1 |= (1 << 2);
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	68da      	ldr	r2, [r3, #12]
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	f042 0204 	orr.w	r2, r2, #4
 8001632:	60da      	str	r2, [r3, #12]
 8001634:	e018      	b.n	8001668 <USART_Init+0x164>
	}
	else if (pUSARTxHandle->USART_Config.USART_Mode == USART_TX_ONLY)
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	791b      	ldrb	r3, [r3, #4]
 800163a:	2b01      	cmp	r3, #1
 800163c:	d108      	bne.n	8001650 <USART_Init+0x14c>
	{
		pUSARTxHandle->pUSARTx->CR1 |= (1 << 3);
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	68da      	ldr	r2, [r3, #12]
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	f042 0208 	orr.w	r2, r2, #8
 800164c:	60da      	str	r2, [r3, #12]
 800164e:	e00b      	b.n	8001668 <USART_Init+0x164>
	}
	else if (pUSARTxHandle->USART_Config.USART_Mode == USART_RX_TX)
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	791b      	ldrb	r3, [r3, #4]
 8001654:	2b02      	cmp	r3, #2
 8001656:	d107      	bne.n	8001668 <USART_Init+0x164>
	{
		pUSARTxHandle->pUSARTx->CR1 |= (1 << 3) | (1 << 2);
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	68da      	ldr	r2, [r3, #12]
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	f042 020c 	orr.w	r2, r2, #12
 8001666:	60da      	str	r2, [r3, #12]
	}

	// 9. Hardware flow control setup
	pUSARTxHandle->pUSARTx->CR2 &= ~(0x3 << 8);
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	691a      	ldr	r2, [r3, #16]
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8001676:	611a      	str	r2, [r3, #16]

	if (pUSARTxHandle->USART_Config.USART_HWFlowCtrl == USART_RTS_ON)
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	7bdb      	ldrb	r3, [r3, #15]
 800167c:	2b01      	cmp	r3, #1
 800167e:	d108      	bne.n	8001692 <USART_Init+0x18e>
	{
		pUSARTxHandle->pUSARTx->CR3 |= (1 << 8);
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	695a      	ldr	r2, [r3, #20]
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800168e:	615a      	str	r2, [r3, #20]
	}
	else if (pUSARTxHandle->USART_Config.USART_HWFlowCtrl == USART_RTS_CTS_ON)
	{
		pUSARTxHandle->pUSARTx->CR3 |= (0x3 << 8);
	}
}
 8001690:	e018      	b.n	80016c4 <USART_Init+0x1c0>
	else if (pUSARTxHandle->USART_Config.USART_HWFlowCtrl == USART_CTS_ON)
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	7bdb      	ldrb	r3, [r3, #15]
 8001696:	2b02      	cmp	r3, #2
 8001698:	d108      	bne.n	80016ac <USART_Init+0x1a8>
		pUSARTxHandle->pUSARTx->CR3 |= (1 << 9);
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	695a      	ldr	r2, [r3, #20]
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80016a8:	615a      	str	r2, [r3, #20]
}
 80016aa:	e00b      	b.n	80016c4 <USART_Init+0x1c0>
	else if (pUSARTxHandle->USART_Config.USART_HWFlowCtrl == USART_RTS_CTS_ON)
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	7bdb      	ldrb	r3, [r3, #15]
 80016b0:	2b03      	cmp	r3, #3
 80016b2:	d107      	bne.n	80016c4 <USART_Init+0x1c0>
		pUSARTxHandle->pUSARTx->CR3 |= (0x3 << 8);
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	695a      	ldr	r2, [r3, #20]
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 80016c2:	615a      	str	r2, [r3, #20]
}
 80016c4:	bf00      	nop
 80016c6:	3708      	adds	r7, #8
 80016c8:	46bd      	mov	sp, r7
 80016ca:	bd80      	pop	{r7, pc}

080016cc <USART_Write>:
 * 				uint8_t* pTxBuffer - pointer to location of data to send
 * 				uint32_t len - number of 8-bit data packets to be sent
 *
 */
void USART_Write(USART_Handle_t *pUSARTxHandle, uint8_t *pTxBuffer, uint8_t len)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b084      	sub	sp, #16
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	60f8      	str	r0, [r7, #12]
 80016d4:	60b9      	str	r1, [r7, #8]
 80016d6:	4613      	mov	r3, r2
 80016d8:	71fb      	strb	r3, [r7, #7]
	while (len > 0)
 80016da:	e030      	b.n	800173e <USART_Write+0x72>
	{
		// 1. Send start with TE
		pUSARTxHandle->pUSARTx->CR1 |= (1 << 3);
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	68da      	ldr	r2, [r3, #12]
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	f042 0208 	orr.w	r2, r2, #8
 80016ea:	60da      	str	r2, [r3, #12]

		// 2. Wait for TXE flag
		while(!USART_GetFlagStatus(pUSARTxHandle->pUSARTx, USART_FLAG_TXE));
 80016ec:	bf00      	nop
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	2180      	movs	r1, #128	; 0x80
 80016f4:	4618      	mov	r0, r3
 80016f6:	f7ff fdec 	bl	80012d2 <USART_GetFlagStatus>
 80016fa:	4603      	mov	r3, r0
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d0f6      	beq.n	80016ee <USART_Write+0x22>

		// 3. Write data (how many bits depends on word length and parity)
		if (pUSARTxHandle->USART_Config.USART_WordLen == USART_9BIT_DATA)
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	7b5b      	ldrb	r3, [r3, #13]
 8001704:	2b01      	cmp	r3, #1
 8001706:	d10f      	bne.n	8001728 <USART_Write+0x5c>
		{
			// Send 9 bits of data
			pUSARTxHandle->pUSARTx->DR = (uint16_t)(*pTxBuffer) & (0x01FF);
 8001708:	68bb      	ldr	r3, [r7, #8]
 800170a:	781a      	ldrb	r2, [r3, #0]
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	605a      	str	r2, [r3, #4]

			// If parity disabled, 9 bits of useful data sent - increment data buffer accordingly
			if (pUSARTxHandle->USART_Config.USART_ParitySet == USART_PARITY_DISABLE)
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	7b9b      	ldrb	r3, [r3, #14]
 8001716:	2b00      	cmp	r3, #0
 8001718:	d10b      	bne.n	8001732 <USART_Write+0x66>
			{
				pTxBuffer++;
 800171a:	68bb      	ldr	r3, [r7, #8]
 800171c:	3301      	adds	r3, #1
 800171e:	60bb      	str	r3, [r7, #8]
				len--;
 8001720:	79fb      	ldrb	r3, [r7, #7]
 8001722:	3b01      	subs	r3, #1
 8001724:	71fb      	strb	r3, [r7, #7]
 8001726:	e004      	b.n	8001732 <USART_Write+0x66>
			}
		}
		else
		{
			pUSARTxHandle->pUSARTx->DR = *pTxBuffer;
 8001728:	68bb      	ldr	r3, [r7, #8]
 800172a:	781a      	ldrb	r2, [r3, #0]
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	605a      	str	r2, [r3, #4]
		}

		pTxBuffer++;
 8001732:	68bb      	ldr	r3, [r7, #8]
 8001734:	3301      	adds	r3, #1
 8001736:	60bb      	str	r3, [r7, #8]
		len--;
 8001738:	79fb      	ldrb	r3, [r7, #7]
 800173a:	3b01      	subs	r3, #1
 800173c:	71fb      	strb	r3, [r7, #7]
	while (len > 0)
 800173e:	79fb      	ldrb	r3, [r7, #7]
 8001740:	2b00      	cmp	r3, #0
 8001742:	d1cb      	bne.n	80016dc <USART_Write+0x10>
	}

	// 4. Wait for TC flag to indicate transmission complete
	while(!USART_GetFlagStatus(pUSARTxHandle->pUSARTx, USART_FLAG_TC));
 8001744:	bf00      	nop
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	2140      	movs	r1, #64	; 0x40
 800174c:	4618      	mov	r0, r3
 800174e:	f7ff fdc0 	bl	80012d2 <USART_GetFlagStatus>
 8001752:	4603      	mov	r3, r0
 8001754:	2b00      	cmp	r3, #0
 8001756:	d0f6      	beq.n	8001746 <USART_Write+0x7a>

	// 5. Clear the TC bit
	USART_ClearFlag(pUSARTxHandle->pUSARTx, USART_FLAG_TC);
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	2140      	movs	r1, #64	; 0x40
 800175e:	4618      	mov	r0, r3
 8001760:	f7ff fdc8 	bl	80012f4 <USART_ClearFlag>

	// 6. End transmission by clearing TE
	pUSARTxHandle->pUSARTx->CR1 &= ~(1 << 3);
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	68da      	ldr	r2, [r3, #12]
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f022 0208 	bic.w	r2, r2, #8
 8001772:	60da      	str	r2, [r3, #12]
}
 8001774:	bf00      	nop
 8001776:	3710      	adds	r7, #16
 8001778:	46bd      	mov	sp, r7
 800177a:	bd80      	pop	{r7, pc}

0800177c <GPIO_AI_Init>:
/* Handle for USART2 */
USART_Handle_t Usart_Handle;


/* Initialize the GPIO Pin for ADC input */
void GPIO_AI_Init() {
 800177c:	b580      	push	{r7, lr}
 800177e:	b084      	sub	sp, #16
 8001780:	af00      	add	r7, sp, #0
	// Initialization of LED driving GPIO
	GPIO_Handle_t GpioAI;

	GpioAI.pGPIOx = GPIOA;
 8001782:	4b0a      	ldr	r3, [pc, #40]	; (80017ac <GPIO_AI_Init+0x30>)
 8001784:	607b      	str	r3, [r7, #4]

	GpioAI.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NUM_0;
 8001786:	2300      	movs	r3, #0
 8001788:	723b      	strb	r3, [r7, #8]
	GpioAI.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ANALOG;
 800178a:	2303      	movs	r3, #3
 800178c:	727b      	strb	r3, [r7, #9]
	GpioAI.GPIO_PinConfig.GPIO_OpType = GPIO_OTYPE_PUPL;
 800178e:	2300      	movs	r3, #0
 8001790:	733b      	strb	r3, [r7, #12]
	GpioAI.GPIO_PinConfig.GPIO_PinSpeed = GPIO_HIGH_SPEED;
 8001792:	2303      	movs	r3, #3
 8001794:	72bb      	strb	r3, [r7, #10]
	GpioAI.GPIO_PinConfig.GPIO_PuPdCtrl = GPIO_PUPD_NONE;
 8001796:	2300      	movs	r3, #0
 8001798:	72fb      	strb	r3, [r7, #11]

	GPIO_Init(&GpioAI);
 800179a:	1d3b      	adds	r3, r7, #4
 800179c:	4618      	mov	r0, r3
 800179e:	f7ff facf 	bl	8000d40 <GPIO_Init>
}
 80017a2:	bf00      	nop
 80017a4:	3710      	adds	r7, #16
 80017a6:	46bd      	mov	sp, r7
 80017a8:	bd80      	pop	{r7, pc}
 80017aa:	bf00      	nop
 80017ac:	40020000 	.word	0x40020000

080017b0 <USART2_Config>:

/*
 * Configure USART2 in Tx
 */
void USART2_Config()
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	af00      	add	r7, sp, #0
	// Handle globally defined
	Usart_Handle.USART_Config.USART_Mode = USART_RX_TX;
 80017b4:	4b0e      	ldr	r3, [pc, #56]	; (80017f0 <USART2_Config+0x40>)
 80017b6:	2202      	movs	r2, #2
 80017b8:	711a      	strb	r2, [r3, #4]
	Usart_Handle.USART_Config.USART_BaudRate = USART_BAUD_9600;
 80017ba:	4b0d      	ldr	r3, [pc, #52]	; (80017f0 <USART2_Config+0x40>)
 80017bc:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80017c0:	609a      	str	r2, [r3, #8]
	Usart_Handle.USART_Config.USART_ParitySet = USART_PARITY_DISABLE;
 80017c2:	4b0b      	ldr	r3, [pc, #44]	; (80017f0 <USART2_Config+0x40>)
 80017c4:	2200      	movs	r2, #0
 80017c6:	739a      	strb	r2, [r3, #14]
	Usart_Handle.USART_Config.USART_StopBits = USART_1_STOP;
 80017c8:	4b09      	ldr	r3, [pc, #36]	; (80017f0 <USART2_Config+0x40>)
 80017ca:	2201      	movs	r2, #1
 80017cc:	731a      	strb	r2, [r3, #12]
	Usart_Handle.USART_Config.USART_WordLen = USART_8BIT_DATA;
 80017ce:	4b08      	ldr	r3, [pc, #32]	; (80017f0 <USART2_Config+0x40>)
 80017d0:	2200      	movs	r2, #0
 80017d2:	735a      	strb	r2, [r3, #13]
	Usart_Handle.USART_Config.USART_Oversampling = USART_OVERSMPL_8;
 80017d4:	4b06      	ldr	r3, [pc, #24]	; (80017f0 <USART2_Config+0x40>)
 80017d6:	2201      	movs	r2, #1
 80017d8:	741a      	strb	r2, [r3, #16]
	Usart_Handle.USART_Config.USART_HWFlowCtrl = USART_HWCTRL_NONE;
 80017da:	4b05      	ldr	r3, [pc, #20]	; (80017f0 <USART2_Config+0x40>)
 80017dc:	2200      	movs	r2, #0
 80017de:	73da      	strb	r2, [r3, #15]
	Usart_Handle.pUSARTx = USART2;
 80017e0:	4b03      	ldr	r3, [pc, #12]	; (80017f0 <USART2_Config+0x40>)
 80017e2:	4a04      	ldr	r2, [pc, #16]	; (80017f4 <USART2_Config+0x44>)
 80017e4:	601a      	str	r2, [r3, #0]

	USART_Init(&Usart_Handle);
 80017e6:	4802      	ldr	r0, [pc, #8]	; (80017f0 <USART2_Config+0x40>)
 80017e8:	f7ff fe8c 	bl	8001504 <USART_Init>
}
 80017ec:	bf00      	nop
 80017ee:	bd80      	pop	{r7, pc}
 80017f0:	20000164 	.word	0x20000164
 80017f4:	40004400 	.word	0x40004400

080017f8 <ADC1_In_Init>:


/* Initialize ADC1 for 12-bit readings */
void ADC1_In_Init() {
 80017f8:	b580      	push	{r7, lr}
 80017fa:	af00      	add	r7, sp, #0
	Adc_Input.pADCx = ADC1;
 80017fc:	4b08      	ldr	r3, [pc, #32]	; (8001820 <ADC1_In_Init+0x28>)
 80017fe:	4a09      	ldr	r2, [pc, #36]	; (8001824 <ADC1_In_Init+0x2c>)
 8001800:	601a      	str	r2, [r3, #0]

	Adc_Input.ADC_Config.ADC_Res = ADC_RES_12BIT;
 8001802:	4b07      	ldr	r3, [pc, #28]	; (8001820 <ADC1_In_Init+0x28>)
 8001804:	2200      	movs	r2, #0
 8001806:	711a      	strb	r2, [r3, #4]
	Adc_Input.ADC_Config.ADC_PreSc = ADC_PCLK_DIV2;
 8001808:	4b05      	ldr	r3, [pc, #20]	; (8001820 <ADC1_In_Init+0x28>)
 800180a:	2200      	movs	r2, #0
 800180c:	715a      	strb	r2, [r3, #5]
	Adc_Input.ADC_Config.ADC_Ext_Trig = ADC_EXTEN_DI;
 800180e:	4b04      	ldr	r3, [pc, #16]	; (8001820 <ADC1_In_Init+0x28>)
 8001810:	2200      	movs	r2, #0
 8001812:	719a      	strb	r2, [r3, #6]

	ADC_Init(&Adc_Input);
 8001814:	4802      	ldr	r0, [pc, #8]	; (8001820 <ADC1_In_Init+0x28>)
 8001816:	f7ff f829 	bl	800086c <ADC_Init>
}
 800181a:	bf00      	nop
 800181c:	bd80      	pop	{r7, pc}
 800181e:	bf00      	nop
 8001820:	20000158 	.word	0x20000158
 8001824:	40012000 	.word	0x40012000

08001828 <ADC_IRQHandler>:

/* Call implemented ADC IRQ handler */
void ADC_IRQHandler() {
 8001828:	b580      	push	{r7, lr}
 800182a:	af00      	add	r7, sp, #0
	ADC_EV_IRQHandling(&Adc_Input);
 800182c:	4802      	ldr	r0, [pc, #8]	; (8001838 <ADC_IRQHandler+0x10>)
 800182e:	f7ff f8f1 	bl	8000a14 <ADC_EV_IRQHandling>
}
 8001832:	bf00      	nop
 8001834:	bd80      	pop	{r7, pc}
 8001836:	bf00      	nop
 8001838:	20000158 	.word	0x20000158

0800183c <main>:

int main(void) {
 800183c:	b580      	push	{r7, lr}
 800183e:	af00      	add	r7, sp, #0
	// Enable semi-hosting
	initialise_monitor_handles();
 8001840:	f000 fab6 	bl	8001db0 <initialise_monitor_handles>

	/* initialize GPIO PA0 as AI */
	GPIO_AI_Init();
 8001844:	f7ff ff9a 	bl	800177c <GPIO_AI_Init>

	/* initialize UART2 for sending data via ST-Link */
	USART2_Config();
 8001848:	f7ff ffb2 	bl	80017b0 <USART2_Config>

	/* initialize ADC1 */
	ADC1_In_Init();
 800184c:	f7ff ffd4 	bl	80017f8 <ADC1_In_Init>

	/* set data buffer */
	Adc_Input.pDataBuffer = &value;
 8001850:	4b04      	ldr	r3, [pc, #16]	; (8001864 <main+0x28>)
 8001852:	4a05      	ldr	r2, [pc, #20]	; (8001868 <main+0x2c>)
 8001854:	609a      	str	r2, [r3, #8]

	/* begin continuous read from ADC */
	ADC_Read_Channel(&Adc_Input, ADC_IN0, ADC_SMP_3CYC, ADC_CONT_READ);
 8001856:	2301      	movs	r3, #1
 8001858:	2200      	movs	r2, #0
 800185a:	2100      	movs	r1, #0
 800185c:	4801      	ldr	r0, [pc, #4]	; (8001864 <main+0x28>)
 800185e:	f7ff f835 	bl	80008cc <ADC_Read_Channel>


	while(1) {
 8001862:	e7fe      	b.n	8001862 <main+0x26>
 8001864:	20000158 	.word	0x20000158
 8001868:	2000018c 	.word	0x2000018c

0800186c <ADC_ApplicationCallbackEvent>:

	return 0;
}

void ADC_ApplicationCallbackEvent(ADC_Handle_t *pADCxHandle, uint8_t event)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	b082      	sub	sp, #8
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
 8001874:	460b      	mov	r3, r1
 8001876:	70fb      	strb	r3, [r7, #3]
	if (event == ADC_READ_CMPLT)
 8001878:	78fb      	ldrb	r3, [r7, #3]
 800187a:	2b00      	cmp	r3, #0
 800187c:	d10a      	bne.n	8001894 <ADC_ApplicationCallbackEvent+0x28>
	{
		USART_Write(&Usart_Handle, (uint8_t*)&value, (uint8_t)2);
 800187e:	2202      	movs	r2, #2
 8001880:	4906      	ldr	r1, [pc, #24]	; (800189c <ADC_ApplicationCallbackEvent+0x30>)
 8001882:	4807      	ldr	r0, [pc, #28]	; (80018a0 <ADC_ApplicationCallbackEvent+0x34>)
 8001884:	f7ff ff22 	bl	80016cc <USART_Write>
		printf("ADC value is: [%i]\n", value);
 8001888:	4b04      	ldr	r3, [pc, #16]	; (800189c <ADC_ApplicationCallbackEvent+0x30>)
 800188a:	881b      	ldrh	r3, [r3, #0]
 800188c:	4619      	mov	r1, r3
 800188e:	4805      	ldr	r0, [pc, #20]	; (80018a4 <ADC_ApplicationCallbackEvent+0x38>)
 8001890:	f000 fc5e 	bl	8002150 <iprintf>
	}
}
 8001894:	bf00      	nop
 8001896:	3708      	adds	r7, #8
 8001898:	46bd      	mov	sp, r7
 800189a:	bd80      	pop	{r7, pc}
 800189c:	2000018c 	.word	0x2000018c
 80018a0:	20000164 	.word	0x20000164
 80018a4:	08002ce4 	.word	0x08002ce4

080018a8 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b084      	sub	sp, #16
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80018b0:	4b11      	ldr	r3, [pc, #68]	; (80018f8 <_sbrk+0x50>)
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d102      	bne.n	80018be <_sbrk+0x16>
		heap_end = &end;
 80018b8:	4b0f      	ldr	r3, [pc, #60]	; (80018f8 <_sbrk+0x50>)
 80018ba:	4a10      	ldr	r2, [pc, #64]	; (80018fc <_sbrk+0x54>)
 80018bc:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80018be:	4b0e      	ldr	r3, [pc, #56]	; (80018f8 <_sbrk+0x50>)
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80018c4:	4b0c      	ldr	r3, [pc, #48]	; (80018f8 <_sbrk+0x50>)
 80018c6:	681a      	ldr	r2, [r3, #0]
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	4413      	add	r3, r2
 80018cc:	466a      	mov	r2, sp
 80018ce:	4293      	cmp	r3, r2
 80018d0:	d907      	bls.n	80018e2 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80018d2:	f000 fae7 	bl	8001ea4 <__errno>
 80018d6:	4602      	mov	r2, r0
 80018d8:	230c      	movs	r3, #12
 80018da:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80018dc:	f04f 33ff 	mov.w	r3, #4294967295
 80018e0:	e006      	b.n	80018f0 <_sbrk+0x48>
	}

	heap_end += incr;
 80018e2:	4b05      	ldr	r3, [pc, #20]	; (80018f8 <_sbrk+0x50>)
 80018e4:	681a      	ldr	r2, [r3, #0]
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	4413      	add	r3, r2
 80018ea:	4a03      	ldr	r2, [pc, #12]	; (80018f8 <_sbrk+0x50>)
 80018ec:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80018ee:	68fb      	ldr	r3, [r7, #12]
}
 80018f0:	4618      	mov	r0, r3
 80018f2:	3710      	adds	r7, #16
 80018f4:	46bd      	mov	sp, r7
 80018f6:	bd80      	pop	{r7, pc}
 80018f8:	200000a0 	.word	0x200000a0
 80018fc:	20000198 	.word	0x20000198

08001900 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001900:	480d      	ldr	r0, [pc, #52]	; (8001938 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001902:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001904:	480d      	ldr	r0, [pc, #52]	; (800193c <LoopForever+0x6>)
  ldr r1, =_edata
 8001906:	490e      	ldr	r1, [pc, #56]	; (8001940 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001908:	4a0e      	ldr	r2, [pc, #56]	; (8001944 <LoopForever+0xe>)
  movs r3, #0
 800190a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800190c:	e002      	b.n	8001914 <LoopCopyDataInit>

0800190e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800190e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001910:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001912:	3304      	adds	r3, #4

08001914 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001914:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001916:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001918:	d3f9      	bcc.n	800190e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800191a:	4a0b      	ldr	r2, [pc, #44]	; (8001948 <LoopForever+0x12>)
  ldr r4, =_ebss
 800191c:	4c0b      	ldr	r4, [pc, #44]	; (800194c <LoopForever+0x16>)
  movs r3, #0
 800191e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001920:	e001      	b.n	8001926 <LoopFillZerobss>

08001922 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001922:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001924:	3204      	adds	r2, #4

08001926 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001926:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001928:	d3fb      	bcc.n	8001922 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800192a:	f3af 8000 	nop.w
/* Call static constructors */
  bl __libc_init_array
 800192e:	f000 fb89 	bl	8002044 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001932:	f7ff ff83 	bl	800183c <main>

08001936 <LoopForever>:

LoopForever:
    b LoopForever
 8001936:	e7fe      	b.n	8001936 <LoopForever>
  ldr   r0, =_estack
 8001938:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800193c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001940:	20000084 	.word	0x20000084
  ldr r2, =_sidata
 8001944:	08002db4 	.word	0x08002db4
  ldr r2, =_sbss
 8001948:	20000084 	.word	0x20000084
  ldr r4, =_ebss
 800194c:	20000194 	.word	0x20000194

08001950 <BusFault_Handler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001950:	e7fe      	b.n	8001950 <BusFault_Handler>
	...

08001954 <findslot>:
 8001954:	4b0a      	ldr	r3, [pc, #40]	; (8001980 <findslot+0x2c>)
 8001956:	b510      	push	{r4, lr}
 8001958:	4604      	mov	r4, r0
 800195a:	6818      	ldr	r0, [r3, #0]
 800195c:	b118      	cbz	r0, 8001966 <findslot+0x12>
 800195e:	6983      	ldr	r3, [r0, #24]
 8001960:	b90b      	cbnz	r3, 8001966 <findslot+0x12>
 8001962:	f000 fae5 	bl	8001f30 <__sinit>
 8001966:	2c13      	cmp	r4, #19
 8001968:	d807      	bhi.n	800197a <findslot+0x26>
 800196a:	4806      	ldr	r0, [pc, #24]	; (8001984 <findslot+0x30>)
 800196c:	f850 3034 	ldr.w	r3, [r0, r4, lsl #3]
 8001970:	3301      	adds	r3, #1
 8001972:	d002      	beq.n	800197a <findslot+0x26>
 8001974:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 8001978:	bd10      	pop	{r4, pc}
 800197a:	2000      	movs	r0, #0
 800197c:	e7fc      	b.n	8001978 <findslot+0x24>
 800197e:	bf00      	nop
 8001980:	20000020 	.word	0x20000020
 8001984:	200000b0 	.word	0x200000b0

08001988 <checkerror>:
 8001988:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800198a:	1c43      	adds	r3, r0, #1
 800198c:	4605      	mov	r5, r0
 800198e:	d109      	bne.n	80019a4 <checkerror+0x1c>
 8001990:	f000 fa88 	bl	8001ea4 <__errno>
 8001994:	2413      	movs	r4, #19
 8001996:	4606      	mov	r6, r0
 8001998:	2700      	movs	r7, #0
 800199a:	4620      	mov	r0, r4
 800199c:	4639      	mov	r1, r7
 800199e:	beab      	bkpt	0x00ab
 80019a0:	4604      	mov	r4, r0
 80019a2:	6034      	str	r4, [r6, #0]
 80019a4:	4628      	mov	r0, r5
 80019a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080019a8 <error>:
 80019a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80019aa:	4605      	mov	r5, r0
 80019ac:	f000 fa7a 	bl	8001ea4 <__errno>
 80019b0:	2413      	movs	r4, #19
 80019b2:	4606      	mov	r6, r0
 80019b4:	2700      	movs	r7, #0
 80019b6:	4620      	mov	r0, r4
 80019b8:	4639      	mov	r1, r7
 80019ba:	beab      	bkpt	0x00ab
 80019bc:	4604      	mov	r4, r0
 80019be:	6034      	str	r4, [r6, #0]
 80019c0:	4628      	mov	r0, r5
 80019c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080019c4 <_swiread>:
 80019c4:	b530      	push	{r4, r5, lr}
 80019c6:	b085      	sub	sp, #20
 80019c8:	e9cd 0101 	strd	r0, r1, [sp, #4]
 80019cc:	9203      	str	r2, [sp, #12]
 80019ce:	2406      	movs	r4, #6
 80019d0:	ad01      	add	r5, sp, #4
 80019d2:	4620      	mov	r0, r4
 80019d4:	4629      	mov	r1, r5
 80019d6:	beab      	bkpt	0x00ab
 80019d8:	4604      	mov	r4, r0
 80019da:	4620      	mov	r0, r4
 80019dc:	f7ff ffd4 	bl	8001988 <checkerror>
 80019e0:	b005      	add	sp, #20
 80019e2:	bd30      	pop	{r4, r5, pc}

080019e4 <_read>:
 80019e4:	b570      	push	{r4, r5, r6, lr}
 80019e6:	460e      	mov	r6, r1
 80019e8:	4615      	mov	r5, r2
 80019ea:	f7ff ffb3 	bl	8001954 <findslot>
 80019ee:	4604      	mov	r4, r0
 80019f0:	b930      	cbnz	r0, 8001a00 <_read+0x1c>
 80019f2:	f000 fa57 	bl	8001ea4 <__errno>
 80019f6:	2309      	movs	r3, #9
 80019f8:	6003      	str	r3, [r0, #0]
 80019fa:	f04f 30ff 	mov.w	r0, #4294967295
 80019fe:	bd70      	pop	{r4, r5, r6, pc}
 8001a00:	462a      	mov	r2, r5
 8001a02:	4631      	mov	r1, r6
 8001a04:	6800      	ldr	r0, [r0, #0]
 8001a06:	f7ff ffdd 	bl	80019c4 <_swiread>
 8001a0a:	1c43      	adds	r3, r0, #1
 8001a0c:	bf1f      	itttt	ne
 8001a0e:	6863      	ldrne	r3, [r4, #4]
 8001a10:	1a28      	subne	r0, r5, r0
 8001a12:	181b      	addne	r3, r3, r0
 8001a14:	6063      	strne	r3, [r4, #4]
 8001a16:	e7f2      	b.n	80019fe <_read+0x1a>

08001a18 <_swilseek>:
 8001a18:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001a1a:	460c      	mov	r4, r1
 8001a1c:	4616      	mov	r6, r2
 8001a1e:	f7ff ff99 	bl	8001954 <findslot>
 8001a22:	4605      	mov	r5, r0
 8001a24:	b940      	cbnz	r0, 8001a38 <_swilseek+0x20>
 8001a26:	f000 fa3d 	bl	8001ea4 <__errno>
 8001a2a:	2309      	movs	r3, #9
 8001a2c:	6003      	str	r3, [r0, #0]
 8001a2e:	f04f 34ff 	mov.w	r4, #4294967295
 8001a32:	4620      	mov	r0, r4
 8001a34:	b003      	add	sp, #12
 8001a36:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001a38:	2e02      	cmp	r6, #2
 8001a3a:	d903      	bls.n	8001a44 <_swilseek+0x2c>
 8001a3c:	f000 fa32 	bl	8001ea4 <__errno>
 8001a40:	2316      	movs	r3, #22
 8001a42:	e7f3      	b.n	8001a2c <_swilseek+0x14>
 8001a44:	2e01      	cmp	r6, #1
 8001a46:	d112      	bne.n	8001a6e <_swilseek+0x56>
 8001a48:	6843      	ldr	r3, [r0, #4]
 8001a4a:	18e4      	adds	r4, r4, r3
 8001a4c:	d4f6      	bmi.n	8001a3c <_swilseek+0x24>
 8001a4e:	682b      	ldr	r3, [r5, #0]
 8001a50:	260a      	movs	r6, #10
 8001a52:	e9cd 3400 	strd	r3, r4, [sp]
 8001a56:	466f      	mov	r7, sp
 8001a58:	4630      	mov	r0, r6
 8001a5a:	4639      	mov	r1, r7
 8001a5c:	beab      	bkpt	0x00ab
 8001a5e:	4606      	mov	r6, r0
 8001a60:	4630      	mov	r0, r6
 8001a62:	f7ff ff91 	bl	8001988 <checkerror>
 8001a66:	2800      	cmp	r0, #0
 8001a68:	dbe1      	blt.n	8001a2e <_swilseek+0x16>
 8001a6a:	606c      	str	r4, [r5, #4]
 8001a6c:	e7e1      	b.n	8001a32 <_swilseek+0x1a>
 8001a6e:	2e02      	cmp	r6, #2
 8001a70:	d1ed      	bne.n	8001a4e <_swilseek+0x36>
 8001a72:	af02      	add	r7, sp, #8
 8001a74:	6803      	ldr	r3, [r0, #0]
 8001a76:	f847 3d08 	str.w	r3, [r7, #-8]!
 8001a7a:	260c      	movs	r6, #12
 8001a7c:	4630      	mov	r0, r6
 8001a7e:	4639      	mov	r1, r7
 8001a80:	beab      	bkpt	0x00ab
 8001a82:	4606      	mov	r6, r0
 8001a84:	4630      	mov	r0, r6
 8001a86:	f7ff ff7f 	bl	8001988 <checkerror>
 8001a8a:	1c43      	adds	r3, r0, #1
 8001a8c:	d0cf      	beq.n	8001a2e <_swilseek+0x16>
 8001a8e:	4404      	add	r4, r0
 8001a90:	e7dd      	b.n	8001a4e <_swilseek+0x36>

08001a92 <_lseek>:
 8001a92:	f7ff bfc1 	b.w	8001a18 <_swilseek>

08001a96 <_swiwrite>:
 8001a96:	b530      	push	{r4, r5, lr}
 8001a98:	b085      	sub	sp, #20
 8001a9a:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8001a9e:	9203      	str	r2, [sp, #12]
 8001aa0:	2405      	movs	r4, #5
 8001aa2:	ad01      	add	r5, sp, #4
 8001aa4:	4620      	mov	r0, r4
 8001aa6:	4629      	mov	r1, r5
 8001aa8:	beab      	bkpt	0x00ab
 8001aaa:	4604      	mov	r4, r0
 8001aac:	4620      	mov	r0, r4
 8001aae:	f7ff ff6b 	bl	8001988 <checkerror>
 8001ab2:	b005      	add	sp, #20
 8001ab4:	bd30      	pop	{r4, r5, pc}

08001ab6 <_write>:
 8001ab6:	b570      	push	{r4, r5, r6, lr}
 8001ab8:	460e      	mov	r6, r1
 8001aba:	4615      	mov	r5, r2
 8001abc:	f7ff ff4a 	bl	8001954 <findslot>
 8001ac0:	4604      	mov	r4, r0
 8001ac2:	b930      	cbnz	r0, 8001ad2 <_write+0x1c>
 8001ac4:	f000 f9ee 	bl	8001ea4 <__errno>
 8001ac8:	2309      	movs	r3, #9
 8001aca:	6003      	str	r3, [r0, #0]
 8001acc:	f04f 30ff 	mov.w	r0, #4294967295
 8001ad0:	bd70      	pop	{r4, r5, r6, pc}
 8001ad2:	462a      	mov	r2, r5
 8001ad4:	4631      	mov	r1, r6
 8001ad6:	6800      	ldr	r0, [r0, #0]
 8001ad8:	f7ff ffdd 	bl	8001a96 <_swiwrite>
 8001adc:	1e02      	subs	r2, r0, #0
 8001ade:	dbf5      	blt.n	8001acc <_write+0x16>
 8001ae0:	6863      	ldr	r3, [r4, #4]
 8001ae2:	1aa8      	subs	r0, r5, r2
 8001ae4:	4403      	add	r3, r0
 8001ae6:	42aa      	cmp	r2, r5
 8001ae8:	6063      	str	r3, [r4, #4]
 8001aea:	d1f1      	bne.n	8001ad0 <_write+0x1a>
 8001aec:	2000      	movs	r0, #0
 8001aee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8001af2:	f7ff bf59 	b.w	80019a8 <error>

08001af6 <_swiclose>:
 8001af6:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8001af8:	ad02      	add	r5, sp, #8
 8001afa:	2402      	movs	r4, #2
 8001afc:	f845 0d04 	str.w	r0, [r5, #-4]!
 8001b00:	4620      	mov	r0, r4
 8001b02:	4629      	mov	r1, r5
 8001b04:	beab      	bkpt	0x00ab
 8001b06:	4604      	mov	r4, r0
 8001b08:	4620      	mov	r0, r4
 8001b0a:	f7ff ff3d 	bl	8001988 <checkerror>
 8001b0e:	b003      	add	sp, #12
 8001b10:	bd30      	pop	{r4, r5, pc}
	...

08001b14 <_close>:
 8001b14:	b538      	push	{r3, r4, r5, lr}
 8001b16:	4605      	mov	r5, r0
 8001b18:	f7ff ff1c 	bl	8001954 <findslot>
 8001b1c:	4604      	mov	r4, r0
 8001b1e:	b930      	cbnz	r0, 8001b2e <_close+0x1a>
 8001b20:	f000 f9c0 	bl	8001ea4 <__errno>
 8001b24:	2309      	movs	r3, #9
 8001b26:	6003      	str	r3, [r0, #0]
 8001b28:	f04f 30ff 	mov.w	r0, #4294967295
 8001b2c:	bd38      	pop	{r3, r4, r5, pc}
 8001b2e:	3d01      	subs	r5, #1
 8001b30:	2d01      	cmp	r5, #1
 8001b32:	d809      	bhi.n	8001b48 <_close+0x34>
 8001b34:	4b09      	ldr	r3, [pc, #36]	; (8001b5c <_close+0x48>)
 8001b36:	689a      	ldr	r2, [r3, #8]
 8001b38:	691b      	ldr	r3, [r3, #16]
 8001b3a:	429a      	cmp	r2, r3
 8001b3c:	d104      	bne.n	8001b48 <_close+0x34>
 8001b3e:	f04f 33ff 	mov.w	r3, #4294967295
 8001b42:	6003      	str	r3, [r0, #0]
 8001b44:	2000      	movs	r0, #0
 8001b46:	e7f1      	b.n	8001b2c <_close+0x18>
 8001b48:	6820      	ldr	r0, [r4, #0]
 8001b4a:	f7ff ffd4 	bl	8001af6 <_swiclose>
 8001b4e:	2800      	cmp	r0, #0
 8001b50:	d1ec      	bne.n	8001b2c <_close+0x18>
 8001b52:	f04f 33ff 	mov.w	r3, #4294967295
 8001b56:	6023      	str	r3, [r4, #0]
 8001b58:	e7e8      	b.n	8001b2c <_close+0x18>
 8001b5a:	bf00      	nop
 8001b5c:	200000b0 	.word	0x200000b0

08001b60 <_swistat>:
 8001b60:	b570      	push	{r4, r5, r6, lr}
 8001b62:	460c      	mov	r4, r1
 8001b64:	f7ff fef6 	bl	8001954 <findslot>
 8001b68:	4606      	mov	r6, r0
 8001b6a:	b930      	cbnz	r0, 8001b7a <_swistat+0x1a>
 8001b6c:	f000 f99a 	bl	8001ea4 <__errno>
 8001b70:	2309      	movs	r3, #9
 8001b72:	6003      	str	r3, [r0, #0]
 8001b74:	f04f 30ff 	mov.w	r0, #4294967295
 8001b78:	bd70      	pop	{r4, r5, r6, pc}
 8001b7a:	6863      	ldr	r3, [r4, #4]
 8001b7c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001b80:	6063      	str	r3, [r4, #4]
 8001b82:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001b86:	6463      	str	r3, [r4, #68]	; 0x44
 8001b88:	250c      	movs	r5, #12
 8001b8a:	4628      	mov	r0, r5
 8001b8c:	4631      	mov	r1, r6
 8001b8e:	beab      	bkpt	0x00ab
 8001b90:	4605      	mov	r5, r0
 8001b92:	4628      	mov	r0, r5
 8001b94:	f7ff fef8 	bl	8001988 <checkerror>
 8001b98:	1c43      	adds	r3, r0, #1
 8001b9a:	bf1c      	itt	ne
 8001b9c:	6120      	strne	r0, [r4, #16]
 8001b9e:	2000      	movne	r0, #0
 8001ba0:	e7ea      	b.n	8001b78 <_swistat+0x18>

08001ba2 <_fstat>:
 8001ba2:	460b      	mov	r3, r1
 8001ba4:	b510      	push	{r4, lr}
 8001ba6:	2100      	movs	r1, #0
 8001ba8:	4604      	mov	r4, r0
 8001baa:	2258      	movs	r2, #88	; 0x58
 8001bac:	4618      	mov	r0, r3
 8001bae:	f000 fa6d 	bl	800208c <memset>
 8001bb2:	4601      	mov	r1, r0
 8001bb4:	4620      	mov	r0, r4
 8001bb6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001bba:	f7ff bfd1 	b.w	8001b60 <_swistat>

08001bbe <_stat>:
 8001bbe:	b538      	push	{r3, r4, r5, lr}
 8001bc0:	460d      	mov	r5, r1
 8001bc2:	4604      	mov	r4, r0
 8001bc4:	2258      	movs	r2, #88	; 0x58
 8001bc6:	2100      	movs	r1, #0
 8001bc8:	4628      	mov	r0, r5
 8001bca:	f000 fa5f 	bl	800208c <memset>
 8001bce:	4620      	mov	r0, r4
 8001bd0:	2100      	movs	r1, #0
 8001bd2:	f000 f811 	bl	8001bf8 <_swiopen>
 8001bd6:	1c43      	adds	r3, r0, #1
 8001bd8:	4604      	mov	r4, r0
 8001bda:	d00b      	beq.n	8001bf4 <_stat+0x36>
 8001bdc:	686b      	ldr	r3, [r5, #4]
 8001bde:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8001be2:	606b      	str	r3, [r5, #4]
 8001be4:	4629      	mov	r1, r5
 8001be6:	f7ff ffbb 	bl	8001b60 <_swistat>
 8001bea:	4605      	mov	r5, r0
 8001bec:	4620      	mov	r0, r4
 8001bee:	f7ff ff91 	bl	8001b14 <_close>
 8001bf2:	462c      	mov	r4, r5
 8001bf4:	4620      	mov	r0, r4
 8001bf6:	bd38      	pop	{r3, r4, r5, pc}

08001bf8 <_swiopen>:
 8001bf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001bfc:	4b2b      	ldr	r3, [pc, #172]	; (8001cac <_swiopen+0xb4>)
 8001bfe:	b096      	sub	sp, #88	; 0x58
 8001c00:	4682      	mov	sl, r0
 8001c02:	460e      	mov	r6, r1
 8001c04:	2500      	movs	r5, #0
 8001c06:	4698      	mov	r8, r3
 8001c08:	f853 4035 	ldr.w	r4, [r3, r5, lsl #3]
 8001c0c:	1c61      	adds	r1, r4, #1
 8001c0e:	ea4f 07c5 	mov.w	r7, r5, lsl #3
 8001c12:	d036      	beq.n	8001c82 <_swiopen+0x8a>
 8001c14:	3501      	adds	r5, #1
 8001c16:	2d14      	cmp	r5, #20
 8001c18:	d1f6      	bne.n	8001c08 <_swiopen+0x10>
 8001c1a:	f000 f943 	bl	8001ea4 <__errno>
 8001c1e:	2318      	movs	r3, #24
 8001c20:	6003      	str	r3, [r0, #0]
 8001c22:	f04f 34ff 	mov.w	r4, #4294967295
 8001c26:	e03c      	b.n	8001ca2 <_swiopen+0xaa>
 8001c28:	f3c6 4400 	ubfx	r4, r6, #16, #1
 8001c2c:	f240 6301 	movw	r3, #1537	; 0x601
 8001c30:	07b2      	lsls	r2, r6, #30
 8001c32:	bf48      	it	mi
 8001c34:	f044 0402 	orrmi.w	r4, r4, #2
 8001c38:	421e      	tst	r6, r3
 8001c3a:	bf18      	it	ne
 8001c3c:	f044 0404 	orrne.w	r4, r4, #4
 8001c40:	0733      	lsls	r3, r6, #28
 8001c42:	bf48      	it	mi
 8001c44:	f024 0404 	bicmi.w	r4, r4, #4
 8001c48:	4650      	mov	r0, sl
 8001c4a:	bf48      	it	mi
 8001c4c:	f044 0408 	orrmi.w	r4, r4, #8
 8001c50:	f8cd a000 	str.w	sl, [sp]
 8001c54:	f7fe fadc 	bl	8000210 <strlen>
 8001c58:	e9cd 4001 	strd	r4, r0, [sp, #4]
 8001c5c:	2401      	movs	r4, #1
 8001c5e:	4620      	mov	r0, r4
 8001c60:	4649      	mov	r1, r9
 8001c62:	beab      	bkpt	0x00ab
 8001c64:	4604      	mov	r4, r0
 8001c66:	2c00      	cmp	r4, #0
 8001c68:	db06      	blt.n	8001c78 <_swiopen+0x80>
 8001c6a:	4447      	add	r7, r8
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	f848 4035 	str.w	r4, [r8, r5, lsl #3]
 8001c72:	607b      	str	r3, [r7, #4]
 8001c74:	462c      	mov	r4, r5
 8001c76:	e014      	b.n	8001ca2 <_swiopen+0xaa>
 8001c78:	4620      	mov	r0, r4
 8001c7a:	f7ff fe95 	bl	80019a8 <error>
 8001c7e:	4604      	mov	r4, r0
 8001c80:	e00f      	b.n	8001ca2 <_swiopen+0xaa>
 8001c82:	f406 6320 	and.w	r3, r6, #2560	; 0xa00
 8001c86:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8001c8a:	46e9      	mov	r9, sp
 8001c8c:	d1cc      	bne.n	8001c28 <_swiopen+0x30>
 8001c8e:	4649      	mov	r1, r9
 8001c90:	4650      	mov	r0, sl
 8001c92:	f7ff ff94 	bl	8001bbe <_stat>
 8001c96:	3001      	adds	r0, #1
 8001c98:	d0c6      	beq.n	8001c28 <_swiopen+0x30>
 8001c9a:	f000 f903 	bl	8001ea4 <__errno>
 8001c9e:	2311      	movs	r3, #17
 8001ca0:	6003      	str	r3, [r0, #0]
 8001ca2:	4620      	mov	r0, r4
 8001ca4:	b016      	add	sp, #88	; 0x58
 8001ca6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001caa:	bf00      	nop
 8001cac:	200000b0 	.word	0x200000b0

08001cb0 <_get_semihosting_exts>:
 8001cb0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8001cb4:	4607      	mov	r7, r0
 8001cb6:	4688      	mov	r8, r1
 8001cb8:	4829      	ldr	r0, [pc, #164]	; (8001d60 <_get_semihosting_exts+0xb0>)
 8001cba:	2100      	movs	r1, #0
 8001cbc:	4615      	mov	r5, r2
 8001cbe:	f7ff ff9b 	bl	8001bf8 <_swiopen>
 8001cc2:	462a      	mov	r2, r5
 8001cc4:	4604      	mov	r4, r0
 8001cc6:	2100      	movs	r1, #0
 8001cc8:	4638      	mov	r0, r7
 8001cca:	f000 f9df 	bl	800208c <memset>
 8001cce:	1c63      	adds	r3, r4, #1
 8001cd0:	d015      	beq.n	8001cfe <_get_semihosting_exts+0x4e>
 8001cd2:	4620      	mov	r0, r4
 8001cd4:	f7ff fe3e 	bl	8001954 <findslot>
 8001cd8:	260c      	movs	r6, #12
 8001cda:	4681      	mov	r9, r0
 8001cdc:	4630      	mov	r0, r6
 8001cde:	4649      	mov	r1, r9
 8001ce0:	beab      	bkpt	0x00ab
 8001ce2:	4606      	mov	r6, r0
 8001ce4:	4630      	mov	r0, r6
 8001ce6:	f7ff fe4f 	bl	8001988 <checkerror>
 8001cea:	2803      	cmp	r0, #3
 8001cec:	dd02      	ble.n	8001cf4 <_get_semihosting_exts+0x44>
 8001cee:	3803      	subs	r0, #3
 8001cf0:	42a8      	cmp	r0, r5
 8001cf2:	dc08      	bgt.n	8001d06 <_get_semihosting_exts+0x56>
 8001cf4:	4620      	mov	r0, r4
 8001cf6:	f7ff ff0d 	bl	8001b14 <_close>
 8001cfa:	f04f 34ff 	mov.w	r4, #4294967295
 8001cfe:	4620      	mov	r0, r4
 8001d00:	b003      	add	sp, #12
 8001d02:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001d06:	2204      	movs	r2, #4
 8001d08:	eb0d 0102 	add.w	r1, sp, r2
 8001d0c:	4620      	mov	r0, r4
 8001d0e:	f7ff fe69 	bl	80019e4 <_read>
 8001d12:	2803      	cmp	r0, #3
 8001d14:	ddee      	ble.n	8001cf4 <_get_semihosting_exts+0x44>
 8001d16:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8001d1a:	2b53      	cmp	r3, #83	; 0x53
 8001d1c:	d1ea      	bne.n	8001cf4 <_get_semihosting_exts+0x44>
 8001d1e:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8001d22:	2b48      	cmp	r3, #72	; 0x48
 8001d24:	d1e6      	bne.n	8001cf4 <_get_semihosting_exts+0x44>
 8001d26:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8001d2a:	2b46      	cmp	r3, #70	; 0x46
 8001d2c:	d1e2      	bne.n	8001cf4 <_get_semihosting_exts+0x44>
 8001d2e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8001d32:	2b42      	cmp	r3, #66	; 0x42
 8001d34:	d1de      	bne.n	8001cf4 <_get_semihosting_exts+0x44>
 8001d36:	2201      	movs	r2, #1
 8001d38:	4641      	mov	r1, r8
 8001d3a:	4620      	mov	r0, r4
 8001d3c:	f7ff fe6c 	bl	8001a18 <_swilseek>
 8001d40:	2800      	cmp	r0, #0
 8001d42:	dbd7      	blt.n	8001cf4 <_get_semihosting_exts+0x44>
 8001d44:	462a      	mov	r2, r5
 8001d46:	4639      	mov	r1, r7
 8001d48:	4620      	mov	r0, r4
 8001d4a:	f7ff fe4b 	bl	80019e4 <_read>
 8001d4e:	4605      	mov	r5, r0
 8001d50:	4620      	mov	r0, r4
 8001d52:	f7ff fedf 	bl	8001b14 <_close>
 8001d56:	4628      	mov	r0, r5
 8001d58:	f7ff fe16 	bl	8001988 <checkerror>
 8001d5c:	4604      	mov	r4, r0
 8001d5e:	e7ce      	b.n	8001cfe <_get_semihosting_exts+0x4e>
 8001d60:	08002cf8 	.word	0x08002cf8

08001d64 <initialise_semihosting_exts>:
 8001d64:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8001d66:	4d0a      	ldr	r5, [pc, #40]	; (8001d90 <initialise_semihosting_exts+0x2c>)
 8001d68:	4c0a      	ldr	r4, [pc, #40]	; (8001d94 <initialise_semihosting_exts+0x30>)
 8001d6a:	2100      	movs	r1, #0
 8001d6c:	2201      	movs	r2, #1
 8001d6e:	a801      	add	r0, sp, #4
 8001d70:	6029      	str	r1, [r5, #0]
 8001d72:	6022      	str	r2, [r4, #0]
 8001d74:	f7ff ff9c 	bl	8001cb0 <_get_semihosting_exts>
 8001d78:	2800      	cmp	r0, #0
 8001d7a:	dd07      	ble.n	8001d8c <initialise_semihosting_exts+0x28>
 8001d7c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8001d80:	f003 0201 	and.w	r2, r3, #1
 8001d84:	f003 0302 	and.w	r3, r3, #2
 8001d88:	602a      	str	r2, [r5, #0]
 8001d8a:	6023      	str	r3, [r4, #0]
 8001d8c:	b003      	add	sp, #12
 8001d8e:	bd30      	pop	{r4, r5, pc}
 8001d90:	20000018 	.word	0x20000018
 8001d94:	2000001c 	.word	0x2000001c

08001d98 <_has_ext_stdout_stderr>:
 8001d98:	b510      	push	{r4, lr}
 8001d9a:	4c04      	ldr	r4, [pc, #16]	; (8001dac <_has_ext_stdout_stderr+0x14>)
 8001d9c:	6822      	ldr	r2, [r4, #0]
 8001d9e:	2a00      	cmp	r2, #0
 8001da0:	da01      	bge.n	8001da6 <_has_ext_stdout_stderr+0xe>
 8001da2:	f7ff ffdf 	bl	8001d64 <initialise_semihosting_exts>
 8001da6:	6820      	ldr	r0, [r4, #0]
 8001da8:	bd10      	pop	{r4, pc}
 8001daa:	bf00      	nop
 8001dac:	2000001c 	.word	0x2000001c

08001db0 <initialise_monitor_handles>:
 8001db0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001db4:	b085      	sub	sp, #20
 8001db6:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 8001e68 <initialise_monitor_handles+0xb8>
 8001dba:	f8cd 9004 	str.w	r9, [sp, #4]
 8001dbe:	2303      	movs	r3, #3
 8001dc0:	2400      	movs	r4, #0
 8001dc2:	9303      	str	r3, [sp, #12]
 8001dc4:	f10d 0804 	add.w	r8, sp, #4
 8001dc8:	9402      	str	r4, [sp, #8]
 8001dca:	2501      	movs	r5, #1
 8001dcc:	4628      	mov	r0, r5
 8001dce:	4641      	mov	r1, r8
 8001dd0:	beab      	bkpt	0x00ab
 8001dd2:	4605      	mov	r5, r0
 8001dd4:	4e20      	ldr	r6, [pc, #128]	; (8001e58 <initialise_monitor_handles+0xa8>)
 8001dd6:	4a21      	ldr	r2, [pc, #132]	; (8001e5c <initialise_monitor_handles+0xac>)
 8001dd8:	6035      	str	r5, [r6, #0]
 8001dda:	4623      	mov	r3, r4
 8001ddc:	f04f 31ff 	mov.w	r1, #4294967295
 8001de0:	4614      	mov	r4, r2
 8001de2:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
 8001de6:	3301      	adds	r3, #1
 8001de8:	2b14      	cmp	r3, #20
 8001dea:	d1fa      	bne.n	8001de2 <initialise_monitor_handles+0x32>
 8001dec:	f7ff ffd4 	bl	8001d98 <_has_ext_stdout_stderr>
 8001df0:	4d1b      	ldr	r5, [pc, #108]	; (8001e60 <initialise_monitor_handles+0xb0>)
 8001df2:	b1d0      	cbz	r0, 8001e2a <initialise_monitor_handles+0x7a>
 8001df4:	f04f 0a03 	mov.w	sl, #3
 8001df8:	2304      	movs	r3, #4
 8001dfa:	f8cd 9004 	str.w	r9, [sp, #4]
 8001dfe:	2701      	movs	r7, #1
 8001e00:	f8cd a00c 	str.w	sl, [sp, #12]
 8001e04:	9302      	str	r3, [sp, #8]
 8001e06:	4638      	mov	r0, r7
 8001e08:	4641      	mov	r1, r8
 8001e0a:	beab      	bkpt	0x00ab
 8001e0c:	4683      	mov	fp, r0
 8001e0e:	4b15      	ldr	r3, [pc, #84]	; (8001e64 <initialise_monitor_handles+0xb4>)
 8001e10:	f8cd 9004 	str.w	r9, [sp, #4]
 8001e14:	f8c3 b000 	str.w	fp, [r3]
 8001e18:	2308      	movs	r3, #8
 8001e1a:	f8cd a00c 	str.w	sl, [sp, #12]
 8001e1e:	9302      	str	r3, [sp, #8]
 8001e20:	4638      	mov	r0, r7
 8001e22:	4641      	mov	r1, r8
 8001e24:	beab      	bkpt	0x00ab
 8001e26:	4607      	mov	r7, r0
 8001e28:	602f      	str	r7, [r5, #0]
 8001e2a:	682b      	ldr	r3, [r5, #0]
 8001e2c:	3301      	adds	r3, #1
 8001e2e:	bf02      	ittt	eq
 8001e30:	4b0c      	ldreq	r3, [pc, #48]	; (8001e64 <initialise_monitor_handles+0xb4>)
 8001e32:	681b      	ldreq	r3, [r3, #0]
 8001e34:	602b      	streq	r3, [r5, #0]
 8001e36:	6833      	ldr	r3, [r6, #0]
 8001e38:	6023      	str	r3, [r4, #0]
 8001e3a:	2600      	movs	r6, #0
 8001e3c:	6066      	str	r6, [r4, #4]
 8001e3e:	f7ff ffab 	bl	8001d98 <_has_ext_stdout_stderr>
 8001e42:	b130      	cbz	r0, 8001e52 <initialise_monitor_handles+0xa2>
 8001e44:	4b07      	ldr	r3, [pc, #28]	; (8001e64 <initialise_monitor_handles+0xb4>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	e9c4 3602 	strd	r3, r6, [r4, #8]
 8001e4c:	682b      	ldr	r3, [r5, #0]
 8001e4e:	e9c4 3604 	strd	r3, r6, [r4, #16]
 8001e52:	b005      	add	sp, #20
 8001e54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001e58:	200000a8 	.word	0x200000a8
 8001e5c:	200000b0 	.word	0x200000b0
 8001e60:	200000a4 	.word	0x200000a4
 8001e64:	200000ac 	.word	0x200000ac
 8001e68:	08002d0e 	.word	0x08002d0e

08001e6c <_isatty>:
 8001e6c:	b570      	push	{r4, r5, r6, lr}
 8001e6e:	f7ff fd71 	bl	8001954 <findslot>
 8001e72:	2509      	movs	r5, #9
 8001e74:	4604      	mov	r4, r0
 8001e76:	b920      	cbnz	r0, 8001e82 <_isatty+0x16>
 8001e78:	f000 f814 	bl	8001ea4 <__errno>
 8001e7c:	6005      	str	r5, [r0, #0]
 8001e7e:	4620      	mov	r0, r4
 8001e80:	bd70      	pop	{r4, r5, r6, pc}
 8001e82:	4628      	mov	r0, r5
 8001e84:	4621      	mov	r1, r4
 8001e86:	beab      	bkpt	0x00ab
 8001e88:	4604      	mov	r4, r0
 8001e8a:	2c01      	cmp	r4, #1
 8001e8c:	d0f7      	beq.n	8001e7e <_isatty+0x12>
 8001e8e:	f000 f809 	bl	8001ea4 <__errno>
 8001e92:	2400      	movs	r4, #0
 8001e94:	4606      	mov	r6, r0
 8001e96:	2513      	movs	r5, #19
 8001e98:	4628      	mov	r0, r5
 8001e9a:	4621      	mov	r1, r4
 8001e9c:	beab      	bkpt	0x00ab
 8001e9e:	4605      	mov	r5, r0
 8001ea0:	6035      	str	r5, [r6, #0]
 8001ea2:	e7ec      	b.n	8001e7e <_isatty+0x12>

08001ea4 <__errno>:
 8001ea4:	4b01      	ldr	r3, [pc, #4]	; (8001eac <__errno+0x8>)
 8001ea6:	6818      	ldr	r0, [r3, #0]
 8001ea8:	4770      	bx	lr
 8001eaa:	bf00      	nop
 8001eac:	20000020 	.word	0x20000020

08001eb0 <std>:
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	b510      	push	{r4, lr}
 8001eb4:	4604      	mov	r4, r0
 8001eb6:	e9c0 3300 	strd	r3, r3, [r0]
 8001eba:	6083      	str	r3, [r0, #8]
 8001ebc:	8181      	strh	r1, [r0, #12]
 8001ebe:	6643      	str	r3, [r0, #100]	; 0x64
 8001ec0:	81c2      	strh	r2, [r0, #14]
 8001ec2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8001ec6:	6183      	str	r3, [r0, #24]
 8001ec8:	4619      	mov	r1, r3
 8001eca:	2208      	movs	r2, #8
 8001ecc:	305c      	adds	r0, #92	; 0x5c
 8001ece:	f000 f8dd 	bl	800208c <memset>
 8001ed2:	4b05      	ldr	r3, [pc, #20]	; (8001ee8 <std+0x38>)
 8001ed4:	6263      	str	r3, [r4, #36]	; 0x24
 8001ed6:	4b05      	ldr	r3, [pc, #20]	; (8001eec <std+0x3c>)
 8001ed8:	62a3      	str	r3, [r4, #40]	; 0x28
 8001eda:	4b05      	ldr	r3, [pc, #20]	; (8001ef0 <std+0x40>)
 8001edc:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001ede:	4b05      	ldr	r3, [pc, #20]	; (8001ef4 <std+0x44>)
 8001ee0:	6224      	str	r4, [r4, #32]
 8001ee2:	6323      	str	r3, [r4, #48]	; 0x30
 8001ee4:	bd10      	pop	{r4, pc}
 8001ee6:	bf00      	nop
 8001ee8:	080021a1 	.word	0x080021a1
 8001eec:	080021c3 	.word	0x080021c3
 8001ef0:	080021fb 	.word	0x080021fb
 8001ef4:	0800221f 	.word	0x0800221f

08001ef8 <_cleanup_r>:
 8001ef8:	4901      	ldr	r1, [pc, #4]	; (8001f00 <_cleanup_r+0x8>)
 8001efa:	f000 b885 	b.w	8002008 <_fwalk_reent>
 8001efe:	bf00      	nop
 8001f00:	08002379 	.word	0x08002379

08001f04 <__sfmoreglue>:
 8001f04:	b570      	push	{r4, r5, r6, lr}
 8001f06:	1e4a      	subs	r2, r1, #1
 8001f08:	2568      	movs	r5, #104	; 0x68
 8001f0a:	4355      	muls	r5, r2
 8001f0c:	460e      	mov	r6, r1
 8001f0e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8001f12:	f000 f8c3 	bl	800209c <_malloc_r>
 8001f16:	4604      	mov	r4, r0
 8001f18:	b140      	cbz	r0, 8001f2c <__sfmoreglue+0x28>
 8001f1a:	2100      	movs	r1, #0
 8001f1c:	e9c0 1600 	strd	r1, r6, [r0]
 8001f20:	300c      	adds	r0, #12
 8001f22:	60a0      	str	r0, [r4, #8]
 8001f24:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8001f28:	f000 f8b0 	bl	800208c <memset>
 8001f2c:	4620      	mov	r0, r4
 8001f2e:	bd70      	pop	{r4, r5, r6, pc}

08001f30 <__sinit>:
 8001f30:	6983      	ldr	r3, [r0, #24]
 8001f32:	b510      	push	{r4, lr}
 8001f34:	4604      	mov	r4, r0
 8001f36:	bb33      	cbnz	r3, 8001f86 <__sinit+0x56>
 8001f38:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8001f3c:	6503      	str	r3, [r0, #80]	; 0x50
 8001f3e:	4b12      	ldr	r3, [pc, #72]	; (8001f88 <__sinit+0x58>)
 8001f40:	4a12      	ldr	r2, [pc, #72]	; (8001f8c <__sinit+0x5c>)
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	6282      	str	r2, [r0, #40]	; 0x28
 8001f46:	4298      	cmp	r0, r3
 8001f48:	bf04      	itt	eq
 8001f4a:	2301      	moveq	r3, #1
 8001f4c:	6183      	streq	r3, [r0, #24]
 8001f4e:	f000 f81f 	bl	8001f90 <__sfp>
 8001f52:	6060      	str	r0, [r4, #4]
 8001f54:	4620      	mov	r0, r4
 8001f56:	f000 f81b 	bl	8001f90 <__sfp>
 8001f5a:	60a0      	str	r0, [r4, #8]
 8001f5c:	4620      	mov	r0, r4
 8001f5e:	f000 f817 	bl	8001f90 <__sfp>
 8001f62:	2200      	movs	r2, #0
 8001f64:	60e0      	str	r0, [r4, #12]
 8001f66:	2104      	movs	r1, #4
 8001f68:	6860      	ldr	r0, [r4, #4]
 8001f6a:	f7ff ffa1 	bl	8001eb0 <std>
 8001f6e:	2201      	movs	r2, #1
 8001f70:	2109      	movs	r1, #9
 8001f72:	68a0      	ldr	r0, [r4, #8]
 8001f74:	f7ff ff9c 	bl	8001eb0 <std>
 8001f78:	2202      	movs	r2, #2
 8001f7a:	2112      	movs	r1, #18
 8001f7c:	68e0      	ldr	r0, [r4, #12]
 8001f7e:	f7ff ff97 	bl	8001eb0 <std>
 8001f82:	2301      	movs	r3, #1
 8001f84:	61a3      	str	r3, [r4, #24]
 8001f86:	bd10      	pop	{r4, pc}
 8001f88:	08002d74 	.word	0x08002d74
 8001f8c:	08001ef9 	.word	0x08001ef9

08001f90 <__sfp>:
 8001f90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001f92:	4b1b      	ldr	r3, [pc, #108]	; (8002000 <__sfp+0x70>)
 8001f94:	681e      	ldr	r6, [r3, #0]
 8001f96:	69b3      	ldr	r3, [r6, #24]
 8001f98:	4607      	mov	r7, r0
 8001f9a:	b913      	cbnz	r3, 8001fa2 <__sfp+0x12>
 8001f9c:	4630      	mov	r0, r6
 8001f9e:	f7ff ffc7 	bl	8001f30 <__sinit>
 8001fa2:	3648      	adds	r6, #72	; 0x48
 8001fa4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8001fa8:	3b01      	subs	r3, #1
 8001faa:	d503      	bpl.n	8001fb4 <__sfp+0x24>
 8001fac:	6833      	ldr	r3, [r6, #0]
 8001fae:	b133      	cbz	r3, 8001fbe <__sfp+0x2e>
 8001fb0:	6836      	ldr	r6, [r6, #0]
 8001fb2:	e7f7      	b.n	8001fa4 <__sfp+0x14>
 8001fb4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8001fb8:	b16d      	cbz	r5, 8001fd6 <__sfp+0x46>
 8001fba:	3468      	adds	r4, #104	; 0x68
 8001fbc:	e7f4      	b.n	8001fa8 <__sfp+0x18>
 8001fbe:	2104      	movs	r1, #4
 8001fc0:	4638      	mov	r0, r7
 8001fc2:	f7ff ff9f 	bl	8001f04 <__sfmoreglue>
 8001fc6:	6030      	str	r0, [r6, #0]
 8001fc8:	2800      	cmp	r0, #0
 8001fca:	d1f1      	bne.n	8001fb0 <__sfp+0x20>
 8001fcc:	230c      	movs	r3, #12
 8001fce:	603b      	str	r3, [r7, #0]
 8001fd0:	4604      	mov	r4, r0
 8001fd2:	4620      	mov	r0, r4
 8001fd4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001fd6:	4b0b      	ldr	r3, [pc, #44]	; (8002004 <__sfp+0x74>)
 8001fd8:	6665      	str	r5, [r4, #100]	; 0x64
 8001fda:	e9c4 5500 	strd	r5, r5, [r4]
 8001fde:	60a5      	str	r5, [r4, #8]
 8001fe0:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8001fe4:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8001fe8:	2208      	movs	r2, #8
 8001fea:	4629      	mov	r1, r5
 8001fec:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8001ff0:	f000 f84c 	bl	800208c <memset>
 8001ff4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8001ff8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8001ffc:	e7e9      	b.n	8001fd2 <__sfp+0x42>
 8001ffe:	bf00      	nop
 8002000:	08002d74 	.word	0x08002d74
 8002004:	ffff0001 	.word	0xffff0001

08002008 <_fwalk_reent>:
 8002008:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800200c:	4680      	mov	r8, r0
 800200e:	4689      	mov	r9, r1
 8002010:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8002014:	2600      	movs	r6, #0
 8002016:	b914      	cbnz	r4, 800201e <_fwalk_reent+0x16>
 8002018:	4630      	mov	r0, r6
 800201a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800201e:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8002022:	3f01      	subs	r7, #1
 8002024:	d501      	bpl.n	800202a <_fwalk_reent+0x22>
 8002026:	6824      	ldr	r4, [r4, #0]
 8002028:	e7f5      	b.n	8002016 <_fwalk_reent+0xe>
 800202a:	89ab      	ldrh	r3, [r5, #12]
 800202c:	2b01      	cmp	r3, #1
 800202e:	d907      	bls.n	8002040 <_fwalk_reent+0x38>
 8002030:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002034:	3301      	adds	r3, #1
 8002036:	d003      	beq.n	8002040 <_fwalk_reent+0x38>
 8002038:	4629      	mov	r1, r5
 800203a:	4640      	mov	r0, r8
 800203c:	47c8      	blx	r9
 800203e:	4306      	orrs	r6, r0
 8002040:	3568      	adds	r5, #104	; 0x68
 8002042:	e7ee      	b.n	8002022 <_fwalk_reent+0x1a>

08002044 <__libc_init_array>:
 8002044:	b570      	push	{r4, r5, r6, lr}
 8002046:	4e0d      	ldr	r6, [pc, #52]	; (800207c <__libc_init_array+0x38>)
 8002048:	4c0d      	ldr	r4, [pc, #52]	; (8002080 <__libc_init_array+0x3c>)
 800204a:	1ba4      	subs	r4, r4, r6
 800204c:	10a4      	asrs	r4, r4, #2
 800204e:	2500      	movs	r5, #0
 8002050:	42a5      	cmp	r5, r4
 8002052:	d109      	bne.n	8002068 <__libc_init_array+0x24>
 8002054:	4e0b      	ldr	r6, [pc, #44]	; (8002084 <__libc_init_array+0x40>)
 8002056:	4c0c      	ldr	r4, [pc, #48]	; (8002088 <__libc_init_array+0x44>)
 8002058:	f000 fe38 	bl	8002ccc <_init>
 800205c:	1ba4      	subs	r4, r4, r6
 800205e:	10a4      	asrs	r4, r4, #2
 8002060:	2500      	movs	r5, #0
 8002062:	42a5      	cmp	r5, r4
 8002064:	d105      	bne.n	8002072 <__libc_init_array+0x2e>
 8002066:	bd70      	pop	{r4, r5, r6, pc}
 8002068:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800206c:	4798      	blx	r3
 800206e:	3501      	adds	r5, #1
 8002070:	e7ee      	b.n	8002050 <__libc_init_array+0xc>
 8002072:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002076:	4798      	blx	r3
 8002078:	3501      	adds	r5, #1
 800207a:	e7f2      	b.n	8002062 <__libc_init_array+0x1e>
 800207c:	08002dac 	.word	0x08002dac
 8002080:	08002dac 	.word	0x08002dac
 8002084:	08002dac 	.word	0x08002dac
 8002088:	08002db0 	.word	0x08002db0

0800208c <memset>:
 800208c:	4402      	add	r2, r0
 800208e:	4603      	mov	r3, r0
 8002090:	4293      	cmp	r3, r2
 8002092:	d100      	bne.n	8002096 <memset+0xa>
 8002094:	4770      	bx	lr
 8002096:	f803 1b01 	strb.w	r1, [r3], #1
 800209a:	e7f9      	b.n	8002090 <memset+0x4>

0800209c <_malloc_r>:
 800209c:	b570      	push	{r4, r5, r6, lr}
 800209e:	1ccd      	adds	r5, r1, #3
 80020a0:	f025 0503 	bic.w	r5, r5, #3
 80020a4:	3508      	adds	r5, #8
 80020a6:	2d0c      	cmp	r5, #12
 80020a8:	bf38      	it	cc
 80020aa:	250c      	movcc	r5, #12
 80020ac:	2d00      	cmp	r5, #0
 80020ae:	4606      	mov	r6, r0
 80020b0:	db01      	blt.n	80020b6 <_malloc_r+0x1a>
 80020b2:	42a9      	cmp	r1, r5
 80020b4:	d903      	bls.n	80020be <_malloc_r+0x22>
 80020b6:	230c      	movs	r3, #12
 80020b8:	6033      	str	r3, [r6, #0]
 80020ba:	2000      	movs	r0, #0
 80020bc:	bd70      	pop	{r4, r5, r6, pc}
 80020be:	f000 f997 	bl	80023f0 <__malloc_lock>
 80020c2:	4a21      	ldr	r2, [pc, #132]	; (8002148 <_malloc_r+0xac>)
 80020c4:	6814      	ldr	r4, [r2, #0]
 80020c6:	4621      	mov	r1, r4
 80020c8:	b991      	cbnz	r1, 80020f0 <_malloc_r+0x54>
 80020ca:	4c20      	ldr	r4, [pc, #128]	; (800214c <_malloc_r+0xb0>)
 80020cc:	6823      	ldr	r3, [r4, #0]
 80020ce:	b91b      	cbnz	r3, 80020d8 <_malloc_r+0x3c>
 80020d0:	4630      	mov	r0, r6
 80020d2:	f000 f855 	bl	8002180 <_sbrk_r>
 80020d6:	6020      	str	r0, [r4, #0]
 80020d8:	4629      	mov	r1, r5
 80020da:	4630      	mov	r0, r6
 80020dc:	f000 f850 	bl	8002180 <_sbrk_r>
 80020e0:	1c43      	adds	r3, r0, #1
 80020e2:	d124      	bne.n	800212e <_malloc_r+0x92>
 80020e4:	230c      	movs	r3, #12
 80020e6:	6033      	str	r3, [r6, #0]
 80020e8:	4630      	mov	r0, r6
 80020ea:	f000 f982 	bl	80023f2 <__malloc_unlock>
 80020ee:	e7e4      	b.n	80020ba <_malloc_r+0x1e>
 80020f0:	680b      	ldr	r3, [r1, #0]
 80020f2:	1b5b      	subs	r3, r3, r5
 80020f4:	d418      	bmi.n	8002128 <_malloc_r+0x8c>
 80020f6:	2b0b      	cmp	r3, #11
 80020f8:	d90f      	bls.n	800211a <_malloc_r+0x7e>
 80020fa:	600b      	str	r3, [r1, #0]
 80020fc:	50cd      	str	r5, [r1, r3]
 80020fe:	18cc      	adds	r4, r1, r3
 8002100:	4630      	mov	r0, r6
 8002102:	f000 f976 	bl	80023f2 <__malloc_unlock>
 8002106:	f104 000b 	add.w	r0, r4, #11
 800210a:	1d23      	adds	r3, r4, #4
 800210c:	f020 0007 	bic.w	r0, r0, #7
 8002110:	1ac3      	subs	r3, r0, r3
 8002112:	d0d3      	beq.n	80020bc <_malloc_r+0x20>
 8002114:	425a      	negs	r2, r3
 8002116:	50e2      	str	r2, [r4, r3]
 8002118:	e7d0      	b.n	80020bc <_malloc_r+0x20>
 800211a:	428c      	cmp	r4, r1
 800211c:	684b      	ldr	r3, [r1, #4]
 800211e:	bf16      	itet	ne
 8002120:	6063      	strne	r3, [r4, #4]
 8002122:	6013      	streq	r3, [r2, #0]
 8002124:	460c      	movne	r4, r1
 8002126:	e7eb      	b.n	8002100 <_malloc_r+0x64>
 8002128:	460c      	mov	r4, r1
 800212a:	6849      	ldr	r1, [r1, #4]
 800212c:	e7cc      	b.n	80020c8 <_malloc_r+0x2c>
 800212e:	1cc4      	adds	r4, r0, #3
 8002130:	f024 0403 	bic.w	r4, r4, #3
 8002134:	42a0      	cmp	r0, r4
 8002136:	d005      	beq.n	8002144 <_malloc_r+0xa8>
 8002138:	1a21      	subs	r1, r4, r0
 800213a:	4630      	mov	r0, r6
 800213c:	f000 f820 	bl	8002180 <_sbrk_r>
 8002140:	3001      	adds	r0, #1
 8002142:	d0cf      	beq.n	80020e4 <_malloc_r+0x48>
 8002144:	6025      	str	r5, [r4, #0]
 8002146:	e7db      	b.n	8002100 <_malloc_r+0x64>
 8002148:	20000150 	.word	0x20000150
 800214c:	20000154 	.word	0x20000154

08002150 <iprintf>:
 8002150:	b40f      	push	{r0, r1, r2, r3}
 8002152:	4b0a      	ldr	r3, [pc, #40]	; (800217c <iprintf+0x2c>)
 8002154:	b513      	push	{r0, r1, r4, lr}
 8002156:	681c      	ldr	r4, [r3, #0]
 8002158:	b124      	cbz	r4, 8002164 <iprintf+0x14>
 800215a:	69a3      	ldr	r3, [r4, #24]
 800215c:	b913      	cbnz	r3, 8002164 <iprintf+0x14>
 800215e:	4620      	mov	r0, r4
 8002160:	f7ff fee6 	bl	8001f30 <__sinit>
 8002164:	ab05      	add	r3, sp, #20
 8002166:	9a04      	ldr	r2, [sp, #16]
 8002168:	68a1      	ldr	r1, [r4, #8]
 800216a:	9301      	str	r3, [sp, #4]
 800216c:	4620      	mov	r0, r4
 800216e:	f000 f9b7 	bl	80024e0 <_vfiprintf_r>
 8002172:	b002      	add	sp, #8
 8002174:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002178:	b004      	add	sp, #16
 800217a:	4770      	bx	lr
 800217c:	20000020 	.word	0x20000020

08002180 <_sbrk_r>:
 8002180:	b538      	push	{r3, r4, r5, lr}
 8002182:	4c06      	ldr	r4, [pc, #24]	; (800219c <_sbrk_r+0x1c>)
 8002184:	2300      	movs	r3, #0
 8002186:	4605      	mov	r5, r0
 8002188:	4608      	mov	r0, r1
 800218a:	6023      	str	r3, [r4, #0]
 800218c:	f7ff fb8c 	bl	80018a8 <_sbrk>
 8002190:	1c43      	adds	r3, r0, #1
 8002192:	d102      	bne.n	800219a <_sbrk_r+0x1a>
 8002194:	6823      	ldr	r3, [r4, #0]
 8002196:	b103      	cbz	r3, 800219a <_sbrk_r+0x1a>
 8002198:	602b      	str	r3, [r5, #0]
 800219a:	bd38      	pop	{r3, r4, r5, pc}
 800219c:	20000190 	.word	0x20000190

080021a0 <__sread>:
 80021a0:	b510      	push	{r4, lr}
 80021a2:	460c      	mov	r4, r1
 80021a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80021a8:	f000 fc38 	bl	8002a1c <_read_r>
 80021ac:	2800      	cmp	r0, #0
 80021ae:	bfab      	itete	ge
 80021b0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80021b2:	89a3      	ldrhlt	r3, [r4, #12]
 80021b4:	181b      	addge	r3, r3, r0
 80021b6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80021ba:	bfac      	ite	ge
 80021bc:	6563      	strge	r3, [r4, #84]	; 0x54
 80021be:	81a3      	strhlt	r3, [r4, #12]
 80021c0:	bd10      	pop	{r4, pc}

080021c2 <__swrite>:
 80021c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80021c6:	461f      	mov	r7, r3
 80021c8:	898b      	ldrh	r3, [r1, #12]
 80021ca:	05db      	lsls	r3, r3, #23
 80021cc:	4605      	mov	r5, r0
 80021ce:	460c      	mov	r4, r1
 80021d0:	4616      	mov	r6, r2
 80021d2:	d505      	bpl.n	80021e0 <__swrite+0x1e>
 80021d4:	2302      	movs	r3, #2
 80021d6:	2200      	movs	r2, #0
 80021d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80021dc:	f000 f8f6 	bl	80023cc <_lseek_r>
 80021e0:	89a3      	ldrh	r3, [r4, #12]
 80021e2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80021e6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80021ea:	81a3      	strh	r3, [r4, #12]
 80021ec:	4632      	mov	r2, r6
 80021ee:	463b      	mov	r3, r7
 80021f0:	4628      	mov	r0, r5
 80021f2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80021f6:	f000 b817 	b.w	8002228 <_write_r>

080021fa <__sseek>:
 80021fa:	b510      	push	{r4, lr}
 80021fc:	460c      	mov	r4, r1
 80021fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002202:	f000 f8e3 	bl	80023cc <_lseek_r>
 8002206:	1c43      	adds	r3, r0, #1
 8002208:	89a3      	ldrh	r3, [r4, #12]
 800220a:	bf15      	itete	ne
 800220c:	6560      	strne	r0, [r4, #84]	; 0x54
 800220e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8002212:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8002216:	81a3      	strheq	r3, [r4, #12]
 8002218:	bf18      	it	ne
 800221a:	81a3      	strhne	r3, [r4, #12]
 800221c:	bd10      	pop	{r4, pc}

0800221e <__sclose>:
 800221e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002222:	f000 b813 	b.w	800224c <_close_r>
	...

08002228 <_write_r>:
 8002228:	b538      	push	{r3, r4, r5, lr}
 800222a:	4c07      	ldr	r4, [pc, #28]	; (8002248 <_write_r+0x20>)
 800222c:	4605      	mov	r5, r0
 800222e:	4608      	mov	r0, r1
 8002230:	4611      	mov	r1, r2
 8002232:	2200      	movs	r2, #0
 8002234:	6022      	str	r2, [r4, #0]
 8002236:	461a      	mov	r2, r3
 8002238:	f7ff fc3d 	bl	8001ab6 <_write>
 800223c:	1c43      	adds	r3, r0, #1
 800223e:	d102      	bne.n	8002246 <_write_r+0x1e>
 8002240:	6823      	ldr	r3, [r4, #0]
 8002242:	b103      	cbz	r3, 8002246 <_write_r+0x1e>
 8002244:	602b      	str	r3, [r5, #0]
 8002246:	bd38      	pop	{r3, r4, r5, pc}
 8002248:	20000190 	.word	0x20000190

0800224c <_close_r>:
 800224c:	b538      	push	{r3, r4, r5, lr}
 800224e:	4c06      	ldr	r4, [pc, #24]	; (8002268 <_close_r+0x1c>)
 8002250:	2300      	movs	r3, #0
 8002252:	4605      	mov	r5, r0
 8002254:	4608      	mov	r0, r1
 8002256:	6023      	str	r3, [r4, #0]
 8002258:	f7ff fc5c 	bl	8001b14 <_close>
 800225c:	1c43      	adds	r3, r0, #1
 800225e:	d102      	bne.n	8002266 <_close_r+0x1a>
 8002260:	6823      	ldr	r3, [r4, #0]
 8002262:	b103      	cbz	r3, 8002266 <_close_r+0x1a>
 8002264:	602b      	str	r3, [r5, #0]
 8002266:	bd38      	pop	{r3, r4, r5, pc}
 8002268:	20000190 	.word	0x20000190

0800226c <__sflush_r>:
 800226c:	898a      	ldrh	r2, [r1, #12]
 800226e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002272:	4605      	mov	r5, r0
 8002274:	0710      	lsls	r0, r2, #28
 8002276:	460c      	mov	r4, r1
 8002278:	d458      	bmi.n	800232c <__sflush_r+0xc0>
 800227a:	684b      	ldr	r3, [r1, #4]
 800227c:	2b00      	cmp	r3, #0
 800227e:	dc05      	bgt.n	800228c <__sflush_r+0x20>
 8002280:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8002282:	2b00      	cmp	r3, #0
 8002284:	dc02      	bgt.n	800228c <__sflush_r+0x20>
 8002286:	2000      	movs	r0, #0
 8002288:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800228c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800228e:	2e00      	cmp	r6, #0
 8002290:	d0f9      	beq.n	8002286 <__sflush_r+0x1a>
 8002292:	2300      	movs	r3, #0
 8002294:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8002298:	682f      	ldr	r7, [r5, #0]
 800229a:	6a21      	ldr	r1, [r4, #32]
 800229c:	602b      	str	r3, [r5, #0]
 800229e:	d032      	beq.n	8002306 <__sflush_r+0x9a>
 80022a0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80022a2:	89a3      	ldrh	r3, [r4, #12]
 80022a4:	075a      	lsls	r2, r3, #29
 80022a6:	d505      	bpl.n	80022b4 <__sflush_r+0x48>
 80022a8:	6863      	ldr	r3, [r4, #4]
 80022aa:	1ac0      	subs	r0, r0, r3
 80022ac:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80022ae:	b10b      	cbz	r3, 80022b4 <__sflush_r+0x48>
 80022b0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80022b2:	1ac0      	subs	r0, r0, r3
 80022b4:	2300      	movs	r3, #0
 80022b6:	4602      	mov	r2, r0
 80022b8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80022ba:	6a21      	ldr	r1, [r4, #32]
 80022bc:	4628      	mov	r0, r5
 80022be:	47b0      	blx	r6
 80022c0:	1c43      	adds	r3, r0, #1
 80022c2:	89a3      	ldrh	r3, [r4, #12]
 80022c4:	d106      	bne.n	80022d4 <__sflush_r+0x68>
 80022c6:	6829      	ldr	r1, [r5, #0]
 80022c8:	291d      	cmp	r1, #29
 80022ca:	d848      	bhi.n	800235e <__sflush_r+0xf2>
 80022cc:	4a29      	ldr	r2, [pc, #164]	; (8002374 <__sflush_r+0x108>)
 80022ce:	40ca      	lsrs	r2, r1
 80022d0:	07d6      	lsls	r6, r2, #31
 80022d2:	d544      	bpl.n	800235e <__sflush_r+0xf2>
 80022d4:	2200      	movs	r2, #0
 80022d6:	6062      	str	r2, [r4, #4]
 80022d8:	04d9      	lsls	r1, r3, #19
 80022da:	6922      	ldr	r2, [r4, #16]
 80022dc:	6022      	str	r2, [r4, #0]
 80022de:	d504      	bpl.n	80022ea <__sflush_r+0x7e>
 80022e0:	1c42      	adds	r2, r0, #1
 80022e2:	d101      	bne.n	80022e8 <__sflush_r+0x7c>
 80022e4:	682b      	ldr	r3, [r5, #0]
 80022e6:	b903      	cbnz	r3, 80022ea <__sflush_r+0x7e>
 80022e8:	6560      	str	r0, [r4, #84]	; 0x54
 80022ea:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80022ec:	602f      	str	r7, [r5, #0]
 80022ee:	2900      	cmp	r1, #0
 80022f0:	d0c9      	beq.n	8002286 <__sflush_r+0x1a>
 80022f2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80022f6:	4299      	cmp	r1, r3
 80022f8:	d002      	beq.n	8002300 <__sflush_r+0x94>
 80022fa:	4628      	mov	r0, r5
 80022fc:	f000 f87a 	bl	80023f4 <_free_r>
 8002300:	2000      	movs	r0, #0
 8002302:	6360      	str	r0, [r4, #52]	; 0x34
 8002304:	e7c0      	b.n	8002288 <__sflush_r+0x1c>
 8002306:	2301      	movs	r3, #1
 8002308:	4628      	mov	r0, r5
 800230a:	47b0      	blx	r6
 800230c:	1c41      	adds	r1, r0, #1
 800230e:	d1c8      	bne.n	80022a2 <__sflush_r+0x36>
 8002310:	682b      	ldr	r3, [r5, #0]
 8002312:	2b00      	cmp	r3, #0
 8002314:	d0c5      	beq.n	80022a2 <__sflush_r+0x36>
 8002316:	2b1d      	cmp	r3, #29
 8002318:	d001      	beq.n	800231e <__sflush_r+0xb2>
 800231a:	2b16      	cmp	r3, #22
 800231c:	d101      	bne.n	8002322 <__sflush_r+0xb6>
 800231e:	602f      	str	r7, [r5, #0]
 8002320:	e7b1      	b.n	8002286 <__sflush_r+0x1a>
 8002322:	89a3      	ldrh	r3, [r4, #12]
 8002324:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002328:	81a3      	strh	r3, [r4, #12]
 800232a:	e7ad      	b.n	8002288 <__sflush_r+0x1c>
 800232c:	690f      	ldr	r7, [r1, #16]
 800232e:	2f00      	cmp	r7, #0
 8002330:	d0a9      	beq.n	8002286 <__sflush_r+0x1a>
 8002332:	0793      	lsls	r3, r2, #30
 8002334:	680e      	ldr	r6, [r1, #0]
 8002336:	bf08      	it	eq
 8002338:	694b      	ldreq	r3, [r1, #20]
 800233a:	600f      	str	r7, [r1, #0]
 800233c:	bf18      	it	ne
 800233e:	2300      	movne	r3, #0
 8002340:	eba6 0807 	sub.w	r8, r6, r7
 8002344:	608b      	str	r3, [r1, #8]
 8002346:	f1b8 0f00 	cmp.w	r8, #0
 800234a:	dd9c      	ble.n	8002286 <__sflush_r+0x1a>
 800234c:	4643      	mov	r3, r8
 800234e:	463a      	mov	r2, r7
 8002350:	6a21      	ldr	r1, [r4, #32]
 8002352:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8002354:	4628      	mov	r0, r5
 8002356:	47b0      	blx	r6
 8002358:	2800      	cmp	r0, #0
 800235a:	dc06      	bgt.n	800236a <__sflush_r+0xfe>
 800235c:	89a3      	ldrh	r3, [r4, #12]
 800235e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002362:	81a3      	strh	r3, [r4, #12]
 8002364:	f04f 30ff 	mov.w	r0, #4294967295
 8002368:	e78e      	b.n	8002288 <__sflush_r+0x1c>
 800236a:	4407      	add	r7, r0
 800236c:	eba8 0800 	sub.w	r8, r8, r0
 8002370:	e7e9      	b.n	8002346 <__sflush_r+0xda>
 8002372:	bf00      	nop
 8002374:	20400001 	.word	0x20400001

08002378 <_fflush_r>:
 8002378:	b538      	push	{r3, r4, r5, lr}
 800237a:	690b      	ldr	r3, [r1, #16]
 800237c:	4605      	mov	r5, r0
 800237e:	460c      	mov	r4, r1
 8002380:	b1db      	cbz	r3, 80023ba <_fflush_r+0x42>
 8002382:	b118      	cbz	r0, 800238c <_fflush_r+0x14>
 8002384:	6983      	ldr	r3, [r0, #24]
 8002386:	b90b      	cbnz	r3, 800238c <_fflush_r+0x14>
 8002388:	f7ff fdd2 	bl	8001f30 <__sinit>
 800238c:	4b0c      	ldr	r3, [pc, #48]	; (80023c0 <_fflush_r+0x48>)
 800238e:	429c      	cmp	r4, r3
 8002390:	d109      	bne.n	80023a6 <_fflush_r+0x2e>
 8002392:	686c      	ldr	r4, [r5, #4]
 8002394:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002398:	b17b      	cbz	r3, 80023ba <_fflush_r+0x42>
 800239a:	4621      	mov	r1, r4
 800239c:	4628      	mov	r0, r5
 800239e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80023a2:	f7ff bf63 	b.w	800226c <__sflush_r>
 80023a6:	4b07      	ldr	r3, [pc, #28]	; (80023c4 <_fflush_r+0x4c>)
 80023a8:	429c      	cmp	r4, r3
 80023aa:	d101      	bne.n	80023b0 <_fflush_r+0x38>
 80023ac:	68ac      	ldr	r4, [r5, #8]
 80023ae:	e7f1      	b.n	8002394 <_fflush_r+0x1c>
 80023b0:	4b05      	ldr	r3, [pc, #20]	; (80023c8 <_fflush_r+0x50>)
 80023b2:	429c      	cmp	r4, r3
 80023b4:	bf08      	it	eq
 80023b6:	68ec      	ldreq	r4, [r5, #12]
 80023b8:	e7ec      	b.n	8002394 <_fflush_r+0x1c>
 80023ba:	2000      	movs	r0, #0
 80023bc:	bd38      	pop	{r3, r4, r5, pc}
 80023be:	bf00      	nop
 80023c0:	08002d34 	.word	0x08002d34
 80023c4:	08002d54 	.word	0x08002d54
 80023c8:	08002d14 	.word	0x08002d14

080023cc <_lseek_r>:
 80023cc:	b538      	push	{r3, r4, r5, lr}
 80023ce:	4c07      	ldr	r4, [pc, #28]	; (80023ec <_lseek_r+0x20>)
 80023d0:	4605      	mov	r5, r0
 80023d2:	4608      	mov	r0, r1
 80023d4:	4611      	mov	r1, r2
 80023d6:	2200      	movs	r2, #0
 80023d8:	6022      	str	r2, [r4, #0]
 80023da:	461a      	mov	r2, r3
 80023dc:	f7ff fb59 	bl	8001a92 <_lseek>
 80023e0:	1c43      	adds	r3, r0, #1
 80023e2:	d102      	bne.n	80023ea <_lseek_r+0x1e>
 80023e4:	6823      	ldr	r3, [r4, #0]
 80023e6:	b103      	cbz	r3, 80023ea <_lseek_r+0x1e>
 80023e8:	602b      	str	r3, [r5, #0]
 80023ea:	bd38      	pop	{r3, r4, r5, pc}
 80023ec:	20000190 	.word	0x20000190

080023f0 <__malloc_lock>:
 80023f0:	4770      	bx	lr

080023f2 <__malloc_unlock>:
 80023f2:	4770      	bx	lr

080023f4 <_free_r>:
 80023f4:	b538      	push	{r3, r4, r5, lr}
 80023f6:	4605      	mov	r5, r0
 80023f8:	2900      	cmp	r1, #0
 80023fa:	d045      	beq.n	8002488 <_free_r+0x94>
 80023fc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002400:	1f0c      	subs	r4, r1, #4
 8002402:	2b00      	cmp	r3, #0
 8002404:	bfb8      	it	lt
 8002406:	18e4      	addlt	r4, r4, r3
 8002408:	f7ff fff2 	bl	80023f0 <__malloc_lock>
 800240c:	4a1f      	ldr	r2, [pc, #124]	; (800248c <_free_r+0x98>)
 800240e:	6813      	ldr	r3, [r2, #0]
 8002410:	4610      	mov	r0, r2
 8002412:	b933      	cbnz	r3, 8002422 <_free_r+0x2e>
 8002414:	6063      	str	r3, [r4, #4]
 8002416:	6014      	str	r4, [r2, #0]
 8002418:	4628      	mov	r0, r5
 800241a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800241e:	f7ff bfe8 	b.w	80023f2 <__malloc_unlock>
 8002422:	42a3      	cmp	r3, r4
 8002424:	d90c      	bls.n	8002440 <_free_r+0x4c>
 8002426:	6821      	ldr	r1, [r4, #0]
 8002428:	1862      	adds	r2, r4, r1
 800242a:	4293      	cmp	r3, r2
 800242c:	bf04      	itt	eq
 800242e:	681a      	ldreq	r2, [r3, #0]
 8002430:	685b      	ldreq	r3, [r3, #4]
 8002432:	6063      	str	r3, [r4, #4]
 8002434:	bf04      	itt	eq
 8002436:	1852      	addeq	r2, r2, r1
 8002438:	6022      	streq	r2, [r4, #0]
 800243a:	6004      	str	r4, [r0, #0]
 800243c:	e7ec      	b.n	8002418 <_free_r+0x24>
 800243e:	4613      	mov	r3, r2
 8002440:	685a      	ldr	r2, [r3, #4]
 8002442:	b10a      	cbz	r2, 8002448 <_free_r+0x54>
 8002444:	42a2      	cmp	r2, r4
 8002446:	d9fa      	bls.n	800243e <_free_r+0x4a>
 8002448:	6819      	ldr	r1, [r3, #0]
 800244a:	1858      	adds	r0, r3, r1
 800244c:	42a0      	cmp	r0, r4
 800244e:	d10b      	bne.n	8002468 <_free_r+0x74>
 8002450:	6820      	ldr	r0, [r4, #0]
 8002452:	4401      	add	r1, r0
 8002454:	1858      	adds	r0, r3, r1
 8002456:	4282      	cmp	r2, r0
 8002458:	6019      	str	r1, [r3, #0]
 800245a:	d1dd      	bne.n	8002418 <_free_r+0x24>
 800245c:	6810      	ldr	r0, [r2, #0]
 800245e:	6852      	ldr	r2, [r2, #4]
 8002460:	605a      	str	r2, [r3, #4]
 8002462:	4401      	add	r1, r0
 8002464:	6019      	str	r1, [r3, #0]
 8002466:	e7d7      	b.n	8002418 <_free_r+0x24>
 8002468:	d902      	bls.n	8002470 <_free_r+0x7c>
 800246a:	230c      	movs	r3, #12
 800246c:	602b      	str	r3, [r5, #0]
 800246e:	e7d3      	b.n	8002418 <_free_r+0x24>
 8002470:	6820      	ldr	r0, [r4, #0]
 8002472:	1821      	adds	r1, r4, r0
 8002474:	428a      	cmp	r2, r1
 8002476:	bf04      	itt	eq
 8002478:	6811      	ldreq	r1, [r2, #0]
 800247a:	6852      	ldreq	r2, [r2, #4]
 800247c:	6062      	str	r2, [r4, #4]
 800247e:	bf04      	itt	eq
 8002480:	1809      	addeq	r1, r1, r0
 8002482:	6021      	streq	r1, [r4, #0]
 8002484:	605c      	str	r4, [r3, #4]
 8002486:	e7c7      	b.n	8002418 <_free_r+0x24>
 8002488:	bd38      	pop	{r3, r4, r5, pc}
 800248a:	bf00      	nop
 800248c:	20000150 	.word	0x20000150

08002490 <__sfputc_r>:
 8002490:	6893      	ldr	r3, [r2, #8]
 8002492:	3b01      	subs	r3, #1
 8002494:	2b00      	cmp	r3, #0
 8002496:	b410      	push	{r4}
 8002498:	6093      	str	r3, [r2, #8]
 800249a:	da07      	bge.n	80024ac <__sfputc_r+0x1c>
 800249c:	6994      	ldr	r4, [r2, #24]
 800249e:	42a3      	cmp	r3, r4
 80024a0:	db01      	blt.n	80024a6 <__sfputc_r+0x16>
 80024a2:	290a      	cmp	r1, #10
 80024a4:	d102      	bne.n	80024ac <__sfputc_r+0x1c>
 80024a6:	bc10      	pop	{r4}
 80024a8:	f000 baca 	b.w	8002a40 <__swbuf_r>
 80024ac:	6813      	ldr	r3, [r2, #0]
 80024ae:	1c58      	adds	r0, r3, #1
 80024b0:	6010      	str	r0, [r2, #0]
 80024b2:	7019      	strb	r1, [r3, #0]
 80024b4:	4608      	mov	r0, r1
 80024b6:	bc10      	pop	{r4}
 80024b8:	4770      	bx	lr

080024ba <__sfputs_r>:
 80024ba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80024bc:	4606      	mov	r6, r0
 80024be:	460f      	mov	r7, r1
 80024c0:	4614      	mov	r4, r2
 80024c2:	18d5      	adds	r5, r2, r3
 80024c4:	42ac      	cmp	r4, r5
 80024c6:	d101      	bne.n	80024cc <__sfputs_r+0x12>
 80024c8:	2000      	movs	r0, #0
 80024ca:	e007      	b.n	80024dc <__sfputs_r+0x22>
 80024cc:	463a      	mov	r2, r7
 80024ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 80024d2:	4630      	mov	r0, r6
 80024d4:	f7ff ffdc 	bl	8002490 <__sfputc_r>
 80024d8:	1c43      	adds	r3, r0, #1
 80024da:	d1f3      	bne.n	80024c4 <__sfputs_r+0xa>
 80024dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080024e0 <_vfiprintf_r>:
 80024e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80024e4:	460c      	mov	r4, r1
 80024e6:	b09d      	sub	sp, #116	; 0x74
 80024e8:	4617      	mov	r7, r2
 80024ea:	461d      	mov	r5, r3
 80024ec:	4606      	mov	r6, r0
 80024ee:	b118      	cbz	r0, 80024f8 <_vfiprintf_r+0x18>
 80024f0:	6983      	ldr	r3, [r0, #24]
 80024f2:	b90b      	cbnz	r3, 80024f8 <_vfiprintf_r+0x18>
 80024f4:	f7ff fd1c 	bl	8001f30 <__sinit>
 80024f8:	4b7c      	ldr	r3, [pc, #496]	; (80026ec <_vfiprintf_r+0x20c>)
 80024fa:	429c      	cmp	r4, r3
 80024fc:	d158      	bne.n	80025b0 <_vfiprintf_r+0xd0>
 80024fe:	6874      	ldr	r4, [r6, #4]
 8002500:	89a3      	ldrh	r3, [r4, #12]
 8002502:	0718      	lsls	r0, r3, #28
 8002504:	d55e      	bpl.n	80025c4 <_vfiprintf_r+0xe4>
 8002506:	6923      	ldr	r3, [r4, #16]
 8002508:	2b00      	cmp	r3, #0
 800250a:	d05b      	beq.n	80025c4 <_vfiprintf_r+0xe4>
 800250c:	2300      	movs	r3, #0
 800250e:	9309      	str	r3, [sp, #36]	; 0x24
 8002510:	2320      	movs	r3, #32
 8002512:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002516:	2330      	movs	r3, #48	; 0x30
 8002518:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800251c:	9503      	str	r5, [sp, #12]
 800251e:	f04f 0b01 	mov.w	fp, #1
 8002522:	46b8      	mov	r8, r7
 8002524:	4645      	mov	r5, r8
 8002526:	f815 3b01 	ldrb.w	r3, [r5], #1
 800252a:	b10b      	cbz	r3, 8002530 <_vfiprintf_r+0x50>
 800252c:	2b25      	cmp	r3, #37	; 0x25
 800252e:	d154      	bne.n	80025da <_vfiprintf_r+0xfa>
 8002530:	ebb8 0a07 	subs.w	sl, r8, r7
 8002534:	d00b      	beq.n	800254e <_vfiprintf_r+0x6e>
 8002536:	4653      	mov	r3, sl
 8002538:	463a      	mov	r2, r7
 800253a:	4621      	mov	r1, r4
 800253c:	4630      	mov	r0, r6
 800253e:	f7ff ffbc 	bl	80024ba <__sfputs_r>
 8002542:	3001      	adds	r0, #1
 8002544:	f000 80c2 	beq.w	80026cc <_vfiprintf_r+0x1ec>
 8002548:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800254a:	4453      	add	r3, sl
 800254c:	9309      	str	r3, [sp, #36]	; 0x24
 800254e:	f898 3000 	ldrb.w	r3, [r8]
 8002552:	2b00      	cmp	r3, #0
 8002554:	f000 80ba 	beq.w	80026cc <_vfiprintf_r+0x1ec>
 8002558:	2300      	movs	r3, #0
 800255a:	f04f 32ff 	mov.w	r2, #4294967295
 800255e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002562:	9304      	str	r3, [sp, #16]
 8002564:	9307      	str	r3, [sp, #28]
 8002566:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800256a:	931a      	str	r3, [sp, #104]	; 0x68
 800256c:	46a8      	mov	r8, r5
 800256e:	2205      	movs	r2, #5
 8002570:	f818 1b01 	ldrb.w	r1, [r8], #1
 8002574:	485e      	ldr	r0, [pc, #376]	; (80026f0 <_vfiprintf_r+0x210>)
 8002576:	f7fd fe53 	bl	8000220 <memchr>
 800257a:	9b04      	ldr	r3, [sp, #16]
 800257c:	bb78      	cbnz	r0, 80025de <_vfiprintf_r+0xfe>
 800257e:	06d9      	lsls	r1, r3, #27
 8002580:	bf44      	itt	mi
 8002582:	2220      	movmi	r2, #32
 8002584:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8002588:	071a      	lsls	r2, r3, #28
 800258a:	bf44      	itt	mi
 800258c:	222b      	movmi	r2, #43	; 0x2b
 800258e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8002592:	782a      	ldrb	r2, [r5, #0]
 8002594:	2a2a      	cmp	r2, #42	; 0x2a
 8002596:	d02a      	beq.n	80025ee <_vfiprintf_r+0x10e>
 8002598:	9a07      	ldr	r2, [sp, #28]
 800259a:	46a8      	mov	r8, r5
 800259c:	2000      	movs	r0, #0
 800259e:	250a      	movs	r5, #10
 80025a0:	4641      	mov	r1, r8
 80025a2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80025a6:	3b30      	subs	r3, #48	; 0x30
 80025a8:	2b09      	cmp	r3, #9
 80025aa:	d969      	bls.n	8002680 <_vfiprintf_r+0x1a0>
 80025ac:	b360      	cbz	r0, 8002608 <_vfiprintf_r+0x128>
 80025ae:	e024      	b.n	80025fa <_vfiprintf_r+0x11a>
 80025b0:	4b50      	ldr	r3, [pc, #320]	; (80026f4 <_vfiprintf_r+0x214>)
 80025b2:	429c      	cmp	r4, r3
 80025b4:	d101      	bne.n	80025ba <_vfiprintf_r+0xda>
 80025b6:	68b4      	ldr	r4, [r6, #8]
 80025b8:	e7a2      	b.n	8002500 <_vfiprintf_r+0x20>
 80025ba:	4b4f      	ldr	r3, [pc, #316]	; (80026f8 <_vfiprintf_r+0x218>)
 80025bc:	429c      	cmp	r4, r3
 80025be:	bf08      	it	eq
 80025c0:	68f4      	ldreq	r4, [r6, #12]
 80025c2:	e79d      	b.n	8002500 <_vfiprintf_r+0x20>
 80025c4:	4621      	mov	r1, r4
 80025c6:	4630      	mov	r0, r6
 80025c8:	f000 fa8c 	bl	8002ae4 <__swsetup_r>
 80025cc:	2800      	cmp	r0, #0
 80025ce:	d09d      	beq.n	800250c <_vfiprintf_r+0x2c>
 80025d0:	f04f 30ff 	mov.w	r0, #4294967295
 80025d4:	b01d      	add	sp, #116	; 0x74
 80025d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80025da:	46a8      	mov	r8, r5
 80025dc:	e7a2      	b.n	8002524 <_vfiprintf_r+0x44>
 80025de:	4a44      	ldr	r2, [pc, #272]	; (80026f0 <_vfiprintf_r+0x210>)
 80025e0:	1a80      	subs	r0, r0, r2
 80025e2:	fa0b f000 	lsl.w	r0, fp, r0
 80025e6:	4318      	orrs	r0, r3
 80025e8:	9004      	str	r0, [sp, #16]
 80025ea:	4645      	mov	r5, r8
 80025ec:	e7be      	b.n	800256c <_vfiprintf_r+0x8c>
 80025ee:	9a03      	ldr	r2, [sp, #12]
 80025f0:	1d11      	adds	r1, r2, #4
 80025f2:	6812      	ldr	r2, [r2, #0]
 80025f4:	9103      	str	r1, [sp, #12]
 80025f6:	2a00      	cmp	r2, #0
 80025f8:	db01      	blt.n	80025fe <_vfiprintf_r+0x11e>
 80025fa:	9207      	str	r2, [sp, #28]
 80025fc:	e004      	b.n	8002608 <_vfiprintf_r+0x128>
 80025fe:	4252      	negs	r2, r2
 8002600:	f043 0302 	orr.w	r3, r3, #2
 8002604:	9207      	str	r2, [sp, #28]
 8002606:	9304      	str	r3, [sp, #16]
 8002608:	f898 3000 	ldrb.w	r3, [r8]
 800260c:	2b2e      	cmp	r3, #46	; 0x2e
 800260e:	d10e      	bne.n	800262e <_vfiprintf_r+0x14e>
 8002610:	f898 3001 	ldrb.w	r3, [r8, #1]
 8002614:	2b2a      	cmp	r3, #42	; 0x2a
 8002616:	d138      	bne.n	800268a <_vfiprintf_r+0x1aa>
 8002618:	9b03      	ldr	r3, [sp, #12]
 800261a:	1d1a      	adds	r2, r3, #4
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	9203      	str	r2, [sp, #12]
 8002620:	2b00      	cmp	r3, #0
 8002622:	bfb8      	it	lt
 8002624:	f04f 33ff 	movlt.w	r3, #4294967295
 8002628:	f108 0802 	add.w	r8, r8, #2
 800262c:	9305      	str	r3, [sp, #20]
 800262e:	4d33      	ldr	r5, [pc, #204]	; (80026fc <_vfiprintf_r+0x21c>)
 8002630:	f898 1000 	ldrb.w	r1, [r8]
 8002634:	2203      	movs	r2, #3
 8002636:	4628      	mov	r0, r5
 8002638:	f7fd fdf2 	bl	8000220 <memchr>
 800263c:	b140      	cbz	r0, 8002650 <_vfiprintf_r+0x170>
 800263e:	2340      	movs	r3, #64	; 0x40
 8002640:	1b40      	subs	r0, r0, r5
 8002642:	fa03 f000 	lsl.w	r0, r3, r0
 8002646:	9b04      	ldr	r3, [sp, #16]
 8002648:	4303      	orrs	r3, r0
 800264a:	f108 0801 	add.w	r8, r8, #1
 800264e:	9304      	str	r3, [sp, #16]
 8002650:	f898 1000 	ldrb.w	r1, [r8]
 8002654:	482a      	ldr	r0, [pc, #168]	; (8002700 <_vfiprintf_r+0x220>)
 8002656:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800265a:	2206      	movs	r2, #6
 800265c:	f108 0701 	add.w	r7, r8, #1
 8002660:	f7fd fdde 	bl	8000220 <memchr>
 8002664:	2800      	cmp	r0, #0
 8002666:	d037      	beq.n	80026d8 <_vfiprintf_r+0x1f8>
 8002668:	4b26      	ldr	r3, [pc, #152]	; (8002704 <_vfiprintf_r+0x224>)
 800266a:	bb1b      	cbnz	r3, 80026b4 <_vfiprintf_r+0x1d4>
 800266c:	9b03      	ldr	r3, [sp, #12]
 800266e:	3307      	adds	r3, #7
 8002670:	f023 0307 	bic.w	r3, r3, #7
 8002674:	3308      	adds	r3, #8
 8002676:	9303      	str	r3, [sp, #12]
 8002678:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800267a:	444b      	add	r3, r9
 800267c:	9309      	str	r3, [sp, #36]	; 0x24
 800267e:	e750      	b.n	8002522 <_vfiprintf_r+0x42>
 8002680:	fb05 3202 	mla	r2, r5, r2, r3
 8002684:	2001      	movs	r0, #1
 8002686:	4688      	mov	r8, r1
 8002688:	e78a      	b.n	80025a0 <_vfiprintf_r+0xc0>
 800268a:	2300      	movs	r3, #0
 800268c:	f108 0801 	add.w	r8, r8, #1
 8002690:	9305      	str	r3, [sp, #20]
 8002692:	4619      	mov	r1, r3
 8002694:	250a      	movs	r5, #10
 8002696:	4640      	mov	r0, r8
 8002698:	f810 2b01 	ldrb.w	r2, [r0], #1
 800269c:	3a30      	subs	r2, #48	; 0x30
 800269e:	2a09      	cmp	r2, #9
 80026a0:	d903      	bls.n	80026aa <_vfiprintf_r+0x1ca>
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d0c3      	beq.n	800262e <_vfiprintf_r+0x14e>
 80026a6:	9105      	str	r1, [sp, #20]
 80026a8:	e7c1      	b.n	800262e <_vfiprintf_r+0x14e>
 80026aa:	fb05 2101 	mla	r1, r5, r1, r2
 80026ae:	2301      	movs	r3, #1
 80026b0:	4680      	mov	r8, r0
 80026b2:	e7f0      	b.n	8002696 <_vfiprintf_r+0x1b6>
 80026b4:	ab03      	add	r3, sp, #12
 80026b6:	9300      	str	r3, [sp, #0]
 80026b8:	4622      	mov	r2, r4
 80026ba:	4b13      	ldr	r3, [pc, #76]	; (8002708 <_vfiprintf_r+0x228>)
 80026bc:	a904      	add	r1, sp, #16
 80026be:	4630      	mov	r0, r6
 80026c0:	f3af 8000 	nop.w
 80026c4:	f1b0 3fff 	cmp.w	r0, #4294967295
 80026c8:	4681      	mov	r9, r0
 80026ca:	d1d5      	bne.n	8002678 <_vfiprintf_r+0x198>
 80026cc:	89a3      	ldrh	r3, [r4, #12]
 80026ce:	065b      	lsls	r3, r3, #25
 80026d0:	f53f af7e 	bmi.w	80025d0 <_vfiprintf_r+0xf0>
 80026d4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80026d6:	e77d      	b.n	80025d4 <_vfiprintf_r+0xf4>
 80026d8:	ab03      	add	r3, sp, #12
 80026da:	9300      	str	r3, [sp, #0]
 80026dc:	4622      	mov	r2, r4
 80026de:	4b0a      	ldr	r3, [pc, #40]	; (8002708 <_vfiprintf_r+0x228>)
 80026e0:	a904      	add	r1, sp, #16
 80026e2:	4630      	mov	r0, r6
 80026e4:	f000 f888 	bl	80027f8 <_printf_i>
 80026e8:	e7ec      	b.n	80026c4 <_vfiprintf_r+0x1e4>
 80026ea:	bf00      	nop
 80026ec:	08002d34 	.word	0x08002d34
 80026f0:	08002d78 	.word	0x08002d78
 80026f4:	08002d54 	.word	0x08002d54
 80026f8:	08002d14 	.word	0x08002d14
 80026fc:	08002d7e 	.word	0x08002d7e
 8002700:	08002d82 	.word	0x08002d82
 8002704:	00000000 	.word	0x00000000
 8002708:	080024bb 	.word	0x080024bb

0800270c <_printf_common>:
 800270c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002710:	4691      	mov	r9, r2
 8002712:	461f      	mov	r7, r3
 8002714:	688a      	ldr	r2, [r1, #8]
 8002716:	690b      	ldr	r3, [r1, #16]
 8002718:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800271c:	4293      	cmp	r3, r2
 800271e:	bfb8      	it	lt
 8002720:	4613      	movlt	r3, r2
 8002722:	f8c9 3000 	str.w	r3, [r9]
 8002726:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800272a:	4606      	mov	r6, r0
 800272c:	460c      	mov	r4, r1
 800272e:	b112      	cbz	r2, 8002736 <_printf_common+0x2a>
 8002730:	3301      	adds	r3, #1
 8002732:	f8c9 3000 	str.w	r3, [r9]
 8002736:	6823      	ldr	r3, [r4, #0]
 8002738:	0699      	lsls	r1, r3, #26
 800273a:	bf42      	ittt	mi
 800273c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8002740:	3302      	addmi	r3, #2
 8002742:	f8c9 3000 	strmi.w	r3, [r9]
 8002746:	6825      	ldr	r5, [r4, #0]
 8002748:	f015 0506 	ands.w	r5, r5, #6
 800274c:	d107      	bne.n	800275e <_printf_common+0x52>
 800274e:	f104 0a19 	add.w	sl, r4, #25
 8002752:	68e3      	ldr	r3, [r4, #12]
 8002754:	f8d9 2000 	ldr.w	r2, [r9]
 8002758:	1a9b      	subs	r3, r3, r2
 800275a:	42ab      	cmp	r3, r5
 800275c:	dc28      	bgt.n	80027b0 <_printf_common+0xa4>
 800275e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8002762:	6822      	ldr	r2, [r4, #0]
 8002764:	3300      	adds	r3, #0
 8002766:	bf18      	it	ne
 8002768:	2301      	movne	r3, #1
 800276a:	0692      	lsls	r2, r2, #26
 800276c:	d42d      	bmi.n	80027ca <_printf_common+0xbe>
 800276e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002772:	4639      	mov	r1, r7
 8002774:	4630      	mov	r0, r6
 8002776:	47c0      	blx	r8
 8002778:	3001      	adds	r0, #1
 800277a:	d020      	beq.n	80027be <_printf_common+0xb2>
 800277c:	6823      	ldr	r3, [r4, #0]
 800277e:	68e5      	ldr	r5, [r4, #12]
 8002780:	f8d9 2000 	ldr.w	r2, [r9]
 8002784:	f003 0306 	and.w	r3, r3, #6
 8002788:	2b04      	cmp	r3, #4
 800278a:	bf08      	it	eq
 800278c:	1aad      	subeq	r5, r5, r2
 800278e:	68a3      	ldr	r3, [r4, #8]
 8002790:	6922      	ldr	r2, [r4, #16]
 8002792:	bf0c      	ite	eq
 8002794:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002798:	2500      	movne	r5, #0
 800279a:	4293      	cmp	r3, r2
 800279c:	bfc4      	itt	gt
 800279e:	1a9b      	subgt	r3, r3, r2
 80027a0:	18ed      	addgt	r5, r5, r3
 80027a2:	f04f 0900 	mov.w	r9, #0
 80027a6:	341a      	adds	r4, #26
 80027a8:	454d      	cmp	r5, r9
 80027aa:	d11a      	bne.n	80027e2 <_printf_common+0xd6>
 80027ac:	2000      	movs	r0, #0
 80027ae:	e008      	b.n	80027c2 <_printf_common+0xb6>
 80027b0:	2301      	movs	r3, #1
 80027b2:	4652      	mov	r2, sl
 80027b4:	4639      	mov	r1, r7
 80027b6:	4630      	mov	r0, r6
 80027b8:	47c0      	blx	r8
 80027ba:	3001      	adds	r0, #1
 80027bc:	d103      	bne.n	80027c6 <_printf_common+0xba>
 80027be:	f04f 30ff 	mov.w	r0, #4294967295
 80027c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80027c6:	3501      	adds	r5, #1
 80027c8:	e7c3      	b.n	8002752 <_printf_common+0x46>
 80027ca:	18e1      	adds	r1, r4, r3
 80027cc:	1c5a      	adds	r2, r3, #1
 80027ce:	2030      	movs	r0, #48	; 0x30
 80027d0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80027d4:	4422      	add	r2, r4
 80027d6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80027da:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80027de:	3302      	adds	r3, #2
 80027e0:	e7c5      	b.n	800276e <_printf_common+0x62>
 80027e2:	2301      	movs	r3, #1
 80027e4:	4622      	mov	r2, r4
 80027e6:	4639      	mov	r1, r7
 80027e8:	4630      	mov	r0, r6
 80027ea:	47c0      	blx	r8
 80027ec:	3001      	adds	r0, #1
 80027ee:	d0e6      	beq.n	80027be <_printf_common+0xb2>
 80027f0:	f109 0901 	add.w	r9, r9, #1
 80027f4:	e7d8      	b.n	80027a8 <_printf_common+0x9c>
	...

080027f8 <_printf_i>:
 80027f8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80027fc:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8002800:	460c      	mov	r4, r1
 8002802:	7e09      	ldrb	r1, [r1, #24]
 8002804:	b085      	sub	sp, #20
 8002806:	296e      	cmp	r1, #110	; 0x6e
 8002808:	4617      	mov	r7, r2
 800280a:	4606      	mov	r6, r0
 800280c:	4698      	mov	r8, r3
 800280e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8002810:	f000 80b3 	beq.w	800297a <_printf_i+0x182>
 8002814:	d822      	bhi.n	800285c <_printf_i+0x64>
 8002816:	2963      	cmp	r1, #99	; 0x63
 8002818:	d036      	beq.n	8002888 <_printf_i+0x90>
 800281a:	d80a      	bhi.n	8002832 <_printf_i+0x3a>
 800281c:	2900      	cmp	r1, #0
 800281e:	f000 80b9 	beq.w	8002994 <_printf_i+0x19c>
 8002822:	2958      	cmp	r1, #88	; 0x58
 8002824:	f000 8083 	beq.w	800292e <_printf_i+0x136>
 8002828:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800282c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8002830:	e032      	b.n	8002898 <_printf_i+0xa0>
 8002832:	2964      	cmp	r1, #100	; 0x64
 8002834:	d001      	beq.n	800283a <_printf_i+0x42>
 8002836:	2969      	cmp	r1, #105	; 0x69
 8002838:	d1f6      	bne.n	8002828 <_printf_i+0x30>
 800283a:	6820      	ldr	r0, [r4, #0]
 800283c:	6813      	ldr	r3, [r2, #0]
 800283e:	0605      	lsls	r5, r0, #24
 8002840:	f103 0104 	add.w	r1, r3, #4
 8002844:	d52a      	bpl.n	800289c <_printf_i+0xa4>
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	6011      	str	r1, [r2, #0]
 800284a:	2b00      	cmp	r3, #0
 800284c:	da03      	bge.n	8002856 <_printf_i+0x5e>
 800284e:	222d      	movs	r2, #45	; 0x2d
 8002850:	425b      	negs	r3, r3
 8002852:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8002856:	486f      	ldr	r0, [pc, #444]	; (8002a14 <_printf_i+0x21c>)
 8002858:	220a      	movs	r2, #10
 800285a:	e039      	b.n	80028d0 <_printf_i+0xd8>
 800285c:	2973      	cmp	r1, #115	; 0x73
 800285e:	f000 809d 	beq.w	800299c <_printf_i+0x1a4>
 8002862:	d808      	bhi.n	8002876 <_printf_i+0x7e>
 8002864:	296f      	cmp	r1, #111	; 0x6f
 8002866:	d020      	beq.n	80028aa <_printf_i+0xb2>
 8002868:	2970      	cmp	r1, #112	; 0x70
 800286a:	d1dd      	bne.n	8002828 <_printf_i+0x30>
 800286c:	6823      	ldr	r3, [r4, #0]
 800286e:	f043 0320 	orr.w	r3, r3, #32
 8002872:	6023      	str	r3, [r4, #0]
 8002874:	e003      	b.n	800287e <_printf_i+0x86>
 8002876:	2975      	cmp	r1, #117	; 0x75
 8002878:	d017      	beq.n	80028aa <_printf_i+0xb2>
 800287a:	2978      	cmp	r1, #120	; 0x78
 800287c:	d1d4      	bne.n	8002828 <_printf_i+0x30>
 800287e:	2378      	movs	r3, #120	; 0x78
 8002880:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002884:	4864      	ldr	r0, [pc, #400]	; (8002a18 <_printf_i+0x220>)
 8002886:	e055      	b.n	8002934 <_printf_i+0x13c>
 8002888:	6813      	ldr	r3, [r2, #0]
 800288a:	1d19      	adds	r1, r3, #4
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	6011      	str	r1, [r2, #0]
 8002890:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002894:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002898:	2301      	movs	r3, #1
 800289a:	e08c      	b.n	80029b6 <_printf_i+0x1be>
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	6011      	str	r1, [r2, #0]
 80028a0:	f010 0f40 	tst.w	r0, #64	; 0x40
 80028a4:	bf18      	it	ne
 80028a6:	b21b      	sxthne	r3, r3
 80028a8:	e7cf      	b.n	800284a <_printf_i+0x52>
 80028aa:	6813      	ldr	r3, [r2, #0]
 80028ac:	6825      	ldr	r5, [r4, #0]
 80028ae:	1d18      	adds	r0, r3, #4
 80028b0:	6010      	str	r0, [r2, #0]
 80028b2:	0628      	lsls	r0, r5, #24
 80028b4:	d501      	bpl.n	80028ba <_printf_i+0xc2>
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	e002      	b.n	80028c0 <_printf_i+0xc8>
 80028ba:	0668      	lsls	r0, r5, #25
 80028bc:	d5fb      	bpl.n	80028b6 <_printf_i+0xbe>
 80028be:	881b      	ldrh	r3, [r3, #0]
 80028c0:	4854      	ldr	r0, [pc, #336]	; (8002a14 <_printf_i+0x21c>)
 80028c2:	296f      	cmp	r1, #111	; 0x6f
 80028c4:	bf14      	ite	ne
 80028c6:	220a      	movne	r2, #10
 80028c8:	2208      	moveq	r2, #8
 80028ca:	2100      	movs	r1, #0
 80028cc:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80028d0:	6865      	ldr	r5, [r4, #4]
 80028d2:	60a5      	str	r5, [r4, #8]
 80028d4:	2d00      	cmp	r5, #0
 80028d6:	f2c0 8095 	blt.w	8002a04 <_printf_i+0x20c>
 80028da:	6821      	ldr	r1, [r4, #0]
 80028dc:	f021 0104 	bic.w	r1, r1, #4
 80028e0:	6021      	str	r1, [r4, #0]
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d13d      	bne.n	8002962 <_printf_i+0x16a>
 80028e6:	2d00      	cmp	r5, #0
 80028e8:	f040 808e 	bne.w	8002a08 <_printf_i+0x210>
 80028ec:	4665      	mov	r5, ip
 80028ee:	2a08      	cmp	r2, #8
 80028f0:	d10b      	bne.n	800290a <_printf_i+0x112>
 80028f2:	6823      	ldr	r3, [r4, #0]
 80028f4:	07db      	lsls	r3, r3, #31
 80028f6:	d508      	bpl.n	800290a <_printf_i+0x112>
 80028f8:	6923      	ldr	r3, [r4, #16]
 80028fa:	6862      	ldr	r2, [r4, #4]
 80028fc:	429a      	cmp	r2, r3
 80028fe:	bfde      	ittt	le
 8002900:	2330      	movle	r3, #48	; 0x30
 8002902:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002906:	f105 35ff 	addle.w	r5, r5, #4294967295
 800290a:	ebac 0305 	sub.w	r3, ip, r5
 800290e:	6123      	str	r3, [r4, #16]
 8002910:	f8cd 8000 	str.w	r8, [sp]
 8002914:	463b      	mov	r3, r7
 8002916:	aa03      	add	r2, sp, #12
 8002918:	4621      	mov	r1, r4
 800291a:	4630      	mov	r0, r6
 800291c:	f7ff fef6 	bl	800270c <_printf_common>
 8002920:	3001      	adds	r0, #1
 8002922:	d14d      	bne.n	80029c0 <_printf_i+0x1c8>
 8002924:	f04f 30ff 	mov.w	r0, #4294967295
 8002928:	b005      	add	sp, #20
 800292a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800292e:	4839      	ldr	r0, [pc, #228]	; (8002a14 <_printf_i+0x21c>)
 8002930:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8002934:	6813      	ldr	r3, [r2, #0]
 8002936:	6821      	ldr	r1, [r4, #0]
 8002938:	1d1d      	adds	r5, r3, #4
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	6015      	str	r5, [r2, #0]
 800293e:	060a      	lsls	r2, r1, #24
 8002940:	d50b      	bpl.n	800295a <_printf_i+0x162>
 8002942:	07ca      	lsls	r2, r1, #31
 8002944:	bf44      	itt	mi
 8002946:	f041 0120 	orrmi.w	r1, r1, #32
 800294a:	6021      	strmi	r1, [r4, #0]
 800294c:	b91b      	cbnz	r3, 8002956 <_printf_i+0x15e>
 800294e:	6822      	ldr	r2, [r4, #0]
 8002950:	f022 0220 	bic.w	r2, r2, #32
 8002954:	6022      	str	r2, [r4, #0]
 8002956:	2210      	movs	r2, #16
 8002958:	e7b7      	b.n	80028ca <_printf_i+0xd2>
 800295a:	064d      	lsls	r5, r1, #25
 800295c:	bf48      	it	mi
 800295e:	b29b      	uxthmi	r3, r3
 8002960:	e7ef      	b.n	8002942 <_printf_i+0x14a>
 8002962:	4665      	mov	r5, ip
 8002964:	fbb3 f1f2 	udiv	r1, r3, r2
 8002968:	fb02 3311 	mls	r3, r2, r1, r3
 800296c:	5cc3      	ldrb	r3, [r0, r3]
 800296e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8002972:	460b      	mov	r3, r1
 8002974:	2900      	cmp	r1, #0
 8002976:	d1f5      	bne.n	8002964 <_printf_i+0x16c>
 8002978:	e7b9      	b.n	80028ee <_printf_i+0xf6>
 800297a:	6813      	ldr	r3, [r2, #0]
 800297c:	6825      	ldr	r5, [r4, #0]
 800297e:	6961      	ldr	r1, [r4, #20]
 8002980:	1d18      	adds	r0, r3, #4
 8002982:	6010      	str	r0, [r2, #0]
 8002984:	0628      	lsls	r0, r5, #24
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	d501      	bpl.n	800298e <_printf_i+0x196>
 800298a:	6019      	str	r1, [r3, #0]
 800298c:	e002      	b.n	8002994 <_printf_i+0x19c>
 800298e:	066a      	lsls	r2, r5, #25
 8002990:	d5fb      	bpl.n	800298a <_printf_i+0x192>
 8002992:	8019      	strh	r1, [r3, #0]
 8002994:	2300      	movs	r3, #0
 8002996:	6123      	str	r3, [r4, #16]
 8002998:	4665      	mov	r5, ip
 800299a:	e7b9      	b.n	8002910 <_printf_i+0x118>
 800299c:	6813      	ldr	r3, [r2, #0]
 800299e:	1d19      	adds	r1, r3, #4
 80029a0:	6011      	str	r1, [r2, #0]
 80029a2:	681d      	ldr	r5, [r3, #0]
 80029a4:	6862      	ldr	r2, [r4, #4]
 80029a6:	2100      	movs	r1, #0
 80029a8:	4628      	mov	r0, r5
 80029aa:	f7fd fc39 	bl	8000220 <memchr>
 80029ae:	b108      	cbz	r0, 80029b4 <_printf_i+0x1bc>
 80029b0:	1b40      	subs	r0, r0, r5
 80029b2:	6060      	str	r0, [r4, #4]
 80029b4:	6863      	ldr	r3, [r4, #4]
 80029b6:	6123      	str	r3, [r4, #16]
 80029b8:	2300      	movs	r3, #0
 80029ba:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80029be:	e7a7      	b.n	8002910 <_printf_i+0x118>
 80029c0:	6923      	ldr	r3, [r4, #16]
 80029c2:	462a      	mov	r2, r5
 80029c4:	4639      	mov	r1, r7
 80029c6:	4630      	mov	r0, r6
 80029c8:	47c0      	blx	r8
 80029ca:	3001      	adds	r0, #1
 80029cc:	d0aa      	beq.n	8002924 <_printf_i+0x12c>
 80029ce:	6823      	ldr	r3, [r4, #0]
 80029d0:	079b      	lsls	r3, r3, #30
 80029d2:	d413      	bmi.n	80029fc <_printf_i+0x204>
 80029d4:	68e0      	ldr	r0, [r4, #12]
 80029d6:	9b03      	ldr	r3, [sp, #12]
 80029d8:	4298      	cmp	r0, r3
 80029da:	bfb8      	it	lt
 80029dc:	4618      	movlt	r0, r3
 80029de:	e7a3      	b.n	8002928 <_printf_i+0x130>
 80029e0:	2301      	movs	r3, #1
 80029e2:	464a      	mov	r2, r9
 80029e4:	4639      	mov	r1, r7
 80029e6:	4630      	mov	r0, r6
 80029e8:	47c0      	blx	r8
 80029ea:	3001      	adds	r0, #1
 80029ec:	d09a      	beq.n	8002924 <_printf_i+0x12c>
 80029ee:	3501      	adds	r5, #1
 80029f0:	68e3      	ldr	r3, [r4, #12]
 80029f2:	9a03      	ldr	r2, [sp, #12]
 80029f4:	1a9b      	subs	r3, r3, r2
 80029f6:	42ab      	cmp	r3, r5
 80029f8:	dcf2      	bgt.n	80029e0 <_printf_i+0x1e8>
 80029fa:	e7eb      	b.n	80029d4 <_printf_i+0x1dc>
 80029fc:	2500      	movs	r5, #0
 80029fe:	f104 0919 	add.w	r9, r4, #25
 8002a02:	e7f5      	b.n	80029f0 <_printf_i+0x1f8>
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d1ac      	bne.n	8002962 <_printf_i+0x16a>
 8002a08:	7803      	ldrb	r3, [r0, #0]
 8002a0a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002a0e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002a12:	e76c      	b.n	80028ee <_printf_i+0xf6>
 8002a14:	08002d89 	.word	0x08002d89
 8002a18:	08002d9a 	.word	0x08002d9a

08002a1c <_read_r>:
 8002a1c:	b538      	push	{r3, r4, r5, lr}
 8002a1e:	4c07      	ldr	r4, [pc, #28]	; (8002a3c <_read_r+0x20>)
 8002a20:	4605      	mov	r5, r0
 8002a22:	4608      	mov	r0, r1
 8002a24:	4611      	mov	r1, r2
 8002a26:	2200      	movs	r2, #0
 8002a28:	6022      	str	r2, [r4, #0]
 8002a2a:	461a      	mov	r2, r3
 8002a2c:	f7fe ffda 	bl	80019e4 <_read>
 8002a30:	1c43      	adds	r3, r0, #1
 8002a32:	d102      	bne.n	8002a3a <_read_r+0x1e>
 8002a34:	6823      	ldr	r3, [r4, #0]
 8002a36:	b103      	cbz	r3, 8002a3a <_read_r+0x1e>
 8002a38:	602b      	str	r3, [r5, #0]
 8002a3a:	bd38      	pop	{r3, r4, r5, pc}
 8002a3c:	20000190 	.word	0x20000190

08002a40 <__swbuf_r>:
 8002a40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a42:	460e      	mov	r6, r1
 8002a44:	4614      	mov	r4, r2
 8002a46:	4605      	mov	r5, r0
 8002a48:	b118      	cbz	r0, 8002a52 <__swbuf_r+0x12>
 8002a4a:	6983      	ldr	r3, [r0, #24]
 8002a4c:	b90b      	cbnz	r3, 8002a52 <__swbuf_r+0x12>
 8002a4e:	f7ff fa6f 	bl	8001f30 <__sinit>
 8002a52:	4b21      	ldr	r3, [pc, #132]	; (8002ad8 <__swbuf_r+0x98>)
 8002a54:	429c      	cmp	r4, r3
 8002a56:	d12a      	bne.n	8002aae <__swbuf_r+0x6e>
 8002a58:	686c      	ldr	r4, [r5, #4]
 8002a5a:	69a3      	ldr	r3, [r4, #24]
 8002a5c:	60a3      	str	r3, [r4, #8]
 8002a5e:	89a3      	ldrh	r3, [r4, #12]
 8002a60:	071a      	lsls	r2, r3, #28
 8002a62:	d52e      	bpl.n	8002ac2 <__swbuf_r+0x82>
 8002a64:	6923      	ldr	r3, [r4, #16]
 8002a66:	b363      	cbz	r3, 8002ac2 <__swbuf_r+0x82>
 8002a68:	6923      	ldr	r3, [r4, #16]
 8002a6a:	6820      	ldr	r0, [r4, #0]
 8002a6c:	1ac0      	subs	r0, r0, r3
 8002a6e:	6963      	ldr	r3, [r4, #20]
 8002a70:	b2f6      	uxtb	r6, r6
 8002a72:	4283      	cmp	r3, r0
 8002a74:	4637      	mov	r7, r6
 8002a76:	dc04      	bgt.n	8002a82 <__swbuf_r+0x42>
 8002a78:	4621      	mov	r1, r4
 8002a7a:	4628      	mov	r0, r5
 8002a7c:	f7ff fc7c 	bl	8002378 <_fflush_r>
 8002a80:	bb28      	cbnz	r0, 8002ace <__swbuf_r+0x8e>
 8002a82:	68a3      	ldr	r3, [r4, #8]
 8002a84:	3b01      	subs	r3, #1
 8002a86:	60a3      	str	r3, [r4, #8]
 8002a88:	6823      	ldr	r3, [r4, #0]
 8002a8a:	1c5a      	adds	r2, r3, #1
 8002a8c:	6022      	str	r2, [r4, #0]
 8002a8e:	701e      	strb	r6, [r3, #0]
 8002a90:	6963      	ldr	r3, [r4, #20]
 8002a92:	3001      	adds	r0, #1
 8002a94:	4283      	cmp	r3, r0
 8002a96:	d004      	beq.n	8002aa2 <__swbuf_r+0x62>
 8002a98:	89a3      	ldrh	r3, [r4, #12]
 8002a9a:	07db      	lsls	r3, r3, #31
 8002a9c:	d519      	bpl.n	8002ad2 <__swbuf_r+0x92>
 8002a9e:	2e0a      	cmp	r6, #10
 8002aa0:	d117      	bne.n	8002ad2 <__swbuf_r+0x92>
 8002aa2:	4621      	mov	r1, r4
 8002aa4:	4628      	mov	r0, r5
 8002aa6:	f7ff fc67 	bl	8002378 <_fflush_r>
 8002aaa:	b190      	cbz	r0, 8002ad2 <__swbuf_r+0x92>
 8002aac:	e00f      	b.n	8002ace <__swbuf_r+0x8e>
 8002aae:	4b0b      	ldr	r3, [pc, #44]	; (8002adc <__swbuf_r+0x9c>)
 8002ab0:	429c      	cmp	r4, r3
 8002ab2:	d101      	bne.n	8002ab8 <__swbuf_r+0x78>
 8002ab4:	68ac      	ldr	r4, [r5, #8]
 8002ab6:	e7d0      	b.n	8002a5a <__swbuf_r+0x1a>
 8002ab8:	4b09      	ldr	r3, [pc, #36]	; (8002ae0 <__swbuf_r+0xa0>)
 8002aba:	429c      	cmp	r4, r3
 8002abc:	bf08      	it	eq
 8002abe:	68ec      	ldreq	r4, [r5, #12]
 8002ac0:	e7cb      	b.n	8002a5a <__swbuf_r+0x1a>
 8002ac2:	4621      	mov	r1, r4
 8002ac4:	4628      	mov	r0, r5
 8002ac6:	f000 f80d 	bl	8002ae4 <__swsetup_r>
 8002aca:	2800      	cmp	r0, #0
 8002acc:	d0cc      	beq.n	8002a68 <__swbuf_r+0x28>
 8002ace:	f04f 37ff 	mov.w	r7, #4294967295
 8002ad2:	4638      	mov	r0, r7
 8002ad4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002ad6:	bf00      	nop
 8002ad8:	08002d34 	.word	0x08002d34
 8002adc:	08002d54 	.word	0x08002d54
 8002ae0:	08002d14 	.word	0x08002d14

08002ae4 <__swsetup_r>:
 8002ae4:	4b32      	ldr	r3, [pc, #200]	; (8002bb0 <__swsetup_r+0xcc>)
 8002ae6:	b570      	push	{r4, r5, r6, lr}
 8002ae8:	681d      	ldr	r5, [r3, #0]
 8002aea:	4606      	mov	r6, r0
 8002aec:	460c      	mov	r4, r1
 8002aee:	b125      	cbz	r5, 8002afa <__swsetup_r+0x16>
 8002af0:	69ab      	ldr	r3, [r5, #24]
 8002af2:	b913      	cbnz	r3, 8002afa <__swsetup_r+0x16>
 8002af4:	4628      	mov	r0, r5
 8002af6:	f7ff fa1b 	bl	8001f30 <__sinit>
 8002afa:	4b2e      	ldr	r3, [pc, #184]	; (8002bb4 <__swsetup_r+0xd0>)
 8002afc:	429c      	cmp	r4, r3
 8002afe:	d10f      	bne.n	8002b20 <__swsetup_r+0x3c>
 8002b00:	686c      	ldr	r4, [r5, #4]
 8002b02:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002b06:	b29a      	uxth	r2, r3
 8002b08:	0715      	lsls	r5, r2, #28
 8002b0a:	d42c      	bmi.n	8002b66 <__swsetup_r+0x82>
 8002b0c:	06d0      	lsls	r0, r2, #27
 8002b0e:	d411      	bmi.n	8002b34 <__swsetup_r+0x50>
 8002b10:	2209      	movs	r2, #9
 8002b12:	6032      	str	r2, [r6, #0]
 8002b14:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002b18:	81a3      	strh	r3, [r4, #12]
 8002b1a:	f04f 30ff 	mov.w	r0, #4294967295
 8002b1e:	e03e      	b.n	8002b9e <__swsetup_r+0xba>
 8002b20:	4b25      	ldr	r3, [pc, #148]	; (8002bb8 <__swsetup_r+0xd4>)
 8002b22:	429c      	cmp	r4, r3
 8002b24:	d101      	bne.n	8002b2a <__swsetup_r+0x46>
 8002b26:	68ac      	ldr	r4, [r5, #8]
 8002b28:	e7eb      	b.n	8002b02 <__swsetup_r+0x1e>
 8002b2a:	4b24      	ldr	r3, [pc, #144]	; (8002bbc <__swsetup_r+0xd8>)
 8002b2c:	429c      	cmp	r4, r3
 8002b2e:	bf08      	it	eq
 8002b30:	68ec      	ldreq	r4, [r5, #12]
 8002b32:	e7e6      	b.n	8002b02 <__swsetup_r+0x1e>
 8002b34:	0751      	lsls	r1, r2, #29
 8002b36:	d512      	bpl.n	8002b5e <__swsetup_r+0x7a>
 8002b38:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002b3a:	b141      	cbz	r1, 8002b4e <__swsetup_r+0x6a>
 8002b3c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002b40:	4299      	cmp	r1, r3
 8002b42:	d002      	beq.n	8002b4a <__swsetup_r+0x66>
 8002b44:	4630      	mov	r0, r6
 8002b46:	f7ff fc55 	bl	80023f4 <_free_r>
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	6363      	str	r3, [r4, #52]	; 0x34
 8002b4e:	89a3      	ldrh	r3, [r4, #12]
 8002b50:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8002b54:	81a3      	strh	r3, [r4, #12]
 8002b56:	2300      	movs	r3, #0
 8002b58:	6063      	str	r3, [r4, #4]
 8002b5a:	6923      	ldr	r3, [r4, #16]
 8002b5c:	6023      	str	r3, [r4, #0]
 8002b5e:	89a3      	ldrh	r3, [r4, #12]
 8002b60:	f043 0308 	orr.w	r3, r3, #8
 8002b64:	81a3      	strh	r3, [r4, #12]
 8002b66:	6923      	ldr	r3, [r4, #16]
 8002b68:	b94b      	cbnz	r3, 8002b7e <__swsetup_r+0x9a>
 8002b6a:	89a3      	ldrh	r3, [r4, #12]
 8002b6c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8002b70:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002b74:	d003      	beq.n	8002b7e <__swsetup_r+0x9a>
 8002b76:	4621      	mov	r1, r4
 8002b78:	4630      	mov	r0, r6
 8002b7a:	f000 f845 	bl	8002c08 <__smakebuf_r>
 8002b7e:	89a2      	ldrh	r2, [r4, #12]
 8002b80:	f012 0301 	ands.w	r3, r2, #1
 8002b84:	d00c      	beq.n	8002ba0 <__swsetup_r+0xbc>
 8002b86:	2300      	movs	r3, #0
 8002b88:	60a3      	str	r3, [r4, #8]
 8002b8a:	6963      	ldr	r3, [r4, #20]
 8002b8c:	425b      	negs	r3, r3
 8002b8e:	61a3      	str	r3, [r4, #24]
 8002b90:	6923      	ldr	r3, [r4, #16]
 8002b92:	b953      	cbnz	r3, 8002baa <__swsetup_r+0xc6>
 8002b94:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002b98:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8002b9c:	d1ba      	bne.n	8002b14 <__swsetup_r+0x30>
 8002b9e:	bd70      	pop	{r4, r5, r6, pc}
 8002ba0:	0792      	lsls	r2, r2, #30
 8002ba2:	bf58      	it	pl
 8002ba4:	6963      	ldrpl	r3, [r4, #20]
 8002ba6:	60a3      	str	r3, [r4, #8]
 8002ba8:	e7f2      	b.n	8002b90 <__swsetup_r+0xac>
 8002baa:	2000      	movs	r0, #0
 8002bac:	e7f7      	b.n	8002b9e <__swsetup_r+0xba>
 8002bae:	bf00      	nop
 8002bb0:	20000020 	.word	0x20000020
 8002bb4:	08002d34 	.word	0x08002d34
 8002bb8:	08002d54 	.word	0x08002d54
 8002bbc:	08002d14 	.word	0x08002d14

08002bc0 <__swhatbuf_r>:
 8002bc0:	b570      	push	{r4, r5, r6, lr}
 8002bc2:	460e      	mov	r6, r1
 8002bc4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002bc8:	2900      	cmp	r1, #0
 8002bca:	b096      	sub	sp, #88	; 0x58
 8002bcc:	4614      	mov	r4, r2
 8002bce:	461d      	mov	r5, r3
 8002bd0:	da07      	bge.n	8002be2 <__swhatbuf_r+0x22>
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	602b      	str	r3, [r5, #0]
 8002bd6:	89b3      	ldrh	r3, [r6, #12]
 8002bd8:	061a      	lsls	r2, r3, #24
 8002bda:	d410      	bmi.n	8002bfe <__swhatbuf_r+0x3e>
 8002bdc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002be0:	e00e      	b.n	8002c00 <__swhatbuf_r+0x40>
 8002be2:	466a      	mov	r2, sp
 8002be4:	f000 f850 	bl	8002c88 <_fstat_r>
 8002be8:	2800      	cmp	r0, #0
 8002bea:	dbf2      	blt.n	8002bd2 <__swhatbuf_r+0x12>
 8002bec:	9a01      	ldr	r2, [sp, #4]
 8002bee:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8002bf2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8002bf6:	425a      	negs	r2, r3
 8002bf8:	415a      	adcs	r2, r3
 8002bfa:	602a      	str	r2, [r5, #0]
 8002bfc:	e7ee      	b.n	8002bdc <__swhatbuf_r+0x1c>
 8002bfe:	2340      	movs	r3, #64	; 0x40
 8002c00:	2000      	movs	r0, #0
 8002c02:	6023      	str	r3, [r4, #0]
 8002c04:	b016      	add	sp, #88	; 0x58
 8002c06:	bd70      	pop	{r4, r5, r6, pc}

08002c08 <__smakebuf_r>:
 8002c08:	898b      	ldrh	r3, [r1, #12]
 8002c0a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002c0c:	079d      	lsls	r5, r3, #30
 8002c0e:	4606      	mov	r6, r0
 8002c10:	460c      	mov	r4, r1
 8002c12:	d507      	bpl.n	8002c24 <__smakebuf_r+0x1c>
 8002c14:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8002c18:	6023      	str	r3, [r4, #0]
 8002c1a:	6123      	str	r3, [r4, #16]
 8002c1c:	2301      	movs	r3, #1
 8002c1e:	6163      	str	r3, [r4, #20]
 8002c20:	b002      	add	sp, #8
 8002c22:	bd70      	pop	{r4, r5, r6, pc}
 8002c24:	ab01      	add	r3, sp, #4
 8002c26:	466a      	mov	r2, sp
 8002c28:	f7ff ffca 	bl	8002bc0 <__swhatbuf_r>
 8002c2c:	9900      	ldr	r1, [sp, #0]
 8002c2e:	4605      	mov	r5, r0
 8002c30:	4630      	mov	r0, r6
 8002c32:	f7ff fa33 	bl	800209c <_malloc_r>
 8002c36:	b948      	cbnz	r0, 8002c4c <__smakebuf_r+0x44>
 8002c38:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002c3c:	059a      	lsls	r2, r3, #22
 8002c3e:	d4ef      	bmi.n	8002c20 <__smakebuf_r+0x18>
 8002c40:	f023 0303 	bic.w	r3, r3, #3
 8002c44:	f043 0302 	orr.w	r3, r3, #2
 8002c48:	81a3      	strh	r3, [r4, #12]
 8002c4a:	e7e3      	b.n	8002c14 <__smakebuf_r+0xc>
 8002c4c:	4b0d      	ldr	r3, [pc, #52]	; (8002c84 <__smakebuf_r+0x7c>)
 8002c4e:	62b3      	str	r3, [r6, #40]	; 0x28
 8002c50:	89a3      	ldrh	r3, [r4, #12]
 8002c52:	6020      	str	r0, [r4, #0]
 8002c54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c58:	81a3      	strh	r3, [r4, #12]
 8002c5a:	9b00      	ldr	r3, [sp, #0]
 8002c5c:	6163      	str	r3, [r4, #20]
 8002c5e:	9b01      	ldr	r3, [sp, #4]
 8002c60:	6120      	str	r0, [r4, #16]
 8002c62:	b15b      	cbz	r3, 8002c7c <__smakebuf_r+0x74>
 8002c64:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002c68:	4630      	mov	r0, r6
 8002c6a:	f000 f81f 	bl	8002cac <_isatty_r>
 8002c6e:	b128      	cbz	r0, 8002c7c <__smakebuf_r+0x74>
 8002c70:	89a3      	ldrh	r3, [r4, #12]
 8002c72:	f023 0303 	bic.w	r3, r3, #3
 8002c76:	f043 0301 	orr.w	r3, r3, #1
 8002c7a:	81a3      	strh	r3, [r4, #12]
 8002c7c:	89a3      	ldrh	r3, [r4, #12]
 8002c7e:	431d      	orrs	r5, r3
 8002c80:	81a5      	strh	r5, [r4, #12]
 8002c82:	e7cd      	b.n	8002c20 <__smakebuf_r+0x18>
 8002c84:	08001ef9 	.word	0x08001ef9

08002c88 <_fstat_r>:
 8002c88:	b538      	push	{r3, r4, r5, lr}
 8002c8a:	4c07      	ldr	r4, [pc, #28]	; (8002ca8 <_fstat_r+0x20>)
 8002c8c:	2300      	movs	r3, #0
 8002c8e:	4605      	mov	r5, r0
 8002c90:	4608      	mov	r0, r1
 8002c92:	4611      	mov	r1, r2
 8002c94:	6023      	str	r3, [r4, #0]
 8002c96:	f7fe ff84 	bl	8001ba2 <_fstat>
 8002c9a:	1c43      	adds	r3, r0, #1
 8002c9c:	d102      	bne.n	8002ca4 <_fstat_r+0x1c>
 8002c9e:	6823      	ldr	r3, [r4, #0]
 8002ca0:	b103      	cbz	r3, 8002ca4 <_fstat_r+0x1c>
 8002ca2:	602b      	str	r3, [r5, #0]
 8002ca4:	bd38      	pop	{r3, r4, r5, pc}
 8002ca6:	bf00      	nop
 8002ca8:	20000190 	.word	0x20000190

08002cac <_isatty_r>:
 8002cac:	b538      	push	{r3, r4, r5, lr}
 8002cae:	4c06      	ldr	r4, [pc, #24]	; (8002cc8 <_isatty_r+0x1c>)
 8002cb0:	2300      	movs	r3, #0
 8002cb2:	4605      	mov	r5, r0
 8002cb4:	4608      	mov	r0, r1
 8002cb6:	6023      	str	r3, [r4, #0]
 8002cb8:	f7ff f8d8 	bl	8001e6c <_isatty>
 8002cbc:	1c43      	adds	r3, r0, #1
 8002cbe:	d102      	bne.n	8002cc6 <_isatty_r+0x1a>
 8002cc0:	6823      	ldr	r3, [r4, #0]
 8002cc2:	b103      	cbz	r3, 8002cc6 <_isatty_r+0x1a>
 8002cc4:	602b      	str	r3, [r5, #0]
 8002cc6:	bd38      	pop	{r3, r4, r5, pc}
 8002cc8:	20000190 	.word	0x20000190

08002ccc <_init>:
 8002ccc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002cce:	bf00      	nop
 8002cd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002cd2:	bc08      	pop	{r3}
 8002cd4:	469e      	mov	lr, r3
 8002cd6:	4770      	bx	lr

08002cd8 <_fini>:
 8002cd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002cda:	bf00      	nop
 8002cdc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002cde:	bc08      	pop	{r3}
 8002ce0:	469e      	mov	lr, r3
 8002ce2:	4770      	bx	lr
